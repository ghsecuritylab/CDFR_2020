
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000c520  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800c6d0  0800c6d0  0001c6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c914  0800c914  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c914  0800c914  0001c914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c91c  0800c91c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c91c  0800c91c  0001c91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c920  0800c920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ae8  200001e0  0800cb04  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008cc8  0800cb04  00028cc8  2**0
=======
  1 .text         0001b570  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a68  0801b720  0801b720  0002b720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e188  0801e188  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801e188  0801e188  0002e188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e190  0801e190  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e190  0801e190  0002e190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e194  0801e194  0002e194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801e198  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c22c  200001ec  0801e384  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c418  0801e384  0003c418  2**0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   0002dd91  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000655c  00000000  00000000  0004dfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002150  00000000  00000000  00054500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e68  00000000  00000000  00056650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ddab  00000000  00000000  000584b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020f6a  00000000  00000000  00066263  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106967  00000000  00000000  000871cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018db34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bd8  00000000  00000000  0018dbb0  2**2
=======
 12 .debug_info   000547e0  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a704  00000000  00000000  000849fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002bd0  00000000  00000000  0008f100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002858  00000000  00000000  00091cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003eba6  00000000  00000000  00094528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003e096  00000000  00000000  000d30ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f33c  00000000  00000000  00111164  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002204a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b738  00000000  00000000  0022051c  2**2
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001d0:	0800c6b8 	.word	0x0800c6b8
=======
 80001d0:	0801b708 	.word	0x0801b708
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800c6b8 	.word	0x0800c6b8
=======
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0801b708 	.word	0x0801b708
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b0b9      	sub	sp, #228	; 0xe4
 8000594:	af0c      	add	r7, sp, #48	; 0x30
 8000596:	6078      	str	r0, [r7, #4]
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  err_t recv_err;
  uint32_t array[NB_OCTETS_CMD_MAX] = {0};
 8000598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f01a f9c5 	bl	801a930 <memset>
  struct tcp_command s_cmd_received;

  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2010      	movs	r0, #16
 80005ac:	f00d fcac 	bl	800df08 <netconn_new_with_proto_and_callback>
 80005b0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

  if (conn!=NULL)
 80005b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	f000 809b 	beq.w	80006f4 <tcpecho_thread+0x164>
  {
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 80005be:	2207      	movs	r2, #7
 80005c0:	2100      	movs	r1, #0
 80005c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80005c6:	f00d fd3f 	bl	800e048 <netconn_bind>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    if (err == ERR_OK)
 80005d0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f040 8084 	bne.w	80006e2 <tcpecho_thread+0x152>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 80005da:	21ff      	movs	r1, #255	; 0xff
 80005dc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80005e0:	f00d fd6a 	bl	800e0b8 <netconn_listen_with_backlog>

      while (1)
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 80005e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e8:	4619      	mov	r1, r3
 80005ea:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80005ee:	f00d fd8f 	bl	800e110 <netconn_accept>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

        /* Process the new connection. */
        if (accept_err == ERR_OK)
 80005f8:	f997 30a6 	ldrsb.w	r3, [r7, #166]	; 0xa6
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f1      	bne.n	80005e4 <tcpecho_thread+0x54>
        {
          recv_err = netconn_recv(newconn, &buf);
 8000600:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000604:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f00d fece 	bl	800e3ac <netconn_recv>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					while ( recv_err == ERR_OK)
 8000616:	e055      	b.n	80006c4 <tcpecho_thread+0x134>
          {
            do
            {
              netbuf_data(buf, &data, &len);
 8000618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800061c:	f107 0296 	add.w	r2, r7, #150	; 0x96
 8000620:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000624:	4618      	mov	r0, r3
 8000626:	f00f fc3d 	bl	800fea4 <netbuf_data>
              F_TCP_paquetTocmd(data,len, &s_cmd_received);
 800062a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800062e:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 8000632:	f107 0208 	add.w	r2, r7, #8
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f950 	bl	80008dc <F_TCP_paquetTocmd>

              F_Process_Command(s_cmd_received,&s_cmd_answer);
 800063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000640:	9303      	str	r3, [sp, #12]
 8000642:	466c      	mov	r4, sp
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000656:	f000 f86d 	bl	8000734 <F_Process_Command>

        	  F_TCP_answerTotab(array, s_cmd_answer);
 800065a:	f107 065c 	add.w	r6, r7, #92	; 0x5c
 800065e:	466d      	mov	r5, sp
 8000660:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000670:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800067a:	4630      	mov	r0, r6
 800067c:	f000 f991 	bl	80009a2 <F_TCP_answerTotab>

              netconn_write(newconn, array, sizeof(array), NETCONN_COPY);
 8000680:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000684:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000688:	2300      	movs	r3, #0
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2301      	movs	r3, #1
 800068e:	2238      	movs	r2, #56	; 0x38
 8000690:	f00d ff04 	bl	800e49c <netconn_write_partly>

            }
            while (netbuf_next(buf) >= 0);
 8000694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000698:	4618      	mov	r0, r3
 800069a:	f00f fc4d 	bl	800ff38 <netbuf_next>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	dab9      	bge.n	8000618 <tcpecho_thread+0x88>

            netbuf_delete(buf);
 80006a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00f fbdb 	bl	800fe64 <netbuf_delete>
						recv_err = netconn_recv(newconn, &buf);
 80006ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006b2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00d fe77 	bl	800e3ac <netconn_recv>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					while ( recv_err == ERR_OK)
 80006c4:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0a5      	beq.n	8000618 <tcpecho_thread+0x88>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 80006cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f00d ff8b 	bl	800e5ec <netconn_close>
          netconn_delete(newconn);
 80006d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00d fc8e 	bl	800dffc <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 80006e0:	e780      	b.n	80005e4 <tcpecho_thread+0x54>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 80006e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00d fc88 	bl	800dffc <netconn_delete>
      printf(" can not bind TCP netconn");
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <tcpecho_thread+0x174>)
 80006ee:	f01a f9cf 	bl	801aa90 <iprintf>
  }
  else
  {
    printf("can not create TCP netconn");
  }
}
 80006f2:	e002      	b.n	80006fa <tcpecho_thread+0x16a>
    printf("can not create TCP netconn");
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <tcpecho_thread+0x178>)
 80006f6:	f01a f9cb 	bl	801aa90 <iprintf>
}
 80006fa:	bf00      	nop
 80006fc:	37b4      	adds	r7, #180	; 0xb4
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	bf00      	nop
 8000704:	0801b720 	.word	0x0801b720
 8000708:	0801b73c 	.word	0x0801b73c

0800070c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000712:	2305      	movs	r3, #5
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	2200      	movs	r2, #0
 800071c:	4903      	ldr	r1, [pc, #12]	; (800072c <tcpecho_init+0x20>)
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <tcpecho_init+0x24>)
 8000720:	f019 fb9a 	bl	8019e58 <sys_thread_new>
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	08000591 	.word	0x08000591
 8000730:	0801b758 	.word	0x0801b758

08000734 <F_Process_Command>:

/**
 *
 */
void F_Process_Command(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000734:	b084      	sub	sp, #16
 8000736:	b590      	push	{r4, r7, lr}
 8000738:	b087      	sub	sp, #28
 800073a:	af04      	add	r7, sp, #16
 800073c:	f107 0418 	add.w	r4, r7, #24
 8000740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	71fb      	strb	r3, [r7, #7]

	s_cmd_answer->id = s_cmd_received.id; 	// same ID as the received command
 8000748:	69ba      	ldr	r2, [r7, #24]
 800074a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800074c:	601a      	str	r2, [r3, #0]
	s_cmd_answer->cmd = s_cmd_received.cmd;	// recall the command executed
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000752:	605a      	str	r2, [r3, #4]

	// Process the command depending on the command number
	switch(s_cmd_received.cmd)
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3b01      	subs	r3, #1
 8000758:	2b0b      	cmp	r3, #11
 800075a:	d839      	bhi.n	80007d0 <F_Process_Command+0x9c>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <F_Process_Command+0x30>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	08000795 	.word	0x08000795
 8000768:	080007b3 	.word	0x080007b3
 800076c:	080007d1 	.word	0x080007d1
 8000770:	080007d1 	.word	0x080007d1
 8000774:	080007d1 	.word	0x080007d1
 8000778:	080007d1 	.word	0x080007d1
 800077c:	080007d1 	.word	0x080007d1
 8000780:	080007d1 	.word	0x080007d1
 8000784:	080007d1 	.word	0x080007d1
 8000788:	080007d1 	.word	0x080007d1
 800078c:	080007d1 	.word	0x080007d1
 8000790:	080007d1 	.word	0x080007d1
	{
		// Get info
		case CMD_INFO:
			F_Cmd_Info(s_cmd_received, s_cmd_answer);
 8000794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000796:	9303      	str	r3, [sp, #12]
 8000798:	466c      	mov	r4, sp
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ac:	f000 f818 	bl	80007e0 <F_Cmd_Info>
			break;
 80007b0:	e00f      	b.n	80007d2 <F_Process_Command+0x9e>

		// Set LED
		case CMD_SET_LED:
			F_Cmd_Set_LED(s_cmd_received, s_cmd_answer);
 80007b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b4:	9303      	str	r3, [sp, #12]
 80007b6:	466c      	mov	r4, sp
 80007b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ca:	f000 f83e 	bl	800084a <F_Cmd_Set_LED>
			break;
 80007ce:	e000      	b.n	80007d2 <F_Process_Command+0x9e>
			break;


		// Error, unknown command
		default:
			break;
 80007d0:	bf00      	nop

	}


}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <F_Cmd_Info>:
       - bit 0 : Distance 1 & Distance 2 & Distance 3 ==> = 1 if distance < 30cm otherwise 0


 */
uint8_t F_Cmd_Info(Tcp_command s_cmd_received, Tcp_answer *s_cmd_answer)
{
 80007e0:	b084      	sub	sp, #16
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	f107 0c10 	add.w	ip, r7, #16
 80007ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71fb      	strb	r3, [r7, #7]
	uint8_t distance_warning = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	71bb      	strb	r3, [r7, #6]


	s_cmd_answer->code_retour = status;
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	609a      	str	r2, [r3, #8]
	s_cmd_answer->nb_reponse = 9;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	2209      	movs	r2, #9
 8000802:	60da      	str	r2, [r3, #12]
	s_cmd_answer->reponse[0] = (int32_t)0;	// Position X
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
	s_cmd_answer->reponse[1] = (int32_t)0;	// Position Y
 800080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
	s_cmd_answer->reponse[2] = (int32_t)0;  // Position Theta
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
	s_cmd_answer->reponse[3] = (int32_t)0;	// Capteur distance 1
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
	s_cmd_answer->reponse[4] = (int32_t)0;	// Capteur distance 2
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
	s_cmd_answer->reponse[5] = (int32_t)0;	// Capteur distance 3
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
	s_cmd_answer->reponse[6] = (int32_t)0;	// Capteur distance 4
 8000828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
	s_cmd_answer->reponse[7] = (int32_t)0;	// Etat LED + Capteurs(Tout ou rien + tirette)
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
	s_cmd_answer->reponse[8] = (int32_t)0;	// Etat servo
 8000834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30

	return status;
 800083a:	79fb      	ldrb	r3, [r7, #7]

}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	b004      	add	sp, #16
 8000848:	4770      	bx	lr

0800084a <F_Cmd_Set_LED>:


uint8_t F_Cmd_Set_LED(Tcp_command s_cmd_received, Tcp_answer *s_cmd_answer)
{
 800084a:	b084      	sub	sp, #16
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	f107 0c10 	add.w	ip, r7, #16
 8000856:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]

	// RED LED
	if(((s_cmd_received.params[0]>>16)& 0x00FF) == 1)
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	0c1b      	lsrs	r3, r3, #16
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b01      	cmp	r3, #1
 8000866:	d103      	bne.n	8000870 <F_Cmd_Set_LED+0x26>
	{
		F_GPIO_setLedRed(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f000 fc49 	bl	8001100 <F_GPIO_setLedRed>
 800086e:	e007      	b.n	8000880 <F_Cmd_Set_LED+0x36>
	}
	else if(((s_cmd_received.params[0]>>16)& 0x00FF) == 0)
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <F_Cmd_Set_LED+0x36>
	{
		F_GPIO_setLedRed(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fc40 	bl	8001100 <F_GPIO_setLedRed>
	}

	// BLUE LED
	if(((s_cmd_received.params[0]>>8)& 0x00FF) == 1)
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b01      	cmp	r3, #1
 8000888:	d103      	bne.n	8000892 <F_Cmd_Set_LED+0x48>
	{
		F_GPIO_setLedBlue(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fc56 	bl	800113c <F_GPIO_setLedBlue>
 8000890:	e007      	b.n	80008a2 <F_Cmd_Set_LED+0x58>
	}
	else if(((s_cmd_received.params[0]>>8)& 0x00FF) == 0)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <F_Cmd_Set_LED+0x58>
	{
		F_GPIO_setLedBlue(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f000 fc4d 	bl	800113c <F_GPIO_setLedBlue>
	}

	// GREEN LED
	if((s_cmd_received.params[0] & 0x00FF) == 1)
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d103      	bne.n	80008b2 <F_Cmd_Set_LED+0x68>
	{
		F_GPIO_setLedGreen(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fc64 	bl	8001178 <F_GPIO_setLedGreen>
 80008b0:	e006      	b.n	80008c0 <F_Cmd_Set_LED+0x76>
	}
	else if((s_cmd_received.params[0]& 0x00FF) == 0)
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <F_Cmd_Set_LED+0x76>
	{
		F_GPIO_setLedGreen(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fc5c 	bl	8001178 <F_GPIO_setLedGreen>
	}

	s_cmd_answer->code_retour = status;
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	609a      	str	r2, [r3, #8]
	s_cmd_answer->nb_reponse = 0;
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]

	return status;
 80008cc:	79fb      	ldrb	r3, [r7, #7]

}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <F_TCP_paquetTocmd>:


void F_TCP_paquetTocmd(void *data,uint16_t data_len, struct tcp_command *s_cmd_received)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08f      	sub	sp, #60	; 0x3c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	460b      	mov	r3, r1
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	817b      	strh	r3, [r7, #10]
	uint8_t i = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t * tempPtr = data;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30

	volatile uint32_t tab_reveived[3 + SIZE_PARAM_CMD] = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	619a      	str	r2, [r3, #24]

	for(i=0; i<(data_len/4);i++)
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800090e:	e010      	b.n	8000932 <F_TCP_paquetTocmd+0x56>
	{

		tab_reveived[i] = (uint32_t)(*tempPtr++);
 8000910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000912:	1d1a      	adds	r2, r3, #4
 8000914:	633a      	str	r2, [r7, #48]	; 0x30
 8000916:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	008b      	lsls	r3, r1, #2
 800091e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000922:	440b      	add	r3, r1
 8000924:	f843 2c24 	str.w	r2, [r3, #-36]
	for(i=0; i<(data_len/4);i++)
 8000928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800092c:	3301      	adds	r3, #1
 800092e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000932:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000936:	b29a      	uxth	r2, r3
 8000938:	897b      	ldrh	r3, [r7, #10]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	b29b      	uxth	r3, r3
 800093e:	429a      	cmp	r2, r3
 8000940:	d3e6      	bcc.n	8000910 <F_TCP_paquetTocmd+0x34>

	}

	s_cmd_received->id = (uint32_t)(tab_reveived[0]);
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	601a      	str	r2, [r3, #0]
	s_cmd_received->cmd = tab_reveived[1];
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	605a      	str	r2, [r3, #4]
	s_cmd_received->nb_param = tab_reveived[2];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	609a      	str	r2, [r3, #8]
	for(i=0;i<((data_len/4)-3);i++)
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800095a:	e014      	b.n	8000986 <F_TCP_paquetTocmd+0xaa>
	{
		s_cmd_received->params[i] = (uint32_t)(tab_reveived[3+i]);
 800095c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000960:	3303      	adds	r3, #3
 8000962:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800096c:	4413      	add	r3, r2
 800096e:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	1c83      	adds	r3, r0, #2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	605a      	str	r2, [r3, #4]
	for(i=0;i<((data_len/4)-3);i++)
 800097c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000980:	3301      	adds	r3, #1
 8000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000986:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800098a:	897b      	ldrh	r3, [r7, #10]
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	b29b      	uxth	r3, r3
 8000990:	3b03      	subs	r3, #3
 8000992:	429a      	cmp	r2, r3
 8000994:	dbe2      	blt.n	800095c <F_TCP_paquetTocmd+0x80>
	}

}
 8000996:	bf00      	nop
 8000998:	373c      	adds	r7, #60	; 0x3c
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <F_TCP_answerTotab>:

void F_TCP_answerTotab(uint32_t *array, struct tcp_answer s_cmd_answer)
{
 80009a2:	b084      	sub	sp, #16
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	f107 001c 	add.w	r0, r7, #28
 80009b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t i = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
	array[0] = s_cmd_answer.id;
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	array[1] = s_cmd_answer.code_retour;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3304      	adds	r3, #4
 80009c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c4:	601a      	str	r2, [r3, #0]
	array[2] = s_cmd_answer.cmd;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	601a      	str	r2, [r3, #0]
	array[3] =  s_cmd_answer.nb_reponse;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	330c      	adds	r3, #12
 80009d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009d4:	601a      	str	r2, [r3, #0]

	for(i=0;i< s_cmd_answer.nb_reponse;i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e00f      	b.n	80009fc <F_TCP_answerTotab+0x5a>
	{
		array[4+i] = s_cmd_answer.reponse[i];
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	3204      	adds	r2, #4
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	440a      	add	r2, r1
 80009e8:	3304      	adds	r3, #4
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	f107 0118 	add.w	r1, r7, #24
 80009f0:	440b      	add	r3, r1
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	6013      	str	r3, [r2, #0]
	for(i=0;i< s_cmd_answer.nb_reponse;i++)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3eb      	bcc.n	80009dc <F_TCP_answerTotab+0x3a>
	}

}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	b004      	add	sp, #16
 8000a10:	4770      	bx	lr
	...

08000a14 <F_QEI_Reset>:
	F_QEI_Reset();
}
///*
// * F_QEI_Reset Localization data are reseted to zero;
// */
void F_QEI_Reset(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
	__disable_irq();

	g_oldLeftCount	= 0;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <F_QEI_Reset+0x38>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
	g_oldRightCount	= 0;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <F_QEI_Reset+0x3c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
	g_leftSpeed		= 0;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <F_QEI_Reset+0x40>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
	g_rightSpeed	= 0;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <F_QEI_Reset+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
//
//	g_estimate.x = RBT_OF7_X;
//	g_estimate.y = RBT_OF7_Y;
//	g_estimate.teta = 0;

	TIM2->CNT=0;
 8000a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <F_QEI_Reset+0x48>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24

	F_QEI_Read();
 8000a40:	f000 f80e 	bl	8000a60 <F_QEI_Read>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a44:	b662      	cpsie	i
	__enable_irq();
}
<<<<<<< HEAD
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200041b4 	.word	0x200041b4
 80005cc:	200041cc 	.word	0x200041cc
 80005d0:	200041c4 	.word	0x200041c4
 80005d4:	200041c8 	.word	0x200041c8
 80005d8:	40000400 	.word	0x40000400
=======
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20004350 	.word	0x20004350
 8000a50:	20004368 	.word	0x20004368
 8000a54:	20004360 	.word	0x20004360
 8000a58:	20004364 	.word	0x20004364
 8000a5c:	40000400 	.word	0x40000400
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08000a60 <F_QEI_Read>:
///*
// * F_QEI_Read is called every Timer 9 interrupt to update encoder's data
// */
void F_QEI_Read (void){
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

	g_oldLeftCount  = g_leftCount ;
 8000a64:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <F_QEI_Read+0x104>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a3f      	ldr	r2, [pc, #252]	; (8000b68 <F_QEI_Read+0x108>)
 8000a6a:	6013      	str	r3, [r2, #0]
	g_oldRightCount = g_rightCount;
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <F_QEI_Read+0x10c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3f      	ldr	r2, [pc, #252]	; (8000b70 <F_QEI_Read+0x110>)
 8000a72:	6013      	str	r3, [r2, #0]

	g_rightCount = TIM2->CNT ;
 8000a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <F_QEI_Read+0x10c>)
 8000a7e:	601a      	str	r2, [r3, #0]
	g_leftCount  = TIM3->CNT ;
 8000a80:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <F_QEI_Read+0x114>)
 8000a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <F_QEI_Read+0x104>)
 8000a88:	601a      	str	r2, [r3, #0]

	g_leftSpeed  = g_leftCount  - g_oldLeftCount ;
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <F_QEI_Read+0x104>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <F_QEI_Read+0x108>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <F_QEI_Read+0x118>)
 8000a96:	6013      	str	r3, [r2, #0]
	g_rightSpeed = g_rightCount - g_oldRightCount;
 8000a98:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <F_QEI_Read+0x10c>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <F_QEI_Read+0x110>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <F_QEI_Read+0x11c>)
 8000aa4:	6013      	str	r3, [r2, #0]

	// Si on passe par zero en phase descendante
	if(g_leftSpeed  > 4096) g_leftSpeed = -(g_oldLeftCount  + (65535-g_leftCount));
 8000aa6:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <F_QEI_Read+0x118>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aae:	dd0a      	ble.n	8000ac6 <F_QEI_Read+0x66>
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <F_QEI_Read+0x104>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000ab8:	33ff      	adds	r3, #255	; 0xff
 8000aba:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <F_QEI_Read+0x108>)
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <F_QEI_Read+0x118>)
 8000ac4:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed > 4096) g_rightSpeed= -(g_oldRightCount + (65535-g_rightCount));
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <F_QEI_Read+0x11c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ace:	dd0a      	ble.n	8000ae6 <F_QEI_Read+0x86>
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <F_QEI_Read+0x10c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000ad8:	33ff      	adds	r3, #255	; 0xff
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <F_QEI_Read+0x110>)
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <F_QEI_Read+0x11c>)
 8000ae4:	6013      	str	r3, [r2, #0]
	// Si on passe par zero en phase montante
	if(g_leftSpeed  < -4096) g_leftSpeed = (g_leftCount + (65535  - g_oldLeftCount));
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <F_QEI_Read+0x118>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000aee:	da09      	bge.n	8000b04 <F_QEI_Read+0xa4>
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <F_QEI_Read+0x108>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000af8:	33ff      	adds	r3, #255	; 0xff
 8000afa:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <F_QEI_Read+0x104>)
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <F_QEI_Read+0x118>)
 8000b02:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed < -4096) g_rightSpeed= (g_rightCount + (65535 - g_oldRightCount));
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <F_QEI_Read+0x11c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000b0c:	da09      	bge.n	8000b22 <F_QEI_Read+0xc2>
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <F_QEI_Read+0x110>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000b16:	33ff      	adds	r3, #255	; 0xff
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <F_QEI_Read+0x10c>)
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <F_QEI_Read+0x11c>)
 8000b20:	6013      	str	r3, [r2, #0]

	g_fwdSpeed = (float)( g_leftSpeed + g_rightSpeed ) / 2;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <F_QEI_Read+0x118>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <F_QEI_Read+0x11c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000b38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <F_QEI_Read+0x120>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
	g_rotSpeed =  g_rightSpeed - g_leftSpeed;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <F_QEI_Read+0x11c>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <F_QEI_Read+0x118>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <F_QEI_Read+0x124>)
 8000b56:	edc3 7a00 	vstr	s15, [r3]

	//F_QEI_XYTetaProcessing();
}
<<<<<<< HEAD
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	200041c0 	.word	0x200041c0
 80006e4:	200041b4 	.word	0x200041b4
 80006e8:	200041bc 	.word	0x200041bc
 80006ec:	200041cc 	.word	0x200041cc
 80006f0:	40000400 	.word	0x40000400
 80006f4:	200041c4 	.word	0x200041c4
 80006f8:	200041c8 	.word	0x200041c8
 80006fc:	200041b0 	.word	0x200041b0
 8000700:	200041b8 	.word	0x200041b8

08000704 <F_LCD_Init>:
#include "D_QEI.h"

extern int g_leftCount;
extern int g_rightCount;

void F_LCD_Init(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	g_addr = LCD_ADDR;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <F_LCD_Init+0x2c>)
 800070a:	2227      	movs	r2, #39	; 0x27
 800070c:	701a      	strb	r2, [r3, #0]
	g_cols = LCD_COLS;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <F_LCD_Init+0x30>)
 8000710:	2210      	movs	r2, #16
 8000712:	701a      	strb	r2, [r3, #0]
	g_rows = LCD_ROWS;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <F_LCD_Init+0x34>)
 8000716:	2202      	movs	r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
	g_charsize = LCD_CHARSIZE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <F_LCD_Init+0x38>)
 800071c:	2204      	movs	r2, #4
 800071e:	701a      	strb	r2, [r3, #0]
	g_backlightval = LCD_BACKLIGHT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <F_LCD_Init+0x3c>)
 8000722:	2208      	movs	r2, #8
 8000724:	701a      	strb	r2, [r3, #0]

	F_LCD_begin();
 8000726:	f000 f80d 	bl	8000744 <F_LCD_begin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200041d2 	.word	0x200041d2
 8000734:	200041d7 	.word	0x200041d7
 8000738:	200041d1 	.word	0x200041d1
 800073c:	200041d3 	.word	0x200041d3
 8000740:	200041d4 	.word	0x200041d4

08000744 <F_LCD_begin>:
void F_LCD_begin() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	g_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <F_LCD_begin+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

	if (g_rows > 1) {
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <F_LCD_begin+0xc0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d906      	bls.n	8000764 <F_LCD_begin+0x20>
		g_displayfunction |= LCD_2LINE;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <F_LCD_begin+0xbc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <F_LCD_begin+0xbc>)
 8000762:	701a      	strb	r2, [r3, #0]
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((g_charsize != 0) && (g_rows == 1)) {
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <F_LCD_begin+0xc4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00a      	beq.n	8000782 <F_LCD_begin+0x3e>
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <F_LCD_begin+0xc0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d106      	bne.n	8000782 <F_LCD_begin+0x3e>
		g_displayfunction |= LCD_5x10DOTS;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <F_LCD_begin+0xbc>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <F_LCD_begin+0xbc>)
 8000780:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f001 fde2 	bl	800234c <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	D_LCD_expanderWrite(g_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <F_LCD_begin+0xc8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f90b 	bl	80009a8 <D_LCD_expanderWrite>
	HAL_Delay(100);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f001 fdda 	bl	800234c <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	D_LCD_write4bits(0x03 << 4);
 8000798:	2030      	movs	r0, #48	; 0x30
 800079a:	f000 f8f4 	bl	8000986 <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 800079e:	2005      	movs	r0, #5
 80007a0:	f001 fdd4 	bl	800234c <HAL_Delay>

	// second try
	D_LCD_write4bits(0x03 << 4);
 80007a4:	2030      	movs	r0, #48	; 0x30
 80007a6:	f000 f8ee 	bl	8000986 <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 80007aa:	2005      	movs	r0, #5
 80007ac:	f001 fdce 	bl	800234c <HAL_Delay>

	// third go!
	D_LCD_write4bits(0x03 << 4);
 80007b0:	2030      	movs	r0, #48	; 0x30
 80007b2:	f000 f8e8 	bl	8000986 <D_LCD_write4bits>
	HAL_Delay(5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	f001 fdc8 	bl	800234c <HAL_Delay>

	// finally, set to 4-bit interface
	D_LCD_write4bits(0x02 << 4);
 80007bc:	2020      	movs	r0, #32
 80007be:	f000 f8e2 	bl	8000986 <D_LCD_write4bits>

	// set # lines, font size, etc.
	F_LCD_command(LCD_FUNCTIONSET | g_displayfunction);
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <F_LCD_begin+0xbc>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f87f 	bl	80008d0 <F_LCD_command>

	// turn the display on with no cursor or blinking default
	g_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <F_LCD_begin+0xcc>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	701a      	strb	r2, [r3, #0]
	F_LCD_display();
 80007d8:	f000 f864 	bl	80008a4 <F_LCD_display>

	// clear it off
	F_LCD_clear();
 80007dc:	f000 f81c 	bl	8000818 <F_LCD_clear>

	// Initialize to default text direction (for roman languages)
	g_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <F_LCD_begin+0xd0>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	F_LCD_command(LCD_ENTRYMODESET | g_displaymode);
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <F_LCD_begin+0xd0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f86d 	bl	80008d0 <F_LCD_command>

	F_LCD_home();
 80007f6:	f000 f819 	bl	800082c <F_LCD_home>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200041d6 	.word	0x200041d6
 8000804:	200041d1 	.word	0x200041d1
 8000808:	200041d3 	.word	0x200041d3
 800080c:	200041d4 	.word	0x200041d4
 8000810:	200041d5 	.word	0x200041d5
 8000814:	200041d0 	.word	0x200041d0

08000818 <F_LCD_clear>:
/********** high level commands, for the user! */
void F_LCD_clear(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 800081c:	2001      	movs	r0, #1
 800081e:	f000 f857 	bl	80008d0 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000822:	2032      	movs	r0, #50	; 0x32
 8000824:	f001 fd92 	bl	800234c <HAL_Delay>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <F_LCD_home>:
void F_LCD_home(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_RETURNHOME);  // set cursor position to zero
 8000830:	2002      	movs	r0, #2
 8000832:	f000 f84d 	bl	80008d0 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f001 fd88 	bl	800234c <HAL_Delay>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <F_LCD_setCursor>:
void F_LCD_setCursor(uint8_t col, uint8_t row){
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <F_LCD_setCursor+0x5c>)
 8000852:	f107 0408 	add.w	r4, r7, #8
 8000856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > g_rows) {
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <F_LCD_setCursor+0x60>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	429a      	cmp	r2, r3
 8000864:	d903      	bls.n	800086e <F_LCD_setCursor+0x2e>
		row = g_rows-1;    // we count rows starting w/0
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <F_LCD_setCursor+0x60>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3b01      	subs	r3, #1
 800086c:	71bb      	strb	r3, [r7, #6]
	}
	F_LCD_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	f107 0218 	add.w	r2, r7, #24
 8000876:	4413      	add	r3, r2
 8000878:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4413      	add	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	b25b      	sxtb	r3, r3
 8000886:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800088a:	b25b      	sxtb	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f81e 	bl	80008d0 <F_LCD_command>
}
 8000894:	bf00      	nop
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	0800c6d0 	.word	0x0800c6d0
 80008a0:	200041d1 	.word	0x200041d1

080008a4 <F_LCD_display>:
// Turn the display on/off (quickly)
void F_LCD_noDisplay() {
	g_displaycontrol &= ~LCD_DISPLAYON;
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
}
void F_LCD_display() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	g_displaycontrol |= LCD_DISPLAYON;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <F_LCD_display+0x28>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <F_LCD_display+0x28>)
 80008b4:	701a      	strb	r2, [r3, #0]
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <F_LCD_display+0x28>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f805 	bl	80008d0 <F_LCD_command>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200041d5 	.word	0x200041d5

080008d0 <F_LCD_command>:
  return g_backlightval == LCD_BACKLIGHT;
}

/*********** mid level commands, for sending data/cmds */

void F_LCD_command(uint8_t value) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, 0);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f830 	bl	8000944 <D_LCD_send>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <F_LCD_write>:
void F_LCD_write(uint8_t value) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, LCD_RS);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f822 	bl	8000944 <D_LCD_send>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <F_LCD_printstr>:
void F_LCD_printstr(char *c){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	//This function is not identical to the function used for "real" I2C displays
	//it's here so the user sketch doesn't have to be changed
	int idx=0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0' && idx<16) {
 8000914:	e009      	b.n	800092a <F_LCD_printstr+0x22>
		F_LCD_write(c[idx]);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffe4 	bl	80008ec <F_LCD_write>
		idx++;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0' && idx<16) {
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <F_LCD_printstr+0x34>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	ddec      	ble.n	8000916 <F_LCD_printstr+0xe>
	}
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <D_LCD_send>:
	F_LCD_printstr(line2);
}
/************ low level data pushing commands **********/

// write either command or data
void D_LCD_send(uint8_t value, uint8_t mode) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	4613      	mov	r3, r2
 8000952:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib=value&0xf0;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f023 030f 	bic.w	r3, r3, #15
 800095a:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib=(value<<4)&0xf0;
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	73bb      	strb	r3, [r7, #14]

	D_LCD_write4bits((highnib)|mode);
 8000962:	7bfa      	ldrb	r2, [r7, #15]
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	4313      	orrs	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f80b 	bl	8000986 <D_LCD_write4bits>
	D_LCD_write4bits((lownib)|mode);
 8000970:	7bba      	ldrb	r2, [r7, #14]
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	4313      	orrs	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f804 	bl	8000986 <D_LCD_write4bits>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <D_LCD_write4bits>:
void D_LCD_write4bits(uint8_t value) {
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(value);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f808 	bl	80009a8 <D_LCD_expanderWrite>
	D_LCD_pulseEnable(value);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f81c 	bl	80009d8 <D_LCD_pulseEnable>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <D_LCD_expanderWrite>:
void D_LCD_expanderWrite(uint8_t a_data){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	F_I2C1_WriteValue(g_addr,a_data | g_backlightval);
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <D_LCD_expanderWrite+0x28>)
 80009b4:	7818      	ldrb	r0, [r3, #0]
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <D_LCD_expanderWrite+0x2c>)
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4313      	orrs	r3, r2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	f000 fdc3 	bl	800154c <F_I2C1_WriteValue>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200041d2 	.word	0x200041d2
 80009d4:	200041d4 	.word	0x200041d4

080009d8 <D_LCD_pulseEnable>:
void D_LCD_pulseEnable(uint8_t _data){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(_data | LCD_EN);	// En high
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ffdc 	bl	80009a8 <D_LCD_expanderWrite>
	HAL_Delay(1);		// enable pulse must be >450ns
 80009f0:	2001      	movs	r0, #1
 80009f2:	f001 fcab 	bl	800234c <HAL_Delay>

	D_LCD_expanderWrite(_data & ~LCD_EN);	// En low
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f023 0304 	bic.w	r3, r3, #4
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ffd2 	bl	80009a8 <D_LCD_expanderWrite>
	//HAL_Delay(1);		// commands need > 37us to settle
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <F_LCD_DebugTask_Handler>:
	} else {
		F_LCD_noBacklight();		// turn backlight off
	}
}

void F_LCD_DebugTask_Handler(void const * argument){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

	char line1[16],line2[16];
	uint32_t OldTick =0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c

	// 1. Initialization message
	sprintf(line1,"Time %s",__TIME__);
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <F_LCD_DebugTask_Handler+0xc8>)
 8000a1e:	492e      	ldr	r1, [pc, #184]	; (8000ad8 <F_LCD_DebugTask_Handler+0xcc>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00b fb05 	bl	800c030 <siprintf>
	sprintf(line2,"Date%s",__DATE__);
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <F_LCD_DebugTask_Handler+0xd0>)
 8000a2c:	492c      	ldr	r1, [pc, #176]	; (8000ae0 <F_LCD_DebugTask_Handler+0xd4>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00b fafe 	bl	800c030 <siprintf>

	F_LCD_Init();
 8000a34:	f7ff fe66 	bl	8000704 <F_LCD_Init>
	F_LCD_setCursor(0,0);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ff00 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line1);
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5f 	bl	8000908 <F_LCD_printstr>
	F_LCD_setCursor(0,1);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fef7 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line2);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff56 	bl	8000908 <F_LCD_printstr>

	// 2. Wait 1s and clear Initialization message
	osDelay(1000);
 8000a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a60:	f008 febf 	bl	80097e2 <osDelay>
	F_LCD_clear();
 8000a64:	f7ff fed8 	bl	8000818 <F_LCD_clear>

    while(1){
        // 3. Wait until period elapse
    	osDelay(300);
 8000a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a6c:	f008 feb9 	bl	80097e2 <osDelay>
    	F_GPIO_SetLed4(TRUE);	// Flag ON
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fb63 	bl	800113c <F_GPIO_SetLed4>
    	uint32_t currentTick = osKernelSysTick();
 8000a76:	f008 fe58 	bl	800972a <osKernelSysTick>
 8000a7a:	62b8      	str	r0, [r7, #40]	; 0x28

    	// 4. Fit data for printing
    	sprintf(line1,"t: %d",(int)currentTick);
 8000a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4918      	ldr	r1, [pc, #96]	; (8000ae4 <F_LCD_DebugTask_Handler+0xd8>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00b fad3 	bl	800c030 <siprintf>
    	sprintf(line2,"d: %d",(int)(currentTick-OldTick));
 8000a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4914      	ldr	r1, [pc, #80]	; (8000ae8 <F_LCD_DebugTask_Handler+0xdc>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00b fac9 	bl	800c030 <siprintf>

    	// 5. Print on LCD screen
    	F_LCD_clear();
 8000a9e:	f7ff febb 	bl	8000818 <F_LCD_clear>
    	F_LCD_setCursor(0,0);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fecb 	bl	8000840 <F_LCD_setCursor>
    	F_LCD_printstr(line1);
 8000aaa:	f107 0318 	add.w	r3, r7, #24
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff2a 	bl	8000908 <F_LCD_printstr>
    	F_LCD_setCursor(0,1);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fec2 	bl	8000840 <F_LCD_setCursor>
    	F_LCD_printstr(line2);
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff21 	bl	8000908 <F_LCD_printstr>

    	// 6. Set flag to LOW.
    	OldTick = currentTick;
 8000ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    	F_GPIO_SetLed4(FALSE);	// Flag OFF
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 fb36 	bl	800113c <F_GPIO_SetLed4>
    while(1){
 8000ad0:	e7ca      	b.n	8000a68 <F_LCD_DebugTask_Handler+0x5c>
 8000ad2:	bf00      	nop
 8000ad4:	0800c710 	.word	0x0800c710
 8000ad8:	0800c71c 	.word	0x0800c71c
 8000adc:	0800c724 	.word	0x0800c724
 8000ae0:	0800c730 	.word	0x0800c730
 8000ae4:	0800c738 	.word	0x0800c738
 8000ae8:	0800c740 	.word	0x0800c740

08000aec <F_Odometry_Compute>:
=======
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	2000435c 	.word	0x2000435c
 8000b68:	20004350 	.word	0x20004350
 8000b6c:	20004358 	.word	0x20004358
 8000b70:	20004368 	.word	0x20004368
 8000b74:	40000400 	.word	0x40000400
 8000b78:	20004360 	.word	0x20004360
 8000b7c:	20004364 	.word	0x20004364
 8000b80:	2000434c 	.word	0x2000434c
 8000b84:	20004354 	.word	0x20004354

08000b88 <F_Odometry_Compute>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#include "F_Odometry.h"

#include "D_QEI.h"
#include "cmsis_os.h"

void F_Odometry_Compute(uint32_t period_inTick){
<<<<<<< HEAD
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	F_QEI_Read();
 8000af4:	f7ff fd72 	bl	80005dc <F_QEI_Read>
=======
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	F_QEI_Read();
 8000b90:	f7ff ff66 	bl	8000a60 <F_QEI_Read>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
	//	g_estimate.x +=  TICKTOMM * g_fwdSpeed  * cosf(g_estimate.teta);
	//	g_estimate.y +=  TICKTOMM * g_fwdSpeed  * sinf(g_estimate.teta);
	//	g_estimate.teta +=  tanf( TICKTOMM * g_rotSpeed  / ENTRAXE ) ;
	//
	//	F_Math_ModuloPi(&g_estimate.teta);
}
<<<<<<< HEAD
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <F_Odometry_RegTask_Handler>:

void F_Odometry_RegTask_Handler(void const * argument){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    TickType_t prevTick = 0u;	// Save previous tick
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
    TickType_t tick = 0u;		// Current tick
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
=======
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <F_Odometry_RegTask_Handler>:

void F_Odometry_RegTask_Handler(void const * argument){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    //TickType_t xLastWakeTime;

    TickType_t prevTick = 0u,  tick = 0u;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    uint32_t period;

    // 1. Initialize QEI
    F_QEI_Reset();
<<<<<<< HEAD
 8000b10:	f7ff fd3e 	bl	8000590 <F_QEI_Reset>

    // 2. Get tick count
    prevTick = osKernelSysTick();
 8000b14:	f008 fe09 	bl	800972a <osKernelSysTick>
 8000b18:	6178      	str	r0, [r7, #20]
=======
 8000bac:	f7ff ff32 	bl	8000a14 <F_QEI_Reset>
    // 2. Get tick count
    prevTick = osKernelSysTick();
 8000bb0:	f00a fa21 	bl	800aff6 <osKernelSysTick>
 8000bb4:	6178      	str	r0, [r7, #20]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    while(1){
        // 2. Wait until period elapse
    	osDelay(ODO_TECH);
<<<<<<< HEAD
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f008 fe61 	bl	80097e2 <osDelay>
    	F_GPIO_SetLed1(TRUE);	// Flag On
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 fa9b 	bl	800105c <F_GPIO_SetLed1>
=======
 8000bb6:	2005      	movs	r0, #5
 8000bb8:	f00a fa79 	bl	800b0ae <osDelay>
    	F_GPIO_ToogleLed1();
 8000bbc:	f000 fafa 	bl	80011b4 <F_GPIO_ToogleLed1>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

        // 3. Get tick and compute period
        tick = osKernelSysTick();
<<<<<<< HEAD
 8000b26:	f008 fe00 	bl	800972a <osKernelSysTick>
 8000b2a:	6138      	str	r0, [r7, #16]
        period = tick - prevTick;
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	60fb      	str	r3, [r7, #12]

        //4. Compute location
        F_Odometry_Compute(period);
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff ffd9 	bl	8000aec <F_Odometry_Compute>

        // 5. Set previous tick
        prevTick = tick;
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	617b      	str	r3, [r7, #20]
        F_GPIO_SetLed1(FALSE);	// Flag Off
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fa8c 	bl	800105c <F_GPIO_SetLed1>
    	osDelay(ODO_TECH);
 8000b44:	e7e9      	b.n	8000b1a <F_Odometry_RegTask_Handler+0x1a>
	...

08000b48 <vApplicationGetIdleTaskMemory>:
=======
 8000bc0:	f00a fa19 	bl	800aff6 <osKernelSysTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        period = tick - prevTick; // Attention l'overflow n'est pas géré
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	60fb      	str	r3, [r7, #12]

        //4. Compute location
        F_Odometry_Compute(period);
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff ffda 	bl	8000b88 <F_Odometry_Compute>

        // 5. Set previous tick
        prevTick = tick;
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	617b      	str	r3, [r7, #20]
    	osDelay(ODO_TECH);
 8000bd8:	e7ed      	b.n	8000bb6 <F_Odometry_RegTask_Handler+0x1a>
	...

08000bdc <vApplicationGetIdleTaskMemory>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
<<<<<<< HEAD
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <vApplicationGetIdleTaskMemory+0x30>)
 8000b5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200001fc 	.word	0x200001fc
 8000b78:	20000250 	.word	0x20000250

08000b7c <MX_FREERTOS_Init>:
=======
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <vApplicationGetIdleTaskMemory+0x30>)
 8000bf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000208 	.word	0x20000208
 8000c0c:	2000025c 	.word	0x2000025c

08000c10 <MX_FREERTOS_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
<<<<<<< HEAD
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b0a4      	sub	sp, #144	; 0x90
 8000b80:	af00      	add	r7, sp, #0
=======
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b0a4      	sub	sp, #144	; 0x90
 8000c14:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
<<<<<<< HEAD
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <MX_FREERTOS_Init+0xc8>)
 8000b84:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b88:	461d      	mov	r5, r3
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f008 fdd4 	bl	800974a <osThreadCreate>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_FREERTOS_Init+0xcc>)
 8000ba6:	601a      	str	r2, [r3, #0]

  /* definition and creation of MotionRegTask */
  osThreadDef(MotionRegTask, StartMotionRegTask, osPriorityHigh, 0, 128);
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_FREERTOS_Init+0xd0>)
 8000baa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionRegTaskHandle = osThreadCreate(osThread(MotionRegTask), NULL);
 8000bbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fdc1 	bl	800974a <osThreadCreate>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_FREERTOS_Init+0xd4>)
 8000bcc:	601a      	str	r2, [r3, #0]

  /* definition and creation of OdometryRegTask */
  osThreadDef(OdometryRegTask, StartOdometryRegTask, osPriorityRealtime, 0, 128);
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_FREERTOS_Init+0xd8>)
 8000bd0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OdometryRegTaskHandle = osThreadCreate(osThread(OdometryRegTask), NULL);
 8000be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f008 fdae 	bl	800974a <osThreadCreate>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_FREERTOS_Init+0xdc>)
 8000bf2:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 128);
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_FREERTOS_Init+0xe0>)
 8000bf6:	f107 0420 	add.w	r4, r7, #32
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 fd9b 	bl	800974a <osThreadCreate>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_FREERTOS_Init+0xe4>)
 8000c18:	601a      	str	r2, [r3, #0]

  /* definition and creation of DebugTask */
  osThreadDef(DebugTask, StartDebugTask, osPriorityNormal, 0, 128);
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_FREERTOS_Init+0xe8>)
 8000c1c:	1d3c      	adds	r4, r7, #4
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 fd8a 	bl	800974a <osThreadCreate>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_FREERTOS_Init+0xec>)
 8000c3a:	601a      	str	r2, [r3, #0]
=======
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <MX_FREERTOS_Init+0xc8>)
 8000c18:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c1c:	461d      	mov	r5, r3
 8000c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f00a f9f0 	bl	800b016 <osThreadCreate>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_FREERTOS_Init+0xcc>)
 8000c3a:	601a      	str	r2, [r3, #0]

  /* definition and creation of MotionRegTask */
  osThreadDef(MotionRegTask, StartMotionRegTask, osPriorityHigh, 0, 128);
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <MX_FREERTOS_Init+0xd0>)
 8000c3e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c42:	461d      	mov	r5, r3
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionRegTaskHandle = osThreadCreate(osThread(MotionRegTask), NULL);
 8000c50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00a f9dd 	bl	800b016 <osThreadCreate>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_FREERTOS_Init+0xd4>)
 8000c60:	601a      	str	r2, [r3, #0]

  /* definition and creation of OdometryRegTask */
  osThreadDef(OdometryRegTask, StartOdometryRegTask, osPriorityRealtime, 0, 128);
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_FREERTOS_Init+0xd8>)
 8000c64:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c68:	461d      	mov	r5, r3
 8000c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OdometryRegTaskHandle = osThreadCreate(osThread(OdometryRegTask), NULL);
 8000c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f00a f9ca 	bl	800b016 <osThreadCreate>
 8000c82:	4602      	mov	r2, r0
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_FREERTOS_Init+0xdc>)
 8000c86:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 128);
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_FREERTOS_Init+0xe0>)
 8000c8a:	f107 0420 	add.w	r4, r7, #32
 8000c8e:	461d      	mov	r5, r3
 8000c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00a f9b7 	bl	800b016 <osThreadCreate>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_FREERTOS_Init+0xe4>)
 8000cac:	601a      	str	r2, [r3, #0]

  /* definition and creation of DebugTask */
  osThreadDef(DebugTask, StartDebugTask, osPriorityNormal, 0, 128);
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_FREERTOS_Init+0xe8>)
 8000cb0:	1d3c      	adds	r4, r7, #4
 8000cb2:	461d      	mov	r5, r3
 8000cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f00a f9a6 	bl	800b016 <osThreadCreate>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_FREERTOS_Init+0xec>)
 8000cce:	601a      	str	r2, [r3, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
<<<<<<< HEAD
 8000c3c:	bf00      	nop
 8000c3e:	3790      	adds	r7, #144	; 0x90
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	0800c754 	.word	0x0800c754
 8000c48:	200041d8 	.word	0x200041d8
 8000c4c:	0800c780 	.word	0x0800c780
 8000c50:	200041e8 	.word	0x200041e8
 8000c54:	0800c7ac 	.word	0x0800c7ac
 8000c58:	200041e0 	.word	0x200041e0
 8000c5c:	0800c7d4 	.word	0x0800c7d4
 8000c60:	200041e4 	.word	0x200041e4
 8000c64:	0800c7fc 	.word	0x0800c7fc
 8000c68:	200041dc 	.word	0x200041dc

08000c6c <StartDefaultTask>:
=======
 8000cd0:	bf00      	nop
 8000cd2:	3790      	adds	r7, #144	; 0x90
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd8:	0801b774 	.word	0x0801b774
 8000cdc:	2000436c 	.word	0x2000436c
 8000ce0:	0801b7a0 	.word	0x0801b7a0
 8000ce4:	2000437c 	.word	0x2000437c
 8000ce8:	0801b7cc 	.word	0x0801b7cc
 8000cec:	20004374 	.word	0x20004374
 8000cf0:	0801b7f4 	.word	0x0801b7f4
 8000cf4:	20004378 	.word	0x20004378
 8000cf8:	0801b81c 	.word	0x0801b81c
 8000cfc:	20004370 	.word	0x20004370

08000d00 <StartDefaultTask>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
<<<<<<< HEAD
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  //MX_LWIP_Init();

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c74:	f00a fc02 	bl	800b47c <MX_USB_DEVICE_Init>

=======
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d08:	f008 f9b2 	bl	8009070 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d0c:	f019 f8e8 	bl	8019ee0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  tcpecho_init();
 8000d10:	f7ff fcfc 	bl	800070c <tcpecho_init>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Infinite loop */
  for(;;)
  {
<<<<<<< HEAD
    osDelay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f008 fdb2 	bl	80097e2 <osDelay>
    F_GPIO_SetLed5(TRUE);	// Flag ON
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fa78 	bl	8001174 <F_GPIO_SetLed5>
    HAL_Delay(2);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f001 fb61 	bl	800234c <HAL_Delay>
    F_GPIO_SetLed5(FALSE);	// Flaf OFF
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f000 fa72 	bl	8001174 <F_GPIO_SetLed5>
    osDelay(10);
 8000c90:	e7f2      	b.n	8000c78 <StartDefaultTask+0xc>

08000c92 <StartMotionRegTask>:
=======
	  F_GPIO_ToogleLedRed();
 8000d14:	f000 f9d8 	bl	80010c8 <F_GPIO_ToogleLedRed>
    osDelay(500);
 8000d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d1c:	f00a f9c7 	bl	800b0ae <osDelay>
	  F_GPIO_ToogleLedRed();
 8000d20:	e7f8      	b.n	8000d14 <StartDefaultTask+0x14>

08000d22 <StartMotionRegTask>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionRegTask */
void StartMotionRegTask(void const * argument)
{
<<<<<<< HEAD
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
=======
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN StartMotionRegTask */
  /* Infinite loop */
  for(;;)
  {
<<<<<<< HEAD
    osDelay(50);
 8000c9a:	2032      	movs	r0, #50	; 0x32
 8000c9c:	f008 fda1 	bl	80097e2 <osDelay>
    F_GPIO_SetLed2(TRUE);	// Flag ON
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f9f7 	bl	8001094 <F_GPIO_SetLed2>
    HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f001 fb50 	bl	800234c <HAL_Delay>
    F_GPIO_SetLed2(FALSE);	// Flaf OFF
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f9f1 	bl	8001094 <F_GPIO_SetLed2>
    osDelay(50);
 8000cb2:	e7f2      	b.n	8000c9a <StartMotionRegTask+0x8>

08000cb4 <StartOdometryRegTask>:
=======
    osDelay(200);
 8000d2a:	20c8      	movs	r0, #200	; 0xc8
 8000d2c:	f00a f9bf 	bl	800b0ae <osDelay>
    F_GPIO_ToogleLed2();
 8000d30:	f000 fa5c 	bl	80011ec <F_GPIO_ToogleLed2>
    osDelay(200);
 8000d34:	e7f9      	b.n	8000d2a <StartMotionRegTask+0x8>

08000d36 <StartOdometryRegTask>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOdometryRegTask */
void StartOdometryRegTask(void const * argument)
{
<<<<<<< HEAD
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOdometryRegTask */
	F_Odometry_RegTask_Handler(argument);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff1f 	bl	8000b00 <F_Odometry_RegTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f008 fd8d 	bl	80097e2 <osDelay>
 8000cc8:	e7fb      	b.n	8000cc2 <StartOdometryRegTask+0xe>

08000cca <StartSensorsTask>:
=======
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOdometryRegTask */
	F_Odometry_RegTask_Handler(argument);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff2c 	bl	8000b9c <F_Odometry_RegTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000d44:	2064      	movs	r0, #100	; 0x64
 8000d46:	f00a f9b2 	bl	800b0ae <osDelay>
 8000d4a:	e7fb      	b.n	8000d44 <StartOdometryRegTask+0xe>

08000d4c <StartSensorsTask>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsTask */
void StartSensorsTask(void const * argument)
{
<<<<<<< HEAD
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
=======
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN StartSensorsTask */
  /* Infinite loop */
  for(;;)
  {
<<<<<<< HEAD
    osDelay(200);
 8000cd2:	20c8      	movs	r0, #200	; 0xc8
 8000cd4:	f008 fd85 	bl	80097e2 <osDelay>
    F_GPIO_SetLed3(TRUE);	// Flag ON
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f9f7 	bl	80010cc <F_GPIO_SetLed3>
    HAL_Delay(30);
 8000cde:	201e      	movs	r0, #30
 8000ce0:	f001 fb34 	bl	800234c <HAL_Delay>
    F_GPIO_SetLed3(FALSE);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f000 f9f1 	bl	80010cc <F_GPIO_SetLed3>
    osDelay(200);
 8000cea:	e7f2      	b.n	8000cd2 <StartSensorsTask+0x8>

08000cec <StartDebugTask>:
=======
    osDelay(100);
 8000d54:	2064      	movs	r0, #100	; 0x64
 8000d56:	f00a f9aa 	bl	800b0ae <osDelay>
 8000d5a:	e7fb      	b.n	8000d54 <StartSensorsTask+0x8>

08000d5c <StartDebugTask>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
<<<<<<< HEAD
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	//F_UART_DebugTask_Handler(argument);
	F_LCD_DebugTask_Handler(argument);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fe89 	bl	8000a0c <F_LCD_DebugTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(400);
 8000cfa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000cfe:	f008 fd70 	bl	80097e2 <osDelay>
 8000d02:	e7fa      	b.n	8000cfa <StartDebugTask+0xe>

08000d04 <MX_GPIO_Init>:
=======
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	//F_UART_DebugTask_Handler(argument);
	//F_LCD_DebugTask_Handler(argument);
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d68:	f00a f9a1 	bl	800b0ae <osDelay>
 8000d6c:	e7fa      	b.n	8000d64 <StartDebugTask+0x8>
	...

08000d70 <MX_GPIO_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
     PC9   ------> S_TIM8_CH4
     PG9   ------> USART6_RX
     PG14   ------> USART6_TX
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	4bb3      	ldr	r3, [pc, #716]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4ab2      	ldr	r2, [pc, #712]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4bb0      	ldr	r3, [pc, #704]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	623b      	str	r3, [r7, #32]
 8000d34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	4bac      	ldr	r3, [pc, #688]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4aab      	ldr	r2, [pc, #684]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4ba9      	ldr	r3, [pc, #676]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	4ba5      	ldr	r3, [pc, #660]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4aa4      	ldr	r2, [pc, #656]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d5c:	f043 0320 	orr.w	r3, r3, #32
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a9d      	ldr	r2, [pc, #628]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b9b      	ldr	r3, [pc, #620]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b97      	ldr	r3, [pc, #604]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a96      	ldr	r2, [pc, #600]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b94      	ldr	r3, [pc, #592]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b90      	ldr	r3, [pc, #576]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a8f      	ldr	r2, [pc, #572]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b8d      	ldr	r3, [pc, #564]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b89      	ldr	r3, [pc, #548]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a88      	ldr	r2, [pc, #544]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b86      	ldr	r3, [pc, #536]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b82      	ldr	r3, [pc, #520]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a81      	ldr	r2, [pc, #516]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b7f      	ldr	r3, [pc, #508]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f247 4130 	movw	r1, #29744	; 0x7430
 8000e00:	487b      	ldr	r0, [pc, #492]	; (8000ff0 <MX_GPIO_Init+0x2ec>)
 8000e02:	f001 fdef 	bl	80029e4 <HAL_GPIO_WritePin>
=======
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	4bb3      	ldr	r3, [pc, #716]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4ab2      	ldr	r2, [pc, #712]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4bb0      	ldr	r3, [pc, #704]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	4bac      	ldr	r3, [pc, #688]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4aab      	ldr	r2, [pc, #684]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4ba9      	ldr	r3, [pc, #676]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	4ba5      	ldr	r3, [pc, #660]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4aa4      	ldr	r2, [pc, #656]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000dc8:	f043 0320 	orr.w	r3, r3, #32
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4ba2      	ldr	r3, [pc, #648]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0320 	and.w	r3, r3, #32
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	4b9e      	ldr	r3, [pc, #632]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a9d      	ldr	r2, [pc, #628]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b9b      	ldr	r3, [pc, #620]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b97      	ldr	r3, [pc, #604]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a96      	ldr	r2, [pc, #600]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b94      	ldr	r3, [pc, #592]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b90      	ldr	r3, [pc, #576]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a8f      	ldr	r2, [pc, #572]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b8d      	ldr	r3, [pc, #564]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a88      	ldr	r2, [pc, #544]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b86      	ldr	r3, [pc, #536]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b82      	ldr	r3, [pc, #520]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a81      	ldr	r2, [pc, #516]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b7f      	ldr	r3, [pc, #508]	; (8001058 <MX_GPIO_Init+0x2e8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000e66:	2200      	movs	r2, #0
 8000e68:	f247 4130 	movw	r1, #29744	; 0x7430
 8000e6c:	487b      	ldr	r0, [pc, #492]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000e6e:	f002 fd9f 	bl	80039b0 <HAL_GPIO_WritePin>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8000e06:	2200      	movs	r2, #0
 8000e08:	2108      	movs	r1, #8
 8000e0a:	487a      	ldr	r0, [pc, #488]	; (8000ff4 <MX_GPIO_Init+0x2f0>)
 8000e0c:	f001 fdea 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000e10:	2200      	movs	r2, #0
 8000e12:	f244 41c1 	movw	r1, #17601	; 0x44c1
 8000e16:	4878      	ldr	r0, [pc, #480]	; (8000ff8 <MX_GPIO_Init+0x2f4>)
 8000e18:	f001 fde4 	bl	80029e4 <HAL_GPIO_WritePin>
=======
 8000e72:	2200      	movs	r2, #0
 8000e74:	2108      	movs	r1, #8
 8000e76:	487a      	ldr	r0, [pc, #488]	; (8001060 <MX_GPIO_Init+0x2f0>)
 8000e78:	f002 fd9a 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f244 41c1 	movw	r1, #17601	; 0x44c1
 8000e82:	4878      	ldr	r0, [pc, #480]	; (8001064 <MX_GPIO_Init+0x2f4>)
 8000e84:	f002 fd94 	bl	80039b0 <HAL_GPIO_WritePin>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8000e22:	4876      	ldr	r0, [pc, #472]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000e24:	f001 fdde 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2e:	4874      	ldr	r0, [pc, #464]	; (8001000 <MX_GPIO_Init+0x2fc>)
 8000e30:	f001 fdd8 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000e3a:	4872      	ldr	r0, [pc, #456]	; (8001004 <MX_GPIO_Init+0x300>)
 8000e3c:	f001 fdd2 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e40:	2374      	movs	r3, #116	; 0x74
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e50:	2305      	movs	r3, #5
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4868      	ldr	r0, [pc, #416]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000e5c:	f001 fc18 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	4b68      	ldr	r3, [pc, #416]	; (8001008 <MX_GPIO_Init+0x304>)
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	4865      	ldr	r0, [pc, #404]	; (800100c <MX_GPIO_Init+0x308>)
 8000e76:	f001 fc0b 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4858      	ldr	r0, [pc, #352]	; (8000ff0 <MX_GPIO_Init+0x2ec>)
 8000e8e:	f001 fbff 	bl	8002690 <HAL_GPIO_Init>
=======
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8000e8e:	4876      	ldr	r0, [pc, #472]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000e90:	f002 fd8e 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	4874      	ldr	r0, [pc, #464]	; (800106c <MX_GPIO_Init+0x2fc>)
 8000e9c:	f002 fd88 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000ea6:	4872      	ldr	r0, [pc, #456]	; (8001070 <MX_GPIO_Init+0x300>)
 8000ea8:	f002 fd82 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000eac:	2374      	movs	r3, #116	; 0x74
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4868      	ldr	r0, [pc, #416]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000ec8:	f002 fbc8 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	4b68      	ldr	r3, [pc, #416]	; (8001074 <MX_GPIO_Init+0x304>)
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4865      	ldr	r0, [pc, #404]	; (8001078 <MX_GPIO_Init+0x308>)
 8000ee2:	f002 fbbb 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4858      	ldr	r0, [pc, #352]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000efa:	f002 fbaf 	bl	800365c <HAL_GPIO_Init>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
<<<<<<< HEAD
 8000e92:	f247 4330 	movw	r3, #29744	; 0x7430
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4851      	ldr	r0, [pc, #324]	; (8000ff0 <MX_GPIO_Init+0x2ec>)
 8000eac:	f001 fbf0 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <MX_GPIO_Init+0x2f0>)
 8000ec8:	f001 fbe2 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4845      	ldr	r0, [pc, #276]	; (8000ff4 <MX_GPIO_Init+0x2f0>)
 8000ee0:	f001 fbd6 	bl	8002690 <HAL_GPIO_Init>
=======
 8000efe:	f247 4330 	movw	r3, #29744	; 0x7430
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4851      	ldr	r0, [pc, #324]	; (800105c <MX_GPIO_Init+0x2ec>)
 8000f18:	f002 fba0 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	484b      	ldr	r0, [pc, #300]	; (8001060 <MX_GPIO_Init+0x2f0>)
 8000f34:	f002 fb92 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 8000f38:	2360      	movs	r3, #96	; 0x60
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4845      	ldr	r0, [pc, #276]	; (8001060 <MX_GPIO_Init+0x2f0>)
 8000f4c:	f002 fb86 	bl	800365c <HAL_GPIO_Init>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
<<<<<<< HEAD
 8000ee4:	f244 43c1 	movw	r3, #17601	; 0x44c1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	483e      	ldr	r0, [pc, #248]	; (8000ff8 <MX_GPIO_Init+0x2f4>)
 8000efe:	f001 fbc7 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 8000f02:	2302      	movs	r3, #2
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	4838      	ldr	r0, [pc, #224]	; (8000ff8 <MX_GPIO_Init+0x2f4>)
 8000f16:	f001 fbbb 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 8000f1a:	2381      	movs	r3, #129	; 0x81
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4835      	ldr	r0, [pc, #212]	; (8001004 <MX_GPIO_Init+0x300>)
 8000f2e:	f001 fbaf 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 8000f32:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	482c      	ldr	r0, [pc, #176]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000f4c:	f001 fba0 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 8000f50:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4823      	ldr	r0, [pc, #140]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000f6e:	f001 fb8f 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <MX_GPIO_Init+0x2fc>)
 8000f8c:	f001 fb80 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 8000f90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <MX_GPIO_Init+0x300>)
 8000faa:	f001 fb71 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 8000fae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <MX_GPIO_Init+0x308>)
 8000fcc:	f001 fb60 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 8000fd0:	23b1      	movs	r3, #177	; 0xb1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <MX_GPIO_Init+0x2fc>)
 8000fe4:	f001 fb54 	bl	8002690 <HAL_GPIO_Init>
 8000fe8:	e012      	b.n	8001010 <MX_GPIO_Init+0x30c>
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40021400 	.word	0x40021400
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021800 	.word	0x40021800
 8001008:	10110000 	.word	0x10110000
 800100c:	40020800 	.word	0x40020800

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001010:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001022:	2308      	movs	r3, #8
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_GPIO_Init+0x350>)
 800102e:	f001 fb2f 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 8001032:	2302      	movs	r3, #2
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_GPIO_Init+0x354>)
 8001046:	f001 fb23 	bl	8002690 <HAL_GPIO_Init>
=======
 8000f50:	f244 43c1 	movw	r3, #17601	; 0x44c1
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	483e      	ldr	r0, [pc, #248]	; (8001064 <MX_GPIO_Init+0x2f4>)
 8000f6a:	f002 fb77 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4838      	ldr	r0, [pc, #224]	; (8001064 <MX_GPIO_Init+0x2f4>)
 8000f82:	f002 fb6b 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 8000f86:	2381      	movs	r3, #129	; 0x81
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4835      	ldr	r0, [pc, #212]	; (8001070 <MX_GPIO_Init+0x300>)
 8000f9a:	f002 fb5f 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 8000f9e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	482c      	ldr	r0, [pc, #176]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000fb8:	f002 fb50 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 8000fbc:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4823      	ldr	r0, [pc, #140]	; (8001068 <MX_GPIO_Init+0x2f8>)
 8000fda:	f002 fb3f 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481d      	ldr	r0, [pc, #116]	; (800106c <MX_GPIO_Init+0x2fc>)
 8000ff8:	f002 fb30 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 8000ffc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4816      	ldr	r0, [pc, #88]	; (8001070 <MX_GPIO_Init+0x300>)
 8001016:	f002 fb21 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 800101a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800102c:	2303      	movs	r3, #3
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_GPIO_Init+0x308>)
 8001038:	f002 fb10 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 800103c:	23b1      	movs	r3, #177	; 0xb1
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <MX_GPIO_Init+0x2fc>)
 8001050:	f002 fb04 	bl	800365c <HAL_GPIO_Init>
 8001054:	e012      	b.n	800107c <MX_GPIO_Init+0x30c>
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40021400 	.word	0x40021400
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40021000 	.word	0x40021000
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021800 	.word	0x40021800
 8001074:	10110000 	.word	0x10110000
 8001078:	40020800 	.word	0x40020800

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800107c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800108e:	2308      	movs	r3, #8
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MX_GPIO_Init+0x350>)
 800109a:	f002 fadf 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 800109e:	2302      	movs	r3, #2
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_GPIO_Init+0x354>)
 80010b2:	f002 fad3 	bl	800365c <HAL_GPIO_Init>

}
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	; 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021000 	.word	0x40021000

080010c8 <F_GPIO_ToogleLedRed>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/* USER CODE BEGIN 2 */
void F_GPIO_ToogleLedRed(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	if((GPIOB->ODR & LED_RED) > 0){
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <F_GPIO_ToogleLedRed+0x34>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <F_GPIO_ToogleLedRed+0x1e>
		GPIOB->ODR &= ~LED_RED;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <F_GPIO_ToogleLedRed+0x34>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <F_GPIO_ToogleLedRed+0x34>)
 80010de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010e2:	6153      	str	r3, [r2, #20]
	}else{
		GPIOB->ODR |= LED_RED;
	}
}
<<<<<<< HEAD
 800104a:	bf00      	nop
 800104c:	3738      	adds	r7, #56	; 0x38
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021800 	.word	0x40021800
 8001058:	40021000 	.word	0x40021000

0800105c <F_GPIO_SetLed1>:
	}
}
void F_GPIO_PrintCode(int from0to31){
	// TODO
}
void F_GPIO_SetLed1(int boul){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <F_GPIO_SetLed1+0x1c>
=======
 80010e4:	e005      	b.n	80010f2 <F_GPIO_ToogleLedRed+0x2a>
		GPIOB->ODR |= LED_RED;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <F_GPIO_ToogleLedRed+0x34>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <F_GPIO_ToogleLedRed+0x34>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6153      	str	r3, [r2, #20]
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40020400 	.word	0x40020400

08001100 <F_GPIO_setLedRed>:

void F_GPIO_setLedRed(uint8_t state)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]

	if(state == 1)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <F_GPIO_setLedRed+0x1e>
	{
		GPIOB->ODR |= LED_RED;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <F_GPIO_setLedRed+0x38>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	4a08      	ldr	r2, [pc, #32]	; (8001138 <F_GPIO_setLedRed+0x38>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111a:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOB->ODR &= ~LED_RED;
	}
}
 800111c:	e005      	b.n	800112a <F_GPIO_setLedRed+0x2a>
		GPIOB->ODR &= ~LED_RED;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <F_GPIO_setLedRed+0x38>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <F_GPIO_setLedRed+0x38>)
 8001124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001128:	6153      	str	r3, [r2, #20]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40020400 	.word	0x40020400

0800113c <F_GPIO_setLedBlue>:

void F_GPIO_setLedBlue(uint8_t state)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]

	if(state == 1)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d106      	bne.n	800115a <F_GPIO_setLedBlue+0x1e>
	{
		GPIOB->ODR |= LED_BLUE;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <F_GPIO_setLedBlue+0x38>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <F_GPIO_setLedBlue+0x38>)
 8001152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001156:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOB->ODR &= ~LED_BLUE;
	}
}
 8001158:	e005      	b.n	8001166 <F_GPIO_setLedBlue+0x2a>
		GPIOB->ODR &= ~LED_BLUE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <F_GPIO_setLedBlue+0x38>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <F_GPIO_setLedBlue+0x38>)
 8001160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001164:	6153      	str	r3, [r2, #20]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40020400 	.word	0x40020400

08001178 <F_GPIO_setLedGreen>:

void F_GPIO_setLedGreen(uint8_t state)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]

	if(state == 1)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <F_GPIO_setLedGreen+0x1e>
	{
		GPIOB->ODR |= LED_GREEN;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <F_GPIO_setLedGreen+0x38>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <F_GPIO_setLedGreen+0x38>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOB->ODR &= ~LED_GREEN;
	}
}
 8001194:	e005      	b.n	80011a2 <F_GPIO_setLedGreen+0x2a>
		GPIOB->ODR &= ~LED_GREEN;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <F_GPIO_setLedGreen+0x38>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <F_GPIO_setLedGreen+0x38>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6153      	str	r3, [r2, #20]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400

080011b4 <F_GPIO_ToogleLed1>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <F_GPIO_SetLed1+0x34>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <F_GPIO_SetLed1+0x34>)
 8001070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001074:	6153      	str	r3, [r2, #20]
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
<<<<<<< HEAD
 8001076:	e005      	b.n	8001084 <F_GPIO_SetLed1+0x28>
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <F_GPIO_SetLed1+0x34>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <F_GPIO_SetLed1+0x34>)
 800107e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001082:	6153      	str	r3, [r2, #20]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40020400 	.word	0x40020400

08001094 <F_GPIO_SetLed2>:
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
=======
void F_GPIO_ToogleLed1(void){
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	if((LED_1_GPIO_Port->ODR & LED_1_Pin) > 0){
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <F_GPIO_ToogleLed1+0x34>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <F_GPIO_ToogleLed1+0x1e>
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <F_GPIO_ToogleLed1+0x34>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <F_GPIO_ToogleLed1+0x34>)
 80011ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ce:	6153      	str	r3, [r2, #20]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
<<<<<<< HEAD
void F_GPIO_SetLed2(int boul){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <F_GPIO_SetLed2+0x1c>
=======
 80011d0:	e005      	b.n	80011de <F_GPIO_ToogleLed1+0x2a>
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <F_GPIO_ToogleLed1+0x34>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <F_GPIO_ToogleLed1+0x34>)
 80011d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011dc:	6153      	str	r3, [r2, #20]
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40020400 	.word	0x40020400

080011ec <F_GPIO_ToogleLed2>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ac:	6153      	str	r3, [r2, #20]
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
<<<<<<< HEAD
 80010ae:	e005      	b.n	80010bc <F_GPIO_SetLed2+0x28>
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	6153      	str	r3, [r2, #20]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40020400 	.word	0x40020400

080010cc <F_GPIO_SetLed3>:
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
=======
void F_GPIO_ToogleLed2(void){
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	if((LED_4_GPIO_Port->ODR & LED_4_Pin) > 0){
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <F_GPIO_ToogleLed2+0x34>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <F_GPIO_ToogleLed2+0x1e>
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <F_GPIO_ToogleLed2+0x34>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <F_GPIO_ToogleLed2+0x34>)
 8001202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001206:	6153      	str	r3, [r2, #20]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
<<<<<<< HEAD
void F_GPIO_SetLed3(int boul){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <F_GPIO_SetLed3+0x1c>
=======
 8001208:	e005      	b.n	8001216 <F_GPIO_ToogleLed2+0x2a>
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <F_GPIO_ToogleLed2+0x34>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <F_GPIO_ToogleLed2+0x34>)
 8001210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001214:	6153      	str	r3, [r2, #20]
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40020400 	.word	0x40020400

08001224 <F_GPIO_ToogleLed3>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010e0:	f023 0308 	bic.w	r3, r3, #8
 80010e4:	6153      	str	r3, [r2, #20]
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
 80010e6:	e005      	b.n	80010f4 <F_GPIO_SetLed3+0x28>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6153      	str	r3, [r2, #20]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40020000 	.word	0x40020000

08001104 <F_GPIO_ToogleLed3>:
void F_GPIO_ToogleLed3(void){
<<<<<<< HEAD
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	if((LED_3_GPIO_Port->ODR & LED_3_Pin) > 0){
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <F_GPIO_ToogleLed3+0x1e>
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 800111a:	f023 0308 	bic.w	r3, r3, #8
 800111e:	6153      	str	r3, [r2, #20]
=======
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	if((LED_3_GPIO_Port->ODR & LED_3_Pin) > 0){
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <F_GPIO_ToogleLed3+0x34>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <F_GPIO_ToogleLed3+0x1e>
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <F_GPIO_ToogleLed3+0x34>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <F_GPIO_ToogleLed3+0x34>)
 800123a:	f023 0308 	bic.w	r3, r3, #8
 800123e:	6153      	str	r3, [r2, #20]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
<<<<<<< HEAD
 8001120:	e005      	b.n	800112e <F_GPIO_ToogleLed3+0x2a>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6153      	str	r3, [r2, #20]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40020000 	.word	0x40020000

0800113c <F_GPIO_SetLed4>:
void F_GPIO_SetLed4(int boul){
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <F_GPIO_SetLed4+0x1c>
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <F_GPIO_SetLed4+0x34>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <F_GPIO_SetLed4+0x34>)
 8001150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001154:	6153      	str	r3, [r2, #20]
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
 8001156:	e005      	b.n	8001164 <F_GPIO_SetLed4+0x28>
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <F_GPIO_SetLed4+0x34>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <F_GPIO_SetLed4+0x34>)
 800115e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001162:	6153      	str	r3, [r2, #20]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40020c00 	.word	0x40020c00

08001174 <F_GPIO_SetLed5>:
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
void F_GPIO_SetLed5(int boul){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <F_GPIO_SetLed5+0x1c>
		LED_2_GPIO_Port->ODR &= ~LED_2_Pin;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800118c:	6153      	str	r3, [r2, #20]
	}else{
		LED_2_GPIO_Port->ODR |= LED_2_Pin;
	}
}
 800118e:	e005      	b.n	800119c <F_GPIO_SetLed5+0x28>
		LED_2_GPIO_Port->ODR |= LED_2_Pin;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6153      	str	r3, [r2, #20]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000

080011ac <__NVIC_GetPriorityGrouping>:
=======
 8001240:	e005      	b.n	800124e <F_GPIO_ToogleLed3+0x2a>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <F_GPIO_ToogleLed3+0x34>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <F_GPIO_ToogleLed3+0x34>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6153      	str	r3, [r2, #20]
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40020000 	.word	0x40020000

0800125c <__NVIC_GetPriorityGrouping>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
=======
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
=======
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	; (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
=======
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
=======
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_I2C_EnableClockStretching>:
=======
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_I2C_EnableClockStretching>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
<<<<<<< HEAD
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_I2C_DisableGeneralCall>:
=======
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_I2C_DisableGeneralCall>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
<<<<<<< HEAD
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_I2C_SetOwnAddress2>:
=======
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_I2C_SetOwnAddress2>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
<<<<<<< HEAD
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_I2C_DisableOwnAddress2>:
=======
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_I2C_DisableOwnAddress2>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
<<<<<<< HEAD
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f023 0201 	bic.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_AHB1_GRP1_EnableClock>:
=======
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f023 0201 	bic.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	60da      	str	r2, [r3, #12]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_AHB1_GRP1_EnableClock>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800135a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4013      	ands	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800

08001374 <LL_APB1_GRP1_EnableClock>:
=======
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40023800 	.word	0x40023800

08001424 <LL_APB1_GRP1_EnableClock>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_I2C1_Init>:
=======
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800142e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800143a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800

08001454 <MX_I2C1_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2220      	movs	r2, #32
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00a fd7b 	bl	800beae <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013c8:	2002      	movs	r0, #2
 80013ca:	f7ff ffbb 	bl	8001344 <LL_AHB1_GRP1_EnableClock>
=======
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	2220      	movs	r2, #32
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f019 fa64 	bl	801a930 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001478:	2002      	movs	r0, #2
 800147a:	f7ff ffbb 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
<<<<<<< HEAD
 80013ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d4:	2302      	movs	r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80013dc:	2301      	movs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4827      	ldr	r0, [pc, #156]	; (800148c <MX_I2C1_Init+0xe8>)
 80013ee:	f004 ff08 	bl	8006202 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80013f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013f6:	f7ff ffbd 	bl	8001374 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80013fa:	f7ff fed7 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80013fe:	4603      	mov	r3, r0
 8001400:	2200      	movs	r2, #0
 8001402:	2105      	movs	r1, #5
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff27 	bl	8001258 <NVIC_EncodePriority>
 800140a:	4603      	mov	r3, r0
 800140c:	4619      	mov	r1, r3
 800140e:	201f      	movs	r0, #31
 8001410:	f7ff fef8 	bl	8001204 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001414:	201f      	movs	r0, #31
 8001416:	f7ff fed7 	bl	80011c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800141a:	f7ff fec7 	bl	80011ac <__NVIC_GetPriorityGrouping>
 800141e:	4603      	mov	r3, r0
 8001420:	2200      	movs	r2, #0
 8001422:	2105      	movs	r1, #5
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff17 	bl	8001258 <NVIC_EncodePriority>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	2020      	movs	r0, #32
 8001430:	f7ff fee8 	bl	8001204 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001434:	2020      	movs	r0, #32
 8001436:	f7ff fec7 	bl	80011c8 <__NVIC_EnableIRQ>
=======
 800147e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001482:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001484:	2302      	movs	r3, #2
 8001486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800148c:	2301      	movs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001490:	2301      	movs	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001494:	2304      	movs	r3, #4
 8001496:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4827      	ldr	r0, [pc, #156]	; (800153c <MX_I2C1_Init+0xe8>)
 800149e:	f005 fe96 	bl	80071ce <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80014a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014a6:	f7ff ffbd 	bl	8001424 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80014aa:	f7ff fed7 	bl	800125c <__NVIC_GetPriorityGrouping>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2200      	movs	r2, #0
 80014b2:	2105      	movs	r1, #5
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff27 	bl	8001308 <NVIC_EncodePriority>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4619      	mov	r1, r3
 80014be:	201f      	movs	r0, #31
 80014c0:	f7ff fef8 	bl	80012b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014c4:	201f      	movs	r0, #31
 80014c6:	f7ff fed7 	bl	8001278 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80014ca:	f7ff fec7 	bl	800125c <__NVIC_GetPriorityGrouping>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2200      	movs	r2, #0
 80014d2:	2105      	movs	r1, #5
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff17 	bl	8001308 <NVIC_EncodePriority>
 80014da:	4603      	mov	r3, r0
 80014dc:	4619      	mov	r1, r3
 80014de:	2020      	movs	r0, #32
 80014e0:	f7ff fee8 	bl	80012b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014e4:	2020      	movs	r0, #32
 80014e6:	f7ff fec7 	bl	8001278 <__NVIC_EnableIRQ>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
<<<<<<< HEAD
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_I2C1_Init+0xec>)
 800143c:	f7ff ff72 	bl	8001324 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001440:	4813      	ldr	r0, [pc, #76]	; (8001490 <MX_I2C1_Init+0xec>)
 8001442:	f7ff ff4c 	bl	80012de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <MX_I2C1_Init+0xec>)
 8001448:	f7ff ff39 	bl	80012be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_I2C1_Init+0xf0>)
 8001452:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800146a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_I2C1_Init+0xec>)
 8001478:	f005 f844 	bl	8006504 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800147c:	2100      	movs	r1, #0
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_I2C1_Init+0xec>)
 8001480:	f7ff ff3d 	bl	80012fe <LL_I2C_SetOwnAddress2>

}
 8001484:	bf00      	nop
 8001486:	3738      	adds	r7, #56	; 0x38
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020400 	.word	0x40020400
 8001490:	40005400 	.word	0x40005400
 8001494:	000186a0 	.word	0x000186a0

08001498 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	; 0x38
 800149c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	2220      	movs	r2, #32
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00a fd01 	bl	800beae <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80014bc:	2020      	movs	r0, #32
 80014be:	f7ff ff41 	bl	8001344 <LL_AHB1_GRP1_EnableClock>
=======
 80014ea:	4815      	ldr	r0, [pc, #84]	; (8001540 <MX_I2C1_Init+0xec>)
 80014ec:	f7ff ff72 	bl	80013d4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_I2C1_Init+0xec>)
 80014f2:	f7ff ff4c 	bl	800138e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <MX_I2C1_Init+0xec>)
 80014f8:	f7ff ff39 	bl	800136e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_I2C1_Init+0xf0>)
 8001502:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800151a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_I2C1_Init+0xec>)
 8001528:	f005 ffd2 	bl	80074d0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800152c:	2100      	movs	r1, #0
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_I2C1_Init+0xec>)
 8001530:	f7ff ff3d 	bl	80013ae <LL_I2C_SetOwnAddress2>

}
 8001534:	bf00      	nop
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40020400 	.word	0x40020400
 8001540:	40005400 	.word	0x40005400
 8001544:	000186a0 	.word	0x000186a0

08001548 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	2220      	movs	r2, #32
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f019 f9ea 	bl	801a930 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800156c:	2020      	movs	r0, #32
 800156e:	f7ff ff41 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
<<<<<<< HEAD
 80014c2:	2303      	movs	r3, #3
 80014c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014c6:	2302      	movs	r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80014d6:	2304      	movs	r3, #4
 80014d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <MX_I2C2_Init+0xa8>)
 80014e0:	f004 fe8f 	bl	8006202 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80014e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014e8:	f7ff ff44 	bl	8001374 <LL_APB1_GRP1_EnableClock>
=======
 8001572:	2303      	movs	r3, #3
 8001574:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001576:	2302      	movs	r3, #2
 8001578:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001586:	2304      	movs	r3, #4
 8001588:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_I2C2_Init+0xa8>)
 8001590:	f005 fe1d 	bl	80071ce <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001594:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001598:	f7ff ff44 	bl	8001424 <LL_APB1_GRP1_EnableClock>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
<<<<<<< HEAD
 80014ec:	4815      	ldr	r0, [pc, #84]	; (8001544 <MX_I2C2_Init+0xac>)
 80014ee:	f7ff ff19 	bl	8001324 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <MX_I2C2_Init+0xac>)
 80014f4:	f7ff fef3 	bl	80012de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <MX_I2C2_Init+0xac>)
 80014fa:	f7ff fee0 	bl	80012be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C2_Init+0xb0>)
 8001504:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800151c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4619      	mov	r1, r3
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_I2C2_Init+0xac>)
 800152a:	f004 ffeb 	bl	8006504 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800152e:	2100      	movs	r1, #0
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_I2C2_Init+0xac>)
 8001532:	f7ff fee4 	bl	80012fe <LL_I2C_SetOwnAddress2>

}
 8001536:	bf00      	nop
 8001538:	3738      	adds	r7, #56	; 0x38
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021400 	.word	0x40021400
 8001544:	40005800 	.word	0x40005800
 8001548:	000186a0 	.word	0x000186a0

0800154c <F_I2C1_WriteValue>:
/* USER CODE BEGIN 1 */

/**
 * Write a single value in a slave register
 */
int F_I2C1_WriteValue(uint8_t slave_addr, uint8_t value){
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4613      	mov	r3, r2
 800155a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i

	__disable_irq();

	int i2c_status = I2C_STATUS_OK;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
	uint32_t timeout = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
//	uint16_t i = 0;

	// Send start
	I2C1->CR1 |= I2C_CR1_START; // send START bit
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a27      	ldr	r2, [pc, #156]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8001572:	e008      	b.n	8001586 <F_I2C1_WriteValue+0x3a>
		if(timeout > I2C_TIMEOUT){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <F_I2C1_WriteValue+0xc0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <F_I2C1_WriteValue+0x34>
			//printf("Erreur : Start Condition \n");
			return I2C_STATUS_KO;
 800157c:	2300      	movs	r3, #0
 800157e:	e03c      	b.n	80015fa <F_I2C1_WriteValue+0xae>
		}
	timeout++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <F_I2C1_WriteValue+0x28>
	}
	timeout=0;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C1->DR = (slave_addr<<1) & 0xFE  ;	// address + write
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 800159c:	b2db      	uxtb	r3, r3
 800159e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80015a0:	e008      	b.n	80015b4 <F_I2C1_WriteValue+0x68>
		if(timeout > I2C_TIMEOUT){
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <F_I2C1_WriteValue+0xc0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <F_I2C1_WriteValue+0x62>
			//printf("Erreur : Send slave address \n");
			return I2C_STATUS_KO;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e025      	b.n	80015fa <F_I2C1_WriteValue+0xae>
		}
		timeout++;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <F_I2C1_WriteValue+0x56>
	}
	timeout=0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
	i2c_status = I2C1->SR2; // read status to clear flag
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60bb      	str	r3, [r7, #8]

	// Send register address
	I2C1->DR = value;
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	6113      	str	r3, [r2, #16]
	while ((!(I2C1->SR1 & I2C_SR1_TXE)) && (!(I2C1->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80015d0:	bf00      	nop
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <F_I2C1_WriteValue+0x9e>
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f3      	beq.n	80015d2 <F_I2C1_WriteValue+0x86>


	I2C1->CR1 |= I2C_CR1_STOP; // send STOP bit
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015f6:	b662      	cpsie	i

	__enable_irq();

	return i2c_status;
 80015f8:	68bb      	ldr	r3, [r7, #8]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40005400 	.word	0x40005400
 800160c:	000186a0 	.word	0x000186a0

08001610 <LL_I2C_Enable>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <main>:
=======
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <MX_I2C2_Init+0xac>)
 800159e:	f7ff ff19 	bl	80013d4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <MX_I2C2_Init+0xac>)
 80015a4:	f7ff fef3 	bl	800138e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_I2C2_Init+0xac>)
 80015aa:	f7ff fee0 	bl	800136e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_I2C2_Init+0xb0>)
 80015b4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80015c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80015cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80015d2:	f107 0318 	add.w	r3, r7, #24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_I2C2_Init+0xac>)
 80015da:	f005 ff79 	bl	80074d0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 80015de:	2100      	movs	r1, #0
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_I2C2_Init+0xac>)
 80015e2:	f7ff fee4 	bl	80013ae <LL_I2C_SetOwnAddress2>

}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	; 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40005800 	.word	0x40005800
 80015f8:	000186a0 	.word	0x000186a0

080015fc <main>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
=======
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001634:	f000 fe48 	bl	80022c8 <HAL_Init>
=======
 8001600:	f000 feb2 	bl	8002368 <HAL_Init>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8001638:	f000 f81a 	bl	8001670 <SystemClock_Config>
=======
 8001604:	f000 f816 	bl	8001634 <SystemClock_Config>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800163c:	f7ff fb62 	bl	8000d04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001640:	f000 fd5e 	bl	8002100 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001644:	f7ff feae 	bl	80013a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001648:	f7ff ff26 	bl	8001498 <MX_I2C2_Init>
  MX_TIM4_Init();
 800164c:	f000 fae0 	bl	8001c10 <MX_TIM4_Init>
  MX_UART4_Init();
 8001650:	f000 fd2c 	bl	80020ac <MX_UART4_Init>
  MX_TIM2_Init();
 8001654:	f000 f9e8 	bl	8001a28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001658:	f000 fa60 	bl	8001b1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Init_Motors();
  LL_I2C_Enable(I2C1);
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <main+0x3c>)
 800165e:	f7ff ffd7 	bl	8001610 <LL_I2C_Enable>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001662:	f7ff fa8b 	bl	8000b7c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001666:	f008 f859 	bl	800971c <osKernelStart>
=======
 8001608:	f7ff fbb2 	bl	8000d70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800160c:	f000 fdc8 	bl	80021a0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001610:	f7ff ff20 	bl	8001454 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001614:	f7ff ff98 	bl	8001548 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001618:	f000 fb4a 	bl	8001cb0 <MX_TIM4_Init>
  MX_UART4_Init();
 800161c:	f000 fd96 	bl	800214c <MX_UART4_Init>
  MX_TIM2_Init();
 8001620:	f000 fa52 	bl	8001ac8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001624:	f000 faca 	bl	8001bbc <MX_TIM3_Init>
  //Init_Motors();
 // LL_I2C_Enable(I2C1);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001628:	f7ff faf2 	bl	8000c10 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800162c:	f009 fcdc 	bl	800afe8 <osKernelStart>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 800166a:	e7fe      	b.n	800166a <main+0x3a>
 800166c:	40005400 	.word	0x40005400

08001670 <SystemClock_Config>:
=======
 8001630:	e7fe      	b.n	8001630 <main+0x34>
	...

08001634 <SystemClock_Config>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	2230      	movs	r2, #48	; 0x30
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f00a fc15 	bl	800beae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
=======
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f019 f974 	bl	801a930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <SystemClock_Config+0xcc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <SystemClock_Config+0xcc>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <SystemClock_Config+0xd0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <SystemClock_Config+0xd0>)
 80016ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e0:	2304      	movs	r3, #4
 80016e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e4:	23a8      	movs	r3, #168	; 0xa8
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ec:	2307      	movs	r3, #7
 80016ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 fb19 	bl	8003d2c <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001700:	f000 f832 	bl	8001768 <Error_Handler>
=======
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <SystemClock_Config+0xcc>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <SystemClock_Config+0xcc>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <SystemClock_Config+0xcc>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <SystemClock_Config+0xd0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <SystemClock_Config+0xd0>)
 800167e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <SystemClock_Config+0xd0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001690:	2301      	movs	r3, #1
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a4:	2304      	movs	r3, #4
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016a8:	23a8      	movs	r3, #168	; 0xa8
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016b0:	2307      	movs	r3, #7
 80016b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 fb1d 	bl	8004cf8 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016c4:	f000 f832 	bl	800172c <Error_Handler>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001704:	230f      	movs	r3, #15
 8001706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001710:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2105      	movs	r1, #5
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fd44 	bl	80041b0 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172e:	f000 f81b 	bl	8001768 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <HAL_TIM_PeriodElapsedCallback>:
=======
 80016c8:	230f      	movs	r3, #15
 80016ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2105      	movs	r1, #5
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fd48 	bl	800517c <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016f2:	f000 f81b 	bl	800172c <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	; 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
=======
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
<<<<<<< HEAD
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001756:	f000 fdd9 	bl	800230c <HAL_IncTick>
=======
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800171a:	f000 fe47 	bl	80023ac <HAL_IncTick>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40014400 	.word	0x40014400

08001768 <Error_Handler>:
=======
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40014400 	.word	0x40014400

0800172c <Error_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
=======
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_MspInit>:
=======
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_MspInit>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
=======
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_MspInit+0x54>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_MspInit+0x54>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_MspInit+0x54>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_MspInit+0x54>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_MspInit+0x54>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_MspInit+0x54>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
=======
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_MspInit+0x54>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <HAL_MspInit+0x54>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_MspInit+0x54>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_MspInit+0x54>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_MspInit+0x54>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_MspInit+0x54>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 80017b6:	2200      	movs	r2, #0
 80017b8:	210f      	movs	r1, #15
 80017ba:	f06f 0001 	mvn.w	r0, #1
 80017be:	f000 fe9f 	bl	8002500 <HAL_NVIC_SetPriority>
=======
 800177a:	2200      	movs	r2, #0
 800177c:	210f      	movs	r1, #15
 800177e:	f06f 0001 	mvn.w	r0, #1
 8001782:	f000 ff0d 	bl	80025a0 <HAL_NVIC_SetPriority>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_InitTick>:
=======
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_InitTick>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
<<<<<<< HEAD
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	2019      	movs	r0, #25
 80017e6:	f000 fe8b 	bl	8002500 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80017ea:	2019      	movs	r0, #25
 80017ec:	f000 fea4 	bl	8002538 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_InitTick+0xa4>)
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <HAL_InitTick+0xa4>)
 80017fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_InitTick+0xa4>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f002 feb8 	bl	800458c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800181c:	f002 fea2 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8001820:	4603      	mov	r3, r0
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_InitTick+0xa8>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	3b01      	subs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_InitTick+0xac>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_InitTick+0xb0>)
 8001838:	601a      	str	r2, [r3, #0]
=======
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	2019      	movs	r0, #25
 80017aa:	f000 fef9 	bl	80025a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80017ae:	2019      	movs	r0, #25
 80017b0:	f000 ff12 	bl	80025d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_InitTick+0xa4>)
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_InitTick+0xa4>)
 80017be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c2:	6453      	str	r3, [r2, #68]	; 0x44
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_InitTick+0xa4>)
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d0:	f107 0210 	add.w	r2, r7, #16
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 febc 	bl	8005558 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80017e0:	f003 fea6 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 80017e4:	4603      	mov	r3, r0
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_InitTick+0xa8>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0c9b      	lsrs	r3, r3, #18
 80017f4:	3b01      	subs	r3, #1
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_InitTick+0xac>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <HAL_InitTick+0xb0>)
 80017fc:	601a      	str	r2, [r3, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
<<<<<<< HEAD
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_InitTick+0xac>)
 800183c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001840:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_InitTick+0xac>)
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_InitTick+0xac>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_InitTick+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_InitTick+0xac>)
 8001856:	f002 fecb 	bl	80045f0 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <HAL_InitTick+0xac>)
 8001862:	f002 fef0 	bl	8004646 <HAL_TIM_Base_Start_IT>
 8001866:	4603      	mov	r3, r0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x9c>
=======
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_InitTick+0xac>)
 8001800:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001804:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_InitTick+0xac>)
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_InitTick+0xac>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_InitTick+0xac>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_InitTick+0xac>)
 800181a:	f003 fecf 	bl	80055bc <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d104      	bne.n	800182e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <HAL_InitTick+0xac>)
 8001826:	f003 fef4 	bl	8005612 <HAL_TIM_Base_Start_IT>
 800182a:	4603      	mov	r3, r0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x9c>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  
  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	431bde83 	.word	0x431bde83
 800187c:	200041ec 	.word	0x200041ec
 8001880:	40014400 	.word	0x40014400

08001884 <NMI_Handler>:
=======
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	431bde83 	.word	0x431bde83
 8001840:	20004380 	.word	0x20004380
 8001844:	40014400 	.word	0x40014400

08001848 <NMI_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
=======
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HardFault_Handler>:
=======
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HardFault_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
=======
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:
=======
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
=======
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:
=======
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
=======
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:
=======
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
=======
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <DebugMon_Handler>:
=======
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <DebugMon_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
=======
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <TIM1_UP_TIM10_IRQHandler>:
=======
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
=======
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
<<<<<<< HEAD
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018be:	f002 ff50 	bl	8004762 <HAL_TIM_IRQHandler>
=======
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001882:	f003 ff54 	bl	800572e <HAL_TIM_IRQHandler>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200041ec 	.word	0x200041ec

080018cc <I2C1_EV_IRQHandler>:
=======
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20004380 	.word	0x20004380

08001890 <I2C1_EV_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
<<<<<<< HEAD
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
=======
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE END I2C1_EV_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
<<<<<<< HEAD
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <I2C1_ER_IRQHandler>:
=======
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <I2C1_ER_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
<<<<<<< HEAD
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
=======
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE END I2C1_ER_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
<<<<<<< HEAD
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <USART3_IRQHandler>:
=======
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <USART3_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< HEAD
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
=======
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< HEAD
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <UART4_IRQHandler>:
=======
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <UART4_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
<<<<<<< HEAD
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(UART4->SR & USART_SR_RXNE){
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <UART4_IRQHandler+0x34>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <UART4_IRQHandler+0x2a>
		UART4->SR &= ~USART_SR_RXNE;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <UART4_IRQHandler+0x34>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <UART4_IRQHandler+0x34>)
 800190e:	f023 0320 	bic.w	r3, r3, #32
 8001912:	6013      	str	r3, [r2, #0]

		F_GPIO_ToogleLed3();
 8001914:	f7ff fbf6 	bl	8001104 <F_GPIO_ToogleLed3>
		g_uart_buff = UART4->DR;
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <UART4_IRQHandler+0x34>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <UART4_IRQHandler+0x38>)
 8001920:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001922:	4804      	ldr	r0, [pc, #16]	; (8001934 <UART4_IRQHandler+0x3c>)
 8001924:	f003 ff22 	bl	800576c <HAL_UART_IRQHandler>
=======
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(UART4->SR & USART_SR_RXNE){
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <UART4_IRQHandler+0x34>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00c      	beq.n	80018e6 <UART4_IRQHandler+0x2a>
		UART4->SR &= ~USART_SR_RXNE;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <UART4_IRQHandler+0x34>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <UART4_IRQHandler+0x34>)
 80018d2:	f023 0320 	bic.w	r3, r3, #32
 80018d6:	6013      	str	r3, [r2, #0]

		F_GPIO_ToogleLed3();
 80018d8:	f7ff fca4 	bl	8001224 <F_GPIO_ToogleLed3>
		g_uart_buff = UART4->DR;
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <UART4_IRQHandler+0x34>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <UART4_IRQHandler+0x38>)
 80018e4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <UART4_IRQHandler+0x3c>)
 80018e8:	f004 ff26 	bl	8006738 <HAL_UART_IRQHandler>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
<<<<<<< HEAD
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40004c00 	.word	0x40004c00
 8001930:	2000422c 	.word	0x2000422c
 8001934:	200042f0 	.word	0x200042f0

08001938 <ETH_IRQHandler>:
=======
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40004c00 	.word	0x40004c00
 80018f4:	200043c0 	.word	0x200043c0
 80018f8:	20004484 	.word	0x20004484

080018fc <ETH_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
<<<<<<< HEAD
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
=======
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
<<<<<<< HEAD
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <ETH_IRQHandler+0x10>)
 800193e:	f000 fe2b 	bl	8002598 <HAL_ETH_IRQHandler>
=======
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <ETH_IRQHandler+0x10>)
 8001902:	f001 fa7f 	bl	8002e04 <HAL_ETH_IRQHandler>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
<<<<<<< HEAD
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20005c04 	.word	0x20005c04

0800194c <OTG_FS_IRQHandler>:
=======
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20005de8 	.word	0x20005de8

08001910 <OTG_FS_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
<<<<<<< HEAD
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
=======
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
<<<<<<< HEAD
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <OTG_FS_IRQHandler+0x10>)
 8001952:	f001 f9b0 	bl	8002cb6 <HAL_PCD_IRQHandler>
=======
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <OTG_FS_IRQHandler+0x10>)
 8001916:	f002 f9b4 	bl	8003c82 <HAL_PCD_IRQHandler>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
<<<<<<< HEAD
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200088c0 	.word	0x200088c0

08001960 <_sbrk>:
=======
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000c010 	.word	0x2000c010

08001924 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
	}

return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
	}
	return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019be:	605a      	str	r2, [r3, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
<<<<<<< HEAD
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
=======
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
<<<<<<< HEAD
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x50>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x16>
		heap_end = &end;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <_sbrk+0x50>)
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <_sbrk+0x54>)
 8001974:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <_sbrk+0x50>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <_sbrk+0x50>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	466a      	mov	r2, sp
 8001986:	4293      	cmp	r3, r2
 8001988:	d905      	bls.n	8001996 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <_sbrk+0x58>)
 800198c:	220c      	movs	r2, #12
 800198e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001994:	e006      	b.n	80019a4 <_sbrk+0x44>
	}

	heap_end += incr;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <_sbrk+0x50>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <_sbrk+0x50>)
 80019a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20000450 	.word	0x20000450
 80019b4:	20008cc8 	.word	0x20008cc8
 80019b8:	2000741c 	.word	0x2000741c

080019bc <SystemInit>:
=======
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x50>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x16>
		heap_end = &end;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <_sbrk+0x50>)
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <_sbrk+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <_sbrk+0x50>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <_sbrk+0x50>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	466a      	mov	r2, sp
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d905      	bls.n	8001a36 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <_sbrk+0x58>)
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a34:	e006      	b.n	8001a44 <_sbrk+0x44>
	}

	heap_end += incr;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <_sbrk+0x50>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <_sbrk+0x50>)
 8001a40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	2000045c 	.word	0x2000045c
 8001a54:	2000c418 	.word	0x2000c418
 8001a58:	2000ab6c 	.word	0x2000ab6c

08001a5c <SystemInit>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <SystemInit+0x60>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <SystemInit+0x60>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <SystemInit+0x60>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <SystemInit+0x60>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
<<<<<<< HEAD
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <SystemInit+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <SystemInit+0x64>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SystemInit+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <SystemInit+0x64>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <SystemInit+0x64>)
 80019e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <SystemInit+0x64>)
 80019f4:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <SystemInit+0x68>)
 80019f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <SystemInit+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <SystemInit+0x64>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <SystemInit+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
=======
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <SystemInit+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <SystemInit+0x64>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <SystemInit+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <SystemInit+0x64>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <SystemInit+0x64>)
 8001a88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <SystemInit+0x64>)
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <SystemInit+0x68>)
 8001a96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <SystemInit+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <SystemInit+0x64>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SystemInit+0x60>)
 8001a0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a10:	609a      	str	r2, [r3, #8]
#endif
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	24003010 	.word	0x24003010

08001a28 <MX_TIM2_Init>:
=======
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SystemInit+0x60>)
 8001aac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab0:	609a      	str	r2, [r3, #8]
#endif
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	24003010 	.word	0x24003010

08001ac8 <MX_TIM2_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a78:	4827      	ldr	r0, [pc, #156]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a7a:	f002 fdb9 	bl	80045f0 <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001a84:	f7ff fe70 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	4619      	mov	r1, r3
 8001a94:	4820      	ldr	r0, [pc, #128]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a96:	f003 f8cf 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001aa0:	f7ff fe62 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001aa4:	481c      	ldr	r0, [pc, #112]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001aa6:	f002 fe27 	bl	80046f8 <HAL_TIM_IC_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ab0:	f7ff fe5a 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4815      	ldr	r0, [pc, #84]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001ac4:	f003 fdac 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001ace:	f7ff fe4b 	bl	8001768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001aea:	f002 ff42 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001af4:	f7ff fe38 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	2204      	movs	r2, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001b00:	f002 ff37 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001b0a:	f7ff fe2d 	bl	8001768 <Error_Handler>
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200042b0 	.word	0x200042b0

08001b1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <MX_TIM3_Init+0xf0>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b6a:	4827      	ldr	r0, [pc, #156]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b6c:	f002 fd40 	bl	80045f0 <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8001b76:	f7ff fdf7 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4619      	mov	r1, r3
 8001b86:	4820      	ldr	r0, [pc, #128]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b88:	f003 f856 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001b92:	f7ff fde9 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b96:	481c      	ldr	r0, [pc, #112]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b98:	f002 fdae 	bl	80046f8 <HAL_TIM_IC_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ba2:	f7ff fde1 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4814      	ldr	r0, [pc, #80]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001bb6:	f003 fd33 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001bc0:	f7ff fdd2 	bl	8001768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001bdc:	f002 fec9 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8001be6:	f7ff fdbf 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	2204      	movs	r2, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001bf2:	f002 febe 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001bfc:	f7ff fdb4 	bl	8001768 <Error_Handler>
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20004270 	.word	0x20004270
 8001c0c:	40000400 	.word	0x40000400

08001c10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c42:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <MX_TIM4_Init+0x104>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2250;
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c54:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c66:	482a      	ldr	r0, [pc, #168]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c68:	f002 fcc2 	bl	80045f0 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001c72:	f7ff fd79 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4823      	ldr	r0, [pc, #140]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c84:	f002 ffd8 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c8e:	f7ff fd6b 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c92:	481f      	ldr	r0, [pc, #124]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c94:	f002 fcfb 	bl	800468e <HAL_TIM_PWM_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c9e:	f7ff fd63 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4817      	ldr	r0, [pc, #92]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001cb2:	f003 fcb5 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001cbc:	f7ff fd54 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc0:	2360      	movs	r3, #96	; 0x60
 8001cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8001cc4:	2314      	movs	r3, #20
 8001cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480e      	ldr	r0, [pc, #56]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001cd8:	f002 fee8 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ce2:	f7ff fd41 	bl	8001768 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	220c      	movs	r2, #12
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001cf2:	f002 fedb 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001cfc:	f7ff fd34 	bl	8001768 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001d02:	f000 f8b9 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001d06:	bf00      	nop
 8001d08:	3738      	adds	r7, #56	; 0x38
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20004230 	.word	0x20004230
 8001d14:	40000800 	.word	0x40000800

08001d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d14b      	bne.n	8001dd2 <HAL_TIM_Base_MspInit+0xba>
=======
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001af2:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001afa:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b18:	4827      	ldr	r0, [pc, #156]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b1a:	f003 fd4f 	bl	80055bc <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001b24:	f7ff fe02 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	4619      	mov	r1, r3
 8001b34:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b36:	f004 f865 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001b40:	f7ff fdf4 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b46:	f003 fdbd 	bl	80056c4 <HAL_TIM_IC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b50:	f7ff fdec 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b64:	f004 fd42 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001b6e:	f7ff fddd 	bl	800172c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b72:	230a      	movs	r3, #10
 8001b74:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b76:	2301      	movs	r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001b8a:	f003 fed8 	bl	800593e <HAL_TIM_IC_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001b94:	f7ff fdca 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM2_Init+0xf0>)
 8001ba0:	f003 fecd 	bl	800593e <HAL_TIM_IC_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001baa:	f7ff fdbf 	bl	800172c <Error_Handler>
  }

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20004444 	.word	0x20004444

08001bbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001be8:	4a30      	ldr	r2, [pc, #192]	; (8001cac <MX_TIM3_Init+0xf0>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0a:	4827      	ldr	r0, [pc, #156]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c0c:	f003 fcd6 	bl	80055bc <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8001c16:	f7ff fd89 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c20:	f107 0318 	add.w	r3, r7, #24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4820      	ldr	r0, [pc, #128]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c28:	f003 ffec 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001c32:	f7ff fd7b 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001c36:	481c      	ldr	r0, [pc, #112]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c38:	f003 fd44 	bl	80056c4 <HAL_TIM_IC_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c42:	f7ff fd73 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4619      	mov	r1, r3
 8001c54:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c56:	f004 fcc9 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001c60:	f7ff fd64 	bl	800172c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001c64:	230a      	movs	r3, #10
 8001c66:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c7c:	f003 fe5f 	bl	800593e <HAL_TIM_IC_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8001c86:	f7ff fd51 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_TIM3_Init+0xec>)
 8001c92:	f003 fe54 	bl	800593e <HAL_TIM_IC_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001c9c:	f7ff fd46 	bl	800172c <Error_Handler>
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20004404 	.word	0x20004404
 8001cac:	40000400 	.word	0x40000400

08001cb0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08e      	sub	sp, #56	; 0x38
 8001cb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001ce0:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001ce2:	4a34      	ldr	r2, [pc, #208]	; (8001db4 <MX_TIM4_Init+0x104>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001ce6:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2250;
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001cf4:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001cf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d06:	482a      	ldr	r0, [pc, #168]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001d08:	f003 fc58 	bl	80055bc <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d12:	f7ff fd0b 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4823      	ldr	r0, [pc, #140]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001d24:	f003 ff6e 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d2e:	f7ff fcfd 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d32:	481f      	ldr	r0, [pc, #124]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001d34:	f003 fc91 	bl	800565a <HAL_TIM_PWM_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d3e:	f7ff fcf5 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4817      	ldr	r0, [pc, #92]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001d52:	f004 fc4b 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d5c:	f7ff fce6 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d60:	2360      	movs	r3, #96	; 0x60
 8001d62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8001d64:	2314      	movs	r3, #20
 8001d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2208      	movs	r2, #8
 8001d74:	4619      	mov	r1, r3
 8001d76:	480e      	ldr	r0, [pc, #56]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001d78:	f003 fe7e 	bl	8005a78 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001d82:	f7ff fcd3 	bl	800172c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4807      	ldr	r0, [pc, #28]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001d92:	f003 fe71 	bl	8005a78 <HAL_TIM_PWM_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001d9c:	f7ff fcc6 	bl	800172c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <MX_TIM4_Init+0x100>)
 8001da2:	f000 f8b9 	bl	8001f18 <HAL_TIM_MspPostInit>

}
 8001da6:	bf00      	nop
 8001da8:	3738      	adds	r7, #56	; 0x38
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200043c4 	.word	0x200043c4
 8001db4:	40000800 	.word	0x40000800

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	; 0x38
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd8:	d14b      	bne.n	8001e72 <HAL_TIM_Base_MspInit+0xba>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a41      	ldr	r2, [pc, #260]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
=======
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a48      	ldr	r2, [pc, #288]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a41      	ldr	r2, [pc, #260]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = QEI_M1_CH1_Pin;
<<<<<<< HEAD
 8001d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da0:	2301      	movs	r3, #1
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	482f      	ldr	r0, [pc, #188]	; (8001e68 <HAL_TIM_Base_MspInit+0x150>)
 8001dac:	f000 fc70 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 8001db0:	2308      	movs	r3, #8
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4828      	ldr	r0, [pc, #160]	; (8001e6c <HAL_TIM_Base_MspInit+0x154>)
 8001dcc:	f000 fc60 	bl	8002690 <HAL_GPIO_Init>
=======
 8001e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e40:	2301      	movs	r3, #1
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	482f      	ldr	r0, [pc, #188]	; (8001f08 <HAL_TIM_Base_MspInit+0x150>)
 8001e4c:	f001 fc06 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 8001e50:	2308      	movs	r3, #8
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e60:	2301      	movs	r3, #1
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4828      	ldr	r0, [pc, #160]	; (8001f0c <HAL_TIM_Base_MspInit+0x154>)
 8001e6c:	f001 fbf6 	bl	800365c <HAL_GPIO_Init>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001dd0:	e044      	b.n	8001e5c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM3)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_TIM_Base_MspInit+0x158>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d12c      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8001e14:	2330      	movs	r3, #48	; 0x30
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e24:	2302      	movs	r3, #2
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <HAL_TIM_Base_MspInit+0x154>)
 8001e30:	f000 fc2e 	bl	8002690 <HAL_GPIO_Init>
}
 8001e34:	e012      	b.n	8001e5c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM4)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_TIM_Base_MspInit+0x15c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d10d      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3738      	adds	r7, #56	; 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40000800 	.word	0x40000800

08001e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_TIM_MspPostInit+0x68>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d11e      	bne.n	8001ed8 <HAL_TIM_MspPostInit+0x60>
=======
 8001e70:	e044      	b.n	8001efc <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM3)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <HAL_TIM_Base_MspInit+0x158>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12c      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8001eb4:	2330      	movs	r3, #48	; 0x30
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480f      	ldr	r0, [pc, #60]	; (8001f0c <HAL_TIM_Base_MspInit+0x154>)
 8001ed0:	f001 fbc4 	bl	800365c <HAL_GPIO_Init>
}
 8001ed4:	e012      	b.n	8001efc <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_TIM_Base_MspInit+0x15c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d10d      	bne.n	8001efc <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_TIM_Base_MspInit+0x14c>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3738      	adds	r7, #56	; 0x38
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800

08001f18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11e      	bne.n	8001f78 <HAL_TIM_MspPostInit+0x60>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
<<<<<<< HEAD
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
=======
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_TIM_MspPostInit+0x6c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_TIM_MspPostInit+0x6c>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_TIM_MspPostInit+0x6c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = CMD_MOTEUR_DROIT_Pin|CMD_MOTEUR_GAUCHE_Pin;
<<<<<<< HEAD
 8001eb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_TIM_MspPostInit+0x70>)
 8001ed4:	f000 fbdc 	bl	8002690 <HAL_GPIO_Init>
=======
 8001f56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_TIM_MspPostInit+0x70>)
 8001f74:	f001 fb72 	bl	800365c <HAL_GPIO_Init>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020c00 	.word	0x40020c00

08001eec <__NVIC_GetPriorityGrouping>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4907      	ldr	r1, [pc, #28]	; (8001f40 <__NVIC_EnableIRQ+0x38>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_USART_Enable>:
=======
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40000800 	.word	0x40000800
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020c00 	.word	0x40020c00

08001f8c <__NVIC_GetPriorityGrouping>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_USART_Enable>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
<<<<<<< HEAD
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60da      	str	r2, [r3, #12]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_USART_ConfigAsyncMode>:
=======
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60da      	str	r2, [r3, #12]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_USART_ConfigAsyncMode>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
<<<<<<< HEAD
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
=======
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	615a      	str	r2, [r3, #20]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <LL_AHB1_GRP1_EnableClock>:
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4013      	ands	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40023800 	.word	0x40023800

0800207c <LL_APB1_GRP1_EnableClock>:
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
=======
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	615a      	str	r2, [r3, #20]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <LL_AHB1_GRP1_EnableClock>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	4907      	ldr	r1, [pc, #28]	; (8002118 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4013      	ands	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  (void)tmpreg;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40023800 	.word	0x40023800

<<<<<<< HEAD
080020ac <MX_UART4_Init>:
=======
0800211c <LL_APB1_GRP1_EnableClock>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4313      	orrs	r3, r2
 800212e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40023800 	.word	0x40023800

0800214c <MX_UART4_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
<<<<<<< HEAD
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MX_UART4_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80020bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020e4:	f003 faf5 	bl	80056d2 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80020ee:	f7ff fb3b 	bl	8001768 <Error_Handler>
  }

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200042f0 	.word	0x200042f0
 80020fc:	40004c00 	.word	0x40004c00

08002100 <MX_USART3_UART_Init>:
=======
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_UART4_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <MX_UART4_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_UART4_Init+0x4c>)
 8002158:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800215c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_UART4_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_UART4_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_UART4_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_UART4_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_UART4_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_UART4_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_UART4_Init+0x4c>)
 8002184:	f004 fa8b 	bl	800669e <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800218e:	f7ff facd 	bl	800172c <Error_Handler>
  }

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20004484 	.word	0x20004484
 800219c:	40004c00 	.word	0x40004c00

080021a0 <MX_USART3_UART_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800212a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800212e:	f7ff ffa5 	bl	800207c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002132:	2008      	movs	r0, #8
 8002134:	f7ff ff8a 	bl	800204c <LL_AHB1_GRP1_EnableClock>
=======
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
 80021c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80021ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80021ce:	f7ff ffa5 	bl	800211c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80021d2:	2008      	movs	r0, #8
 80021d4:	f7ff ff8a 	bl	80020ec <LL_AHB1_GRP1_EnableClock>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
<<<<<<< HEAD
 8002138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800213c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800213e:	2302      	movs	r3, #2
 8002140:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800214a:	2301      	movs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800214e:	2307      	movs	r3, #7
 8002150:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4819      	ldr	r0, [pc, #100]	; (80021bc <MX_USART3_UART_Init+0xbc>)
 8002158:	f004 f853 	bl	8006202 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800215c:	f7ff fec6 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002160:	4603      	mov	r3, r0
 8002162:	2200      	movs	r2, #0
 8002164:	2105      	movs	r1, #5
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff16 	bl	8001f98 <NVIC_EncodePriority>
 800216c:	4603      	mov	r3, r0
 800216e:	4619      	mov	r1, r3
 8002170:	2027      	movs	r0, #39	; 0x27
 8002172:	f7ff fee7 	bl	8001f44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002176:	2027      	movs	r0, #39	; 0x27
 8002178:	f7ff fec6 	bl	8001f08 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 57600;
 800217c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002180:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800218e:	230c      	movs	r3, #12
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002192:	2300      	movs	r3, #0
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002196:	2300      	movs	r3, #0
 8002198:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_USART3_UART_Init+0xc0>)
 80021a2:	f004 fc11 	bl	80069c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <MX_USART3_UART_Init+0xc0>)
 80021a8:	f7ff ff39 	bl	800201e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_USART3_UART_Init+0xc0>)
 80021ae:	f7ff ff26 	bl	8001ffe <LL_USART_Enable>

}
 80021b2:	bf00      	nop
 80021b4:	3738      	adds	r7, #56	; 0x38
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40004800 	.word	0x40004800

080021c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <HAL_UART_MspInit+0xa4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d13c      	bne.n	8002260 <HAL_UART_MspInit+0x9c>
=======
 80021d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021de:	2302      	movs	r3, #2
 80021e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80021ee:	2307      	movs	r3, #7
 80021f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4819      	ldr	r0, [pc, #100]	; (800225c <MX_USART3_UART_Init+0xbc>)
 80021f8:	f004 ffe9 	bl	80071ce <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80021fc:	f7ff fec6 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 8002200:	4603      	mov	r3, r0
 8002202:	2200      	movs	r2, #0
 8002204:	2105      	movs	r1, #5
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff16 	bl	8002038 <NVIC_EncodePriority>
 800220c:	4603      	mov	r3, r0
 800220e:	4619      	mov	r1, r3
 8002210:	2027      	movs	r0, #39	; 0x27
 8002212:	f7ff fee7 	bl	8001fe4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002216:	2027      	movs	r0, #39	; 0x27
 8002218:	f7ff fec6 	bl	8001fa8 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 57600;
 800221c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002220:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800222a:	2300      	movs	r3, #0
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800222e:	230c      	movs	r3, #12
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002232:	2300      	movs	r3, #0
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002236:	2300      	movs	r3, #0
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_USART3_UART_Init+0xc0>)
 8002242:	f005 fba7 	bl	8007994 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002246:	4806      	ldr	r0, [pc, #24]	; (8002260 <MX_USART3_UART_Init+0xc0>)
 8002248:	f7ff ff39 	bl	80020be <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <MX_USART3_UART_Init+0xc0>)
 800224e:	f7ff ff26 	bl	800209e <LL_USART_Enable>

}
 8002252:	bf00      	nop
 8002254:	3738      	adds	r7, #56	; 0x38
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40004800 	.word	0x40004800

08002264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_UART_MspInit+0xa4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d13c      	bne.n	8002300 <HAL_UART_MspInit+0x9c>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
<<<<<<< HEAD
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_UART_MspInit+0xa8>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_UART_MspInit+0xa8>)
 80021f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_UART_MspInit+0xa8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_UART_MspInit+0xa8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_UART_MspInit+0xa8>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_UART_MspInit+0xa8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
=======
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_UART_MspInit+0xa8>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_UART_MspInit+0xa8>)
 8002290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_UART_MspInit+0xa8>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_UART_MspInit+0xa8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_UART_MspInit+0xa8>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_UART_MspInit+0xa8>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< HEAD
 800221e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002228:	2301      	movs	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002230:	2308      	movs	r3, #8
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <HAL_UART_MspInit+0xac>)
 800223c:	f000 fa28 	bl	8002690 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2105      	movs	r1, #5
 8002244:	2034      	movs	r0, #52	; 0x34
 8002246:	f000 f95b 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800224a:	2034      	movs	r0, #52	; 0x34
 800224c:	f000 f974 	bl	8002538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */
	UART4->CR1 |= USART_CR1_UE 	// UART Enable
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_UART_MspInit+0xa4>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_UART_MspInit+0xa4>)
 8002256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800225a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800225e:	60d3      	str	r3, [r2, #12]
=======
 80022be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022d0:	2308      	movs	r3, #8
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <HAL_UART_MspInit+0xac>)
 80022dc:	f001 f9be 	bl	800365c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2105      	movs	r1, #5
 80022e4:	2034      	movs	r0, #52	; 0x34
 80022e6:	f000 f95b 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80022ea:	2034      	movs	r0, #52	; 0x34
 80022ec:	f000 f974 	bl	80025d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */
	UART4->CR1 |= USART_CR1_UE 	// UART Enable
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_UART_MspInit+0xa4>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_UART_MspInit+0xa4>)
 80022f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022fa:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80022fe:	60d3      	str	r3, [r2, #12]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
				| USART_CR1_RE		// Rx enbale
				| USART_CR1_RXNEIE;	// Rx enable interrupt
  /* USER CODE END UART4_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002260:	bf00      	nop
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40004c00 	.word	0x40004c00
 800226c:	40023800 	.word	0x40023800
 8002270:	40020800 	.word	0x40020800

08002274 <Reset_Handler>:
=======
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40004c00 	.word	0x40004c00
 800230c:	40023800 	.word	0x40023800
 8002310:	40020800 	.word	0x40020800

08002314 <Reset_Handler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
<<<<<<< HEAD
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800227a:	e003      	b.n	8002284 <LoopCopyDataInit>

0800227c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800227e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002282:	3104      	adds	r1, #4

08002284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800228a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800228c:	d3f6      	bcc.n	800227c <CopyDataInit>
  ldr  r2, =_sbss
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002290:	e002      	b.n	8002298 <LoopFillZerobss>

08002292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002294:	f842 3b04 	str.w	r3, [r2], #4

08002298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800229a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800229c:	d3f9      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229e:	f7ff fb8d 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f009 fdc5 	bl	800be30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a6:	f7ff f9c3 	bl	8001630 <main>
  bx  lr    
 80022aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80022b0:	0800c924 	.word	0x0800c924
  ldr  r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022b8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80022bc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80022c0:	20008cc8 	.word	0x20008cc8

080022c4 <ADC_IRQHandler>:
=======
 8002314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800234c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002318:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800231a:	e003      	b.n	8002324 <LoopCopyDataInit>

0800231c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800231e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002320:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002322:	3104      	adds	r1, #4

08002324 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002324:	480b      	ldr	r0, [pc, #44]	; (8002354 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002328:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800232a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800232c:	d3f6      	bcc.n	800231c <CopyDataInit>
  ldr  r2, =_sbss
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002330:	e002      	b.n	8002338 <LoopFillZerobss>

08002332 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002332:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002334:	f842 3b04 	str.w	r3, [r2], #4

08002338 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800233a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800233c:	d3f9      	bcc.n	8002332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800233e:	f7ff fb8d 	bl	8001a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002342:	f018 faa7 	bl	801a894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002346:	f7ff f959 	bl	80015fc <main>
  bx  lr    
 800234a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800234c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002350:	0801e198 	.word	0x0801e198
  ldr  r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002358:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800235c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8002360:	2000c418 	.word	0x2000c418

08002364 <ADC_IRQHandler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 80022c4:	e7fe      	b.n	80022c4 <ADC_IRQHandler>
	...

080022c8 <HAL_Init>:
=======
 8002364:	e7fe      	b.n	8002364 <ADC_IRQHandler>
	...

08002368 <HAL_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_Init+0x40>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6013      	str	r3, [r2, #0]
=======
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_Init+0x40>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002376:	6013      	str	r3, [r2, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_Init+0x40>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e2:	6013      	str	r3, [r2, #0]
=======
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_Init+0x40>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002382:	6013      	str	r3, [r2, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_Init+0x40>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]
=======
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_Init+0x40>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f8fa 	bl	80024ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7ff fa6a 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fa3c 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <HAL_IncTick>:
=======
 8002390:	2003      	movs	r0, #3
 8002392:	f000 f8fa 	bl	800258a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff f9fc 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800239c:	f7ff f9ce 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00

080023ac <HAL_IncTick>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x24>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_IncTick+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000004 	.word	0x20000004
 8002330:	20004330 	.word	0x20004330

08002334 <HAL_GetTick>:
=======
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000004 	.word	0x20000004
 80023d0:	200044c4 	.word	0x200044c4

080023d4 <HAL_GetTick>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_GetTick+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20004330 	.word	0x20004330

0800234c <HAL_Delay>:
=======
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200044c4 	.word	0x200044c4

080023ec <HAL_Delay>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff ffee 	bl	8002334 <HAL_GetTick>
 8002358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002364:	d005      	beq.n	8002372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_Delay+0x40>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002372:	bf00      	nop
 8002374:	f7ff ffde 	bl	8002334 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	d8f7      	bhi.n	8002374 <HAL_Delay+0x28>
  {
  }
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000004 	.word	0x20000004

08002390 <__NVIC_SetPriorityGrouping>:
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_NVIC_SetPriorityGrouping>:
=======
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff ffee 	bl	80023d4 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002404:	d005      	beq.n	8002412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_Delay+0x40>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002412:	bf00      	nop
 8002414:	f7ff ffde 	bl	80023d4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d8f7      	bhi.n	8002414 <HAL_Delay+0x28>
  {
  }
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000004 	.word	0x20000004

08002430 <__NVIC_SetPriorityGrouping>:
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	; (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
=======
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff4c 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_NVIC_SetPriority>:
=======
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff4c 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_NVIC_SetPriority>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
=======
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002512:	f7ff ff61 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 8002516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f7ff ffb1 	bl	8002484 <NVIC_EncodePriority>
 8002522:	4602      	mov	r2, r0
 8002524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff80 	bl	8002430 <__NVIC_SetPriority>
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_NVIC_EnableIRQ>:
=======
 80025b2:	f7ff ff61 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f7ff ffb1 	bl	8002524 <NVIC_EncodePriority>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff80 	bl	80024d0 <__NVIC_SetPriority>
}
 80025d0:	bf00      	nop
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_NVIC_EnableIRQ>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
=======
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff54 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_DMA_Abort_IT>:
=======
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff54 	bl	8002494 <__NVIC_EnableIRQ>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_DMA_Abort_IT>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d004      	beq.n	8002572 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e00c      	b.n	800258c <HAL_DMA_Abort_IT+0x38>
=======
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d004      	beq.n	8002612 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00c      	b.n	800262c <HAL_DMA_Abort_IT+0x38>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2205      	movs	r2, #5
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_ETH_IRQHandler>:
=======
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2205      	movs	r2, #5
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_ETH_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
<<<<<<< HEAD
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a8:	3314      	adds	r3, #20
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d112      	bne.n	80025da <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f005 fd75 	bl	80080a4 <HAL_ETH_RxCpltCallback>
=======
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002648:	4baa      	ldr	r3, [pc, #680]	; (80028f4 <HAL_ETH_Init+0x2bc>)
 800264a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e185      	b.n	800296a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f006 fe2a 	bl	80092cc <HAL_ETH_MspInit>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c2:	3314      	adds	r3, #20
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025d8:	e01b      	b.n	8002612 <HAL_ETH_IRQHandler+0x7a>

  }
<<<<<<< HEAD
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	3314      	adds	r3, #20
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d111      	bne.n	8002612 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f839 	bl	8002666 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fc:	3314      	adds	r3, #20
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261a:	3314      	adds	r3, #20
 800261c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002620:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	3314      	adds	r3, #20
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002636:	d112      	bne.n	800265e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f81e 	bl	800267a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002646:	3314      	adds	r3, #20
 8002648:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800264c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e177      	b.n	800299c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8166 	bne.w	8002996 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x4a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d123      	bne.n	8002722 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d00b      	beq.n	8002776 <HAL_GPIO_Init+0xe6>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276a:	2b11      	cmp	r3, #17
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80c0 	beq.w	8002996 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_GPIO_Init+0x320>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a64      	ldr	r2, [pc, #400]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_GPIO_Init+0x324>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a57      	ldr	r2, [pc, #348]	; (80029b8 <HAL_GPIO_Init+0x328>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d037      	beq.n	80028ce <HAL_GPIO_Init+0x23e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_GPIO_Init+0x32c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_GPIO_Init+0x23a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a55      	ldr	r2, [pc, #340]	; (80029c0 <HAL_GPIO_Init+0x330>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d02b      	beq.n	80028c6 <HAL_GPIO_Init+0x236>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <HAL_GPIO_Init+0x334>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d025      	beq.n	80028c2 <HAL_GPIO_Init+0x232>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a53      	ldr	r2, [pc, #332]	; (80029c8 <HAL_GPIO_Init+0x338>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01f      	beq.n	80028be <HAL_GPIO_Init+0x22e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	; (80029cc <HAL_GPIO_Init+0x33c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d019      	beq.n	80028ba <HAL_GPIO_Init+0x22a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a51      	ldr	r2, [pc, #324]	; (80029d0 <HAL_GPIO_Init+0x340>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a50      	ldr	r2, [pc, #320]	; (80029d4 <HAL_GPIO_Init+0x344>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_GPIO_Init+0x222>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <HAL_GPIO_Init+0x348>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_Init+0x21e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4e      	ldr	r2, [pc, #312]	; (80029dc <HAL_GPIO_Init+0x34c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_GPIO_Init+0x21a>
 80028a6:	2309      	movs	r3, #9
 80028a8:	e012      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028aa:	230a      	movs	r3, #10
 80028ac:	e010      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ae:	2308      	movs	r3, #8
 80028b0:	e00e      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00c      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e00a      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028be:	2304      	movs	r3, #4
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4934      	ldr	r1, [pc, #208]	; (80029b4 <HAL_GPIO_Init+0x324>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_GPIO_Init+0x350>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002912:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293c:	4a28      	ldr	r2, [pc, #160]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f ae84 	bls.w	80026ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	3724      	adds	r7, #36	; 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40021800 	.word	0x40021800
 80029d4:	40021c00 	.word	0x40021c00
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40022400 	.word	0x40022400
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
=======
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	4b9e      	ldr	r3, [pc, #632]	; (80028f8 <HAL_ETH_Init+0x2c0>)
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	4a9d      	ldr	r2, [pc, #628]	; (80028f8 <HAL_ETH_Init+0x2c0>)
 8002682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002686:	6453      	str	r3, [r2, #68]	; 0x44
 8002688:	4b9b      	ldr	r3, [pc, #620]	; (80028f8 <HAL_ETH_Init+0x2c0>)
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002694:	4b99      	ldr	r3, [pc, #612]	; (80028fc <HAL_ETH_Init+0x2c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a98      	ldr	r2, [pc, #608]	; (80028fc <HAL_ETH_Init+0x2c4>)
 800269a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800269e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026a0:	4b96      	ldr	r3, [pc, #600]	; (80028fc <HAL_ETH_Init+0x2c4>)
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4994      	ldr	r1, [pc, #592]	; (80028fc <HAL_ETH_Init+0x2c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026c6:	f7ff fe85 	bl	80023d4 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80026cc:	e011      	b.n	80026f2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80026ce:	f7ff fe81 	bl	80023d4 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026dc:	d909      	bls.n	80026f2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e13b      	b.n	800296a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e4      	bne.n	80026ce <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f023 031c 	bic.w	r3, r3, #28
 8002712:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002714:	f002 feec 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8002718:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4a78      	ldr	r2, [pc, #480]	; (8002900 <HAL_ETH_Init+0x2c8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d908      	bls.n	8002734 <HAL_ETH_Init+0xfc>
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_ETH_Init+0x2cc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d804      	bhi.n	8002734 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	e027      	b.n	8002784 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4a73      	ldr	r2, [pc, #460]	; (8002904 <HAL_ETH_Init+0x2cc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d908      	bls.n	800274e <HAL_ETH_Init+0x116>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4a72      	ldr	r2, [pc, #456]	; (8002908 <HAL_ETH_Init+0x2d0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d804      	bhi.n	800274e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f043 030c 	orr.w	r3, r3, #12
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e01a      	b.n	8002784 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4a6d      	ldr	r2, [pc, #436]	; (8002908 <HAL_ETH_Init+0x2d0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d903      	bls.n	800275e <HAL_ETH_Init+0x126>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4a6c      	ldr	r2, [pc, #432]	; (800290c <HAL_ETH_Init+0x2d4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d911      	bls.n	8002782 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4a6a      	ldr	r2, [pc, #424]	; (800290c <HAL_ETH_Init+0x2d4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d908      	bls.n	8002778 <HAL_ETH_Init+0x140>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_ETH_Init+0x2d8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d804      	bhi.n	8002778 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	e005      	b.n	8002784 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f043 0310 	orr.w	r3, r3, #16
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	e000      	b.n	8002784 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002782:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800278c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002790:	2100      	movs	r1, #0
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fc19 	bl	8002fca <HAL_ETH_WritePHYRegister>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80027a2:	6939      	ldr	r1, [r7, #16]
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fca5 	bl	80030f4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0d9      	b.n	800296a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80027b6:	20ff      	movs	r0, #255	; 0xff
 80027b8:	f7ff fe18 	bl	80023ec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a7 	beq.w	8002914 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80027c6:	f7ff fe05 	bl	80023d4 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	461a      	mov	r2, r3
 80027d2:	2101      	movs	r1, #1
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fb90 	bl	8002efa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80027da:	f7ff fdfb 	bl	80023d4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d90f      	bls.n	800280c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80027f0:	6939      	ldr	r1, [r7, #16]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fc7e 	bl	80030f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0ae      	b.n	800296a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0da      	beq.n	80027cc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800281a:	2100      	movs	r1, #0
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fbd4 	bl	8002fca <HAL_ETH_WritePHYRegister>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800282c:	6939      	ldr	r1, [r7, #16]
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fc60 	bl	80030f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800283c:	2301      	movs	r3, #1
 800283e:	e094      	b.n	800296a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002840:	f7ff fdc8 	bl	80023d4 <HAL_GetTick>
 8002844:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	461a      	mov	r2, r3
 800284c:	2101      	movs	r1, #1
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fb53 	bl	8002efa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002854:	f7ff fdbe 	bl	80023d4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d90f      	bls.n	8002886 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800286a:	6939      	ldr	r1, [r7, #16]
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fc41 	bl	80030f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e071      	b.n	800296a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0da      	beq.n	8002846 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	461a      	mov	r2, r3
 8002896:	211f      	movs	r1, #31
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fb2e 	bl	8002efa <HAL_ETH_ReadPHYRegister>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80028a8:	6939      	ldr	r1, [r7, #16]
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fc22 	bl	80030f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80028b8:	2301      	movs	r3, #1
 80028ba:	e056      	b.n	800296a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	e002      	b.n	80028d6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	e037      	b.n	8002958 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	e032      	b.n	8002958 <HAL_ETH_Init+0x320>
 80028f2:	bf00      	nop
 80028f4:	03938700 	.word	0x03938700
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40013800 	.word	0x40013800
 8002900:	01312cff 	.word	0x01312cff
 8002904:	02160ebf 	.word	0x02160ebf
 8002908:	039386ff 	.word	0x039386ff
 800290c:	05f5e0ff 	.word	0x05f5e0ff
 8002910:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	08db      	lsrs	r3, r3, #3
 800291a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002924:	4313      	orrs	r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	2100      	movs	r1, #0
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fb4c 	bl	8002fca <HAL_ETH_WritePHYRegister>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800293c:	6939      	ldr	r1, [r7, #16]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fbd8 	bl	80030f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e00c      	b.n	800296a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002950:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002954:	f7ff fd4a 	bl	80023ec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fbca 	bl	80030f4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop

08002974 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
=======
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_ETH_DMATxDescListInit+0x20>
 8002990:	2302      	movs	r3, #2
 8002992:	e052      	b.n	8002a3a <HAL_ETH_DMATxDescListInit+0xc6>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e030      	b.n	8002a12 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4413      	add	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029c0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d208      	bcs.n	8002a06 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3301      	adds	r3, #1
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4413      	add	r3, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	60da      	str	r2, [r3, #12]
 8002a04:	e002      	b.n	8002a0c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d3ca      	bcc.n	80029b0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a24:	3310      	adds	r3, #16
 8002a26:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8002a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a18:	b08f      	sub	sp, #60	; 0x3c
 8002a1a:	af0a      	add	r7, sp, #40	; 0x28
 8002a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e10f      	b.n	8002c48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f008 fee6 	bl	800b814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f955 	bl	8006d16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	687e      	ldr	r6, [r7, #4]
 8002a74:	466d      	mov	r5, sp
 8002a76:	f106 0410 	add.w	r4, r6, #16
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a8a:	1d33      	adds	r3, r6, #4
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f004 f82c 	bl	8006aec <USB_CoreInit>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0d0      	b.n	8002c48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f943 	bl	8006d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e04a      	b.n	8002b4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	333d      	adds	r3, #61	; 0x3d
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333c      	adds	r3, #60	; 0x3c
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	b298      	uxth	r0, r3
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3342      	adds	r3, #66	; 0x42
 8002af4:	4602      	mov	r2, r0
 8002af6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	333f      	adds	r3, #63	; 0x3f
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3344      	adds	r3, #68	; 0x44
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3348      	adds	r3, #72	; 0x48
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3350      	adds	r3, #80	; 0x50
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3af      	bcc.n	8002ab8 <HAL_PCD_Init+0xa2>
=======
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ETH_DMARxDescListInit+0x20>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e056      	b.n	8002b14 <HAL_ETH_DMARxDescListInit+0xce>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e034      	b.n	8002aec <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	015b      	lsls	r3, r3, #5
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	4413      	add	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a92:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a9a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	461a      	mov	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d208      	bcs.n	8002ae0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	e002      	b.n	8002ae6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d3c6      	bcc.n	8002a82 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afe:	330c      	adds	r3, #12
 8002b00:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_ETH_TransmitFrame+0x24>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0cd      	b.n	8002ce0 <HAL_ETH_TransmitFrame+0x1c0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0b8      	b.n	8002ce0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da09      	bge.n	8002b8c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2212      	movs	r2, #18
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0a9      	b.n	8002ce0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d915      	bls.n	8002bc2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_ETH_TransmitFrame+0x1cc>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_ETH_TransmitFrame+0x1cc>)
 8002ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e001      	b.n	8002bc6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d11c      	bne.n	8002c06 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002bda:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002be6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bf6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c04:	e04b      	b.n	8002c9e <HAL_ETH_TransmitFrame+0x17e>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e044      	b.n	8002be8 <HAL_PCD_Init+0x1d2>
  {
<<<<<<< HEAD
    hpcd->OUT_ep[i].is_in = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	3301      	adds	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3b5      	bcc.n	8002b5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	687e      	ldr	r6, [r7, #4]
 8002bfa:	466d      	mov	r5, sp
 8002bfc:	f106 0410 	add.w	r4, r6, #16
 8002c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c10:	1d33      	adds	r3, r6, #4
 8002c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	f004 f8b9 	bl	8006d8c <USB_DevInit>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e00d      	b.n	8002c48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f005 f8ae 	bl	8007da2 <USB_DevDisconnect>

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
=======
    for (i=0U; i< bufcount; i++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	e044      	b.n	8002c96 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c1a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c30:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002c3a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d116      	bne.n	8002c74 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c54:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <HAL_ETH_TransmitFrame+0x1d0>)
 8002c5a:	fb02 f203 	mul.w	r2, r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	4413      	add	r3, r2
 8002c62:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002c66:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002c72:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c82:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	3301      	adds	r3, #1
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d3b6      	bcc.n	8002c0c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	3314      	adds	r3, #20
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	ac02b00b 	.word	0xac02b00b
 8002cf0:	fffffa0c 	.word	0xfffffa0c

08002cf4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_Start+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e020      	b.n	8002cae <HAL_PCD_Start+0x5e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d109      	bne.n	8002c90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d005      	beq.n	8002c90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 f86c 	bl	8007d72 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 f828 	bl	8006cf4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cb6:	b590      	push	{r4, r7, lr}
 8002cb8:	b08d      	sub	sp, #52	; 0x34
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f005 f913 	bl	8007ef8 <USB_GetMode>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 838e 	bne.w	80033f6 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 f877 	bl	8007dd2 <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8384 	beq.w	80033f4 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 f86e 	bl	8007dd2 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d107      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 0202 	and.w	r2, r2, #2
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 f85c 	bl	8007dd2 <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d24:	d17b      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 f862 	bl	8007df8 <USB_ReadDevAllOutEpInterrupt>
 8002d34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d36:	e06f      	b.n	8002e18 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d064      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 f887 	bl	8007e60 <USB_ReadDevOutEPInterrupt>
 8002d52:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fe0e 	bl	8003994 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00c      	beq.n	8002d9c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 ff0d 	bl	8003ba4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d96:	461a      	mov	r2, r3
 8002d98:	2308      	movs	r3, #8
 8002d9a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db2:	461a      	mov	r2, r3
 8002db4:	2310      	movs	r3, #16
 8002db6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d015      	beq.n	8002dee <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	f005 f8d2 	bl	8007f80 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	2320      	movs	r3, #32
 8002dec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	3301      	adds	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d18c      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 ffd5 	bl	8007dd2 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e32:	f040 80c4 	bne.w	8002fbe <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fff6 	bl	8007e2c <USB_ReadDevAllInEpInterrupt>
 8002e40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e46:	e0b6      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80ab 	beq.w	8002faa <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f005 f81c 	bl	8007e9c <USB_ReadDevInEPInterrupt>
 8002e64:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69f9      	ldr	r1, [r7, #28]
 8002e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e90:	4013      	ands	r3, r2
 8002e92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d11b      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3348      	adds	r3, #72	; 0x48
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4403      	add	r3, r0
 8002ece:	3344      	adds	r3, #68	; 0x44
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4419      	add	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4403      	add	r3, r0
 8002ee2:	3348      	adds	r3, #72	; 0x48
 8002ee4:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f008 fd20 	bl	800b932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d116      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x272>
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3350      	adds	r3, #80	; 0x50
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f20:	461a      	mov	r2, r3
 8002f22:	2101      	movs	r1, #1
 8002f24:	f005 f82c 	bl	8007f80 <USB_EP0_OutStart>
=======
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e074      	b.n	8002df8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002d1e:	e05a      	b.n	8002dd6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3301      	adds	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d34:	d10d      	bne.n	8002d52 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d50:	e041      	b.n	8002dd6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	461a      	mov	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
 8002d76:	e02e      	b.n	8002dd6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d103      	bne.n	8002d9a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002da6:	1f1a      	subs	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e010      	b.n	8002df8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db02      	blt.n	8002de6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d99c      	bls.n	8002d20 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e14:	3314      	adds	r3, #20
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d112      	bne.n	8002e46 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f006 fb21 	bl	8009468 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2e:	3314      	adds	r3, #20
 8002e30:	2240      	movs	r2, #64	; 0x40
 8002e32:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e44:	e01b      	b.n	8002e7e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e4e:	3314      	adds	r3, #20
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d111      	bne.n	8002e7e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f839 	bl	8002ed2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e68:	3314      	adds	r3, #20
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e86:	3314      	adds	r3, #20
 8002e88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e8c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e96:	3314      	adds	r3, #20
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea2:	d112      	bne.n	8002eca <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f81e 	bl	8002ee6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002eb8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	460b      	mov	r3, r1
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b82      	cmp	r3, #130	; 0x82
 8002f1a:	d101      	bne.n	8002f20 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e050      	b.n	8002fc2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2282      	movs	r2, #130	; 0x82
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 031c 	and.w	r3, r3, #28
 8002f36:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8a1b      	ldrh	r3, [r3, #16]
 8002f3c:	02db      	lsls	r3, r3, #11
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0302 	bic.w	r3, r3, #2
 8002f5a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f6c:	f7ff fa32 	bl	80023d4 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f72:	e015      	b.n	8002fa0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002f74:	f7ff fa2e 	bl	80023d4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f82:	d309      	bcc.n	8002f98 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e014      	b.n	8002fc2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e4      	bne.n	8002f74 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b42      	cmp	r3, #66	; 0x42
 8002fea:	d101      	bne.n	8002ff0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
 8002fee:	e04e      	b.n	800308e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2242      	movs	r2, #66	; 0x42
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 031c 	and.w	r3, r3, #28
 8003006:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8a1b      	ldrh	r3, [r3, #16]
 800300c:	02db      	lsls	r3, r3, #11
 800300e:	b29b      	uxth	r3, r3
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003016:	897b      	ldrh	r3, [r7, #10]
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003046:	f7ff f9c5 	bl	80023d4 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800304c:	e015      	b.n	800307a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800304e:	f7ff f9c1 	bl	80023d4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305c:	d309      	bcc.n	8003072 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e00d      	b.n	800308e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e4      	bne.n	800304e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_ETH_Start+0x16>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e01f      	b.n	80030ec <HAL_ETH_Start+0x56>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fa1b 	bl	80034f8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa35 	bl	8003532 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa7f 	bl	80035cc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa4c 	bl	800356c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fa61 	bl	800359c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b0b0      	sub	sp, #192	; 0xc0
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003110:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003118:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003122:	2300      	movs	r3, #0
 8003124:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800313a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313e:	663b      	str	r3, [r7, #96]	; 0x60
 8003140:	e001      	b.n	8003146 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800314a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003150:	2300      	movs	r3, #0
 8003152:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003160:	2340      	movs	r3, #64	; 0x40
 8003162:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003176:	2300      	movs	r3, #0
 8003178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031cc:	4bac      	ldr	r3, [pc, #688]	; (8003480 <ETH_MACDMAConfig+0x38c>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031d8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80031da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80031dc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80031de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80031e0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80031e6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80031e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80031ea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80031ee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80031f4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80031f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80031f8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80031fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80031fc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80031fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003200:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003204:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003208:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800320a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800321c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003228:	2001      	movs	r0, #1
 800322a:	f7ff f8df 	bl	80023ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003236:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003238:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800323a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800323c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800323e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003240:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003242:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003246:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800324c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800324e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003252:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003258:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800325c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003264:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003266:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003272:	2001      	movs	r0, #1
 8003274:	f7ff f8ba 	bl	80023ec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003280:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800328a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003294:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032a4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80032a8:	4013      	ands	r3, r2
 80032aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032b2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80032b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032b8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80032ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80032be:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80032c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80032c4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80032c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80032ca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80032cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80032d0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032e4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7ff f87b 	bl	80023ec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032fe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003300:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003304:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800331a:	2001      	movs	r0, #1
 800331c:	f7ff f866 	bl	80023ec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003328:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800332e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003332:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800333c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800334e:	2304      	movs	r3, #4
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800335e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800336e:	2300      	movs	r3, #0
 8003370:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003372:	2300      	movs	r3, #0
 8003374:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337e:	3318      	adds	r3, #24
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003386:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800338a:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <ETH_MACDMAConfig+0x390>)
 800338c:	4013      	ands	r3, r2
 800338e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003392:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003394:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003396:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003398:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800339a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800339c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800339e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80033a0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80033a2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80033a4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80033a6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80033a8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80033aa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80033ae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80033b2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80033b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c6:	3318      	adds	r3, #24
 80033c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d6:	3318      	adds	r3, #24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033de:	2001      	movs	r0, #1
 80033e0:	f7ff f804 	bl	80023ec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ec:	3318      	adds	r3, #24
 80033ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033f2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033f8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80033fc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003400:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003404:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003408:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800340a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800340c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800340e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800342c:	2001      	movs	r0, #1
 800342e:	f7fe ffdd 	bl	80023ec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800343e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10f      	bne.n	8003468 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003450:	331c      	adds	r3, #28
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800345c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003464:	331c      	adds	r3, #28
 8003466:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	461a      	mov	r2, r3
 800346e:	2100      	movs	r1, #0
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f809 	bl	8003488 <ETH_MACAddressConfig>
}
 8003476:	bf00      	nop
 8003478:	37c0      	adds	r7, #192	; 0xc0
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	ff20810f 	.word	0xff20810f
 8003484:	f8de3f23 	.word	0xf8de3f23

08003488 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3305      	adds	r3, #5
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	3204      	adds	r2, #4
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <ETH_MACAddressConfig+0x68>)
 80034aa:	4413      	add	r3, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3303      	adds	r3, #3
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	061a      	lsls	r2, r3, #24
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3302      	adds	r3, #2
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3301      	adds	r3, #1
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	4313      	orrs	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <ETH_MACAddressConfig+0x6c>)
 80034da:	4413      	add	r3, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6013      	str	r3, [r2, #0]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40028040 	.word	0x40028040
 80034f4:	40028044 	.word	0x40028044

080034f8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0208 	orr.w	r2, r2, #8
 8003512:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800351c:	2001      	movs	r0, #1
 800351e:	f000 f87f 	bl	8003620 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0204 	orr.w	r2, r2, #4
 800354c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003556:	2001      	movs	r0, #1
 8003558:	f000 f862 	bl	8003620 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357c:	3318      	adds	r3, #24
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	3318      	adds	r3, #24
 800358e:	601a      	str	r2, [r3, #0]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ac:	3318      	adds	r3, #24
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0202 	orr.w	r2, r2, #2
 80035b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035bc:	3318      	adds	r3, #24
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e0:	3318      	adds	r3, #24
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f0:	3318      	adds	r3, #24
 80035f2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fc:	3318      	adds	r3, #24
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003602:	2001      	movs	r0, #1
 8003604:	f000 f80c 	bl	8003620 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003612:	3318      	adds	r3, #24
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <ETH_Delay+0x34>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <ETH_Delay+0x38>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0a5b      	lsrs	r3, r3, #9
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800363c:	bf00      	nop
  } 
  while (Delay --);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	60fa      	str	r2, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f9      	bne.n	800363c <ETH_Delay+0x1c>
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20000000 	.word	0x20000000
 8003658:	10624dd3 	.word	0x10624dd3

0800365c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e177      	b.n	8003968 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003678:	2201      	movs	r2, #1
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4013      	ands	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	429a      	cmp	r2, r3
 8003692:	f040 8166 	bne.w	8003962 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x4a>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b12      	cmp	r3, #18
 80036a4:	d123      	bne.n	80036ee <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	08da      	lsrs	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3208      	adds	r2, #8
 80036ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	08da      	lsrs	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3208      	adds	r2, #8
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	2203      	movs	r2, #3
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0203 	and.w	r2, r3, #3
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d00b      	beq.n	8003742 <HAL_GPIO_Init+0xe6>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d007      	beq.n	8003742 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003736:	2b11      	cmp	r3, #17
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b12      	cmp	r3, #18
 8003740:	d130      	bne.n	80037a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 0201 	and.w	r2, r3, #1
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80c0 	beq.w	8003962 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_GPIO_Init+0x320>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a64      	ldr	r2, [pc, #400]	; (800397c <HAL_GPIO_Init+0x320>)
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b62      	ldr	r3, [pc, #392]	; (800397c <HAL_GPIO_Init+0x320>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037fe:	4a60      	ldr	r2, [pc, #384]	; (8003980 <HAL_GPIO_Init+0x324>)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3302      	adds	r3, #2
 8003806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a57      	ldr	r2, [pc, #348]	; (8003984 <HAL_GPIO_Init+0x328>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d037      	beq.n	800389a <HAL_GPIO_Init+0x23e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a56      	ldr	r2, [pc, #344]	; (8003988 <HAL_GPIO_Init+0x32c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <HAL_GPIO_Init+0x23a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a55      	ldr	r2, [pc, #340]	; (800398c <HAL_GPIO_Init+0x330>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <HAL_GPIO_Init+0x236>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a54      	ldr	r2, [pc, #336]	; (8003990 <HAL_GPIO_Init+0x334>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d025      	beq.n	800388e <HAL_GPIO_Init+0x232>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a53      	ldr	r2, [pc, #332]	; (8003994 <HAL_GPIO_Init+0x338>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <HAL_GPIO_Init+0x22e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a52      	ldr	r2, [pc, #328]	; (8003998 <HAL_GPIO_Init+0x33c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x22a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a51      	ldr	r2, [pc, #324]	; (800399c <HAL_GPIO_Init+0x340>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x226>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a50      	ldr	r2, [pc, #320]	; (80039a0 <HAL_GPIO_Init+0x344>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x222>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4f      	ldr	r2, [pc, #316]	; (80039a4 <HAL_GPIO_Init+0x348>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x21e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4e      	ldr	r2, [pc, #312]	; (80039a8 <HAL_GPIO_Init+0x34c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x21a>
 8003872:	2309      	movs	r3, #9
 8003874:	e012      	b.n	800389c <HAL_GPIO_Init+0x240>
 8003876:	230a      	movs	r3, #10
 8003878:	e010      	b.n	800389c <HAL_GPIO_Init+0x240>
 800387a:	2308      	movs	r3, #8
 800387c:	e00e      	b.n	800389c <HAL_GPIO_Init+0x240>
 800387e:	2307      	movs	r3, #7
 8003880:	e00c      	b.n	800389c <HAL_GPIO_Init+0x240>
 8003882:	2306      	movs	r3, #6
 8003884:	e00a      	b.n	800389c <HAL_GPIO_Init+0x240>
 8003886:	2305      	movs	r3, #5
 8003888:	e008      	b.n	800389c <HAL_GPIO_Init+0x240>
 800388a:	2304      	movs	r3, #4
 800388c:	e006      	b.n	800389c <HAL_GPIO_Init+0x240>
 800388e:	2303      	movs	r3, #3
 8003890:	e004      	b.n	800389c <HAL_GPIO_Init+0x240>
 8003892:	2302      	movs	r3, #2
 8003894:	e002      	b.n	800389c <HAL_GPIO_Init+0x240>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_GPIO_Init+0x240>
 800389a:	2300      	movs	r3, #0
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f002 0203 	and.w	r2, r2, #3
 80038a2:	0092      	lsls	r2, r2, #2
 80038a4:	4093      	lsls	r3, r2
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ac:	4934      	ldr	r1, [pc, #208]	; (8003980 <HAL_GPIO_Init+0x324>)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	3302      	adds	r3, #2
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ba:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <HAL_GPIO_Init+0x350>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038de:	4a33      	ldr	r2, [pc, #204]	; (80039ac <HAL_GPIO_Init+0x350>)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038e4:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_GPIO_Init+0x350>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003908:	4a28      	ldr	r2, [pc, #160]	; (80039ac <HAL_GPIO_Init+0x350>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800390e:	4b27      	ldr	r3, [pc, #156]	; (80039ac <HAL_GPIO_Init+0x350>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_GPIO_Init+0x350>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_GPIO_Init+0x350>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <HAL_GPIO_Init+0x350>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3301      	adds	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b0f      	cmp	r3, #15
 800396c:	f67f ae84 	bls.w	8003678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3724      	adds	r7, #36	; 0x24
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40023800 	.word	0x40023800
 8003980:	40013800 	.word	0x40013800
 8003984:	40020000 	.word	0x40020000
 8003988:	40020400 	.word	0x40020400
 800398c:	40020800 	.word	0x40020800
 8003990:	40020c00 	.word	0x40020c00
 8003994:	40021000 	.word	0x40021000
 8003998:	40021400 	.word	0x40021400
 800399c:	40021800 	.word	0x40021800
 80039a0:	40021c00 	.word	0x40021c00
 80039a4:	40022000 	.word	0x40022000
 80039a8:	40022400 	.word	0x40022400
 80039ac:	40013c00 	.word	0x40013c00

080039b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
 80039bc:	4613      	mov	r3, r2
 80039be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c0:	787b      	ldrb	r3, [r7, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039cc:	e003      	b.n	80039d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	619a      	str	r2, [r3, #24]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e4:	b08f      	sub	sp, #60	; 0x3c
 80039e6:	af0a      	add	r7, sp, #40	; 0x28
 80039e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e10f      	b.n	8003c14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f016 fc32 	bl	801a278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2203      	movs	r2, #3
 8003a18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 f955 	bl	8007ce2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	687e      	ldr	r6, [r7, #4]
 8003a40:	466d      	mov	r5, sp
 8003a42:	f106 0410 	add.w	r4, r6, #16
 8003a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a52:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a56:	1d33      	adds	r3, r6, #4
 8003a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a5a:	6838      	ldr	r0, [r7, #0]
 8003a5c:	f004 f82c 	bl	8007ab8 <USB_CoreInit>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0d0      	b.n	8003c14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 f943 	bl	8007d04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	e04a      	b.n	8003b1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	333d      	adds	r3, #61	; 0x3d
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	333c      	adds	r3, #60	; 0x3c
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	b298      	uxth	r0, r3
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	3342      	adds	r3, #66	; 0x42
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	333f      	adds	r3, #63	; 0x3f
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3344      	adds	r3, #68	; 0x44
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3348      	adds	r3, #72	; 0x48
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3350      	adds	r3, #80	; 0x50
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	3301      	adds	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d3af      	bcc.n	8003a84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e044      	b.n	8003bb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d3b5      	bcc.n	8003b2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	687e      	ldr	r6, [r7, #4]
 8003bc6:	466d      	mov	r5, sp
 8003bc8:	f106 0410 	add.w	r4, r6, #16
 8003bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bdc:	1d33      	adds	r3, r6, #4
 8003bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be0:	6838      	ldr	r0, [r7, #0]
 8003be2:	f004 f8b9 	bl	8007d58 <USB_DevInit>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e00d      	b.n	8003c14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f005 f8ae 	bl	8008d6e <USB_DevDisconnect>

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_PCD_Start+0x1c>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e020      	b.n	8003c7a <HAL_PCD_Start+0x5e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d109      	bne.n	8003c5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d005      	beq.n	8003c5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f005 f86c 	bl	8008d3e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 f828 	bl	8007cc0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c82:	b590      	push	{r4, r7, lr}
 8003c84:	b08d      	sub	sp, #52	; 0x34
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f005 f913 	bl	8008ec4 <USB_GetMode>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 838e 	bne.w	80043c2 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f005 f877 	bl	8008d9e <USB_ReadInterrupts>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8384 	beq.w	80043c0 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f005 f86e 	bl	8008d9e <USB_ReadInterrupts>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d107      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f002 0202 	and.w	r2, r2, #2
 8003cda:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f005 f85c 	bl	8008d9e <USB_ReadInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cf0:	d17b      	bne.n	8003dea <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f005 f862 	bl	8008dc4 <USB_ReadDevAllOutEpInterrupt>
 8003d00:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d02:	e06f      	b.n	8003de4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d064      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f005 f887 	bl	8008e2c <USB_ReadDevOutEPInterrupt>
 8003d1e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00c      	beq.n	8003d44 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	2301      	movs	r3, #1
 8003d3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fe0e 	bl	8004960 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 ff0d 	bl	8004b70 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	461a      	mov	r2, r3
 8003d64:	2308      	movs	r3, #8
 8003d66:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2310      	movs	r3, #16
 8003d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d015      	beq.n	8003dba <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d108      	bne.n	8003da8 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003da0:	461a      	mov	r2, r3
 8003da2:	2101      	movs	r1, #1
 8003da4:	f005 f8d2 	bl	8008f4c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db4:	461a      	mov	r2, r3
 8003db6:	2320      	movs	r3, #32
 8003db8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	3301      	adds	r3, #1
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d18c      	bne.n	8003d04 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f004 ffd5 	bl	8008d9e <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dfe:	f040 80c4 	bne.w	8003f8a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 fff6 	bl	8008df8 <USB_ReadDevAllInEpInterrupt>
 8003e0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003e12:	e0b6      	b.n	8003f82 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80ab 	beq.w	8003f76 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f005 f81c 	bl	8008e68 <USB_ReadDevInEPInterrupt>
 8003e30:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d05b      	beq.n	8003ef4 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	2201      	movs	r2, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69f9      	ldr	r1, [r7, #28]
 8003e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2301      	movs	r3, #1
 8003e70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d11b      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3348      	adds	r3, #72	; 0x48
 8003e8a:	6819      	ldr	r1, [r3, #0]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4403      	add	r3, r0
 8003e9a:	3344      	adds	r3, #68	; 0x44
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4419      	add	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4403      	add	r3, r0
 8003eae:	3348      	adds	r3, #72	; 0x48
 8003eb0:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f016 fa6c 	bl	801a396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d116      	bne.n	8003ef4 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d113      	bne.n	8003ef4 <HAL_PCD_IRQHandler+0x272>
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3350      	adds	r3, #80	; 0x50
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eec:	461a      	mov	r2, r3
 8003eee:	2101      	movs	r1, #1
 8003ef0:	f005 f82c 	bl	8008f4c <USB_EP0_OutStart>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
<<<<<<< HEAD
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2308      	movs	r3, #8
 8002f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f92:	461a      	mov	r2, r3
 8002f94:	2302      	movs	r3, #2
 8002f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fc67 	bl	8003878 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af45 	bne.w	8002e48 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 ff05 	bl	8007dd2 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd2:	d122      	bne.n	800301a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fe89 	bl	8003d14 <HAL_PCDEx_LPM_Callback>
 8003002:	e002      	b.n	800300a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f008 fd0b 	bl	800ba20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fed7 	bl	8007dd2 <USB_ReadInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302e:	d112      	bne.n	8003056 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d102      	bne.n	8003046 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f008 fcc7 	bl	800b9d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003054:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
=======
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f26:	461a      	mov	r2, r3
 8003f28:	2310      	movs	r3, #16
 8003f2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f42:	461a      	mov	r2, r3
 8003f44:	2340      	movs	r3, #64	; 0x40
 8003f46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2302      	movs	r3, #2
 8003f62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fc67 	bl	8004844 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	3301      	adds	r3, #1
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f47f af45 	bne.w	8003e14 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f004 ff05 	bl	8008d9e <USB_ReadInterrupts>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9e:	d122      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fe89 	bl	8004ce0 <HAL_PCDEx_LPM_Callback>
 8003fce:	e002      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f016 fa57 	bl	801a484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 fed7 	bl	8008d9e <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffa:	d112      	bne.n	8004022 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d102      	bne.n	8004012 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f016 fa13 	bl	801a438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004020:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f004 feb9 	bl	8008d9e <USB_ReadInterrupts>
 800402c:	4603      	mov	r3, r0
 800402e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004036:	f040 80a7 	bne.w	8004188 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2110      	movs	r1, #16
 8004054:	4618      	mov	r0, r3
 8004056:	f003 fff1 	bl	800803c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800405a:	2300      	movs	r3, #0
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405e:	e036      	b.n	80040ce <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004072:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004084:	0151      	lsls	r1, r2, #5
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	440a      	add	r2, r1
 800408a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800408e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004092:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a0:	461a      	mov	r2, r3
 80040a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	3301      	adds	r3, #1
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3c3      	bcc.n	8004060 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004104:	f043 030b 	orr.w	r3, r3, #11
 8004108:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411a:	f043 030b 	orr.w	r3, r3, #11
 800411e:	6453      	str	r3, [r2, #68]	; 0x44
 8004120:	e015      	b.n	800414e <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004134:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004138:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004148:	f043 030b 	orr.w	r3, r3, #11
 800414c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004160:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004172:	461a      	mov	r2, r3
 8004174:	f004 feea 	bl	8008f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f004 fe06 	bl	8008d9e <USB_ReadInterrupts>
 8004192:	4603      	mov	r3, r0
 8004194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419c:	d124      	bne.n	80041e8 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f004 fe9c 	bl	8008ee0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 ffa6 	bl	80080fe <USB_GetDevSpeed>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681c      	ldr	r4, [r3, #0]
 80041be:	f001 f997 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 80041c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	4620      	mov	r0, r4
 80041ce:	f003 fcd5 	bl	8007b7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f016 f907 	bl	801a3e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 fdd6 	bl	8008d9e <USB_ReadInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d161      	bne.n	80042c0 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0210 	bic.w	r2, r2, #16
 800420a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	3304      	adds	r3, #4
 800422a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	0c5b      	lsrs	r3, r3, #17
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	2b02      	cmp	r3, #2
 8004236:	d124      	bne.n	8004282 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d035      	beq.n	80042b0 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800424e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6a38      	ldr	r0, [r7, #32]
 8004258:	f004 fc4e 	bl	8008af8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004268:	441a      	add	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427a:	441a      	add	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	619a      	str	r2, [r3, #24]
 8004280:	e016      	b.n	80042b0 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	0c5b      	lsrs	r3, r3, #17
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	2b06      	cmp	r3, #6
 800428c:	d110      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004294:	2208      	movs	r2, #8
 8004296:	4619      	mov	r1, r3
 8004298:	6a38      	ldr	r0, [r7, #32]
 800429a:	f004 fc2d 	bl	8008af8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042aa:	441a      	add	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0210 	orr.w	r2, r2, #16
 80042be:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fd6a 	bl	8008d9e <USB_ReadInterrupts>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d10a      	bne.n	80042ea <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f016 f878 	bl	801a3ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f002 0208 	and.w	r2, r2, #8
 80042e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 fd55 	bl	8008d9e <USB_ReadInterrupts>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fe:	d10f      	bne.n	8004320 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	b2db      	uxtb	r3, r3
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f016 f8da 	bl	801a4c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800431e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fd3a 	bl	8008d9e <USB_ReadInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004334:	d10f      	bne.n	8004356 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	b2db      	uxtb	r3, r3
 800433e:	4619      	mov	r1, r3
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f016 f8ad 	bl	801a4a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f004 fd1f 	bl	8008d9e <USB_ReadInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d10a      	bne.n	8004382 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f016 f8bb 	bl	801a4e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f004 fd09 	bl	8008d9e <USB_ReadInterrupts>
 800438c:	4603      	mov	r3, r0
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b04      	cmp	r3, #4
 8004394:	d115      	bne.n	80043c2 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f016 f8ab 	bl	801a504 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	e000      	b.n	80043c2 <HAL_PCD_IRQHandler+0x740>
      return;
 80043c0:	bf00      	nop
    }
  }
}
 80043c2:	3734      	adds	r7, #52	; 0x34
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}

080043c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_PCD_SetAddress+0x1a>
 80043de:	2302      	movs	r3, #2
 80043e0:	e013      	b.n	800440a <HAL_PCD_SetAddress+0x42>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 fc79 	bl	8008cf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	4608      	mov	r0, r1
 800441c:	4611      	mov	r1, r2
 800441e:	461a      	mov	r2, r3
 8004420:	4603      	mov	r3, r0
 8004422:	70fb      	strb	r3, [r7, #3]
 8004424:	460b      	mov	r3, r1
 8004426:	803b      	strh	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004434:	2b00      	cmp	r3, #0
 8004436:	da0f      	bge.n	8004458 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 020f 	and.w	r2, r3, #15
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	3338      	adds	r3, #56	; 0x38
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	3304      	adds	r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	705a      	strb	r2, [r3, #1]
 8004456:	e00f      	b.n	8004478 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 020f 	and.w	r2, r3, #15
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	3304      	adds	r3, #4
 8004470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	b2da      	uxtb	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004484:	883a      	ldrh	r2, [r7, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	78ba      	ldrb	r2, [r7, #2]
 800448e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	785b      	ldrb	r3, [r3, #1]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044a2:	78bb      	ldrb	r3, [r7, #2]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d102      	bne.n	80044ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_PCD_EP_Open+0xaa>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e00e      	b.n	80044da <HAL_PCD_EP_Open+0xc8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 fe3c 	bl	8008148 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80044d8:	7afb      	ldrb	r3, [r7, #11]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da0f      	bge.n	8004516 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 020f 	and.w	r2, r3, #15
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	3338      	adds	r3, #56	; 0x38
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	3304      	adds	r3, #4
 800450c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	705a      	strb	r2, [r3, #1]
 8004514:	e00f      	b.n	8004536 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_PCD_EP_Close+0x6e>
 800454c:	2302      	movs	r3, #2
 800454e:	e00e      	b.n	800456e <HAL_PCD_EP_Close+0x8c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	4618      	mov	r0, r3
 8004560:	f003 fe7a 	bl	8008258 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b086      	sub	sp, #24
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	460b      	mov	r3, r1
 8004584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	3304      	adds	r3, #4
 800459e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2200      	movs	r2, #0
 80045b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b8:	7afb      	ldrb	r3, [r7, #11]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d102      	bne.n	80045d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045d2:	7afb      	ldrb	r3, [r7, #11]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	6979      	ldr	r1, [r7, #20]
 80045ea:	f004 f8fd 	bl	80087e8 <USB_EP0StartXfer>
 80045ee:	e008      	b.n	8004602 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	f003 feaf 	bl	8008360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	460b      	mov	r3, r1
 800464a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464c:	7afb      	ldrb	r3, [r7, #11]
 800464e:	f003 020f 	and.w	r2, r3, #15
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	3338      	adds	r3, #56	; 0x38
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2200      	movs	r2, #0
 8004674:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2201      	movs	r2, #1
 800467a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800467c:	7afb      	ldrb	r3, [r7, #11]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	b2da      	uxtb	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d102      	bne.n	8004696 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	f004 f89b 	bl	80087e8 <USB_EP0StartXfer>
 80046b2:	e008      	b.n	80046c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	f003 fe4d 	bl	8008360 <USB_EPStartXfer>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 020f 	and.w	r2, r3, #15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d901      	bls.n	80046ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e050      	b.n	8004790 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da0f      	bge.n	8004716 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3338      	adds	r3, #56	; 0x38
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	705a      	strb	r2, [r3, #1]
 8004714:	e00d      	b.n	8004732 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_PCD_EP_SetStall+0x82>
 800474e:	2302      	movs	r3, #2
 8004750:	e01e      	b.n	8004790 <HAL_PCD_EP_SetStall+0xc0>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	4618      	mov	r0, r3
 8004762:	f004 f9f2 	bl	8008b4a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	b2d9      	uxtb	r1, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004780:	461a      	mov	r2, r3
 8004782:	f004 fbe3 	bl	8008f4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d901      	bls.n	80047b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e042      	b.n	800483c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da0f      	bge.n	80047de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 020f 	and.w	r2, r3, #15
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	3338      	adds	r3, #56	; 0x38
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	3304      	adds	r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	705a      	strb	r2, [r3, #1]
 80047dc:	e00f      	b.n	80047fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_PCD_EP_ClrStall+0x86>
 800481a:	2302      	movs	r3, #2
 800481c:	e00e      	b.n	800483c <HAL_PCD_EP_ClrStall+0xa4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	4618      	mov	r0, r3
 800482e:	f004 f9fa 	bl	8008c26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	3338      	adds	r3, #56	; 0x38
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	4413      	add	r3, r2
 8004868:	3304      	adds	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	429a      	cmp	r2, r3
 8004876:	d901      	bls.n	800487c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e06c      	b.n	8004956 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	429a      	cmp	r2, r3
 8004890:	d902      	bls.n	8004898 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3303      	adds	r3, #3
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048a0:	e02b      	b.n	80048fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d902      	bls.n	80048be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3303      	adds	r3, #3
 80048c2:	089b      	lsrs	r3, r3, #2
 80048c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4603      	mov	r3, r0
 80048dc:	6978      	ldr	r0, [r7, #20]
 80048de:	f004 f8d6 	bl	8008a8e <USB_WritePacket>

    ep->xfer_buff  += len;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	441a      	add	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	441a      	add	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	b29b      	uxth	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	429a      	cmp	r2, r3
 800490e:	d809      	bhi.n	8004924 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004918:	429a      	cmp	r2, r3
 800491a:	d203      	bcs.n	8004924 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1be      	bne.n	80048a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	429a      	cmp	r2, r3
 800492e:	d811      	bhi.n	8004954 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	2201      	movs	r2, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	43db      	mvns	r3, r3
 800494a:	6939      	ldr	r1, [r7, #16]
 800494c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004950:	4013      	ands	r3, r2
 8004952:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	333c      	adds	r3, #60	; 0x3c
 8004978:	3304      	adds	r3, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b01      	cmp	r3, #1
 8004994:	f040 80b3 	bne.w	8004afe <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d028      	beq.n	80049f4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a70      	ldr	r2, [pc, #448]	; (8004b68 <PCD_EP_OutXfrComplete_int+0x208>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d90e      	bls.n	80049c8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	461a      	mov	r2, r3
 80049c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f015 fcb7 	bl	801a33c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049d8:	461a      	mov	r2, r3
 80049da:	2101      	movs	r1, #1
 80049dc:	f004 fab6 	bl	8008f4c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ec:	461a      	mov	r2, r3
 80049ee:	2308      	movs	r3, #8
 80049f0:	6093      	str	r3, [r2, #8]
 80049f2:	e0b3      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	6093      	str	r3, [r2, #8]
 8004a10:	e0a4      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 809f 	bne.w	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a51      	ldr	r2, [pc, #324]	; (8004b68 <PCD_EP_OutXfrComplete_int+0x208>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d90f      	bls.n	8004a46 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	6093      	str	r3, [r2, #8]
 8004a44:	e08a      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a58:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	0159      	lsls	r1, r3, #5
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	440b      	add	r3, r1
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004a6c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4403      	add	r3, r0
 8004a7c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004a80:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a94:	6819      	ldr	r1, [r3, #0]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4403      	add	r3, r0
 8004aa4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4419      	add	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4403      	add	r3, r0
 8004aba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004abe:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f015 fc4a 	bl	801a360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d144      	bne.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d138      	bne.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004af4:	461a      	mov	r2, r3
 8004af6:	2101      	movs	r1, #1
 8004af8:	f004 fa28 	bl	8008f4c <USB_EP0_OutStart>
 8004afc:	e02e      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <PCD_EP_OutXfrComplete_int+0x20c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d124      	bne.n	8004b50 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b22:	6093      	str	r3, [r2, #8]
 8004b24:	e01a      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2320      	movs	r3, #32
 8004b40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f015 fc09 	bl	801a360 <HAL_PCD_DataOutStageCallback>
 8004b4e:	e005      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f015 fc02 	bl	801a360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	4f54300a 	.word	0x4f54300a
 8004b6c:	4f54310a 	.word	0x4f54310a

08004b70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	333c      	adds	r3, #60	; 0x3c
 8004b88:	3304      	adds	r3, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d113      	bne.n	8004bce <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d922      	bls.n	8004bf4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01d      	beq.n	8004bf4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	6093      	str	r3, [r2, #8]
 8004bcc:	e012      	b.n	8004bf4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <PCD_EP_OutSetupPacket_int+0xbc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10e      	bne.n	8004bf4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d009      	beq.n	8004bf4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bec:	461a      	mov	r2, r3
 8004bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f015 fba1 	bl	801a33c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d90c      	bls.n	8004c1c <PCD_EP_OutSetupPacket_int+0xac>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d108      	bne.n	8004c1c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c14:	461a      	mov	r2, r3
 8004c16:	2101      	movs	r1, #1
 8004c18:	f004 f998 	bl	8008f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	4f54300a 	.word	0x4f54300a
 8004c2c:	4f54310a 	.word	0x4f54310a

08004c30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d107      	bne.n	8004c5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c4e:	883b      	ldrh	r3, [r7, #0]
 8004c50:	0419      	lsls	r1, r3, #16
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c5c:	e028      	b.n	8004cb0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	e00d      	b.n	8004c8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	3340      	adds	r3, #64	; 0x40
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	4413      	add	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3ec      	bcc.n	8004c72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c98:	883b      	ldrh	r3, [r7, #0]
 8004c9a:	0418      	lsls	r0, r3, #16
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	4302      	orrs	r2, r0
 8004ca8:	3340      	adds	r3, #64	; 0x40
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e22d      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d075      	beq.n	8004e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d16:	4ba3      	ldr	r3, [pc, #652]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d00c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d22:	4ba0      	ldr	r3, [pc, #640]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d112      	bne.n	8004d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2e:	4b9d      	ldr	r3, [pc, #628]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d10b      	bne.n	8004d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	4b99      	ldr	r3, [pc, #612]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05b      	beq.n	8004e00 <HAL_RCC_OscConfig+0x108>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d157      	bne.n	8004e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e208      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCC_OscConfig+0x74>
 8004d5e:	4b91      	ldr	r3, [pc, #580]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a90      	ldr	r2, [pc, #576]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e01d      	b.n	8004da8 <HAL_RCC_OscConfig+0xb0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x98>
 8004d76:	4b8b      	ldr	r3, [pc, #556]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a8a      	ldr	r2, [pc, #552]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b88      	ldr	r3, [pc, #544]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a87      	ldr	r2, [pc, #540]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e00b      	b.n	8004da8 <HAL_RCC_OscConfig+0xb0>
 8004d90:	4b84      	ldr	r3, [pc, #528]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a83      	ldr	r2, [pc, #524]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b81      	ldr	r3, [pc, #516]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a80      	ldr	r2, [pc, #512]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fd fb10 	bl	80023d4 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fd fb0c 	bl	80023d4 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1cd      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b76      	ldr	r3, [pc, #472]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0xc0>
 8004dd6:	e014      	b.n	8004e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fd fafc 	bl	80023d4 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fd faf8 	bl	80023d4 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e1b9      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df2:	4b6c      	ldr	r3, [pc, #432]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0xe8>
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d063      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e0e:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e1a:	4b62      	ldr	r3, [pc, #392]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d11c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e26:	4b5f      	ldr	r3, [pc, #380]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d116      	bne.n	8004e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e32:	4b5c      	ldr	r3, [pc, #368]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_RCC_OscConfig+0x152>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e18d      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4952      	ldr	r1, [pc, #328]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e5e:	e03a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d020      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e68:	4b4f      	ldr	r3, [pc, #316]	; (8004fa8 <HAL_RCC_OscConfig+0x2b0>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fd fab1 	bl	80023d4 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e76:	f7fd faad 	bl	80023d4 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e16e      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e88:	4b46      	ldr	r3, [pc, #280]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4940      	ldr	r1, [pc, #256]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]
 8004ea8:	e015      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_OscConfig+0x2b0>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd fa90 	bl	80023d4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb8:	f7fd fa8c 	bl	80023d4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e14d      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d030      	beq.n	8004f44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <HAL_RCC_OscConfig+0x2b4>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fd fa70 	bl	80023d4 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef8:	f7fd fa6c 	bl	80023d4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e12d      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0a:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x200>
 8004f16:	e015      	b.n	8004f44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f18:	4b24      	ldr	r3, [pc, #144]	; (8004fac <HAL_RCC_OscConfig+0x2b4>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1e:	f7fd fa59 	bl	80023d4 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f26:	f7fd fa55 	bl	80023d4 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e116      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80a0 	beq.w	8005092 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10f      	bne.n	8004f82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4a0e      	ldr	r2, [pc, #56]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f70:	6413      	str	r3, [r2, #64]	; 0x40
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <HAL_RCC_OscConfig+0x2b8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d121      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_RCC_OscConfig+0x2b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <HAL_RCC_OscConfig+0x2b8>)
 8004f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f9a:	f7fd fa1b 	bl	80023d4 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa0:	e011      	b.n	8004fc6 <HAL_RCC_OscConfig+0x2ce>
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	42470000 	.word	0x42470000
 8004fac:	42470e80 	.word	0x42470e80
 8004fb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb4:	f7fd fa0e 	bl	80023d4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0cf      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	; (8005170 <HAL_RCC_OscConfig+0x478>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d106      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x2f0>
 8004fda:	4b66      	ldr	r3, [pc, #408]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	4a65      	ldr	r2, [pc, #404]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe6:	e01c      	b.n	8005022 <HAL_RCC_OscConfig+0x32a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b05      	cmp	r3, #5
 8004fee:	d10c      	bne.n	800500a <HAL_RCC_OscConfig+0x312>
 8004ff0:	4b60      	ldr	r3, [pc, #384]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	4a5f      	ldr	r2, [pc, #380]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffc:	4b5d      	ldr	r3, [pc, #372]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	4a5c      	ldr	r2, [pc, #368]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	6713      	str	r3, [r2, #112]	; 0x70
 8005008:	e00b      	b.n	8005022 <HAL_RCC_OscConfig+0x32a>
 800500a:	4b5a      	ldr	r3, [pc, #360]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a59      	ldr	r2, [pc, #356]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
 8005016:	4b57      	ldr	r3, [pc, #348]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a56      	ldr	r2, [pc, #344]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d015      	beq.n	8005056 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502a:	f7fd f9d3 	bl	80023d4 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005030:	e00a      	b.n	8005048 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fd f9cf 	bl	80023d4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e08e      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005048:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ee      	beq.n	8005032 <HAL_RCC_OscConfig+0x33a>
 8005054:	e014      	b.n	8005080 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005056:	f7fd f9bd 	bl	80023d4 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505c:	e00a      	b.n	8005074 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fd f9b9 	bl	80023d4 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e078      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005074:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ee      	bne.n	800505e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d105      	bne.n	8005092 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a3a      	ldr	r2, [pc, #232]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 800508c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d064      	beq.n	8005164 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800509a:	4b36      	ldr	r3, [pc, #216]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d05c      	beq.n	8005160 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d141      	bne.n	8005132 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ae:	4b32      	ldr	r3, [pc, #200]	; (8005178 <HAL_RCC_OscConfig+0x480>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fd f98e 	bl	80023d4 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050bc:	f7fd f98a 	bl	80023d4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e04b      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	3b01      	subs	r3, #1
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	491d      	ldr	r1, [pc, #116]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005104:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <HAL_RCC_OscConfig+0x480>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7fd f963 	bl	80023d4 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005112:	f7fd f95f 	bl	80023d4 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e020      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005124:	4b13      	ldr	r3, [pc, #76]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x41a>
 8005130:	e018      	b.n	8005164 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005132:	4b11      	ldr	r3, [pc, #68]	; (8005178 <HAL_RCC_OscConfig+0x480>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fd f94c 	bl	80023d4 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005140:	f7fd f948 	bl	80023d4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e009      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	4b08      	ldr	r3, [pc, #32]	; (8005174 <HAL_RCC_OscConfig+0x47c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x448>
 800515e:	e001      	b.n	8005164 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40007000 	.word	0x40007000
 8005174:	40023800 	.word	0x40023800
 8005178:	42470060 	.word	0x42470060

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0ca      	b.n	8005326 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b67      	ldr	r3, [pc, #412]	; (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b64      	ldr	r3, [pc, #400]	; (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b62      	ldr	r3, [pc, #392]	; (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b6      	b.n	8005326 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b58      	ldr	r3, [pc, #352]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a57      	ldr	r2, [pc, #348]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b52      	ldr	r3, [pc, #328]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a51      	ldr	r2, [pc, #324]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b4f      	ldr	r3, [pc, #316]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494c      	ldr	r1, [pc, #304]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b46      	ldr	r3, [pc, #280]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07d      	b.n	8005326 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06d      	b.n	8005326 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e065      	b.n	8005326 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4933      	ldr	r1, [pc, #204]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fd f8b2 	bl	80023d4 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd f8ae 	bl	80023d4 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04d      	b.n	8005326 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b24      	ldr	r3, [pc, #144]	; (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b1f      	ldr	r3, [pc, #124]	; (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e030      	b.n	8005326 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4915      	ldr	r1, [pc, #84]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490d      	ldr	r1, [pc, #52]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f81d 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8005306:	4601      	mov	r1, r0
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	4a09      	ldr	r2, [pc, #36]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	5cd3      	ldrb	r3, [r2, r3]
 8005316:	fa21 f303 	lsr.w	r3, r1, r3
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800531e:	2000      	movs	r0, #0
 8005320:	f7fc fa38 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40023c00 	.word	0x40023c00
 8005334:	40023800 	.word	0x40023800
 8005338:	0801dfac 	.word	0x0801dfac
 800533c:	20000000 	.word	0x20000000

08005340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	2300      	movs	r3, #0
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005356:	4b63      	ldr	r3, [pc, #396]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b04      	cmp	r3, #4
 8005360:	d007      	beq.n	8005372 <HAL_RCC_GetSysClockFreq+0x32>
 8005362:	2b08      	cmp	r3, #8
 8005364:	d008      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x38>
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 80b4 	bne.w	80054d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800536c:	4b5e      	ldr	r3, [pc, #376]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800536e:	60bb      	str	r3, [r7, #8]
       break;
 8005370:	e0b3      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005372:	4b5e      	ldr	r3, [pc, #376]	; (80054ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005374:	60bb      	str	r3, [r7, #8]
      break;
 8005376:	e0b0      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005378:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005380:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005382:	4b58      	ldr	r3, [pc, #352]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d04a      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538e:	4b55      	ldr	r3, [pc, #340]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	099b      	lsrs	r3, r3, #6
 8005394:	f04f 0400 	mov.w	r4, #0
 8005398:	f240 11ff 	movw	r1, #511	; 0x1ff
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	ea03 0501 	and.w	r5, r3, r1
 80053a4:	ea04 0602 	and.w	r6, r4, r2
 80053a8:	4629      	mov	r1, r5
 80053aa:	4632      	mov	r2, r6
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	0154      	lsls	r4, r2, #5
 80053b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053ba:	014b      	lsls	r3, r1, #5
 80053bc:	4619      	mov	r1, r3
 80053be:	4622      	mov	r2, r4
 80053c0:	1b49      	subs	r1, r1, r5
 80053c2:	eb62 0206 	sbc.w	r2, r2, r6
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f04f 0400 	mov.w	r4, #0
 80053ce:	0194      	lsls	r4, r2, #6
 80053d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053d4:	018b      	lsls	r3, r1, #6
 80053d6:	1a5b      	subs	r3, r3, r1
 80053d8:	eb64 0402 	sbc.w	r4, r4, r2
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	00e2      	lsls	r2, r4, #3
 80053e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053ea:	00d9      	lsls	r1, r3, #3
 80053ec:	460b      	mov	r3, r1
 80053ee:	4614      	mov	r4, r2
 80053f0:	195b      	adds	r3, r3, r5
 80053f2:	eb44 0406 	adc.w	r4, r4, r6
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	0262      	lsls	r2, r4, #9
 8005400:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005404:	0259      	lsls	r1, r3, #9
 8005406:	460b      	mov	r3, r1
 8005408:	4614      	mov	r4, r2
 800540a:	4618      	mov	r0, r3
 800540c:	4621      	mov	r1, r4
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f04f 0400 	mov.w	r4, #0
 8005414:	461a      	mov	r2, r3
 8005416:	4623      	mov	r3, r4
 8005418:	f7fa ff3a 	bl	8000290 <__aeabi_uldivmod>
 800541c:	4603      	mov	r3, r0
 800541e:	460c      	mov	r4, r1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e049      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005424:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	099b      	lsrs	r3, r3, #6
 800542a:	f04f 0400 	mov.w	r4, #0
 800542e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	ea03 0501 	and.w	r5, r3, r1
 800543a:	ea04 0602 	and.w	r6, r4, r2
 800543e:	4629      	mov	r1, r5
 8005440:	4632      	mov	r2, r6
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	f04f 0400 	mov.w	r4, #0
 800544a:	0154      	lsls	r4, r2, #5
 800544c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005450:	014b      	lsls	r3, r1, #5
 8005452:	4619      	mov	r1, r3
 8005454:	4622      	mov	r2, r4
 8005456:	1b49      	subs	r1, r1, r5
 8005458:	eb62 0206 	sbc.w	r2, r2, r6
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	f04f 0400 	mov.w	r4, #0
 8005464:	0194      	lsls	r4, r2, #6
 8005466:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800546a:	018b      	lsls	r3, r1, #6
 800546c:	1a5b      	subs	r3, r3, r1
 800546e:	eb64 0402 	sbc.w	r4, r4, r2
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	00e2      	lsls	r2, r4, #3
 800547c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005480:	00d9      	lsls	r1, r3, #3
 8005482:	460b      	mov	r3, r1
 8005484:	4614      	mov	r4, r2
 8005486:	195b      	adds	r3, r3, r5
 8005488:	eb44 0406 	adc.w	r4, r4, r6
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	02a2      	lsls	r2, r4, #10
 8005496:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800549a:	0299      	lsls	r1, r3, #10
 800549c:	460b      	mov	r3, r1
 800549e:	4614      	mov	r4, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	4621      	mov	r1, r4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f04f 0400 	mov.w	r4, #0
 80054aa:	461a      	mov	r2, r3
 80054ac:	4623      	mov	r3, r4
 80054ae:	f7fa feef 	bl	8000290 <__aeabi_uldivmod>
 80054b2:	4603      	mov	r3, r0
 80054b4:	460c      	mov	r4, r1
 80054b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	3301      	adds	r3, #1
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	60bb      	str	r3, [r7, #8]
      break;
 80054d2:	e002      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d4:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054d6:	60bb      	str	r3, [r7, #8]
      break;
 80054d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054da:	68bb      	ldr	r3, [r7, #8]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	007a1200 	.word	0x007a1200

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000000 	.word	0x20000000

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800550c:	f7ff fff0 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005510:	4601      	mov	r1, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4a03      	ldr	r2, [pc, #12]	; (800552c <HAL_RCC_GetPCLK1Freq+0x24>)
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	0801dfbc 	.word	0x0801dfbc

08005530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005534:	f7ff ffdc 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005538:	4601      	mov	r1, r0
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0b5b      	lsrs	r3, r3, #13
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	4a03      	ldr	r2, [pc, #12]	; (8005554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005546:	5cd3      	ldrb	r3, [r2, r3]
 8005548:	fa21 f303 	lsr.w	r3, r1, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40023800 	.word	0x40023800
 8005554:	0801dfbc 	.word	0x0801dfbc

08005558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	220f      	movs	r2, #15
 8005566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005568:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <HAL_RCC_GetClockConfig+0x5c>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 0203 	and.w	r2, r3, #3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <HAL_RCC_GetClockConfig+0x5c>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	08db      	lsrs	r3, r3, #3
 8005592:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <HAL_RCC_GetClockConfig+0x60>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 020f 	and.w	r2, r3, #15
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	601a      	str	r2, [r3, #0]
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40023c00 	.word	0x40023c00

080055bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e01d      	b.n	800560a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc fbe8 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f000 fbe2 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d007      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e01d      	b.n	80056a8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f815 	bl	80056b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3304      	adds	r3, #4
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f000 fb93 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e01d      	b.n	8005712 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f815 	bl	800571a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 fb5e 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d122      	bne.n	800578a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	d11b      	bne.n	800578a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0202 	mvn.w	r2, #2
 800575a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb08 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 8005776:	e005      	b.n	8005784 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fafa 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fb0b 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d122      	bne.n	80057de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d11b      	bne.n	80057de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0204 	mvn.w	r2, #4
 80057ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fade 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 80057ca:	e005      	b.n	80057d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fad0 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fae1 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d122      	bne.n	8005832 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d11b      	bne.n	8005832 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f06f 0208 	mvn.w	r2, #8
 8005802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2204      	movs	r2, #4
 8005808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fab4 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 800581e:	e005      	b.n	800582c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 faa6 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fab7 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d122      	bne.n	8005886 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d11b      	bne.n	8005886 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0210 	mvn.w	r2, #16
 8005856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2208      	movs	r2, #8
 800585c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa8a 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 8005872:	e005      	b.n	8005880 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa7c 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa8d 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10e      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0201 	mvn.w	r2, #1
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fb ff2b 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d10e      	bne.n	80058de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d107      	bne.n	80058de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fed6 	bl	800668a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d10e      	bne.n	800590a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d107      	bne.n	800590a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fa52 	bl	8005dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b20      	cmp	r3, #32
 8005916:	d10e      	bne.n	8005936 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b20      	cmp	r3, #32
 8005924:	d107      	bne.n	8005936 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f06f 0220 	mvn.w	r2, #32
 800592e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fea0 	bl	8006676 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005954:	2302      	movs	r3, #2
 8005956:	e08a      	b.n	8005a6e <HAL_TIM_IC_ConfigChannel+0x130>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11b      	bne.n	80059a6 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f000 fc71 	bl	8006264 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 020c 	bic.w	r2, r2, #12
 8005990:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6999      	ldr	r1, [r3, #24]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	619a      	str	r2, [r3, #24]
 80059a4:	e05a      	b.n	8005a5c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d11c      	bne.n	80059e6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f000 fcf5 	bl	80063aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059ce:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6999      	ldr	r1, [r3, #24]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	619a      	str	r2, [r3, #24]
 80059e4:	e03a      	b.n	8005a5c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f000 fd42 	bl	8006484 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 020c 	bic.w	r2, r2, #12
 8005a0e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69d9      	ldr	r1, [r3, #28]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	61da      	str	r2, [r3, #28]
 8005a22:	e01b      	b.n	8005a5c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f000 fd62 	bl	80064fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69d9      	ldr	r1, [r3, #28]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	021a      	lsls	r2, r3, #8
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e0b4      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x184>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	f200 809f 	bhi.w	8005be8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005aaa:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005be9 	.word	0x08005be9
 8005ab8:	08005be9 	.word	0x08005be9
 8005abc:	08005be9 	.word	0x08005be9
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005be9 	.word	0x08005be9
 8005ac8:	08005be9 	.word	0x08005be9
 8005acc:	08005be9 	.word	0x08005be9
 8005ad0:	08005b67 	.word	0x08005b67
 8005ad4:	08005be9 	.word	0x08005be9
 8005ad8:	08005be9 	.word	0x08005be9
 8005adc:	08005be9 	.word	0x08005be9
 8005ae0:	08005ba7 	.word	0x08005ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fa0a 	bl	8005f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0208 	orr.w	r2, r2, #8
 8005afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0204 	bic.w	r2, r2, #4
 8005b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6999      	ldr	r1, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	619a      	str	r2, [r3, #24]
      break;
 8005b22:	e062      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fa5a 	bl	8005fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6999      	ldr	r1, [r3, #24]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	021a      	lsls	r2, r3, #8
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	619a      	str	r2, [r3, #24]
      break;
 8005b64:	e041      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 faaf 	bl	80060d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0208 	orr.w	r2, r2, #8
 8005b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0204 	bic.w	r2, r2, #4
 8005b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69d9      	ldr	r1, [r3, #28]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	61da      	str	r2, [r3, #28]
      break;
 8005ba4:	e021      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fb03 	bl	80061b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69d9      	ldr	r1, [r3, #28]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	021a      	lsls	r2, r3, #8
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	61da      	str	r2, [r3, #28]
      break;
 8005be6:	e000      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005be8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIM_ConfigClockSource+0x18>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0a6      	b.n	8005d6a <HAL_TIM_ConfigClockSource+0x166>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d067      	beq.n	8005d24 <HAL_TIM_ConfigClockSource+0x120>
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d80b      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x6c>
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d073      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x140>
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d802      	bhi.n	8005c66 <HAL_TIM_ConfigClockSource+0x62>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d06f      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c64:	e078      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d06c      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x140>
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	d06a      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c6e:	e073      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c70:	2b70      	cmp	r3, #112	; 0x70
 8005c72:	d00d      	beq.n	8005c90 <HAL_TIM_ConfigClockSource+0x8c>
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d804      	bhi.n	8005c82 <HAL_TIM_ConfigClockSource+0x7e>
 8005c78:	2b50      	cmp	r3, #80	; 0x50
 8005c7a:	d033      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xe0>
 8005c7c:	2b60      	cmp	r3, #96	; 0x60
 8005c7e:	d041      	beq.n	8005d04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c80:	e06a      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c86:	d066      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x152>
 8005c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8c:	d017      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c8e:	e063      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	6899      	ldr	r1, [r3, #8]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f000 fc84 	bl	80065ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
      break;
 8005cbc:	e04c      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f000 fc6d 	bl	80065ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce0:	609a      	str	r2, [r3, #8]
      break;
 8005ce2:	e039      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6859      	ldr	r1, [r3, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f000 fb2b 	bl	800634c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2150      	movs	r1, #80	; 0x50
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fc3a 	bl	8006576 <TIM_ITRx_SetConfig>
      break;
 8005d02:	e029      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	461a      	mov	r2, r3
 8005d12:	f000 fb87 	bl	8006424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2160      	movs	r1, #96	; 0x60
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fc2a 	bl	8006576 <TIM_ITRx_SetConfig>
      break;
 8005d22:	e019      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6859      	ldr	r1, [r3, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	461a      	mov	r2, r3
 8005d32:	f000 fb0b 	bl	800634c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2140      	movs	r1, #64	; 0x40
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fc1a 	bl	8006576 <TIM_ITRx_SetConfig>
      break;
 8005d42:	e009      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f000 fc11 	bl	8006576 <TIM_ITRx_SetConfig>
      break;
 8005d54:	e000      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a40      	ldr	r2, [pc, #256]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d00f      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3c      	ldr	r2, [pc, #240]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3b      	ldr	r2, [pc, #236]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2f      	ldr	r2, [pc, #188]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d02b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d027      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d023      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01f      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d017      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a26      	ldr	r2, [pc, #152]	; (8005ef4 <TIM_Base_SetConfig+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <TIM_Base_SetConfig+0x134>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a24      	ldr	r2, [pc, #144]	; (8005efc <TIM_Base_SetConfig+0x138>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <TIM_Base_SetConfig+0x13c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d108      	bne.n	8005e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_Base_SetConfig+0xf8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d103      	bne.n	8005ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	615a      	str	r2, [r3, #20]
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800
 8005ef8:	40001800 	.word	0x40001800
 8005efc:	40001c00 	.word	0x40001c00
 8005f00:	40002000 	.word	0x40002000

08005f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f023 0302 	bic.w	r3, r3, #2
 8005f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <TIM_OC1_SetConfig+0xd8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <TIM_OC1_SetConfig+0x64>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <TIM_OC1_SetConfig+0xdc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d10c      	bne.n	8005f82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f023 0308 	bic.w	r3, r3, #8
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f023 0304 	bic.w	r3, r3, #4
 8005f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <TIM_OC1_SetConfig+0xd8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_OC1_SetConfig+0x8e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <TIM_OC1_SetConfig+0xdc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d111      	bne.n	8005fb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40010400 	.word	0x40010400

08005fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0210 	bic.w	r2, r3, #16
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0320 	bic.w	r3, r3, #32
 800602e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a22      	ldr	r2, [pc, #136]	; (80060c8 <TIM_OC2_SetConfig+0xe4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC2_SetConfig+0x68>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a21      	ldr	r2, [pc, #132]	; (80060cc <TIM_OC2_SetConfig+0xe8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d10d      	bne.n	8006068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <TIM_OC2_SetConfig+0xe4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC2_SetConfig+0x94>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a16      	ldr	r2, [pc, #88]	; (80060cc <TIM_OC2_SetConfig+0xe8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d113      	bne.n	80060a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800607e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40010400 	.word	0x40010400

080060d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a21      	ldr	r2, [pc, #132]	; (80061b0 <TIM_OC3_SetConfig+0xe0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC3_SetConfig+0x66>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a20      	ldr	r2, [pc, #128]	; (80061b4 <TIM_OC3_SetConfig+0xe4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10d      	bne.n	8006152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <TIM_OC3_SetConfig+0xe0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC3_SetConfig+0x92>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <TIM_OC3_SetConfig+0xe4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d113      	bne.n	800618a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400

080061b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a12      	ldr	r2, [pc, #72]	; (800625c <TIM_OC4_SetConfig+0xa4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_OC4_SetConfig+0x68>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a11      	ldr	r2, [pc, #68]	; (8006260 <TIM_OC4_SetConfig+0xa8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d109      	bne.n	8006234 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	019b      	lsls	r3, r3, #6
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40010400 	.word	0x40010400

08006264 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0201 	bic.w	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a28      	ldr	r2, [pc, #160]	; (8006330 <TIM_TI1_SetConfig+0xcc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01b      	beq.n	80062ca <TIM_TI1_SetConfig+0x66>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006298:	d017      	beq.n	80062ca <TIM_TI1_SetConfig+0x66>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a25      	ldr	r2, [pc, #148]	; (8006334 <TIM_TI1_SetConfig+0xd0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <TIM_TI1_SetConfig+0x66>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a24      	ldr	r2, [pc, #144]	; (8006338 <TIM_TI1_SetConfig+0xd4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00f      	beq.n	80062ca <TIM_TI1_SetConfig+0x66>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a23      	ldr	r2, [pc, #140]	; (800633c <TIM_TI1_SetConfig+0xd8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00b      	beq.n	80062ca <TIM_TI1_SetConfig+0x66>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4a22      	ldr	r2, [pc, #136]	; (8006340 <TIM_TI1_SetConfig+0xdc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <TIM_TI1_SetConfig+0x66>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a21      	ldr	r2, [pc, #132]	; (8006344 <TIM_TI1_SetConfig+0xe0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_TI1_SetConfig+0x66>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4a20      	ldr	r2, [pc, #128]	; (8006348 <TIM_TI1_SetConfig+0xe4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d101      	bne.n	80062ce <TIM_TI1_SetConfig+0x6a>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <TIM_TI1_SetConfig+0x6c>
 80062ce:	2300      	movs	r3, #0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e003      	b.n	80062ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f023 030a 	bic.w	r3, r3, #10
 8006308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f003 030a 	and.w	r3, r3, #10
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40010400 	.word	0x40010400
 8006344:	40014000 	.word	0x40014000
 8006348:	40001800 	.word	0x40001800

0800634c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0201 	bic.w	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f023 030a 	bic.w	r3, r3, #10
 8006388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0210 	bic.w	r2, r3, #16
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	031b      	lsls	r3, r3, #12
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f023 0210 	bic.w	r2, r3, #16
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800644e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	031b      	lsls	r3, r3, #12
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006460:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 0303 	bic.w	r3, r3, #3
 80064b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80064d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006528:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800653a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	031b      	lsls	r3, r3, #12
 8006540:	b29b      	uxth	r3, r3
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800654e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	031b      	lsls	r3, r3, #12
 8006554:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	f043 0307 	orr.w	r3, r3, #7
 8006598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	609a      	str	r2, [r3, #8]
}
 80065a0:	bf00      	nop
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	021a      	lsls	r2, r3, #8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	609a      	str	r2, [r3, #8]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006600:	2302      	movs	r3, #2
 8006602:	e032      	b.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800663c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	4313      	orrs	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e03f      	b.n	8006730 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fb fdcd 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2224      	movs	r2, #36	; 0x24
 80066ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa64 	bl	8006bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006706:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006716:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10d      	bne.n	800678a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_UART_IRQHandler+0x52>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f992 	bl	8006aac <UART_Receive_IT>
      return;
 8006788:	e0cc      	b.n	8006924 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80ab 	beq.w	80068e8 <HAL_UART_IRQHandler+0x1b0>
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <HAL_UART_IRQHandler+0x70>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80a0 	beq.w	80068e8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <HAL_UART_IRQHandler+0x90>
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	f043 0201 	orr.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <HAL_UART_IRQHandler+0xb0>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e0:	f043 0202 	orr.w	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_UART_IRQHandler+0xd0>
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006800:	f043 0204 	orr.w	r2, r3, #4
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_UART_IRQHandler+0xf0>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006820:	f043 0208 	orr.w	r2, r3, #8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d078      	beq.n	8006922 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <HAL_UART_IRQHandler+0x112>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f931 	bl	8006aac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <HAL_UART_IRQHandler+0x13a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d031      	beq.n	80068d6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f87a 	bl	800696c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d123      	bne.n	80068ce <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695a      	ldr	r2, [r3, #20]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006894:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689a:	2b00      	cmp	r3, #0
 800689c:	d013      	beq.n	80068c6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	4a22      	ldr	r2, [pc, #136]	; (800692c <HAL_UART_IRQHandler+0x1f4>)
 80068a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fb fea2 	bl	80025f4 <HAL_DMA_Abort_IT>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d016      	beq.n	80068e4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c4:	e00e      	b.n	80068e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f846 	bl	8006958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068cc:	e00a      	b.n	80068e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f842 	bl	8006958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	e006      	b.n	80068e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f83e 	bl	8006958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80068e2:	e01e      	b.n	8006922 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e4:	bf00      	nop
    return;
 80068e6:	e01c      	b.n	8006922 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_UART_IRQHandler+0x1cc>
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f867 	bl	80069d0 <UART_Transmit_IT>
    return;
 8006902:	e00f      	b.n	8006924 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_UART_IRQHandler+0x1ec>
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f8af 	bl	8006a7c <UART_EndTransmit_IT>
    return;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006922:	bf00      	nop
  }
}
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	080069a9 	.word	0x080069a9

08006930 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006982:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff ffc8 	bl	8006958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b21      	cmp	r3, #33	; 0x21
 80069e2:	d144      	bne.n	8006a6e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ec:	d11a      	bne.n	8006a24 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a02:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d105      	bne.n	8006a18 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]
 8006a16:	e00e      	b.n	8006a36 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]
 8006a22:	e008      	b.n	8006a36 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6211      	str	r1, [r2, #32]
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	4619      	mov	r1, r3
 8006a44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e000      	b.n	8006a70 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a6e:	2302      	movs	r3, #2
  }
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff ff47 	bl	8006930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b22      	cmp	r3, #34	; 0x22
 8006abe:	d171      	bne.n	8006ba4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac8:	d123      	bne.n	8006b12 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10e      	bne.n	8006af6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	1c9a      	adds	r2, r3, #2
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28
 8006af4:	e029      	b.n	8006b4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b10:	e01b      	b.n	8006b4a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6858      	ldr	r0, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6291      	str	r1, [r2, #40]	; 0x28
 8006b2a:	b2c2      	uxtb	r2, r0
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e00c      	b.n	8006b4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	1c58      	adds	r0, r3, #1
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	6288      	str	r0, [r1, #40]	; 0x28
 8006b42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	4619      	mov	r1, r3
 8006b58:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d120      	bne.n	8006ba0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0220 	bic.w	r2, r2, #32
 8006b6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695a      	ldr	r2, [r3, #20]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0201 	bic.w	r2, r2, #1
 8006b8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fed4 	bl	8006944 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e002      	b.n	8006ba6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e000      	b.n	8006ba6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006ba4:	2302      	movs	r3, #2
  }
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	b5b0      	push	{r4, r5, r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bf0:	f023 030c 	bic.w	r3, r3, #12
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	68f9      	ldr	r1, [r7, #12]
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1c:	f040 80e4 	bne.w	8006de8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4aab      	ldr	r2, [pc, #684]	; (8006ed4 <UART_SetConfig+0x324>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <UART_SetConfig+0x84>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4aaa      	ldr	r2, [pc, #680]	; (8006ed8 <UART_SetConfig+0x328>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d16c      	bne.n	8006d0e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c34:	f7fe fc7c 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009a      	lsls	r2, r3, #2
 8006c42:	441a      	add	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	4aa3      	ldr	r2, [pc, #652]	; (8006edc <UART_SetConfig+0x32c>)
 8006c50:	fba2 2303 	umull	r2, r3, r2, r3
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	011c      	lsls	r4, r3, #4
 8006c58:	f7fe fc6a 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009a      	lsls	r2, r3, #2
 8006c66:	441a      	add	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c72:	f7fe fc5d 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009a      	lsls	r2, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	4a93      	ldr	r2, [pc, #588]	; (8006edc <UART_SetConfig+0x32c>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2264      	movs	r2, #100	; 0x64
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	1aeb      	subs	r3, r5, r3
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	3332      	adds	r3, #50	; 0x32
 8006ca0:	4a8e      	ldr	r2, [pc, #568]	; (8006edc <UART_SetConfig+0x32c>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cae:	441c      	add	r4, r3
 8006cb0:	f7fe fc3e 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	009a      	lsls	r2, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cca:	f7fe fc31 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009a      	lsls	r2, r3, #2
 8006cd8:	441a      	add	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce4:	4a7d      	ldr	r2, [pc, #500]	; (8006edc <UART_SetConfig+0x32c>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	095b      	lsrs	r3, r3, #5
 8006cec:	2264      	movs	r2, #100	; 0x64
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	1aeb      	subs	r3, r5, r3
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	3332      	adds	r3, #50	; 0x32
 8006cf8:	4a78      	ldr	r2, [pc, #480]	; (8006edc <UART_SetConfig+0x32c>)
 8006cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	f003 0207 	and.w	r2, r3, #7
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4422      	add	r2, r4
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	e154      	b.n	8006fb8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006d0e:	f7fe fbfb 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006d12:	4602      	mov	r2, r0
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009a      	lsls	r2, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	4a6c      	ldr	r2, [pc, #432]	; (8006edc <UART_SetConfig+0x32c>)
 8006d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	011c      	lsls	r4, r3, #4
 8006d32:	f7fe fbe9 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006d36:	4602      	mov	r2, r0
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009a      	lsls	r2, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d4c:	f7fe fbdc 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009a      	lsls	r2, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d66:	4a5d      	ldr	r2, [pc, #372]	; (8006edc <UART_SetConfig+0x32c>)
 8006d68:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6c:	095b      	lsrs	r3, r3, #5
 8006d6e:	2264      	movs	r2, #100	; 0x64
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	1aeb      	subs	r3, r5, r3
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	3332      	adds	r3, #50	; 0x32
 8006d7a:	4a58      	ldr	r2, [pc, #352]	; (8006edc <UART_SetConfig+0x32c>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d88:	441c      	add	r4, r3
 8006d8a:	f7fe fbbd 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009a      	lsls	r2, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	fbb2 f5f3 	udiv	r5, r2, r3
 8006da4:	f7fe fbb0 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009a      	lsls	r2, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	4a47      	ldr	r2, [pc, #284]	; (8006edc <UART_SetConfig+0x32c>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	2264      	movs	r2, #100	; 0x64
 8006dc8:	fb02 f303 	mul.w	r3, r2, r3
 8006dcc:	1aeb      	subs	r3, r5, r3
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	3332      	adds	r3, #50	; 0x32
 8006dd2:	4a42      	ldr	r2, [pc, #264]	; (8006edc <UART_SetConfig+0x32c>)
 8006dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	f003 0207 	and.w	r2, r3, #7
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4422      	add	r2, r4
 8006de4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006de6:	e0e7      	b.n	8006fb8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a39      	ldr	r2, [pc, #228]	; (8006ed4 <UART_SetConfig+0x324>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <UART_SetConfig+0x24c>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a38      	ldr	r2, [pc, #224]	; (8006ed8 <UART_SetConfig+0x328>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d171      	bne.n	8006ee0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006dfc:	f7fe fb98 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009a      	lsls	r2, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e16:	4a31      	ldr	r2, [pc, #196]	; (8006edc <UART_SetConfig+0x32c>)
 8006e18:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	011c      	lsls	r4, r3, #4
 8006e20:	f7fe fb86 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009a      	lsls	r2, r3, #2
 8006e2e:	441a      	add	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e3a:	f7fe fb79 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009a      	lsls	r2, r3, #2
 8006e48:	441a      	add	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	4a21      	ldr	r2, [pc, #132]	; (8006edc <UART_SetConfig+0x32c>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	2264      	movs	r2, #100	; 0x64
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	1aeb      	subs	r3, r5, r3
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	3332      	adds	r3, #50	; 0x32
 8006e68:	4a1c      	ldr	r2, [pc, #112]	; (8006edc <UART_SetConfig+0x32c>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e74:	441c      	add	r4, r3
 8006e76:	f7fe fb5b 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009a      	lsls	r2, r3, #2
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e90:	f7fe fb4e 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009a      	lsls	r2, r3, #2
 8006e9e:	441a      	add	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	4a0c      	ldr	r2, [pc, #48]	; (8006edc <UART_SetConfig+0x32c>)
 8006eac:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	2264      	movs	r2, #100	; 0x64
 8006eb4:	fb02 f303 	mul.w	r3, r2, r3
 8006eb8:	1aeb      	subs	r3, r5, r3
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	3332      	adds	r3, #50	; 0x32
 8006ebe:	4a07      	ldr	r2, [pc, #28]	; (8006edc <UART_SetConfig+0x32c>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f003 020f 	and.w	r2, r3, #15
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4422      	add	r2, r4
 8006ed0:	609a      	str	r2, [r3, #8]
 8006ed2:	e071      	b.n	8006fb8 <UART_SetConfig+0x408>
 8006ed4:	40011000 	.word	0x40011000
 8006ed8:	40011400 	.word	0x40011400
 8006edc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006ee0:	f7fe fb12 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009a      	lsls	r2, r3, #2
 8006eee:	441a      	add	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efa:	4a31      	ldr	r2, [pc, #196]	; (8006fc0 <UART_SetConfig+0x410>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	011c      	lsls	r4, r3, #4
 8006f04:	f7fe fb00 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009a      	lsls	r2, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f1e:	f7fe faf3 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009a      	lsls	r2, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	4a21      	ldr	r2, [pc, #132]	; (8006fc0 <UART_SetConfig+0x410>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	2264      	movs	r2, #100	; 0x64
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	1aeb      	subs	r3, r5, r3
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	3332      	adds	r3, #50	; 0x32
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <UART_SetConfig+0x410>)
 8006f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f58:	441c      	add	r4, r3
 8006f5a:	f7fe fad5 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009a      	lsls	r2, r3, #2
 8006f68:	441a      	add	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f74:	f7fe fac8 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009a      	lsls	r2, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8e:	4a0c      	ldr	r2, [pc, #48]	; (8006fc0 <UART_SetConfig+0x410>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	2264      	movs	r2, #100	; 0x64
 8006f98:	fb02 f303 	mul.w	r3, r2, r3
 8006f9c:	1aeb      	subs	r3, r5, r3
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	3332      	adds	r3, #50	; 0x32
 8006fa2:	4a07      	ldr	r2, [pc, #28]	; (8006fc0 <UART_SetConfig+0x410>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4422      	add	r2, r4
 8006fb4:	609a      	str	r2, [r3, #8]
}
 8006fb6:	e7ff      	b.n	8006fb8 <UART_SetConfig+0x408>
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8006fc0:	51eb851f 	.word	0x51eb851f

08006fc4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b089      	sub	sp, #36	; 0x24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	fa93 f3a3 	rbit	r3, r3
 8006fde:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	fab3 f383 	clz	r3, r3
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	2103      	movs	r1, #3
 8006fec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	401a      	ands	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	fa93 f3a3 	rbit	r3, r3
 8006ffe:	61bb      	str	r3, [r7, #24]
  return result;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	fab3 f383 	clz	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	431a      	orrs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	601a      	str	r2, [r3, #0]
}
 8007016:	bf00      	nop
 8007018:	3724      	adds	r7, #36	; 0x24
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007022:	b480      	push	{r7}
 8007024:	b085      	sub	sp, #20
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	43db      	mvns	r3, r3
 8007036:	401a      	ands	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	431a      	orrs	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007052:	b480      	push	{r7}
 8007054:	b089      	sub	sp, #36	; 0x24
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	fa93 f3a3 	rbit	r3, r3
 800706c:	613b      	str	r3, [r7, #16]
  return result;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	fab3 f383 	clz	r3, r3
 8007074:	b2db      	uxtb	r3, r3
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	2103      	movs	r1, #3
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	401a      	ands	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	fa93 f3a3 	rbit	r3, r3
 800708c:	61bb      	str	r3, [r7, #24]
  return result;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	fab3 f383 	clz	r3, r3
 8007094:	b2db      	uxtb	r3, r3
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	fa01 f303 	lsl.w	r3, r1, r3
 800709e:	431a      	orrs	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80070a4:	bf00      	nop
 80070a6:	3724      	adds	r7, #36	; 0x24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b089      	sub	sp, #36	; 0x24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	613b      	str	r3, [r7, #16]
  return result;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	fab3 f383 	clz	r3, r3
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	2103      	movs	r1, #3
 80070d8:	fa01 f303 	lsl.w	r3, r1, r3
 80070dc:	43db      	mvns	r3, r3
 80070de:	401a      	ands	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	fa93 f3a3 	rbit	r3, r3
 80070ea:	61bb      	str	r3, [r7, #24]
  return result;
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	fab3 f383 	clz	r3, r3
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	fa01 f303 	lsl.w	r3, r1, r3
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	60da      	str	r2, [r3, #12]
}
 8007102:	bf00      	nop
 8007104:	3724      	adds	r7, #36	; 0x24
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800710e:	b480      	push	{r7}
 8007110:	b089      	sub	sp, #36	; 0x24
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	fa93 f3a3 	rbit	r3, r3
 8007128:	613b      	str	r3, [r7, #16]
  return result;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	fab3 f383 	clz	r3, r3
 8007130:	b2db      	uxtb	r3, r3
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	210f      	movs	r1, #15
 8007136:	fa01 f303 	lsl.w	r3, r1, r3
 800713a:	43db      	mvns	r3, r3
 800713c:	401a      	ands	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	fa93 f3a3 	rbit	r3, r3
 8007148:	61bb      	str	r3, [r7, #24]
  return result;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	fab3 f383 	clz	r3, r3
 8007150:	b2db      	uxtb	r3, r3
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	431a      	orrs	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007160:	bf00      	nop
 8007162:	3724      	adds	r7, #36	; 0x24
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800716c:	b480      	push	{r7}
 800716e:	b089      	sub	sp, #36	; 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	fa93 f3a3 	rbit	r3, r3
 8007188:	613b      	str	r3, [r7, #16]
  return result;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	fab3 f383 	clz	r3, r3
 8007190:	b2db      	uxtb	r3, r3
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	210f      	movs	r1, #15
 8007196:	fa01 f303 	lsl.w	r3, r1, r3
 800719a:	43db      	mvns	r3, r3
 800719c:	401a      	ands	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	fa93 f3a3 	rbit	r3, r3
 80071aa:	61bb      	str	r3, [r7, #24]
  return result;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	fab3 f383 	clz	r3, r3
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	fa01 f303 	lsl.w	r3, r1, r3
 80071bc:	431a      	orrs	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80071c2:	bf00      	nop
 80071c4:	3724      	adds	r7, #36	; 0x24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b088      	sub	sp, #32
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80071d8:	2300      	movs	r3, #0
 80071da:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80071dc:	2300      	movs	r3, #0
 80071de:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	fa93 f3a3 	rbit	r3, r3
 80071ec:	613b      	str	r3, [r7, #16]
  return result;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	fab3 f383 	clz	r3, r3
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80071f8:	e049      	b.n	800728e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	2101      	movs	r1, #1
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	4013      	ands	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d03b      	beq.n	8007288 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	461a      	mov	r2, r3
 8007216:	69b9      	ldr	r1, [r7, #24]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff fed3 	bl	8006fc4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d003      	beq.n	800722e <LL_GPIO_Init+0x60>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d106      	bne.n	800723c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	461a      	mov	r2, r3
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff ff0b 	bl	8007052 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	461a      	mov	r2, r3
 8007242:	69b9      	ldr	r1, [r7, #24]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff33 	bl	80070b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d11a      	bne.n	8007288 <LL_GPIO_Init+0xba>
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	fa93 f3a3 	rbit	r3, r3
 800725c:	60bb      	str	r3, [r7, #8]
  return result;
 800725e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007260:	fab3 f383 	clz	r3, r3
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b07      	cmp	r3, #7
 8007268:	d807      	bhi.n	800727a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	461a      	mov	r2, r3
 8007270:	69b9      	ldr	r1, [r7, #24]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ff4b 	bl	800710e <LL_GPIO_SetAFPin_0_7>
 8007278:	e006      	b.n	8007288 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	461a      	mov	r2, r3
 8007280:	69b9      	ldr	r1, [r7, #24]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff ff72 	bl	800716c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1ae      	bne.n	80071fa <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d003      	beq.n	80072ac <LL_GPIO_Init+0xde>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d107      	bne.n	80072bc <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6819      	ldr	r1, [r3, #0]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff feb3 	bl	8007022 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <LL_I2C_Enable>:
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f043 0201 	orr.w	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <LL_I2C_Disable>:
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f023 0201 	bic.w	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <LL_I2C_ConfigFilters>:
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	f023 021f 	bic.w	r2, r3, #31
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	430b      	orrs	r3, r1
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <LL_I2C_SetOwnAddress1>:
{
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	430a      	orrs	r2, r1
 8007350:	431a      	orrs	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	609a      	str	r2, [r3, #8]
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8007364:	b490      	push	{r4, r7}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8007372:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8007374:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4a3f      	ldr	r2, [pc, #252]	; (8007478 <LL_I2C_ConfigSpeed+0x114>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007388:	ea44 0203 	orr.w	r2, r4, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4938      	ldr	r1, [pc, #224]	; (800747c <LL_I2C_ConfigSpeed+0x118>)
 800739c:	428b      	cmp	r3, r1
 800739e:	d801      	bhi.n	80073a4 <LL_I2C_ConfigSpeed+0x40>
 80073a0:	1c63      	adds	r3, r4, #1
 80073a2:	e008      	b.n	80073b6 <LL_I2C_ConfigSpeed+0x52>
 80073a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80073a8:	fb03 f304 	mul.w	r3, r3, r4
 80073ac:	4934      	ldr	r1, [pc, #208]	; (8007480 <LL_I2C_ConfigSpeed+0x11c>)
 80073ae:	fba1 1303 	umull	r1, r3, r1, r3
 80073b2:	099b      	lsrs	r3, r3, #6
 80073b4:	3301      	adds	r3, #1
 80073b6:	431a      	orrs	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a2f      	ldr	r2, [pc, #188]	; (800747c <LL_I2C_ConfigSpeed+0x118>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d939      	bls.n	8007438 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d117      	bne.n	80073fa <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	4413      	add	r3, r2
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	e01d      	b.n	8007430 <LL_I2C_ConfigSpeed+0xcc>
 80073f4:	f248 0301 	movw	r3, #32769	; 0x8001
 80073f8:	e01a      	b.n	8007430 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009a      	lsls	r2, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00b      	beq.n	800742c <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009a      	lsls	r2, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800742a:	e001      	b.n	8007430 <LL_I2C_ConfigSpeed+0xcc>
 800742c:	f248 0301 	movw	r3, #32769	; 0x8001
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	ea43 0402 	orr.w	r4, r3, r2
 8007436:	e010      	b.n	800745a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007442:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8007446:	2b03      	cmp	r3, #3
 8007448:	d905      	bls.n	8007456 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	e000      	b.n	8007458 <LL_I2C_ConfigSpeed+0xf4>
 8007456:	2304      	movs	r3, #4
 8007458:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8007462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007466:	ea44 0203 	orr.w	r2, r4, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	61da      	str	r2, [r3, #28]
}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bc90      	pop	{r4, r7}
 8007476:	4770      	bx	lr
 8007478:	431bde83 	.word	0x431bde83
 800747c:	000186a0 	.word	0x000186a0
 8007480:	10624dd3 	.word	0x10624dd3

08007484 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f023 021a 	bic.w	r2, r3, #26
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff ff03 	bl	80072e6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80074e0:	f107 0308 	add.w	r3, r7, #8
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 f89d 	bl	8007624 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68d9      	ldr	r1, [r3, #12]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ff06 	bl	8007306 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80074fa:	6939      	ldr	r1, [r7, #16]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff ff2d 	bl	8007364 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6959      	ldr	r1, [r3, #20]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	461a      	mov	r2, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff ff0c 	bl	8007332 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff ffaf 	bl	8007484 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff fecd 	bl	80072c6 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff ffb9 	bl	80074aa <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <LL_RCC_GetSysClkSource+0x18>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 030c 	and.w	r3, r3, #12
}
 8007550:	4618      	mov	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800

08007560 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007564:	4b04      	ldr	r3, [pc, #16]	; (8007578 <LL_RCC_GetAHBPrescaler+0x18>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40023800 	.word	0x40023800

0800757c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007580:	4b04      	ldr	r3, [pc, #16]	; (8007594 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8007588:	4618      	mov	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40023800 	.word	0x40023800

08007598 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800

080075b4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <LL_RCC_PLL_GetMainSource+0x18>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40023800 	.word	0x40023800

080075d0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <LL_RCC_PLL_GetN+0x18>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	099b      	lsrs	r3, r3, #6
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80075de:	4618      	mov	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	40023800 	.word	0x40023800

080075ec <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80075f0:	4b04      	ldr	r3, [pc, #16]	; (8007604 <LL_RCC_PLL_GetP+0x18>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40023800 	.word	0x40023800

08007608 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <LL_RCC_PLL_GetDivider+0x18>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007614:	4618      	mov	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800

08007624 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800762c:	f000 f820 	bl	8007670 <RCC_GetSystemClockFreq>
 8007630:	4602      	mov	r2, r0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f83e 	bl	80076bc <RCC_GetHCLKClockFreq>
 8007640:	4602      	mov	r2, r0
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f84c 	bl	80076e8 <RCC_GetPCLK1ClockFreq>
 8007650:	4602      	mov	r2, r0
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f858 	bl	8007710 <RCC_GetPCLK2ClockFreq>
 8007660:	4602      	mov	r2, r0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60da      	str	r2, [r3, #12]
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800767a:	f7ff ff63 	bl	8007544 <LL_RCC_GetSysClkSource>
 800767e:	4603      	mov	r3, r0
 8007680:	2b04      	cmp	r3, #4
 8007682:	d006      	beq.n	8007692 <RCC_GetSystemClockFreq+0x22>
 8007684:	2b08      	cmp	r3, #8
 8007686:	d007      	beq.n	8007698 <RCC_GetSystemClockFreq+0x28>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <RCC_GetSystemClockFreq+0x44>)
 800768e:	607b      	str	r3, [r7, #4]
      break;
 8007690:	e00a      	b.n	80076a8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <RCC_GetSystemClockFreq+0x48>)
 8007694:	607b      	str	r3, [r7, #4]
      break;
 8007696:	e007      	b.n	80076a8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007698:	2008      	movs	r0, #8
 800769a:	f000 f84d 	bl	8007738 <RCC_PLL_GetFreqDomain_SYS>
 800769e:	6078      	str	r0, [r7, #4]
      break;
 80076a0:	e002      	b.n	80076a8 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80076a2:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <RCC_GetSystemClockFreq+0x44>)
 80076a4:	607b      	str	r3, [r7, #4]
      break;
 80076a6:	bf00      	nop
  }

  return frequency;
 80076a8:	687b      	ldr	r3, [r7, #4]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	00f42400 	.word	0x00f42400
 80076b8:	007a1200 	.word	0x007a1200

080076bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80076c4:	f7ff ff4c 	bl	8007560 <LL_RCC_GetAHBPrescaler>
 80076c8:	4603      	mov	r3, r0
 80076ca:	091b      	lsrs	r3, r3, #4
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <RCC_GetHCLKClockFreq+0x28>)
 80076d2:	5cd3      	ldrb	r3, [r2, r3]
 80076d4:	461a      	mov	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	40d3      	lsrs	r3, r2
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	0801dfac 	.word	0x0801dfac

080076e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80076f0:	f7ff ff44 	bl	800757c <LL_RCC_GetAPB1Prescaler>
 80076f4:	4603      	mov	r3, r0
 80076f6:	0a9b      	lsrs	r3, r3, #10
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <RCC_GetPCLK1ClockFreq+0x24>)
 80076fa:	5cd3      	ldrb	r3, [r2, r3]
 80076fc:	461a      	mov	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	40d3      	lsrs	r3, r2
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	0801dfbc 	.word	0x0801dfbc

08007710 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007718:	f7ff ff3e 	bl	8007598 <LL_RCC_GetAPB2Prescaler>
 800771c:	4603      	mov	r3, r0
 800771e:	0b5b      	lsrs	r3, r3, #13
 8007720:	4a04      	ldr	r2, [pc, #16]	; (8007734 <RCC_GetPCLK2ClockFreq+0x24>)
 8007722:	5cd3      	ldrb	r3, [r2, r3]
 8007724:	461a      	mov	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	40d3      	lsrs	r3, r2
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	0801dfbc 	.word	0x0801dfbc

08007738 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	2300      	movs	r3, #0
 800774a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800774c:	f7ff ff32 	bl	80075b4 <LL_RCC_PLL_GetMainSource>
 8007750:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8007758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800775c:	d003      	beq.n	8007766 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800775e:	e005      	b.n	800776c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007760:	4b12      	ldr	r3, [pc, #72]	; (80077ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007762:	617b      	str	r3, [r7, #20]
      break;
 8007764:	e005      	b.n	8007772 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007766:	4b12      	ldr	r3, [pc, #72]	; (80077b0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8007768:	617b      	str	r3, [r7, #20]
      break;
 800776a:	e002      	b.n	8007772 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800776e:	617b      	str	r3, [r7, #20]
      break;
 8007770:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d113      	bne.n	80077a0 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007778:	f7ff ff46 	bl	8007608 <LL_RCC_PLL_GetDivider>
 800777c:	4602      	mov	r2, r0
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	fbb3 f4f2 	udiv	r4, r3, r2
 8007784:	f7ff ff24 	bl	80075d0 <LL_RCC_PLL_GetN>
 8007788:	4603      	mov	r3, r0
 800778a:	fb03 f404 	mul.w	r4, r3, r4
 800778e:	f7ff ff2d 	bl	80075ec <LL_RCC_PLL_GetP>
 8007792:	4603      	mov	r3, r0
 8007794:	0c1b      	lsrs	r3, r3, #16
 8007796:	3301      	adds	r3, #1
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	fbb4 f3f3 	udiv	r3, r4, r3
 800779e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80077a0:	693b      	ldr	r3, [r7, #16]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd90      	pop	{r4, r7, pc}
 80077aa:	bf00      	nop
 80077ac:	00f42400 	.word	0x00f42400
 80077b0:	007a1200 	.word	0x007a1200

080077b4 <LL_USART_IsEnabled>:
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <LL_USART_SetStopBitsLength>:
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	611a      	str	r2, [r3, #16]
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <LL_USART_SetHWFlowCtrl>:
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	615a      	str	r2, [r3, #20]
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <LL_USART_SetBaudRate>:
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783c:	d152      	bne.n	80078e4 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009a      	lsls	r2, r3, #2
 8007848:	441a      	add	r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007852:	4a4f      	ldr	r2, [pc, #316]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	b29b      	uxth	r3, r3
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	b299      	uxth	r1, r3
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009a      	lsls	r2, r3, #2
 800786a:	441a      	add	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	fbb2 f2f3 	udiv	r2, r2, r3
 8007874:	4b46      	ldr	r3, [pc, #280]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 8007876:	fba3 0302 	umull	r0, r3, r3, r2
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	2064      	movs	r0, #100	; 0x64
 800787e:	fb00 f303 	mul.w	r3, r0, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	3332      	adds	r3, #50	; 0x32
 8007888:	4a41      	ldr	r2, [pc, #260]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	b29b      	uxth	r3, r3
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	b29b      	uxth	r3, r3
 8007896:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800789a:	b29b      	uxth	r3, r3
 800789c:	440b      	add	r3, r1
 800789e:	b299      	uxth	r1, r3
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009a      	lsls	r2, r3, #2
 80078aa:	441a      	add	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078b4:	4b36      	ldr	r3, [pc, #216]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 80078b6:	fba3 0302 	umull	r0, r3, r3, r2
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	2064      	movs	r0, #100	; 0x64
 80078be:	fb00 f303 	mul.w	r3, r0, r3
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	3332      	adds	r3, #50	; 0x32
 80078c8:	4a31      	ldr	r2, [pc, #196]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 80078ca:	fba2 2303 	umull	r2, r3, r2, r3
 80078ce:	095b      	lsrs	r3, r3, #5
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	440b      	add	r3, r1
 80078da:	b29b      	uxth	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	609a      	str	r2, [r3, #8]
}
 80078e2:	e04f      	b.n	8007984 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009a      	lsls	r2, r3, #2
 80078ee:	441a      	add	r2, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f8:	4a25      	ldr	r2, [pc, #148]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	b29b      	uxth	r3, r3
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	b299      	uxth	r1, r3
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009a      	lsls	r2, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	fbb2 f2f3 	udiv	r2, r2, r3
 800791a:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 800791c:	fba3 0302 	umull	r0, r3, r3, r2
 8007920:	095b      	lsrs	r3, r3, #5
 8007922:	2064      	movs	r0, #100	; 0x64
 8007924:	fb00 f303 	mul.w	r3, r0, r3
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	3332      	adds	r3, #50	; 0x32
 800792e:	4a18      	ldr	r2, [pc, #96]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	b29b      	uxth	r3, r3
 8007938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800793c:	b29b      	uxth	r3, r3
 800793e:	440b      	add	r3, r1
 8007940:	b299      	uxth	r1, r3
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009a      	lsls	r2, r3, #2
 800794c:	441a      	add	r2, r3
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	fbb2 f2f3 	udiv	r2, r2, r3
 8007956:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 8007958:	fba3 0302 	umull	r0, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	2064      	movs	r0, #100	; 0x64
 8007960:	fb00 f303 	mul.w	r3, r0, r3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	3332      	adds	r3, #50	; 0x32
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <LL_USART_SetBaudRate+0x168>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	b29b      	uxth	r3, r3
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	b29b      	uxth	r3, r3
 800797a:	440b      	add	r3, r1
 800797c:	b29b      	uxth	r3, r3
 800797e:	461a      	mov	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	609a      	str	r2, [r3, #8]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	51eb851f 	.word	0x51eb851f

08007994 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ff04 	bl	80077b4 <LL_USART_IsEnabled>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d16c      	bne.n	8007a8c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80079ba:	f023 030c 	bic.w	r3, r3, #12
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	6851      	ldr	r1, [r2, #4]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	68d2      	ldr	r2, [r2, #12]
 80079c6:	4311      	orrs	r1, r2
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	6912      	ldr	r2, [r2, #16]
 80079cc:	4311      	orrs	r1, r2
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	6992      	ldr	r2, [r2, #24]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fefb 	bl	80077dc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff08 	bl	8007802 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fe14 	bl	8007624 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a26      	ldr	r2, [pc, #152]	; (8007a98 <LL_USART_Init+0x104>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d102      	bne.n	8007a0a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	e02f      	b.n	8007a6a <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a23      	ldr	r2, [pc, #140]	; (8007a9c <LL_USART_Init+0x108>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d102      	bne.n	8007a18 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	e028      	b.n	8007a6a <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <LL_USART_Init+0x10c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d102      	bne.n	8007a26 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	61bb      	str	r3, [r7, #24]
 8007a24:	e021      	b.n	8007a6a <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <LL_USART_Init+0x110>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d102      	bne.n	8007a34 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	e01a      	b.n	8007a6a <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a1c      	ldr	r2, [pc, #112]	; (8007aa8 <LL_USART_Init+0x114>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d102      	bne.n	8007a42 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	e013      	b.n	8007a6a <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a19      	ldr	r2, [pc, #100]	; (8007aac <LL_USART_Init+0x118>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d102      	bne.n	8007a50 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e00c      	b.n	8007a6a <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <LL_USART_Init+0x11c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d102      	bne.n	8007a5e <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e005      	b.n	8007a6a <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a14      	ldr	r2, [pc, #80]	; (8007ab4 <LL_USART_Init+0x120>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d101      	bne.n	8007a6a <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d009      	beq.n	8007a8c <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69b9      	ldr	r1, [r7, #24]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff fece 	bl	8007828 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	40011000 	.word	0x40011000
 8007a9c:	40004400 	.word	0x40004400
 8007aa0:	40004800 	.word	0x40004800
 8007aa4:	40011400 	.word	0x40011400
 8007aa8:	40004c00 	.word	0x40004c00
 8007aac:	40005000 	.word	0x40005000
 8007ab0:	40007800 	.word	0x40007800
 8007ab4:	40007c00 	.word	0x40007c00

08007ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ab8:	b084      	sub	sp, #16
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	f107 001c 	add.w	r0, r7, #28
 8007ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d122      	bne.n	8007b16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d105      	bne.n	8007b0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fa7c 	bl	8009008 <USB_CoreReset>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
 8007b14:	e01a      	b.n	8007b4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fa70 	bl	8009008 <USB_CoreReset>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8007b3e:	e005      	b.n	8007b4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10b      	bne.n	8007b6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f043 0206 	orr.w	r2, r3, #6
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b76:	b004      	add	sp, #16
 8007b78:	4770      	bx	lr
	...

08007b7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d165      	bne.n	8007c5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4a41      	ldr	r2, [pc, #260]	; (8007c98 <USB_SetTurnaroundTime+0x11c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d906      	bls.n	8007ba6 <USB_SetTurnaroundTime+0x2a>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4a40      	ldr	r2, [pc, #256]	; (8007c9c <USB_SetTurnaroundTime+0x120>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d802      	bhi.n	8007ba6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ba0:	230f      	movs	r3, #15
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e062      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4a3c      	ldr	r2, [pc, #240]	; (8007c9c <USB_SetTurnaroundTime+0x120>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d906      	bls.n	8007bbc <USB_SetTurnaroundTime+0x40>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4a3b      	ldr	r2, [pc, #236]	; (8007ca0 <USB_SetTurnaroundTime+0x124>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d802      	bhi.n	8007bbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007bb6:	230e      	movs	r3, #14
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	e057      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4a38      	ldr	r2, [pc, #224]	; (8007ca0 <USB_SetTurnaroundTime+0x124>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d906      	bls.n	8007bd2 <USB_SetTurnaroundTime+0x56>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4a37      	ldr	r2, [pc, #220]	; (8007ca4 <USB_SetTurnaroundTime+0x128>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d802      	bhi.n	8007bd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007bcc:	230d      	movs	r3, #13
 8007bce:	617b      	str	r3, [r7, #20]
 8007bd0:	e04c      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4a33      	ldr	r2, [pc, #204]	; (8007ca4 <USB_SetTurnaroundTime+0x128>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d906      	bls.n	8007be8 <USB_SetTurnaroundTime+0x6c>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4a32      	ldr	r2, [pc, #200]	; (8007ca8 <USB_SetTurnaroundTime+0x12c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d802      	bhi.n	8007be8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007be2:	230c      	movs	r3, #12
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	e041      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4a2f      	ldr	r2, [pc, #188]	; (8007ca8 <USB_SetTurnaroundTime+0x12c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d906      	bls.n	8007bfe <USB_SetTurnaroundTime+0x82>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4a2e      	ldr	r2, [pc, #184]	; (8007cac <USB_SetTurnaroundTime+0x130>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d802      	bhi.n	8007bfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007bf8:	230b      	movs	r3, #11
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e036      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	4a2a      	ldr	r2, [pc, #168]	; (8007cac <USB_SetTurnaroundTime+0x130>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d906      	bls.n	8007c14 <USB_SetTurnaroundTime+0x98>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	4a29      	ldr	r2, [pc, #164]	; (8007cb0 <USB_SetTurnaroundTime+0x134>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d802      	bhi.n	8007c14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c0e:	230a      	movs	r3, #10
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	e02b      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4a26      	ldr	r2, [pc, #152]	; (8007cb0 <USB_SetTurnaroundTime+0x134>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d906      	bls.n	8007c2a <USB_SetTurnaroundTime+0xae>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4a25      	ldr	r2, [pc, #148]	; (8007cb4 <USB_SetTurnaroundTime+0x138>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d802      	bhi.n	8007c2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c24:	2309      	movs	r3, #9
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e020      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4a21      	ldr	r2, [pc, #132]	; (8007cb4 <USB_SetTurnaroundTime+0x138>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d906      	bls.n	8007c40 <USB_SetTurnaroundTime+0xc4>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4a20      	ldr	r2, [pc, #128]	; (8007cb8 <USB_SetTurnaroundTime+0x13c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d802      	bhi.n	8007c40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e015      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <USB_SetTurnaroundTime+0x13c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d906      	bls.n	8007c56 <USB_SetTurnaroundTime+0xda>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4a1c      	ldr	r2, [pc, #112]	; (8007cbc <USB_SetTurnaroundTime+0x140>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d802      	bhi.n	8007c56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c50:	2307      	movs	r3, #7
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e00a      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 feb9 	bl	8007dd2 <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306a:	f040 80a7 	bne.w	80031bc <HAL_PCD_IRQHandler+0x506>
    {
<<<<<<< HEAD
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2110      	movs	r1, #16
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fff1 	bl	8007070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308e:	2300      	movs	r3, #0
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003092:	e036      	b.n	8003102 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d4:	461a      	mov	r2, r3
 80030d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ec:	0151      	lsls	r1, r2, #5
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	440a      	add	r2, r1
 80030f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	3301      	adds	r3, #1
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003108:	429a      	cmp	r2, r3
 800310a:	d3c3      	bcc.n	8003094 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800311e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003138:	f043 030b 	orr.w	r3, r3, #11
 800313c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314e:	f043 030b 	orr.w	r3, r3, #11
 8003152:	6453      	str	r3, [r2, #68]	; 0x44
 8003154:	e015      	b.n	8003182 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003168:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800316c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317c:	f043 030b 	orr.w	r3, r3, #11
 8003180:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003190:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003194:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031a6:	461a      	mov	r2, r3
 80031a8:	f004 feea 	bl	8007f80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fe06 	bl	8007dd2 <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d0:	d124      	bne.n	800321c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 fe9c 	bl	8007f14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 ffa6 	bl	8007132 <USB_GetDevSpeed>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681c      	ldr	r4, [r3, #0]
 80031f2:	f001 f997 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 80031f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	4620      	mov	r0, r4
 8003202:	f003 fcd5 	bl	8006bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f008 fbbb 	bl	800b982 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800321a:	615a      	str	r2, [r3, #20]
=======
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c56:	2306      	movs	r3, #6
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	e007      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c62:	2309      	movs	r3, #9
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	e001      	b.n	8007c6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c68:	2309      	movs	r3, #9
 8007c6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	029b      	lsls	r3, r3, #10
 8007c80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c84:	431a      	orrs	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	00d8acbf 	.word	0x00d8acbf
 8007c9c:	00e4e1bf 	.word	0x00e4e1bf
 8007ca0:	00f423ff 	.word	0x00f423ff
 8007ca4:	0106737f 	.word	0x0106737f
 8007ca8:	011a499f 	.word	0x011a499f
 8007cac:	01312cff 	.word	0x01312cff
 8007cb0:	014ca43f 	.word	0x014ca43f
 8007cb4:	016e35ff 	.word	0x016e35ff
 8007cb8:	01a6ab1f 	.word	0x01a6ab1f
 8007cbc:	01e847ff 	.word	0x01e847ff

08007cc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f043 0201 	orr.w	r2, r3, #1
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f023 0201 	bic.w	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d106      	bne.n	8007d30 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	e00b      	b.n	8007d48 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e001      	b.n	8007d48 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e003      	b.n	8007d50 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d48:	2032      	movs	r0, #50	; 0x32
 8007d4a:	f7fa fb4f 	bl	80023ec <HAL_Delay>

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d58:	b084      	sub	sp, #16
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d72:	2300      	movs	r3, #0
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	e009      	b.n	8007d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	3340      	adds	r3, #64	; 0x40
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b0e      	cmp	r3, #14
 8007d90:	d9f2      	bls.n	8007d78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d112      	bne.n	8007dbe <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
 8007dbc:	e00b      	b.n	8007dd6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ddc:	461a      	mov	r2, r3
 8007dde:	2300      	movs	r3, #0
 8007de0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de8:	4619      	mov	r1, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df0:	461a      	mov	r2, r3
 8007df2:	680b      	ldr	r3, [r1, #0]
 8007df4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d10c      	bne.n	8007e16 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f961 	bl	80080cc <USB_SetDevSpeed>
 8007e0a:	e008      	b.n	8007e1e <USB_DevInit+0xc6>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f004 fdd6 	bl	8007dd2 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d161      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x63e>
    {
<<<<<<< HEAD
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0210 	bic.w	r2, r2, #16
 800323e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	0c5b      	lsrs	r3, r3, #17
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	2b02      	cmp	r3, #2
 800326a:	d124      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d035      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	6a38      	ldr	r0, [r7, #32]
 800328c:	f004 fc4e 	bl	8007b2c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	619a      	str	r2, [r3, #24]
 80032b4:	e016      	b.n	80032e4 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	0c5b      	lsrs	r3, r3, #17
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d110      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032c8:	2208      	movs	r2, #8
 80032ca:	4619      	mov	r1, r3
 80032cc:	6a38      	ldr	r0, [r7, #32]
 80032ce:	f004 fc2d 	bl	8007b2c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032de:	441a      	add	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
=======
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f95c 	bl	80080cc <USB_SetDevSpeed>
 8007e14:	e003      	b.n	8007e1e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e16:	2103      	movs	r1, #3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f957 	bl	80080cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e1e:	2110      	movs	r1, #16
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f90b 	bl	800803c <USB_FlushTxFifo>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f929 	bl	8008088 <USB_FlushRxFifo>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e46:	461a      	mov	r2, r3
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e52:	461a      	mov	r2, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2300      	movs	r3, #0
 8007e62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e64:	2300      	movs	r3, #0
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	e043      	b.n	8007ef2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e80:	d118      	bne.n	8007eb4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	461a      	mov	r2, r3
 8007e96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	e013      	b.n	8007ec6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	e008      	b.n	8007ec6 <USB_DevInit+0x16e>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0210 	orr.w	r2, r2, #16
 80032f2:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fd6a 	bl	8007dd2 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d10a      	bne.n	800331e <HAL_PCD_IRQHandler+0x668>
    {
<<<<<<< HEAD
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f008 fb2c 	bl	800b966 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 0208 	and.w	r2, r2, #8
 800331c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fd55 	bl	8007dd2 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003332:	d10f      	bne.n	8003354 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	b2db      	uxtb	r3, r3
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f008 fb8e 	bl	800ba60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003352:	615a      	str	r2, [r3, #20]
=======
      USBx_INEP(i)->DIEPCTL = 0U;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	613b      	str	r3, [r7, #16]
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d3b7      	bcc.n	8007e6a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	e043      	b.n	8007f88 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f16:	d118      	bne.n	8007f4a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	e013      	b.n	8007f5c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f40:	461a      	mov	r2, r3
 8007f42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	e008      	b.n	8007f5c <USB_DevInit+0x204>
      }
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f004 fd3a 	bl	8007dd2 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003368:	d10f      	bne.n	800338a <HAL_PCD_IRQHandler+0x6d4>
    {
<<<<<<< HEAD
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	b2db      	uxtb	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f008 fb61 	bl	800ba3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fd1f 	bl	8007dd2 <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d10a      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f008 fb6f 	bl	800ba84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 fd09 	bl	8007dd2 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d115      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f008 fb5f 	bl	800baa0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	e000      	b.n	80033f6 <HAL_PCD_IRQHandler+0x740>
      return;
 80033f4:	bf00      	nop
    }
=======
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	461a      	mov	r2, r3
 8007f58:	2300      	movs	r3, #0
 8007f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3301      	adds	r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d3b7      	bcc.n	8007f00 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d111      	bne.n	8007fce <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4b20      	ldr	r3, [pc, #128]	; (8008034 <USB_DevInit+0x2dc>)
 8007fb4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc8:	f043 0303 	orr.w	r3, r3, #3
 8007fcc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
}
 80033f6:	3734      	adds	r7, #52	; 0x34
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}

<<<<<<< HEAD
080033fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_PCD_SetAddress+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e013      	b.n	800343e <HAL_PCD_SetAddress+0x42>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fc79 	bl	8007d26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	4608      	mov	r0, r1
 8003450:	4611      	mov	r1, r2
 8003452:	461a      	mov	r2, r3
 8003454:	4603      	mov	r3, r0
 8003456:	70fb      	strb	r3, [r7, #3]
 8003458:	460b      	mov	r3, r1
 800345a:	803b      	strh	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da0f      	bge.n	800348c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3338      	adds	r3, #56	; 0x38
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
 800348a:	e00f      	b.n	80034ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b8:	883a      	ldrh	r2, [r7, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	78ba      	ldrb	r2, [r7, #2]
 80034c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034d6:	78bb      	ldrb	r3, [r7, #2]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d102      	bne.n	80034e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	711a      	strb	r2, [r3, #4]
=======
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007fda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d105      	bne.n	8007fee <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f043 0210 	orr.w	r2, r3, #16
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	4b11      	ldr	r3, [pc, #68]	; (8008038 <USB_DevInit+0x2e0>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f043 0208 	orr.w	r2, r3, #8
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800800c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800e:	2b01      	cmp	r3, #1
 8008010:	d107      	bne.n	8008022 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800801a:	f043 0304 	orr.w	r3, r3, #4
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6193      	str	r3, [r2, #24]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }

  __HAL_LOCK(hpcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_EP_Open+0xaa>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_Open+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fe3c 	bl	800717c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
<<<<<<< HEAD
 800350c:	7afb      	ldrb	r3, [r7, #11]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
=======
 8008022:	7dfb      	ldrb	r3, [r7, #23]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800802e:	b004      	add	sp, #16
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	00800100 	.word	0x00800100
 8008038:	803c3800 	.word	0x803c3800

0800803c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
=======
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	019b      	lsls	r3, r3, #6
 800804e:	f043 0220 	orr.w	r2, r3, #32
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	611a      	str	r2, [r3, #16]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  if ((ep_addr & 0x80U) == 0x80U)
 8003522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	da0f      	bge.n	800354a <HAL_PCD_EP_Close+0x34>
  {
<<<<<<< HEAD
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3338      	adds	r3, #56	; 0x38
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	705a      	strb	r2, [r3, #1]
 8003548:	e00f      	b.n	800356a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	3304      	adds	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_PCD_EP_Close+0x6e>
 8003580:	2302      	movs	r3, #2
 8003582:	e00e      	b.n	80035a2 <HAL_PCD_EP_Close+0x8c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 fe7a 	bl	800728c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
=======
    if (++count > 200000U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a09      	ldr	r2, [pc, #36]	; (8008084 <USB_FlushTxFifo+0x48>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d901      	bls.n	8008068 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e006      	b.n	8008076 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b20      	cmp	r3, #32
 8008072:	d0f0      	beq.n	8008056 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	00030d40 	.word	0x00030d40

08008088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2210      	movs	r2, #16
 8008098:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a09      	ldr	r2, [pc, #36]	; (80080c8 <USB_FlushRxFifo+0x40>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d901      	bls.n	80080ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e006      	b.n	80080ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	d0f0      	beq.n	800809a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	00030d40 	.word	0x00030d40

080080cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ec:	4313      	orrs	r3, r2
 80080ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	460b      	mov	r3, r1
 80035b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	f004 f8fd 	bl	800781c <USB_EP0StartXfer>
 8003622:	e008      	b.n	8003636 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	f003 feaf 	bl	8007394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
=======
 80080fe:	b480      	push	{r7}
 8008100:	b087      	sub	sp, #28
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0306 	and.w	r3, r3, #6
 8008116:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800811e:	2300      	movs	r3, #0
 8008120:	75fb      	strb	r3, [r7, #23]
 8008122:	e00a      	b.n	800813a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d002      	beq.n	8008130 <USB_GetDevSpeed+0x32>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b06      	cmp	r3, #6
 800812e:	d102      	bne.n	8008136 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008130:	2302      	movs	r3, #2
 8008132:	75fb      	strb	r3, [r7, #23]
 8008134:	e001      	b.n	800813a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008136:	230f      	movs	r3, #15
 8008138:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
}
 800813c:	4618      	mov	r0, r3
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	460b      	mov	r3, r1
 800367e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	3338      	adds	r3, #56	; 0x38
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2201      	movs	r2, #1
 80036ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d102      	bne.n	80036ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	f004 f89b 	bl	800781c <USB_EP0StartXfer>
 80036e6:	e008      	b.n	80036fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6979      	ldr	r1, [r7, #20]
 80036f6:	f003 fe4d 	bl	8007394 <USB_EPStartXfer>
=======
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d13a      	bne.n	80081da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	2101      	movs	r1, #1
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	b29b      	uxth	r3, r3
 800817c:	68f9      	ldr	r1, [r7, #12]
 800817e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008182:	4313      	orrs	r3, r2
 8008184:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d155      	bne.n	8008248 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	78db      	ldrb	r3, [r3, #3]
 80081b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	059b      	lsls	r3, r3, #22
 80081be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081c0:	4313      	orrs	r3, r2
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e036      	b.n	8008248 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e0:	69da      	ldr	r2, [r3, #28]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	2101      	movs	r1, #1
 80081ec:	fa01 f303 	lsl.w	r3, r1, r3
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081f8:	4313      	orrs	r3, r2
 80081fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d11a      	bne.n	8008248 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	78db      	ldrb	r3, [r3, #3]
 800822c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800822e:	430b      	orrs	r3, r1
 8008230:	4313      	orrs	r3, r2
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008246:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }

  return HAL_OK;
<<<<<<< HEAD
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
=======
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
	...

08008258 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d901      	bls.n	8003722 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e050      	b.n	80037c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0f      	bge.n	800374a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3338      	adds	r3, #56	; 0x38
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	705a      	strb	r2, [r3, #1]
 8003748:	e00d      	b.n	8003766 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_PCD_EP_SetStall+0x82>
 8003782:	2302      	movs	r3, #2
 8003784:	e01e      	b.n	80037c4 <HAL_PCD_EP_SetStall+0xc0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	4618      	mov	r0, r3
 8003796:	f004 f9f2 	bl	8007b7e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	b2d9      	uxtb	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037b4:	461a      	mov	r2, r3
 80037b6:	f004 fbe3 	bl	8007f80 <USB_EP0_OutStart>
=======
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d135      	bne.n	80082e0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	f003 030f 	and.w	r3, r3, #15
 8008284:	2101      	movs	r1, #1
 8008286:	fa01 f303 	lsl.w	r3, r1, r3
 800828a:	b29b      	uxth	r3, r3
 800828c:	43db      	mvns	r3, r3
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008294:	4013      	ands	r3, r2
 8008296:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 030f 	and.w	r3, r3, #15
 80082a8:	2101      	movs	r1, #1
 80082aa:	fa01 f303 	lsl.w	r3, r1, r3
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	43db      	mvns	r3, r3
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b8:	4013      	ands	r3, r2
 80082ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	0159      	lsls	r1, r3, #5
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	440b      	add	r3, r1
 80082d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d6:	4619      	mov	r1, r3
 80082d8:	4b1f      	ldr	r3, [pc, #124]	; (8008358 <USB_DeactivateEndpoint+0x100>)
 80082da:	4013      	ands	r3, r2
 80082dc:	600b      	str	r3, [r1, #0]
 80082de:	e034      	b.n	800834a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	2101      	movs	r1, #1
 80082f2:	fa01 f303 	lsl.w	r3, r1, r3
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	43db      	mvns	r3, r3
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008300:	4013      	ands	r3, r2
 8008302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	2101      	movs	r1, #1
 8008316:	fa01 f303 	lsl.w	r3, r1, r3
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	43db      	mvns	r3, r3
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008324:	4013      	ands	r3, r2
 8008326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	0159      	lsls	r1, r3, #5
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	440b      	add	r3, r1
 800833e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008342:	4619      	mov	r1, r3
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <USB_DeactivateEndpoint+0x104>)
 8008346:	4013      	ands	r3, r2
 8008348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  __HAL_UNLOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
<<<<<<< HEAD
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
=======
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	ec337800 	.word	0xec337800
 800835c:	eff37800 	.word	0xeff37800

08008360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d901      	bls.n	80037ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e042      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da0f      	bge.n	8003812 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	3338      	adds	r3, #56	; 0x38
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	705a      	strb	r2, [r3, #1]
 8003810:	e00f      	b.n	8003832 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	705a      	strb	r2, [r3, #1]
=======
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	2b01      	cmp	r3, #1
 800837e:	f040 815c 	bne.w	800863a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d132      	bne.n	80083f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e8:	0cdb      	lsrs	r3, r3, #19
 80083ea:	04db      	lsls	r3, r3, #19
 80083ec:	6113      	str	r3, [r2, #16]
 80083ee:	e074      	b.n	80084da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	440a      	add	r2, r1
 8008406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840a:	0cdb      	lsrs	r3, r3, #19
 800840c:	04db      	lsls	r3, r3, #19
 800840e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800842e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	691a      	ldr	r2, [r3, #16]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	6959      	ldr	r1, [r3, #20]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	440b      	add	r3, r1
 800844c:	1e59      	subs	r1, r3, #1
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	fbb1 f3f3 	udiv	r3, r1, r3
 8008456:	04d9      	lsls	r1, r3, #19
 8008458:	4b9d      	ldr	r3, [pc, #628]	; (80086d0 <USB_EPStartXfer+0x370>)
 800845a:	400b      	ands	r3, r1
 800845c:	69b9      	ldr	r1, [r7, #24]
 800845e:	0148      	lsls	r0, r1, #5
 8008460:	69f9      	ldr	r1, [r7, #28]
 8008462:	4401      	add	r1, r0
 8008464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008468:	4313      	orrs	r3, r2
 800846a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	691a      	ldr	r2, [r3, #16]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008482:	69b9      	ldr	r1, [r7, #24]
 8008484:	0148      	lsls	r0, r1, #5
 8008486:	69f9      	ldr	r1, [r7, #28]
 8008488:	4401      	add	r1, r0
 800848a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800848e:	4313      	orrs	r3, r2
 8008490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	78db      	ldrb	r3, [r3, #3]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d11f      	bne.n	80084da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80084b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	0151      	lsls	r1, r2, #5
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	440a      	add	r2, r1
 80084d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d14b      	bne.n	8008578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f4:	461a      	mov	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	78db      	ldrb	r3, [r3, #3]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d128      	bne.n	8008556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008510:	2b00      	cmp	r3, #0
 8008512:	d110      	bne.n	8008536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	440a      	add	r2, r1
 800852a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	e00f      	b.n	8008556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	440a      	add	r2, r1
 800856c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	e12f      	b.n	80087d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	0151      	lsls	r1, r2, #5
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	440a      	add	r2, r1
 800858e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	78db      	ldrb	r3, [r3, #3]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d015      	beq.n	80085cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 8117 	beq.w	80087d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 030f 	and.w	r3, r3, #15
 80085ba:	2101      	movs	r1, #1
 80085bc:	fa01 f303 	lsl.w	r3, r1, r3
 80085c0:	69f9      	ldr	r1, [r7, #28]
 80085c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c6:	4313      	orrs	r3, r2
 80085c8:	634b      	str	r3, [r1, #52]	; 0x34
 80085ca:	e105      	b.n	80087d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d110      	bne.n	80085fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	e00f      	b.n	800861e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800861c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	68d9      	ldr	r1, [r3, #12]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	781a      	ldrb	r2, [r3, #0]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	b298      	uxth	r0, r3
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4603      	mov	r3, r0
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fa2b 	bl	8008a8e <USB_WritePacket>
 8008638:	e0ce      	b.n	80087d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	0151      	lsls	r1, r2, #5
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	440a      	add	r2, r1
 8008650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008654:	0cdb      	lsrs	r3, r3, #19
 8008656:	04db      	lsls	r3, r3, #19
 8008658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	0151      	lsls	r1, r2, #5
 800866c:	69fa      	ldr	r2, [r7, #28]
 800866e:	440a      	add	r2, r1
 8008670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800867c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d126      	bne.n	80086d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800869c:	69b9      	ldr	r1, [r7, #24]
 800869e:	0148      	lsls	r0, r1, #5
 80086a0:	69f9      	ldr	r1, [r7, #28]
 80086a2:	4401      	add	r1, r0
 80086a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086a8:	4313      	orrs	r3, r2
 80086aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ca:	6113      	str	r3, [r2, #16]
 80086cc:	e036      	b.n	800873c <USB_EPStartXfer+0x3dc>
 80086ce:	bf00      	nop
 80086d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	695a      	ldr	r2, [r3, #20]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	4413      	add	r3, r2
 80086de:	1e5a      	subs	r2, r3, #1
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f6:	691a      	ldr	r2, [r3, #16]
 80086f8:	8afb      	ldrh	r3, [r7, #22]
 80086fa:	04d9      	lsls	r1, r3, #19
 80086fc:	4b39      	ldr	r3, [pc, #228]	; (80087e4 <USB_EPStartXfer+0x484>)
 80086fe:	400b      	ands	r3, r1
 8008700:	69b9      	ldr	r1, [r7, #24]
 8008702:	0148      	lsls	r0, r1, #5
 8008704:	69f9      	ldr	r1, [r7, #28]
 8008706:	4401      	add	r1, r0
 8008708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800870c:	4313      	orrs	r3, r2
 800870e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	8af9      	ldrh	r1, [r7, #22]
 8008724:	fb01 f303 	mul.w	r3, r1, r3
 8008728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800872c:	69b9      	ldr	r1, [r7, #24]
 800872e:	0148      	lsls	r0, r1, #5
 8008730:	69f9      	ldr	r1, [r7, #28]
 8008732:	4401      	add	r1, r0
 8008734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008738:	4313      	orrs	r3, r2
 800873a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10d      	bne.n	800875e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	68d9      	ldr	r1, [r3, #12]
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875a:	460a      	mov	r2, r1
 800875c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	78db      	ldrb	r3, [r3, #3]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d128      	bne.n	80087b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008772:	2b00      	cmp	r3, #0
 8008774:	d110      	bne.n	8008798 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	e00f      	b.n	80087b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	0151      	lsls	r1, r2, #5
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	440a      	add	r2, r1
 80087ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087d6:	6013      	str	r3, [r2, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }

  ep->is_stall = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_PCD_EP_ClrStall+0x86>
 800384e:	2302      	movs	r3, #2
 8003850:	e00e      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa4>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f004 f9fa 	bl	8007c5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
<<<<<<< HEAD
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
=======
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	1ff80000 	.word	0x1ff80000

080087e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af02      	add	r7, sp, #8
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	3338      	adds	r3, #56	; 0x38
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	3304      	adds	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d901      	bls.n	80038b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e06c      	b.n	800398a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d902      	bls.n	80038cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3303      	adds	r3, #3
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038d4:	e02b      	b.n	800392e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d902      	bls.n	80038f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	61fb      	str	r3, [r7, #28]
=======
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	2b01      	cmp	r3, #1
 8008806:	f040 80cd 	bne.w	80089a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d132      	bne.n	8008878 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	0151      	lsls	r1, r2, #5
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	440a      	add	r2, r1
 8008828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008870:	0cdb      	lsrs	r3, r3, #19
 8008872:	04db      	lsls	r3, r3, #19
 8008874:	6113      	str	r3, [r2, #16]
 8008876:	e04e      	b.n	8008916 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	440a      	add	r2, r1
 800888e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008892:	0cdb      	lsrs	r3, r3, #19
 8008894:	04db      	lsls	r3, r3, #19
 8008896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d903      	bls.n	80088d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008906:	6939      	ldr	r1, [r7, #16]
 8008908:	0148      	lsls	r0, r1, #5
 800890a:	6979      	ldr	r1, [r7, #20]
 800890c:	4401      	add	r1, r0
 800890e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008912:	4313      	orrs	r3, r2
 8008914:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d11e      	bne.n	800895a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d009      	beq.n	8008938 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	461a      	mov	r2, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	0151      	lsls	r1, r2, #5
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	440a      	add	r2, r1
 800894e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e092      	b.n	8008a80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	4413      	add	r3, r2
 8008962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	0151      	lsls	r1, r2, #5
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	440a      	add	r2, r1
 8008970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008978:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d07e      	beq.n	8008a80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	2101      	movs	r1, #1
 8008994:	fa01 f303 	lsl.w	r3, r1, r3
 8008998:	6979      	ldr	r1, [r7, #20]
 800899a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800899e:	4313      	orrs	r3, r2
 80089a0:	634b      	str	r3, [r1, #52]	; 0x34
 80089a2:	e06d      	b.n	8008a80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	0151      	lsls	r1, r2, #5
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	440a      	add	r2, r1
 80089ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089be:	0cdb      	lsrs	r3, r3, #19
 80089c0:	04db      	lsls	r3, r3, #19
 80089c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	0151      	lsls	r1, r2, #5
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	440a      	add	r2, r1
 80089da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d003      	beq.n	80089f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	615a      	str	r2, [r3, #20]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }
    len32b = (len + 3U) / 4U;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3303      	adds	r3, #3
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]

<<<<<<< HEAD
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800390a:	b2db      	uxtb	r3, r3
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	4603      	mov	r3, r0
 8003910:	6978      	ldr	r0, [r7, #20]
 8003912:	f004 f8d6 	bl	8007ac2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	441a      	add	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	b29b      	uxth	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	429a      	cmp	r2, r3
 8003942:	d809      	bhi.n	8003958 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394c:	429a      	cmp	r2, r3
 800394e:	d203      	bcs.n	8003958 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1be      	bne.n	80038d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	429a      	cmp	r2, r3
 8003962:	d811      	bhi.n	8003988 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2201      	movs	r2, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	43db      	mvns	r3, r3
 800397e:	6939      	ldr	r1, [r7, #16]
 8003980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003984:	4013      	ands	r3, r2
 8003986:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
=======
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a2e:	6939      	ldr	r1, [r7, #16]
 8008a30:	0148      	lsls	r0, r1, #5
 8008a32:	6979      	ldr	r1, [r7, #20]
 8008a34:	4401      	add	r1, r0
 8008a36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d10d      	bne.n	8008a60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d009      	beq.n	8008a60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	68d9      	ldr	r1, [r3, #12]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5c:	460a      	mov	r2, r1
 8008a5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	333c      	adds	r3, #60	; 0x3c
 80039ac:	3304      	adds	r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 80b3 	bne.w	8003b32 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d028      	beq.n	8003a28 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a70      	ldr	r2, [pc, #448]	; (8003b9c <PCD_EP_OutXfrComplete_int+0x208>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d90e      	bls.n	80039fc <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f4:	461a      	mov	r2, r3
 80039f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f007 ff6b 	bl	800b8d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f004 fab6 	bl	8007f80 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2308      	movs	r3, #8
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e0b3      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2320      	movs	r3, #32
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	e0a4      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 809f 	bne.w	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <PCD_EP_OutXfrComplete_int+0x208>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90f      	bls.n	8003a7a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	e08a      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a8c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	0159      	lsls	r1, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003aa0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4403      	add	r3, r0
 8003ab0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ab4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4419      	add	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4403      	add	r3, r0
 8003aee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003af2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f007 fefe 	bl	800b8fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d144      	bne.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d138      	bne.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f004 fa28 	bl	8007f80 <USB_EP0_OutStart>
 8003b30:	e02e      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d124      	bne.n	8003b84 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e01a      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	461a      	mov	r2, r3
 8003b72:	2320      	movs	r3, #32
 8003b74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f007 febd 	bl	800b8fc <HAL_PCD_DataOutStageCallback>
 8003b82:	e005      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f007 feb6 	bl	800b8fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	4f54300a 	.word	0x4f54300a
 8003ba0:	4f54310a 	.word	0x4f54310a

08003ba4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
=======
 8008a8e:	b480      	push	{r7}
 8008a90:	b089      	sub	sp, #36	; 0x24
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	71fb      	strb	r3, [r7, #7]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d11a      	bne.n	8008aea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ab4:	88bb      	ldrh	r3, [r7, #4]
 8008ab6:	3303      	adds	r3, #3
 8008ab8:	089b      	lsrs	r3, r3, #2
 8008aba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008abc:	2300      	movs	r3, #0
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	e00f      	b.n	8008ae2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	031a      	lsls	r2, r3, #12
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ace:	461a      	mov	r2, r3
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	61bb      	str	r3, [r7, #24]
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d3eb      	bcc.n	8008ac2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3724      	adds	r7, #36	; 0x24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b089      	sub	sp, #36	; 0x24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	3303      	adds	r3, #3
 8008b12:	089b      	lsrs	r3, r3, #2
 8008b14:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008b16:	2300      	movs	r3, #0
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	e00b      	b.n	8008b34 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	3301      	adds	r3, #1
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d3ef      	bcc.n	8008b1c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008b3c:	69fb      	ldr	r3, [r7, #28]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3724      	adds	r7, #36	; 0x24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d12c      	bne.n	8008bc0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	db12      	blt.n	8008b9e <USB_EPSetStall+0x54>
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00f      	beq.n	8008b9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	0151      	lsls	r1, r2, #5
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	440a      	add	r2, r1
 8008b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	0151      	lsls	r1, r2, #5
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	440a      	add	r2, r1
 8008bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	e02b      	b.n	8008c18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	db12      	blt.n	8008bf8 <USB_EPSetStall+0xae>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00f      	beq.n	8008bf8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bf6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	333c      	adds	r3, #60	; 0x3c
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d113      	bne.n	8003c02 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d922      	bls.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01d      	beq.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	e012      	b.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
=======
 8008c26:	b480      	push	{r7}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d128      	bne.n	8008c94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	78db      	ldrb	r3, [r3, #3]
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d003      	beq.n	8008c72 <USB_EPClearStall+0x4c>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	78db      	ldrb	r3, [r3, #3]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d138      	bne.n	8008ce4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	015a      	lsls	r2, r3, #5
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	0151      	lsls	r1, r2, #5
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	440a      	add	r2, r1
 8008c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e027      	b.n	8008ce4 <USB_EPClearStall+0xbe>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }
  }
  else
  {
<<<<<<< HEAD
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10e      	bne.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f007 fe55 	bl	800b8d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d90c      	bls.n	8003c50 <PCD_EP_OutSetupPacket_int+0xac>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	f004 f998 	bl	8007f80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	4f54300a 	.word	0x4f54300a
 8003c60:	4f54310a 	.word	0x4f54310a

08003c64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
=======
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	0151      	lsls	r1, r2, #5
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	440a      	add	r2, r1
 8008caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	78db      	ldrb	r3, [r3, #3]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d003      	beq.n	8008cc4 <USB_EPClearStall+0x9e>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	78db      	ldrb	r3, [r3, #3]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d10f      	bne.n	8008ce4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	0151      	lsls	r1, r2, #5
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	440a      	add	r2, r1
 8008cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
<<<<<<< HEAD
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
 8003c70:	4613      	mov	r3, r2
 8003c72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c82:	883b      	ldrh	r3, [r7, #0]
 8003c84:	0419      	lsls	r1, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c90:	e028      	b.n	8003ce4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e00d      	b.n	8003cc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	3340      	adds	r3, #64	; 0x40
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
 8003cc2:	7bfa      	ldrb	r2, [r7, #15]
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3ec      	bcc.n	8003ca6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ccc:	883b      	ldrh	r3, [r7, #0]
 8003cce:	0418      	lsls	r0, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	4302      	orrs	r2, r0
 8003cdc:	3340      	adds	r3, #64	; 0x40
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
=======
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d58:	f023 0302 	bic.w	r3, r3, #2
 8008d5c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008d5e:	2003      	movs	r0, #3
 8008d60:	f7f9 fb44 	bl	80023ec <HAL_Delay>

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d88:	f043 0302 	orr.w	r3, r3, #2
 8008d8c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008d8e:	2003      	movs	r0, #3
 8008d90:	f7f9 fb2c 	bl	80023ec <HAL_Delay>

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
<<<<<<< HEAD
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
=======
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4013      	ands	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008db6:	68fb      	ldr	r3, [r7, #12]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
<<<<<<< HEAD
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e22d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d075      	beq.n	8003e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	4ba3      	ldr	r3, [pc, #652]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d56:	4ba0      	ldr	r3, [pc, #640]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d112      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b9d      	ldr	r3, [pc, #628]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4b99      	ldr	r3, [pc, #612]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d05b      	beq.n	8003e34 <HAL_RCC_OscConfig+0x108>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d157      	bne.n	8003e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e208      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x74>
 8003d92:	4b91      	ldr	r3, [pc, #580]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a90      	ldr	r2, [pc, #576]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e01d      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003daa:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a8a      	ldr	r2, [pc, #552]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a87      	ldr	r2, [pc, #540]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003dc4:	4b84      	ldr	r3, [pc, #528]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a83      	ldr	r2, [pc, #524]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b81      	ldr	r3, [pc, #516]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a80      	ldr	r2, [pc, #512]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe faa6 	bl	8002334 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe faa2 	bl	8002334 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1cd      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0xc0>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fa92 	bl	8002334 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fa8e 	bl	8002334 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e1b9      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0xe8>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d063      	beq.n	8003f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	4b65      	ldr	r3, [pc, #404]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4e:	4b62      	ldr	r3, [pc, #392]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d11c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b5f      	ldr	r3, [pc, #380]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d001      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e18d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7e:	4b56      	ldr	r3, [pc, #344]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4952      	ldr	r1, [pc, #328]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e92:	e03a      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9c:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <HAL_RCC_OscConfig+0x2b0>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fa47 	bl	8002334 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eaa:	f7fe fa43 	bl	8002334 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e16e      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebc:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec8:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4940      	ldr	r1, [pc, #256]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e015      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_OscConfig+0x2b0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fa26 	bl	8002334 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eec:	f7fe fa22 	bl	8002334 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e14d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d030      	beq.n	8003f78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCC_OscConfig+0x2b4>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe fa06 	bl	8002334 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fa02 	bl	8002334 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e12d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x200>
 8003f4a:	e015      	b.n	8003f78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x2b4>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe f9ef 	bl	8002334 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe f9eb 	bl	8002334 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e116      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a0 	beq.w	80040c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d121      	bne.n	8004006 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fce:	f7fe f9b1 	bl	8002334 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	e011      	b.n	8003ffa <HAL_RCC_OscConfig+0x2ce>
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	42470000 	.word	0x42470000
 8003fe0:	42470e80 	.word	0x42470e80
 8003fe4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fe f9a4 	bl	8002334 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0cf      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_OscConfig+0x478>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d106      	bne.n	800401c <HAL_RCC_OscConfig+0x2f0>
 800400e:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a65      	ldr	r2, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x32a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x312>
 8004024:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a5f      	ldr	r2, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a5c      	ldr	r2, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x32a>
 800403e:	4b5a      	ldr	r3, [pc, #360]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a59      	ldr	r2, [pc, #356]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a56      	ldr	r2, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fe f969 	bl	8002334 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fe f965 	bl	8002334 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e08e      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x33a>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe f953 	bl	8002334 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fe f94f 	bl	8002334 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e078      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a3a      	ldr	r2, [pc, #232]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d064      	beq.n	8004198 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d05c      	beq.n	8004194 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d141      	bne.n	8004166 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCC_OscConfig+0x480>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fe f924 	bl	8002334 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe f920 	bl	8002334 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e04b      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	491d      	ldr	r1, [pc, #116]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004138:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <HAL_RCC_OscConfig+0x480>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fe f8f9 	bl	8002334 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004146:	f7fe f8f5 	bl	8002334 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e020      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x41a>
 8004164:	e018      	b.n	8004198 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCC_OscConfig+0x480>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe f8e2 	bl	8002334 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]
=======
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	4013      	ands	r3, r2
 8008de6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	0c1b      	lsrs	r3, r3, #16
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	4013      	ands	r3, r2
 8008e1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	b29b      	uxth	r3, r3
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	4013      	ands	r3, r2
 8008e58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	01db      	lsls	r3, r3, #7
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008efe:	f023 0307 	bic.w	r3, r3, #7
 8008f02:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 0306 	and.w	r3, r3, #6
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d109      	bne.n	8008f28 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f22:	f043 0303 	orr.w	r3, r3, #3
 8008f26:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	460b      	mov	r3, r1
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	333c      	adds	r3, #60	; 0x3c
 8008f62:	3304      	adds	r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	4a26      	ldr	r2, [pc, #152]	; (8009004 <USB_EP0_OutStart+0xb8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d90a      	bls.n	8008f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f80:	d101      	bne.n	8008f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e037      	b.n	8008ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb4:	f043 0318 	orr.w	r3, r3, #24
 8008fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d10f      	bne.n	8008ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	371c      	adds	r7, #28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	4f54300a 	.word	0x4f54300a

08009008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4a13      	ldr	r2, [pc, #76]	; (800906c <USB_CoreReset+0x64>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d901      	bls.n	8009026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e01b      	b.n	800905e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	daf2      	bge.n	8009014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f043 0201 	orr.w	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3301      	adds	r3, #1
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a09      	ldr	r2, [pc, #36]	; (800906c <USB_CoreReset+0x64>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d901      	bls.n	8009050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e006      	b.n	800905e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b01      	cmp	r3, #1
 800905a:	d0f0      	beq.n	800903e <USB_CoreReset+0x36>

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	00030d40 	.word	0x00030d40

08009070 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009076:	4b8c      	ldr	r3, [pc, #560]	; (80092a8 <MX_LWIP_Init+0x238>)
 8009078:	22c0      	movs	r2, #192	; 0xc0
 800907a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800907c:	4b8a      	ldr	r3, [pc, #552]	; (80092a8 <MX_LWIP_Init+0x238>)
 800907e:	22a8      	movs	r2, #168	; 0xa8
 8009080:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009082:	4b89      	ldr	r3, [pc, #548]	; (80092a8 <MX_LWIP_Init+0x238>)
 8009084:	2200      	movs	r2, #0
 8009086:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8009088:	4b87      	ldr	r3, [pc, #540]	; (80092a8 <MX_LWIP_Init+0x238>)
 800908a:	2232      	movs	r2, #50	; 0x32
 800908c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800908e:	4b87      	ldr	r3, [pc, #540]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009090:	22ff      	movs	r2, #255	; 0xff
 8009092:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009094:	4b85      	ldr	r3, [pc, #532]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009096:	22ff      	movs	r2, #255	; 0xff
 8009098:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800909a:	4b84      	ldr	r3, [pc, #528]	; (80092ac <MX_LWIP_Init+0x23c>)
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80090a0:	4b82      	ldr	r3, [pc, #520]	; (80092ac <MX_LWIP_Init+0x23c>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80090a6:	4b82      	ldr	r3, [pc, #520]	; (80092b0 <MX_LWIP_Init+0x240>)
 80090a8:	22c0      	movs	r2, #192	; 0xc0
 80090aa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80090ac:	4b80      	ldr	r3, [pc, #512]	; (80092b0 <MX_LWIP_Init+0x240>)
 80090ae:	22a8      	movs	r2, #168	; 0xa8
 80090b0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80090b2:	4b7f      	ldr	r3, [pc, #508]	; (80092b0 <MX_LWIP_Init+0x240>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80090b8:	4b7d      	ldr	r3, [pc, #500]	; (80092b0 <MX_LWIP_Init+0x240>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80090be:	2100      	movs	r1, #0
 80090c0:	2000      	movs	r0, #0
 80090c2:	f007 f895 	bl	80101f0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80090c6:	4b78      	ldr	r3, [pc, #480]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	061a      	lsls	r2, r3, #24
 80090cc:	4b76      	ldr	r3, [pc, #472]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090ce:	785b      	ldrb	r3, [r3, #1]
 80090d0:	041b      	lsls	r3, r3, #16
 80090d2:	431a      	orrs	r2, r3
 80090d4:	4b74      	ldr	r3, [pc, #464]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090d6:	789b      	ldrb	r3, [r3, #2]
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	4313      	orrs	r3, r2
 80090dc:	4a72      	ldr	r2, [pc, #456]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090de:	78d2      	ldrb	r2, [r2, #3]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	061a      	lsls	r2, r3, #24
 80090e4:	4b70      	ldr	r3, [pc, #448]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	0619      	lsls	r1, r3, #24
 80090ea:	4b6f      	ldr	r3, [pc, #444]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	041b      	lsls	r3, r3, #16
 80090f0:	4319      	orrs	r1, r3
 80090f2:	4b6d      	ldr	r3, [pc, #436]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090f4:	789b      	ldrb	r3, [r3, #2]
 80090f6:	021b      	lsls	r3, r3, #8
 80090f8:	430b      	orrs	r3, r1
 80090fa:	496b      	ldr	r1, [pc, #428]	; (80092a8 <MX_LWIP_Init+0x238>)
 80090fc:	78c9      	ldrb	r1, [r1, #3]
 80090fe:	430b      	orrs	r3, r1
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009106:	431a      	orrs	r2, r3
 8009108:	4b67      	ldr	r3, [pc, #412]	; (80092a8 <MX_LWIP_Init+0x238>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	0619      	lsls	r1, r3, #24
 800910e:	4b66      	ldr	r3, [pc, #408]	; (80092a8 <MX_LWIP_Init+0x238>)
 8009110:	785b      	ldrb	r3, [r3, #1]
 8009112:	041b      	lsls	r3, r3, #16
 8009114:	4319      	orrs	r1, r3
 8009116:	4b64      	ldr	r3, [pc, #400]	; (80092a8 <MX_LWIP_Init+0x238>)
 8009118:	789b      	ldrb	r3, [r3, #2]
 800911a:	021b      	lsls	r3, r3, #8
 800911c:	430b      	orrs	r3, r1
 800911e:	4962      	ldr	r1, [pc, #392]	; (80092a8 <MX_LWIP_Init+0x238>)
 8009120:	78c9      	ldrb	r1, [r1, #3]
 8009122:	430b      	orrs	r3, r1
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800912a:	431a      	orrs	r2, r3
 800912c:	4b5e      	ldr	r3, [pc, #376]	; (80092a8 <MX_LWIP_Init+0x238>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	0619      	lsls	r1, r3, #24
 8009132:	4b5d      	ldr	r3, [pc, #372]	; (80092a8 <MX_LWIP_Init+0x238>)
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	041b      	lsls	r3, r3, #16
 8009138:	4319      	orrs	r1, r3
 800913a:	4b5b      	ldr	r3, [pc, #364]	; (80092a8 <MX_LWIP_Init+0x238>)
 800913c:	789b      	ldrb	r3, [r3, #2]
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	430b      	orrs	r3, r1
 8009142:	4959      	ldr	r1, [pc, #356]	; (80092a8 <MX_LWIP_Init+0x238>)
 8009144:	78c9      	ldrb	r1, [r1, #3]
 8009146:	430b      	orrs	r3, r1
 8009148:	0e1b      	lsrs	r3, r3, #24
 800914a:	4313      	orrs	r3, r2
 800914c:	4a59      	ldr	r2, [pc, #356]	; (80092b4 <MX_LWIP_Init+0x244>)
 800914e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009150:	4b56      	ldr	r3, [pc, #344]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	061a      	lsls	r2, r3, #24
 8009156:	4b55      	ldr	r3, [pc, #340]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	041b      	lsls	r3, r3, #16
 800915c:	431a      	orrs	r2, r3
 800915e:	4b53      	ldr	r3, [pc, #332]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009160:	789b      	ldrb	r3, [r3, #2]
 8009162:	021b      	lsls	r3, r3, #8
 8009164:	4313      	orrs	r3, r2
 8009166:	4a51      	ldr	r2, [pc, #324]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009168:	78d2      	ldrb	r2, [r2, #3]
 800916a:	4313      	orrs	r3, r2
 800916c:	061a      	lsls	r2, r3, #24
 800916e:	4b4f      	ldr	r3, [pc, #316]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	0619      	lsls	r1, r3, #24
 8009174:	4b4d      	ldr	r3, [pc, #308]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	041b      	lsls	r3, r3, #16
 800917a:	4319      	orrs	r1, r3
 800917c:	4b4b      	ldr	r3, [pc, #300]	; (80092ac <MX_LWIP_Init+0x23c>)
 800917e:	789b      	ldrb	r3, [r3, #2]
 8009180:	021b      	lsls	r3, r3, #8
 8009182:	430b      	orrs	r3, r1
 8009184:	4949      	ldr	r1, [pc, #292]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009186:	78c9      	ldrb	r1, [r1, #3]
 8009188:	430b      	orrs	r3, r1
 800918a:	021b      	lsls	r3, r3, #8
 800918c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009190:	431a      	orrs	r2, r3
 8009192:	4b46      	ldr	r3, [pc, #280]	; (80092ac <MX_LWIP_Init+0x23c>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	0619      	lsls	r1, r3, #24
 8009198:	4b44      	ldr	r3, [pc, #272]	; (80092ac <MX_LWIP_Init+0x23c>)
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	4319      	orrs	r1, r3
 80091a0:	4b42      	ldr	r3, [pc, #264]	; (80092ac <MX_LWIP_Init+0x23c>)
 80091a2:	789b      	ldrb	r3, [r3, #2]
 80091a4:	021b      	lsls	r3, r3, #8
 80091a6:	430b      	orrs	r3, r1
 80091a8:	4940      	ldr	r1, [pc, #256]	; (80092ac <MX_LWIP_Init+0x23c>)
 80091aa:	78c9      	ldrb	r1, [r1, #3]
 80091ac:	430b      	orrs	r3, r1
 80091ae:	0a1b      	lsrs	r3, r3, #8
 80091b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091b4:	431a      	orrs	r2, r3
 80091b6:	4b3d      	ldr	r3, [pc, #244]	; (80092ac <MX_LWIP_Init+0x23c>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	0619      	lsls	r1, r3, #24
 80091bc:	4b3b      	ldr	r3, [pc, #236]	; (80092ac <MX_LWIP_Init+0x23c>)
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	041b      	lsls	r3, r3, #16
 80091c2:	4319      	orrs	r1, r3
 80091c4:	4b39      	ldr	r3, [pc, #228]	; (80092ac <MX_LWIP_Init+0x23c>)
 80091c6:	789b      	ldrb	r3, [r3, #2]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	430b      	orrs	r3, r1
 80091cc:	4937      	ldr	r1, [pc, #220]	; (80092ac <MX_LWIP_Init+0x23c>)
 80091ce:	78c9      	ldrb	r1, [r1, #3]
 80091d0:	430b      	orrs	r3, r1
 80091d2:	0e1b      	lsrs	r3, r3, #24
 80091d4:	4313      	orrs	r3, r2
 80091d6:	4a38      	ldr	r2, [pc, #224]	; (80092b8 <MX_LWIP_Init+0x248>)
 80091d8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80091da:	4b35      	ldr	r3, [pc, #212]	; (80092b0 <MX_LWIP_Init+0x240>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	061a      	lsls	r2, r3, #24
 80091e0:	4b33      	ldr	r3, [pc, #204]	; (80092b0 <MX_LWIP_Init+0x240>)
 80091e2:	785b      	ldrb	r3, [r3, #1]
 80091e4:	041b      	lsls	r3, r3, #16
 80091e6:	431a      	orrs	r2, r3
 80091e8:	4b31      	ldr	r3, [pc, #196]	; (80092b0 <MX_LWIP_Init+0x240>)
 80091ea:	789b      	ldrb	r3, [r3, #2]
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	4313      	orrs	r3, r2
 80091f0:	4a2f      	ldr	r2, [pc, #188]	; (80092b0 <MX_LWIP_Init+0x240>)
 80091f2:	78d2      	ldrb	r2, [r2, #3]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	061a      	lsls	r2, r3, #24
 80091f8:	4b2d      	ldr	r3, [pc, #180]	; (80092b0 <MX_LWIP_Init+0x240>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	0619      	lsls	r1, r3, #24
 80091fe:	4b2c      	ldr	r3, [pc, #176]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	4319      	orrs	r1, r3
 8009206:	4b2a      	ldr	r3, [pc, #168]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009208:	789b      	ldrb	r3, [r3, #2]
 800920a:	021b      	lsls	r3, r3, #8
 800920c:	430b      	orrs	r3, r1
 800920e:	4928      	ldr	r1, [pc, #160]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009210:	78c9      	ldrb	r1, [r1, #3]
 8009212:	430b      	orrs	r3, r1
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800921a:	431a      	orrs	r2, r3
 800921c:	4b24      	ldr	r3, [pc, #144]	; (80092b0 <MX_LWIP_Init+0x240>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	0619      	lsls	r1, r3, #24
 8009222:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	041b      	lsls	r3, r3, #16
 8009228:	4319      	orrs	r1, r3
 800922a:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <MX_LWIP_Init+0x240>)
 800922c:	789b      	ldrb	r3, [r3, #2]
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	430b      	orrs	r3, r1
 8009232:	491f      	ldr	r1, [pc, #124]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009234:	78c9      	ldrb	r1, [r1, #3]
 8009236:	430b      	orrs	r3, r1
 8009238:	0a1b      	lsrs	r3, r3, #8
 800923a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800923e:	431a      	orrs	r2, r3
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	0619      	lsls	r1, r3, #24
 8009246:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	041b      	lsls	r3, r3, #16
 800924c:	4319      	orrs	r1, r3
 800924e:	4b18      	ldr	r3, [pc, #96]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009250:	789b      	ldrb	r3, [r3, #2]
 8009252:	021b      	lsls	r3, r3, #8
 8009254:	430b      	orrs	r3, r1
 8009256:	4916      	ldr	r1, [pc, #88]	; (80092b0 <MX_LWIP_Init+0x240>)
 8009258:	78c9      	ldrb	r1, [r1, #3]
 800925a:	430b      	orrs	r3, r1
 800925c:	0e1b      	lsrs	r3, r3, #24
 800925e:	4313      	orrs	r3, r2
 8009260:	4a16      	ldr	r2, [pc, #88]	; (80092bc <MX_LWIP_Init+0x24c>)
 8009262:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009264:	4b16      	ldr	r3, [pc, #88]	; (80092c0 <MX_LWIP_Init+0x250>)
 8009266:	9302      	str	r3, [sp, #8]
 8009268:	4b16      	ldr	r3, [pc, #88]	; (80092c4 <MX_LWIP_Init+0x254>)
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	2300      	movs	r3, #0
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4b12      	ldr	r3, [pc, #72]	; (80092bc <MX_LWIP_Init+0x24c>)
 8009272:	4a11      	ldr	r2, [pc, #68]	; (80092b8 <MX_LWIP_Init+0x248>)
 8009274:	490f      	ldr	r1, [pc, #60]	; (80092b4 <MX_LWIP_Init+0x244>)
 8009276:	4814      	ldr	r0, [pc, #80]	; (80092c8 <MX_LWIP_Init+0x258>)
 8009278:	f007 fc76 	bl	8010b68 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800927c:	4812      	ldr	r0, [pc, #72]	; (80092c8 <MX_LWIP_Init+0x258>)
 800927e:	f007 fd53 	bl	8010d28 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009282:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <MX_LWIP_Init+0x258>)
 8009284:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009288:	089b      	lsrs	r3, r3, #2
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009294:	480c      	ldr	r0, [pc, #48]	; (80092c8 <MX_LWIP_Init+0x258>)
 8009296:	f007 fd57 	bl	8010d48 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800929a:	e002      	b.n	80092a2 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800929c:	480a      	ldr	r0, [pc, #40]	; (80092c8 <MX_LWIP_Init+0x258>)
 800929e:	f007 fd97 	bl	8010dd0 <netif_set_down>
}
 80092a2:	bf00      	nop
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	2000450c 	.word	0x2000450c
 80092ac:	20004508 	.word	0x20004508
 80092b0:	200044c8 	.word	0x200044c8
 80092b4:	20004504 	.word	0x20004504
 80092b8:	20004510 	.word	0x20004510
 80092bc:	20004514 	.word	0x20004514
 80092c0:	080100ed 	.word	0x080100ed
 80092c4:	08009919 	.word	0x08009919
 80092c8:	200044cc 	.word	0x200044cc

080092cc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08e      	sub	sp, #56	; 0x38
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	605a      	str	r2, [r3, #4]
 80092de:	609a      	str	r2, [r3, #8]
 80092e0:	60da      	str	r2, [r3, #12]
 80092e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a59      	ldr	r2, [pc, #356]	; (8009450 <HAL_ETH_MspInit+0x184>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	f040 80ac 	bne.w	8009448 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80092f0:	2300      	movs	r3, #0
 80092f2:	623b      	str	r3, [r7, #32]
 80092f4:	4b57      	ldr	r3, [pc, #348]	; (8009454 <HAL_ETH_MspInit+0x188>)
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	4a56      	ldr	r2, [pc, #344]	; (8009454 <HAL_ETH_MspInit+0x188>)
 80092fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092fe:	6313      	str	r3, [r2, #48]	; 0x30
 8009300:	4b54      	ldr	r3, [pc, #336]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009308:	623b      	str	r3, [r7, #32]
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
 8009310:	4b50      	ldr	r3, [pc, #320]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	4a4f      	ldr	r2, [pc, #316]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800931a:	6313      	str	r3, [r2, #48]	; 0x30
 800931c:	4b4d      	ldr	r3, [pc, #308]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009324:	61fb      	str	r3, [r7, #28]
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	2300      	movs	r3, #0
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	4b49      	ldr	r3, [pc, #292]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	4a48      	ldr	r2, [pc, #288]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009336:	6313      	str	r3, [r2, #48]	; 0x30
 8009338:	4b46      	ldr	r3, [pc, #280]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009340:	61bb      	str	r3, [r7, #24]
 8009342:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	4b42      	ldr	r3, [pc, #264]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	4a41      	ldr	r2, [pc, #260]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800934e:	f043 0304 	orr.w	r3, r3, #4
 8009352:	6313      	str	r3, [r2, #48]	; 0x30
 8009354:	4b3f      	ldr	r3, [pc, #252]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009360:	2300      	movs	r3, #0
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	4b3b      	ldr	r3, [pc, #236]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009368:	4a3a      	ldr	r2, [pc, #232]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800936a:	f043 0301 	orr.w	r3, r3, #1
 800936e:	6313      	str	r3, [r2, #48]	; 0x30
 8009370:	4b38      	ldr	r3, [pc, #224]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800937c:	2300      	movs	r3, #0
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	4b34      	ldr	r3, [pc, #208]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	4a33      	ldr	r2, [pc, #204]	; (8009454 <HAL_ETH_MspInit+0x188>)
 8009386:	f043 0302 	orr.w	r3, r3, #2
 800938a:	6313      	str	r3, [r2, #48]	; 0x30
 800938c:	4b31      	ldr	r3, [pc, #196]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009398:	2300      	movs	r3, #0
 800939a:	60bb      	str	r3, [r7, #8]
 800939c:	4b2d      	ldr	r3, [pc, #180]	; (8009454 <HAL_ETH_MspInit+0x188>)
 800939e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a0:	4a2c      	ldr	r2, [pc, #176]	; (8009454 <HAL_ETH_MspInit+0x188>)
 80093a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a6:	6313      	str	r3, [r2, #48]	; 0x30
 80093a8:	4b2a      	ldr	r3, [pc, #168]	; (8009454 <HAL_ETH_MspInit+0x188>)
 80093aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80093b4:	2332      	movs	r3, #50	; 0x32
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093b8:	2302      	movs	r3, #2
 80093ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093c0:	2303      	movs	r3, #3
 80093c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80093c4:	230b      	movs	r3, #11
 80093c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093cc:	4619      	mov	r1, r3
 80093ce:	4822      	ldr	r0, [pc, #136]	; (8009458 <HAL_ETH_MspInit+0x18c>)
 80093d0:	f7fa f944 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80093d4:	2386      	movs	r3, #134	; 0x86
 80093d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d8:	2302      	movs	r3, #2
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093dc:	2300      	movs	r3, #0
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093e0:	2303      	movs	r3, #3
 80093e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80093e4:	230b      	movs	r3, #11
 80093e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093ec:	4619      	mov	r1, r3
 80093ee:	481b      	ldr	r0, [pc, #108]	; (800945c <HAL_ETH_MspInit+0x190>)
 80093f0:	f7fa f934 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80093f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093fa:	2302      	movs	r3, #2
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009402:	2303      	movs	r3, #3
 8009404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009406:	230b      	movs	r3, #11
 8009408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800940a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800940e:	4619      	mov	r1, r3
 8009410:	4813      	ldr	r0, [pc, #76]	; (8009460 <HAL_ETH_MspInit+0x194>)
 8009412:	f7fa f923 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009416:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800941c:	2302      	movs	r3, #2
 800941e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009420:	2300      	movs	r3, #0
 8009422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009424:	2303      	movs	r3, #3
 8009426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009428:	230b      	movs	r3, #11
 800942a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800942c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009430:	4619      	mov	r1, r3
 8009432:	480c      	ldr	r0, [pc, #48]	; (8009464 <HAL_ETH_MspInit+0x198>)
 8009434:	f7fa f912 	bl	800365c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009438:	2200      	movs	r2, #0
 800943a:	2105      	movs	r1, #5
 800943c:	203d      	movs	r0, #61	; 0x3d
 800943e:	f7f9 f8af 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009442:	203d      	movs	r0, #61	; 0x3d
 8009444:	f7f9 f8c8 	bl	80025d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009448:	bf00      	nop
 800944a:	3738      	adds	r7, #56	; 0x38
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	40028000 	.word	0x40028000
 8009454:	40023800 	.word	0x40023800
 8009458:	40020800 	.word	0x40020800
 800945c:	40020000 	.word	0x40020000
 8009460:	40020400 	.word	0x40020400
 8009464:	40021800 	.word	0x40021800

08009468 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8009470:	4b04      	ldr	r3, [pc, #16]	; (8009484 <HAL_ETH_RxCpltCallback+0x1c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4618      	mov	r0, r3
 8009476:	f001 ff4d 	bl	800b314 <osSemaphoreRelease>
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000460 	.word	0x20000460

08009488 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8009488:	b5b0      	push	{r4, r5, r7, lr}
 800948a:	b090      	sub	sp, #64	; 0x40
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009494:	4b5c      	ldr	r3, [pc, #368]	; (8009608 <low_level_init+0x180>)
 8009496:	4a5d      	ldr	r2, [pc, #372]	; (800960c <low_level_init+0x184>)
 8009498:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800949a:	4b5b      	ldr	r3, [pc, #364]	; (8009608 <low_level_init+0x180>)
 800949c:	2201      	movs	r2, #1
 800949e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80094a0:	4b59      	ldr	r3, [pc, #356]	; (8009608 <low_level_init+0x180>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80094a6:	2300      	movs	r3, #0
 80094a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80094ac:	2380      	movs	r3, #128	; 0x80
 80094ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80094b2:	23e1      	movs	r3, #225	; 0xe1
 80094b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80094b8:	2300      	movs	r3, #0
 80094ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80094ca:	4a4f      	ldr	r2, [pc, #316]	; (8009608 <low_level_init+0x180>)
 80094cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094d0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80094d2:	4b4d      	ldr	r3, [pc, #308]	; (8009608 <low_level_init+0x180>)
 80094d4:	2201      	movs	r2, #1
 80094d6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80094d8:	4b4b      	ldr	r3, [pc, #300]	; (8009608 <low_level_init+0x180>)
 80094da:	2200      	movs	r2, #0
 80094dc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80094de:	4b4a      	ldr	r3, [pc, #296]	; (8009608 <low_level_init+0x180>)
 80094e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80094e4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80094e6:	4848      	ldr	r0, [pc, #288]	; (8009608 <low_level_init+0x180>)
 80094e8:	f7f9 f8a6 	bl	8002638 <HAL_ETH_Init>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80094f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d108      	bne.n	800950c <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009500:	f043 0304 	orr.w	r3, r3, #4
 8009504:	b2da      	uxtb	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800950c:	2304      	movs	r3, #4
 800950e:	4a40      	ldr	r2, [pc, #256]	; (8009610 <low_level_init+0x188>)
 8009510:	4940      	ldr	r1, [pc, #256]	; (8009614 <low_level_init+0x18c>)
 8009512:	483d      	ldr	r0, [pc, #244]	; (8009608 <low_level_init+0x180>)
 8009514:	f7f9 fa2e 	bl	8002974 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009518:	2304      	movs	r3, #4
 800951a:	4a3f      	ldr	r2, [pc, #252]	; (8009618 <low_level_init+0x190>)
 800951c:	493f      	ldr	r1, [pc, #252]	; (800961c <low_level_init+0x194>)
 800951e:	483a      	ldr	r0, [pc, #232]	; (8009608 <low_level_init+0x180>)
 8009520:	f7f9 fa91 	bl	8002a46 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2206      	movs	r2, #6
 8009528:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800952c:	4b36      	ldr	r3, [pc, #216]	; (8009608 <low_level_init+0x180>)
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	781a      	ldrb	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009538:	4b33      	ldr	r3, [pc, #204]	; (8009608 <low_level_init+0x180>)
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	785a      	ldrb	r2, [r3, #1]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009544:	4b30      	ldr	r3, [pc, #192]	; (8009608 <low_level_init+0x180>)
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	789a      	ldrb	r2, [r3, #2]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009550:	4b2d      	ldr	r3, [pc, #180]	; (8009608 <low_level_init+0x180>)
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	78da      	ldrb	r2, [r3, #3]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800955c:	4b2a      	ldr	r3, [pc, #168]	; (8009608 <low_level_init+0x180>)
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	791a      	ldrb	r2, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009568:	4b27      	ldr	r3, [pc, #156]	; (8009608 <low_level_init+0x180>)
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	795a      	ldrb	r2, [r3, #5]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800957a:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009582:	f043 030a 	orr.w	r3, r3, #10
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800958e:	2300      	movs	r3, #0
 8009590:	62bb      	str	r3, [r7, #40]	; 0x28
 8009592:	2300      	movs	r3, #0
 8009594:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800959a:	2101      	movs	r1, #1
 800959c:	4618      	mov	r0, r3
 800959e:	f001 fe37 	bl	800b210 <osSemaphoreCreate>
 80095a2:	4602      	mov	r2, r0
 80095a4:	4b1e      	ldr	r3, [pc, #120]	; (8009620 <low_level_init+0x198>)
 80095a6:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80095a8:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <low_level_init+0x19c>)
 80095aa:	f107 040c 	add.w	r4, r7, #12
 80095ae:	461d      	mov	r5, r3
 80095b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80095b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	6879      	ldr	r1, [r7, #4]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f001 fd27 	bl	800b016 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80095c8:	480f      	ldr	r0, [pc, #60]	; (8009608 <low_level_init+0x180>)
 80095ca:	f7f9 fd64 	bl	8003096 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80095ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80095d2:	461a      	mov	r2, r3
 80095d4:	211d      	movs	r1, #29
 80095d6:	480c      	ldr	r0, [pc, #48]	; (8009608 <low_level_init+0x180>)
 80095d8:	f7f9 fc8f 	bl	8002efa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	f043 030b 	orr.w	r3, r3, #11
 80095e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e6:	461a      	mov	r2, r3
 80095e8:	211d      	movs	r1, #29
 80095ea:	4807      	ldr	r0, [pc, #28]	; (8009608 <low_level_init+0x180>)
 80095ec:	f7f9 fced 	bl	8002fca <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80095f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80095f4:	461a      	mov	r2, r3
 80095f6:	211d      	movs	r1, #29
 80095f8:	4803      	ldr	r0, [pc, #12]	; (8009608 <low_level_init+0x180>)
 80095fa:	f7f9 fc7e 	bl	8002efa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80095fe:	bf00      	nop
 8009600:	3740      	adds	r7, #64	; 0x40
 8009602:	46bd      	mov	sp, r7
 8009604:	bdb0      	pop	{r4, r5, r7, pc}
 8009606:	bf00      	nop
 8009608:	20005de8 	.word	0x20005de8
 800960c:	40028000 	.word	0x40028000
 8009610:	20005e30 	.word	0x20005e30
 8009614:	20004518 	.word	0x20004518
 8009618:	20004598 	.word	0x20004598
 800961c:	20005d68 	.word	0x20005d68
 8009620:	20000460 	.word	0x20000460
 8009624:	0801b840 	.word	0x0801b840

08009628 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009632:	4b4b      	ldr	r3, [pc, #300]	; (8009760 <low_level_output+0x138>)
 8009634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800964a:	4b45      	ldr	r3, [pc, #276]	; (8009760 <low_level_output+0x138>)
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	623b      	str	r3, [r7, #32]
 8009658:	e05a      	b.n	8009710 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	da03      	bge.n	800966a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009662:	23f8      	movs	r3, #248	; 0xf8
 8009664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009668:	e05c      	b.n	8009724 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	895b      	ldrh	r3, [r3, #10]
 800966e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009674:	e02f      	b.n	80096d6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009676:	69fa      	ldr	r2, [r7, #28]
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	18d0      	adds	r0, r2, r3
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	18d1      	adds	r1, r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800968a:	3304      	adds	r3, #4
 800968c:	461a      	mov	r2, r3
 800968e:	f011 f944 	bl	801a91a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	da03      	bge.n	80096a8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80096a0:	23f8      	movs	r3, #248	; 0xf8
 80096a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80096a6:	e03d      	b.n	8009724 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4413      	add	r3, r2
 80096b4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80096b8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80096c4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80096d0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4413      	add	r3, r2
 80096dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d8c8      	bhi.n	8009676 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	18d0      	adds	r0, r2, r3
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	4413      	add	r3, r2
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4619      	mov	r1, r3
 80096f6:	f011 f910 	bl	801a91a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	623b      	str	r3, [r7, #32]
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1a1      	bne.n	800965a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	4811      	ldr	r0, [pc, #68]	; (8009760 <low_level_output+0x138>)
 800971a:	f7f9 fa01 	bl	8002b20 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <low_level_output+0x138>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972c:	3314      	adds	r3, #20
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0320 	and.w	r3, r3, #32
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00d      	beq.n	8009754 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009738:	4b09      	ldr	r3, [pc, #36]	; (8009760 <low_level_output+0x138>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009740:	3314      	adds	r3, #20
 8009742:	2220      	movs	r2, #32
 8009744:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009746:	4b06      	ldr	r3, [pc, #24]	; (8009760 <low_level_output+0x138>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800974e:	3304      	adds	r3, #4
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009758:	4618      	mov	r0, r3
 800975a:	3728      	adds	r7, #40	; 0x28
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20005de8 	.word	0x20005de8

08009764 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08c      	sub	sp, #48	; 0x30
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800976c:	2300      	movs	r3, #0
 800976e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009770:	2300      	movs	r3, #0
 8009772:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009784:	2300      	movs	r3, #0
 8009786:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009788:	484e      	ldr	r0, [pc, #312]	; (80098c4 <low_level_input+0x160>)
 800978a:	f7f9 fab3 	bl	8002cf4 <HAL_ETH_GetReceivedFrame_IT>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <low_level_input+0x34>
    return NULL;
 8009794:	2300      	movs	r3, #0
 8009796:	e091      	b.n	80098bc <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009798:	4b4a      	ldr	r3, [pc, #296]	; (80098c4 <low_level_input+0x160>)
 800979a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800979e:	4b49      	ldr	r3, [pc, #292]	; (80098c4 <low_level_input+0x160>)
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80097aa:	89fb      	ldrh	r3, [r7, #14]
 80097ac:	2203      	movs	r2, #3
 80097ae:	4619      	mov	r1, r3
 80097b0:	2004      	movs	r0, #4
 80097b2:	f007 fb8f 	bl	8010ed4 <pbuf_alloc>
 80097b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d04b      	beq.n	8009856 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80097be:	4b41      	ldr	r3, [pc, #260]	; (80098c4 <low_level_input+0x160>)
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80097cc:	e040      	b.n	8009850 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	895b      	ldrh	r3, [r3, #10]
 80097d2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80097d8:	e021      	b.n	800981e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	18d0      	adds	r0, r2, r3
 80097e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	18d1      	adds	r1, r2, r3
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80097ee:	3304      	adds	r3, #4
 80097f0:	461a      	mov	r2, r3
 80097f2:	f011 f892 	bl	801a91a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	4413      	add	r3, r2
 8009808:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800980c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009818:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009828:	4293      	cmp	r3, r2
 800982a:	d8d6      	bhi.n	80097da <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	18d0      	adds	r0, r2, r3
 8009834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4413      	add	r3, r2
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4619      	mov	r1, r3
 800983e:	f011 f86c 	bl	801a91a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	4413      	add	r3, r2
 8009848:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1bb      	bne.n	80097ce <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009856:	4b1b      	ldr	r3, [pc, #108]	; (80098c4 <low_level_input+0x160>)
 8009858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800985c:	2300      	movs	r3, #0
 800985e:	613b      	str	r3, [r7, #16]
 8009860:	e00b      	b.n	800987a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	3301      	adds	r3, #1
 8009878:	613b      	str	r3, [r7, #16]
 800987a:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <low_level_input+0x160>)
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	429a      	cmp	r2, r3
 8009882:	d3ee      	bcc.n	8009862 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8009884:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <low_level_input+0x160>)
 8009886:	2200      	movs	r2, #0
 8009888:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <low_level_input+0x160>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009892:	3314      	adds	r3, #20
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00d      	beq.n	80098ba <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800989e:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <low_level_input+0x160>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a6:	3314      	adds	r3, #20
 80098a8:	2280      	movs	r2, #128	; 0x80
 80098aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <low_level_input+0x160>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b4:	3308      	adds	r3, #8
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
  }
  return p;
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3730      	adds	r7, #48	; 0x30
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20005de8 	.word	0x20005de8

080098c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80098d4:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <ethernetif_input+0x4c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80098dc:	4618      	mov	r0, r3
 80098de:	f001 fccb 	bl	800b278 <osSemaphoreWait>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1f5      	bne.n	80098d4 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff ff3b 	bl	8009764 <low_level_input>
 80098ee:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	68b8      	ldr	r0, [r7, #8]
 80098fe:	4798      	blx	r3
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8009906:	68b8      	ldr	r0, [r7, #8]
 8009908:	f007 fe56 	bl	80115b8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1ea      	bne.n	80098e8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009912:	e7df      	b.n	80098d4 <ethernetif_input+0xc>
 8009914:	20000460 	.word	0x20000460

08009918 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d106      	bne.n	8009934 <ethernetif_init+0x1c>
 8009926:	4b10      	ldr	r3, [pc, #64]	; (8009968 <ethernetif_init+0x50>)
 8009928:	f240 222d 	movw	r2, #557	; 0x22d
 800992c:	490f      	ldr	r1, [pc, #60]	; (800996c <ethernetif_init+0x54>)
 800992e:	4810      	ldr	r0, [pc, #64]	; (8009970 <ethernetif_init+0x58>)
 8009930:	f011 f8ae 	bl	801aa90 <iprintf>
  
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a0f      	ldr	r2, [pc, #60]	; (8009974 <ethernetif_init+0x5c>)
 8009938:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2273      	movs	r2, #115	; 0x73
 800993e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2274      	movs	r2, #116	; 0x74
 8009946:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a0a      	ldr	r2, [pc, #40]	; (8009978 <ethernetif_init+0x60>)
 800994e:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a0a      	ldr	r2, [pc, #40]	; (800997c <ethernetif_init+0x64>)
 8009954:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fd96 	bl	8009488 <low_level_init>

  return ERR_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	0801b85c 	.word	0x0801b85c
 800996c:	0801b878 	.word	0x0801b878
 8009970:	0801b888 	.word	0x0801b888
 8009974:	0801b8b0 	.word	0x0801b8b0
 8009978:	08017f1d 	.word	0x08017f1d
 800997c:	08009629 	.word	0x08009629

08009980 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009984:	f7f8 fd26 	bl	80023d4 <HAL_GetTick>
 8009988:	4603      	mov	r3, r0
}
 800998a:	4618      	mov	r0, r3
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7c1b      	ldrb	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d115      	bne.n	80099d2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099aa:	2202      	movs	r2, #2
 80099ac:	2181      	movs	r1, #129	; 0x81
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f010 fe1d 	bl	801a5ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099be:	2202      	movs	r2, #2
 80099c0:	2101      	movs	r1, #1
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f010 fe13 	bl	801a5ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80099d0:	e012      	b.n	80099f8 <USBD_CDC_Init+0x6a>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe f8de 	bl	8002334 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e009      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x448>
 8004192:	e001      	b.n	8004198 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
    }
  }
<<<<<<< HEAD
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470060 	.word	0x42470060

080041b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0ca      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b67      	ldr	r3, [pc, #412]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d90c      	bls.n	80041ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b64      	ldr	r3, [pc, #400]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b62      	ldr	r3, [pc, #392]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b6      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b58      	ldr	r3, [pc, #352]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a57      	ldr	r2, [pc, #348]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800420e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800421c:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a51      	ldr	r2, [pc, #324]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	494c      	ldr	r1, [pc, #304]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
=======
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099d2:	2340      	movs	r3, #64	; 0x40
 80099d4:	2202      	movs	r2, #2
 80099d6:	2181      	movs	r1, #129	; 0x81
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f010 fe08 	bl	801a5ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099e4:	2340      	movs	r3, #64	; 0x40
 80099e6:	2202      	movs	r2, #2
 80099e8:	2101      	movs	r1, #1
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f010 fdff 	bl	801a5ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099f8:	2308      	movs	r3, #8
 80099fa:	2203      	movs	r2, #3
 80099fc:	2182      	movs	r1, #130	; 0x82
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f010 fdf5 	bl	801a5ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009a0a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a0e:	f010 ff65 	bl	801a8dc <malloc>
 8009a12:	4603      	mov	r3, r0
 8009a14:	461a      	mov	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8009a26:	2301      	movs	r3, #1
 8009a28:	73fb      	strb	r3, [r7, #15]
 8009a2a:	e026      	b.n	8009a7a <USBD_CDC_Init+0xec>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d044      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x120>
  {
<<<<<<< HEAD
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b46      	ldr	r3, [pc, #280]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d119      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07d      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d003      	beq.n	800426e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426a:	2b03      	cmp	r3, #3
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426e:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e06d      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e065      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428e:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4933      	ldr	r1, [pc, #204]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a0:	f7fe f848 	bl	8002334 <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	e00a      	b.n	80042be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a8:	f7fe f844 	bl	8002334 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e04d      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 020c 	and.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1eb      	bne.n	80042a8 <HAL_RCC_ClockConfig+0xf8>
      }
=======
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a32:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7c1b      	ldrb	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a60:	2101      	movs	r1, #1
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f010 feb4 	bl	801a7d0 <USBD_LL_PrepareReceive>
 8009a68:	e007      	b.n	8009a7a <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20c      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x148>
    {
<<<<<<< HEAD
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e030      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4915      	ldr	r1, [pc, #84]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	490d      	ldr	r1, [pc, #52]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004336:	f000 f81d 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 800433a:	4601      	mov	r1, r0
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	4a09      	ldr	r2, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	5cd3      	ldrb	r3, [r2, r3]
 800434a:	fa21 f303 	lsr.w	r3, r1, r3
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004352:	2000      	movs	r0, #0
 8004354:	f7fd fa3c 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023c00 	.word	0x40023c00
 8004368:	40023800 	.word	0x40023800
 800436c:	0800c868 	.word	0x0800c868
 8004370:	20000000 	.word	0x20000000

08004374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
=======
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a70:	2340      	movs	r3, #64	; 0x40
 8009a72:	2101      	movs	r1, #1
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f010 feab 	bl	801a7d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009a94:	2181      	movs	r1, #129	; 0x81
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f010 fdcf 	bl	801a63a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f010 fdc8 	bl	801a63a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ab2:	2182      	movs	r1, #130	; 0x82
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f010 fdc0 	bl	801a63a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00e      	beq.n	8009ae8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ada:	4618      	mov	r0, r3
 8009adc:	f010 ff06 	bl	801a8ec <free>
    pdev->pClassData = NULL;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	2300      	movs	r3, #0
 8004384:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800438a:	4b63      	ldr	r3, [pc, #396]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b04      	cmp	r3, #4
 8004394:	d007      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x32>
 8004396:	2b08      	cmp	r3, #8
 8004398:	d008      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x38>
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80b4 	bne.w	8004508 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b5e      	ldr	r3, [pc, #376]	; (800451c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043a2:	60bb      	str	r3, [r7, #8]
       break;
 80043a4:	e0b3      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
=======
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b086      	sub	sp, #24
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b02:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d039      	beq.n	8009b90 <USBD_CDC_Setup+0x9e>
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d17c      	bne.n	8009c1a <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	88db      	ldrh	r3, [r3, #6]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d029      	beq.n	8009b7c <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b25b      	sxtb	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da11      	bge.n	8009b56 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009b3e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	88d2      	ldrh	r2, [r2, #6]
 8009b44:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b46:	6939      	ldr	r1, [r7, #16]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	88db      	ldrh	r3, [r3, #6]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 f99c 	bl	800ae8c <USBD_CtlSendData>
    else
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    {
      sysclockfreq = HSE_VALUE;
 80043a6:	4b5e      	ldr	r3, [pc, #376]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043a8:	60bb      	str	r3, [r7, #8]
      break;
 80043aa:	e0b0      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x19a>
    }
<<<<<<< HEAD
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ac:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043b6:	4b58      	ldr	r3, [pc, #352]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04a      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0xe4>
=======
    break;
 8009b54:	e068      	b.n	8009c28 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	785a      	ldrb	r2, [r3, #1]
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	88db      	ldrh	r3, [r3, #6]
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b6c:	6939      	ldr	r1, [r7, #16]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	88db      	ldrh	r3, [r3, #6]
 8009b72:	461a      	mov	r2, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 f9b7 	bl	800aee8 <USBD_CtlPrepareRx>
    break;
 8009b7a:	e055      	b.n	8009c28 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	7850      	ldrb	r0, [r2, #1]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	4798      	blx	r3
    break;
 8009b8e:	e04b      	b.n	8009c28 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	785b      	ldrb	r3, [r3, #1]
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	d017      	beq.n	8009bc8 <USBD_CDC_Setup+0xd6>
 8009b98:	2b0b      	cmp	r3, #11
 8009b9a:	d029      	beq.n	8009bf0 <USBD_CDC_Setup+0xfe>
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d133      	bne.n	8009c08 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d107      	bne.n	8009bba <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009baa:	f107 030c 	add.w	r3, r7, #12
 8009bae:	2202      	movs	r2, #2
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 f96a 	bl	800ae8c <USBD_CtlSendData>
      else
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c2:	4b55      	ldr	r3, [pc, #340]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	f04f 0400 	mov.w	r4, #0
 80043cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	ea03 0501 	and.w	r5, r3, r1
 80043d8:	ea04 0602 	and.w	r6, r4, r2
 80043dc:	4629      	mov	r1, r5
 80043de:	4632      	mov	r2, r6
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f04f 0400 	mov.w	r4, #0
 80043e8:	0154      	lsls	r4, r2, #5
 80043ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043ee:	014b      	lsls	r3, r1, #5
 80043f0:	4619      	mov	r1, r3
 80043f2:	4622      	mov	r2, r4
 80043f4:	1b49      	subs	r1, r1, r5
 80043f6:	eb62 0206 	sbc.w	r2, r2, r6
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	f04f 0400 	mov.w	r4, #0
 8004402:	0194      	lsls	r4, r2, #6
 8004404:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004408:	018b      	lsls	r3, r1, #6
 800440a:	1a5b      	subs	r3, r3, r1
 800440c:	eb64 0402 	sbc.w	r4, r4, r2
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	00e2      	lsls	r2, r4, #3
 800441a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800441e:	00d9      	lsls	r1, r3, #3
 8004420:	460b      	mov	r3, r1
 8004422:	4614      	mov	r4, r2
 8004424:	195b      	adds	r3, r3, r5
 8004426:	eb44 0406 	adc.w	r4, r4, r6
 800442a:	f04f 0100 	mov.w	r1, #0
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	0262      	lsls	r2, r4, #9
 8004434:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004438:	0259      	lsls	r1, r3, #9
 800443a:	460b      	mov	r3, r1
 800443c:	4614      	mov	r4, r2
 800443e:	4618      	mov	r0, r3
 8004440:	4621      	mov	r1, r4
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f04f 0400 	mov.w	r4, #0
 8004448:	461a      	mov	r2, r3
 800444a:	4623      	mov	r3, r4
 800444c:	f7fb ff20 	bl	8000290 <__aeabi_uldivmod>
 8004450:	4603      	mov	r3, r0
 8004452:	460c      	mov	r4, r1
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e049      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x178>
      }
<<<<<<< HEAD
=======
      break;
 8009bb8:	e02e      	b.n	8009c18 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 f8fa 	bl	800adb6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc6:	e027      	b.n	8009c18 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d107      	bne.n	8009be2 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009bd2:	f107 030f 	add.w	r3, r7, #15
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 f956 	bl	800ae8c <USBD_CtlSendData>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004458:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	f04f 0400 	mov.w	r4, #0
 8004462:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	ea03 0501 	and.w	r5, r3, r1
 800446e:	ea04 0602 	and.w	r6, r4, r2
 8004472:	4629      	mov	r1, r5
 8004474:	4632      	mov	r2, r6
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	f04f 0400 	mov.w	r4, #0
 800447e:	0154      	lsls	r4, r2, #5
 8004480:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004484:	014b      	lsls	r3, r1, #5
 8004486:	4619      	mov	r1, r3
 8004488:	4622      	mov	r2, r4
 800448a:	1b49      	subs	r1, r1, r5
 800448c:	eb62 0206 	sbc.w	r2, r2, r6
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	f04f 0400 	mov.w	r4, #0
 8004498:	0194      	lsls	r4, r2, #6
 800449a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800449e:	018b      	lsls	r3, r1, #6
 80044a0:	1a5b      	subs	r3, r3, r1
 80044a2:	eb64 0402 	sbc.w	r4, r4, r2
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	00e2      	lsls	r2, r4, #3
 80044b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044b4:	00d9      	lsls	r1, r3, #3
 80044b6:	460b      	mov	r3, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	195b      	adds	r3, r3, r5
 80044bc:	eb44 0406 	adc.w	r4, r4, r6
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	02a2      	lsls	r2, r4, #10
 80044ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044ce:	0299      	lsls	r1, r3, #10
 80044d0:	460b      	mov	r3, r1
 80044d2:	4614      	mov	r4, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	4621      	mov	r1, r4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	461a      	mov	r2, r3
 80044e0:	4623      	mov	r3, r4
 80044e2:	f7fb fed5 	bl	8000290 <__aeabi_uldivmod>
 80044e6:	4603      	mov	r3, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	60fb      	str	r3, [r7, #12]
      }
<<<<<<< HEAD
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	60bb      	str	r3, [r7, #8]
      break;
 8004506:	e002      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800450a:	60bb      	str	r3, [r7, #8]
      break;
 800450c:	bf00      	nop
    }
=======
      break;
 8009be0:	e01a      	b.n	8009c18 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 f8e6 	bl	800adb6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009bea:	2302      	movs	r3, #2
 8009bec:	75fb      	strb	r3, [r7, #23]
      break;
 8009bee:	e013      	b.n	8009c18 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d00d      	beq.n	8009c16 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 f8da 	bl	800adb6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009c02:	2302      	movs	r3, #2
 8009c04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009c06:	e006      	b.n	8009c16 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f001 f8d3 	bl	800adb6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c10:	2302      	movs	r3, #2
 8009c12:	75fb      	strb	r3, [r7, #23]
      break;
 8009c14:	e000      	b.n	8009c18 <USBD_CDC_Setup+0x126>
      break;
 8009c16:	bf00      	nop
    }
    break;
 8009c18:	e006      	b.n	8009c28 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 f8ca 	bl	800adb6 <USBD_CtlError>
    ret = USBD_FAIL;
 8009c22:	2302      	movs	r3, #2
 8009c24:	75fb      	strb	r3, [r7, #23]
    break;
 8009c26:	bf00      	nop
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  return sysclockfreq;
 800450e:	68bb      	ldr	r3, [r7, #8]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	007a1200 	.word	0x007a1200

<<<<<<< HEAD
08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
=======
  return ret;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4601      	mov	r1, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4a03      	ldr	r2, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0800c878 	.word	0x0800c878

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004568:	f7ff ffdc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800456c:	4601      	mov	r1, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0b5b      	lsrs	r3, r3, #13
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4a03      	ldr	r2, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	0800c878 	.word	0x0800c878

0800458c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	220f      	movs	r2, #15
 800459a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0203 	and.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <HAL_RCC_GetClockConfig+0x60>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40023c00 	.word	0x40023c00

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e01d      	b.n	800463e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fb7e 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fbe2 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
=======
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c44:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009c4c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d03a      	beq.n	8009cce <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	440b      	add	r3, r1
 8009c66:	331c      	adds	r3, #28
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d029      	beq.n	8009cc2 <USBD_CDC_DataIn+0x90>
 8009c6e:	78fa      	ldrb	r2, [r7, #3]
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	331c      	adds	r3, #28
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	78f9      	ldrb	r1, [r7, #3]
 8009c82:	68b8      	ldr	r0, [r7, #8]
 8009c84:	460b      	mov	r3, r1
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	1a5b      	subs	r3, r3, r1
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4403      	add	r3, r0
 8009c8e:	3344      	adds	r3, #68	; 0x44
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c96:	fb03 f301 	mul.w	r3, r3, r1
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d110      	bne.n	8009cc2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009ca0:	78fa      	ldrb	r2, [r7, #3]
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	440b      	add	r3, r1
 8009cae:	331c      	adds	r3, #28
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009cb4:	78f9      	ldrb	r1, [r7, #3]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	2200      	movs	r2, #0
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f010 fd65 	bl	801a78a <USBD_LL_Transmit>
 8009cc0:	e003      	b.n	8009cca <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e000      	b.n	8009cd0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009cce:	2302      	movs	r3, #2
  }
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b06      	cmp	r3, #6
 800466e:	d007      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
=======
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f010 fd90 	bl	801a816 <USBD_LL_GetRxDataSize>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00d      	beq.n	8009d24 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4798      	blx	r3

    return USBD_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	e000      	b.n	8009d26 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009d24:	2302      	movs	r3, #2
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
=======
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e01d      	b.n	80046dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
=======
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009d3c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d015      	beq.n	8009d74 <USBD_CDC_EP0_RxReady+0x46>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d4e:	2bff      	cmp	r3, #255	; 0xff
 8009d50:	d010      	beq.n	8009d74 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009d60:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d68:	b292      	uxth	r2, r2
 8009d6a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	22ff      	movs	r2, #255	; 0xff
 8009d70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f815 	bl	80046e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
<<<<<<< HEAD

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 fb93 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
=======
  return USBD_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2243      	movs	r2, #67	; 0x43
 8009d8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009d8e:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	20000090 	.word	0x20000090

08009da0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2243      	movs	r2, #67	; 0x43
 8009dac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009dae:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	2000004c 	.word	0x2000004c

08009dc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2243      	movs	r2, #67	; 0x43
 8009dcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009dce:	4b03      	ldr	r3, [pc, #12]	; (8009ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	200000d4 	.word	0x200000d4

08009de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	220a      	movs	r2, #10
 8009dec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009dee:	4b03      	ldr	r3, [pc, #12]	; (8009dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	20000008 	.word	0x20000008

08009e00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e01d      	b.n	8004746 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f815 	bl	800474e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f000 fb5e 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
=======
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b087      	sub	sp, #28
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e42:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e4c:	88fa      	ldrh	r2, [r7, #6]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
=======
 8009e62:	b480      	push	{r7}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e72:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d122      	bne.n	80047be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d11b      	bne.n	80047be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f06f 0202 	mvn.w	r2, #2
 800478e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fb08 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 80047aa:	e005      	b.n	80047b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fafa 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fb0b 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	771a      	strb	r2, [r3, #28]
      }
=======
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d017      	beq.n	8009ed4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	7c1b      	ldrb	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d109      	bne.n	8009ec0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f010 fc89 	bl	801a7d0 <USBD_LL_PrepareReceive>
 8009ebe:	e007      	b.n	8009ed0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d122      	bne.n	8004812 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d11b      	bne.n	8004812 <HAL_TIM_IRQHandler+0xb0>
    {
<<<<<<< HEAD
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f06f 0204 	mvn.w	r2, #4
 80047e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fade 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 80047fe:	e005      	b.n	800480c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fad0 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fae1 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	771a      	strb	r2, [r3, #28]
    }
=======
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	2101      	movs	r1, #1
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f010 fc80 	bl	801a7d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e000      	b.n	8009ed6 <USBD_CDC_ReceivePacket+0x4c>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d122      	bne.n	8004866 <HAL_TIM_IRQHandler+0x104>
  {
<<<<<<< HEAD
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d11b      	bne.n	8004866 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0208 	mvn.w	r2, #8
 8004836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2204      	movs	r2, #4
 800483c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fab4 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004852:	e005      	b.n	8004860 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 faa6 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fab7 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b10      	cmp	r3, #16
 8004872:	d122      	bne.n	80048ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d11b      	bne.n	80048ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0210 	mvn.w	r2, #16
 800488a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2208      	movs	r2, #8
 8004890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa8a 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 80048a6:	e005      	b.n	80048b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa7c 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa8d 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10e      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0201 	mvn.w	r2, #1
 80048de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc ff2f 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d10e      	bne.n	8004912 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d107      	bne.n	8004912 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fed6 	bl	80056be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d10e      	bne.n	800493e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d107      	bne.n	800493e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa52 	bl	8004de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b20      	cmp	r3, #32
 800494a:	d10e      	bne.n	800496a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b20      	cmp	r3, #32
 8004958:	d107      	bne.n	800496a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f06f 0220 	mvn.w	r2, #32
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fea0 	bl	80056aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIM_IC_ConfigChannel+0x1a>
 8004988:	2302      	movs	r3, #2
 800498a:	e08a      	b.n	8004aa2 <HAL_TIM_IC_ConfigChannel+0x130>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f000 fc71 	bl	8005298 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 020c 	bic.w	r2, r2, #12
 80049c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6999      	ldr	r1, [r3, #24]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]
 80049d8:	e05a      	b.n	8004a90 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11c      	bne.n	8004a1a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f000 fcf5 	bl	80053de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a02:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6999      	ldr	r1, [r3, #24]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	619a      	str	r2, [r3, #24]
 8004a18:	e03a      	b.n	8004a90 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f000 fd42 	bl	80054b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 020c 	bic.w	r2, r2, #12
 8004a42:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69d9      	ldr	r1, [r3, #28]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	61da      	str	r2, [r3, #28]
 8004a56:	e01b      	b.n	8004a90 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f000 fd62 	bl	8005530 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69d9      	ldr	r1, [r3, #28]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	021a      	lsls	r2, r3, #8
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0b4      	b.n	8004c30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	f200 809f 	bhi.w	8004c1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b19 	.word	0x08004b19
 8004ae8:	08004c1d 	.word	0x08004c1d
 8004aec:	08004c1d 	.word	0x08004c1d
 8004af0:	08004c1d 	.word	0x08004c1d
 8004af4:	08004b59 	.word	0x08004b59
 8004af8:	08004c1d 	.word	0x08004c1d
 8004afc:	08004c1d 	.word	0x08004c1d
 8004b00:	08004c1d 	.word	0x08004c1d
 8004b04:	08004b9b 	.word	0x08004b9b
 8004b08:	08004c1d 	.word	0x08004c1d
 8004b0c:	08004c1d 	.word	0x08004c1d
 8004b10:	08004c1d 	.word	0x08004c1d
 8004b14:	08004bdb 	.word	0x08004bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa0a 	bl	8004f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
      break;
 8004b56:	e062      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fa5a 	bl	8005018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6999      	ldr	r1, [r3, #24]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
      break;
 8004b98:	e041      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 faaf 	bl	8005104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0208 	orr.w	r2, r2, #8
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0204 	bic.w	r2, r2, #4
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      break;
 8004bd8:	e021      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fb03 	bl	80051ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	61da      	str	r2, [r3, #28]
      break;
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004c1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
=======
    return USBD_FAIL;
 8009ed4:	2302      	movs	r3, #2
  }
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	e01a      	b.n	8009f2c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	79fa      	ldrb	r2, [r7, #7]
 8009f22:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f010 fafb 	bl	801a520 <USBD_LL_Init>

  return USBD_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	e001      	b.n	8009f5a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009f56:	2302      	movs	r3, #2
 8009f58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f010 fb21 	bl	801a5b8 <USBD_LL_Start>

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00c      	beq.n	8009fca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	4611      	mov	r1, r2
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	4798      	blx	r3
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	4611      	mov	r1, r2
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	4798      	blx	r3
  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fe95 	bl	800ad3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a020:	461a      	mov	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a02e:	f003 031f 	and.w	r3, r3, #31
 800a032:	2b01      	cmp	r3, #1
 800a034:	d00c      	beq.n	800a050 <USBD_LL_SetupStage+0x56>
 800a036:	2b01      	cmp	r3, #1
 800a038:	d302      	bcc.n	800a040 <USBD_LL_SetupStage+0x46>
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d010      	beq.n	800a060 <USBD_LL_SetupStage+0x66>
 800a03e:	e017      	b.n	800a070 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fa05 	bl	800a458 <USBD_StdDevReq>
    break;
 800a04e:	e01a      	b.n	800a086 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fa67 	bl	800a52c <USBD_StdItfReq>
    break;
 800a05e:	e012      	b.n	800a086 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 faa5 	bl	800a5b8 <USBD_StdEPReq>
    break;
 800a06e:	e00a      	b.n	800a086 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a076:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f010 fafa 	bl	801a678 <USBD_LL_StallEP>
    break;
 800a084:	bf00      	nop
  }

  return USBD_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	460b      	mov	r3, r1
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a09e:	7afb      	ldrb	r3, [r7, #11]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d14b      	bne.n	800a13c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a0aa:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d134      	bne.n	800a120 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d919      	bls.n	800a0f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	68da      	ldr	r2, [r3, #12]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	68da      	ldr	r2, [r3, #12]
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d203      	bcs.n	800a0e4 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	e002      	b.n	800a0ea <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6879      	ldr	r1, [r7, #4]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 ff18 	bl	800af24 <USBD_CtlContinueRx>
 800a0f4:	e038      	b.n	800a168 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d105      	bne.n	800a118 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 ff15 	bl	800af48 <USBD_CtlSendStatus>
 800a11e:	e023      	b.n	800a168 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a126:	2b05      	cmp	r3, #5
 800a128:	d11e      	bne.n	800a168 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800a132:	2100      	movs	r1, #0
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f010 fa9f 	bl	801a678 <USBD_LL_StallEP>
 800a13a:	e015      	b.n	800a168 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00d      	beq.n	800a164 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d108      	bne.n	800a164 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	7afa      	ldrb	r2, [r7, #11]
 800a15c:	4611      	mov	r1, r2
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	4798      	blx	r3
 800a162:	e001      	b.n	800a168 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a164:	2302      	movs	r3, #2
 800a166:	e000      	b.n	800a16a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	460b      	mov	r3, r1
 800a17c:	607a      	str	r2, [r7, #4]
 800a17e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a180:	7afb      	ldrb	r3, [r7, #11]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d17f      	bne.n	800a286 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3314      	adds	r3, #20
 800a18a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a192:	2b02      	cmp	r3, #2
 800a194:	d15c      	bne.n	800a250 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d915      	bls.n	800a1ce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	1ad2      	subs	r2, r2, r3
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fe82 	bl	800aec4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f010 fb02 	bl	801a7d0 <USBD_LL_PrepareReceive>
 800a1cc:	e04e      	b.n	800a26c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	6912      	ldr	r2, [r2, #16]
 800a1d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1da:	fb02 f201 	mul.w	r2, r2, r1
 800a1de:	1a9b      	subs	r3, r3, r2
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d11c      	bne.n	800a21e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	689a      	ldr	r2, [r3, #8]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d316      	bcc.n	800a21e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	689a      	ldr	r2, [r3, #8]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d20f      	bcs.n	800a21e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1fe:	2200      	movs	r2, #0
 800a200:	2100      	movs	r1, #0
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 fe5e 	bl	800aec4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a210:	2300      	movs	r3, #0
 800a212:	2200      	movs	r2, #0
 800a214:	2100      	movs	r1, #0
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f010 fada 	bl	801a7d0 <USBD_LL_PrepareReceive>
 800a21c:	e026      	b.n	800a26c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00a      	beq.n	800a240 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a230:	2b03      	cmp	r3, #3
 800a232:	d105      	bne.n	800a240 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a240:	2180      	movs	r1, #128	; 0x80
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f010 fa18 	bl	801a678 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 fe90 	bl	800af6e <USBD_CtlReceiveStatus>
 800a24e:	e00d      	b.n	800a26c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a256:	2b04      	cmp	r3, #4
 800a258:	d004      	beq.n	800a264 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a260:	2b00      	cmp	r3, #0
 800a262:	d103      	bne.n	800a26c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a264:	2180      	movs	r1, #128	; 0x80
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f010 fa06 	bl	801a678 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a272:	2b01      	cmp	r3, #1
 800a274:	d11d      	bne.n	800a2b2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f7ff fe82 	bl	8009f80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a284:	e015      	b.n	800a2b2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00d      	beq.n	800a2ae <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d108      	bne.n	800a2ae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	7afa      	ldrb	r2, [r7, #11]
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	4798      	blx	r3
 800a2ac:	e001      	b.n	800a2b2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e000      	b.n	800a2b4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2c4:	2340      	movs	r3, #64	; 0x40
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f010 f98f 	bl	801a5ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2240      	movs	r2, #64	; 0x40
 800a2dc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2e0:	2340      	movs	r3, #64	; 0x40
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2180      	movs	r1, #128	; 0x80
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f010 f981 	bl	801a5ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2240      	movs	r2, #64	; 0x40
 800a2f6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d009      	beq.n	800a334 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	6852      	ldr	r2, [r2, #4]
 800a32c:	b2d2      	uxtb	r2, r2
 800a32e:	4611      	mov	r1, r2
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4798      	blx	r3
  }

  return USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	460b      	mov	r3, r1
 800a348:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	78fa      	ldrb	r2, [r7, #3]
 800a34e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2204      	movs	r2, #4
 800a376:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0a6      	b.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d067      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0x120>
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d80b      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x6c>
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d073      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d802      	bhi.n	8004c9a <HAL_TIM_ConfigClockSource+0x62>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d06f      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
=======
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d10b      	bne.n	800a3d4 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3ce:	69db      	ldr	r3, [r3, #28]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	4798      	blx	r3
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }

    default:
      break;
 8004c98:	e078      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d06c      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
 8004c9e:	2b30      	cmp	r3, #48	; 0x30
 8004ca0:	d06a      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ca2:	e073      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ca4:	2b70      	cmp	r3, #112	; 0x70
 8004ca6:	d00d      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x8c>
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d804      	bhi.n	8004cb6 <HAL_TIM_ConfigClockSource+0x7e>
 8004cac:	2b50      	cmp	r3, #80	; 0x50
 8004cae:	d033      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0xe0>
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d041      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004cb4:	e06a      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d066      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x152>
 8004cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc0:	d017      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004cc2:	e063      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f000 fc84 	bl	80055e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ce6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e04c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6899      	ldr	r1, [r3, #8]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f000 fc6d 	bl	80055e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d14:	609a      	str	r2, [r3, #8]
      break;
 8004d16:	e039      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f000 fb2b 	bl	8005380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2150      	movs	r1, #80	; 0x50
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fc3a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d36:	e029      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	461a      	mov	r2, r3
 8004d46:	f000 fb87 	bl	8005458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2160      	movs	r1, #96	; 0x60
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fc2a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d56:	e019      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	461a      	mov	r2, r3
 8004d66:	f000 fb0b 	bl	8005380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2140      	movs	r1, #64	; 0x40
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fc1a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d76:	e009      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 fc11 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d8a:	bf00      	nop
  }
<<<<<<< HEAD
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d00f      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3a      	ldr	r2, [pc, #232]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d027      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d023      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d017      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <TIM_Base_SetConfig+0x128>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <TIM_Base_SetConfig+0x12c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <TIM_Base_SetConfig+0x134>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <TIM_Base_SetConfig+0x138>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <TIM_Base_SetConfig+0x13c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
=======
  return USBD_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	6852      	ldr	r2, [r2, #4]
 800a444:	b2d2      	uxtb	r2, r2
 800a446:	4611      	mov	r1, r2
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3

  return USBD_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a46e:	2b20      	cmp	r3, #32
 800a470:	d004      	beq.n	800a47c <USBD_StdDevReq+0x24>
 800a472:	2b40      	cmp	r3, #64	; 0x40
 800a474:	d002      	beq.n	800a47c <USBD_StdDevReq+0x24>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <USBD_StdDevReq+0x34>
 800a47a:	e04c      	b.n	800a516 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	4798      	blx	r3
    break;
 800a48a:	e049      	b.n	800a520 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	2b09      	cmp	r3, #9
 800a492:	d83a      	bhi.n	800a50a <USBD_StdDevReq+0xb2>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <USBD_StdDevReq+0x44>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4ed 	.word	0x0800a4ed
 800a4a0:	0800a501 	.word	0x0800a501
 800a4a4:	0800a50b 	.word	0x0800a50b
 800a4a8:	0800a4f7 	.word	0x0800a4f7
 800a4ac:	0800a50b 	.word	0x0800a50b
 800a4b0:	0800a4cf 	.word	0x0800a4cf
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a50b 	.word	0x0800a50b
 800a4bc:	0800a4e3 	.word	0x0800a4e3
 800a4c0:	0800a4d9 	.word	0x0800a4d9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f9d2 	bl	800a870 <USBD_GetDescriptor>
      break;
 800a4cc:	e022      	b.n	800a514 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fac7 	bl	800aa64 <USBD_SetAddress>
      break;
 800a4d6:	e01d      	b.n	800a514 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fb04 	bl	800aae8 <USBD_SetConfig>
      break;
 800a4e0:	e018      	b.n	800a514 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fb8d 	bl	800ac04 <USBD_GetConfig>
      break;
 800a4ea:	e013      	b.n	800a514 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fbbc 	bl	800ac6c <USBD_GetStatus>
      break;
 800a4f4:	e00e      	b.n	800a514 <USBD_StdDevReq+0xbc>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28

<<<<<<< HEAD
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0xf8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	40001c00 	.word	0x40001c00
 8004f34:	40002000 	.word	0x40002000

08004f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f023 0201 	bic.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0302 	bic.w	r3, r3, #2
 8004f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a20      	ldr	r2, [pc, #128]	; (8005010 <TIM_OC1_SetConfig+0xd8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_OC1_SetConfig+0x64>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <TIM_OC1_SetConfig+0xdc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10c      	bne.n	8004fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0308 	bic.w	r3, r3, #8
 8004fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a15      	ldr	r2, [pc, #84]	; (8005010 <TIM_OC1_SetConfig+0xd8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_OC1_SetConfig+0x8e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <TIM_OC1_SetConfig+0xdc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d111      	bne.n	8004fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40010000 	.word	0x40010000
 8005014:	40010400 	.word	0x40010400

08005018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f023 0210 	bic.w	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504e:	60fb      	str	r3, [r7, #12]
=======
    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fbea 	bl	800acd2 <USBD_SetFeature>
      break;
 800a4fe:	e009      	b.n	800a514 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fbf9 	bl	800acfa <USBD_ClrFeature>
      break;
 800a508:	e004      	b.n	800a514 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fc52 	bl	800adb6 <USBD_CtlError>
      break;
 800a512:	bf00      	nop
    }
    break;
 800a514:	e004      	b.n	800a520 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fc4c 	bl	800adb6 <USBD_CtlError>
    break;
 800a51e:	bf00      	nop
  }

  return ret;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop

0800a52c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a542:	2b20      	cmp	r3, #32
 800a544:	d003      	beq.n	800a54e <USBD_StdItfReq+0x22>
 800a546:	2b40      	cmp	r3, #64	; 0x40
 800a548:	d001      	beq.n	800a54e <USBD_StdItfReq+0x22>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d12a      	bne.n	800a5a4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a554:	3b01      	subs	r3, #1
 800a556:	2b02      	cmp	r3, #2
 800a558:	d81d      	bhi.n	800a596 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	889b      	ldrh	r3, [r3, #4]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b01      	cmp	r3, #1
 800a562:	d813      	bhi.n	800a58c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	88db      	ldrh	r3, [r3, #6]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d110      	bne.n	800a5a0 <USBD_StdItfReq+0x74>
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10d      	bne.n	800a5a0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fcdf 	bl	800af48 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a58a:	e009      	b.n	800a5a0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fc11 	bl	800adb6 <USBD_CtlError>
      break;
 800a594:	e004      	b.n	800a5a0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fc0c 	bl	800adb6 <USBD_CtlError>
      break;
 800a59e:	e000      	b.n	800a5a2 <USBD_StdItfReq+0x76>
      break;
 800a5a0:	bf00      	nop
    }
    break;
 800a5a2:	e004      	b.n	800a5ae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fc05 	bl	800adb6 <USBD_CtlError>
    break;
 800a5ac:	bf00      	nop
  }

  return USBD_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	889b      	ldrh	r3, [r3, #4]
 800a5ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5d4:	2b20      	cmp	r3, #32
 800a5d6:	d004      	beq.n	800a5e2 <USBD_StdEPReq+0x2a>
 800a5d8:	2b40      	cmp	r3, #64	; 0x40
 800a5da:	d002      	beq.n	800a5e2 <USBD_StdEPReq+0x2a>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d008      	beq.n	800a5f2 <USBD_StdEPReq+0x3a>
 800a5e0:	e13b      	b.n	800a85a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
    break;
 800a5f0:	e138      	b.n	800a864 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5fa:	2b20      	cmp	r3, #32
 800a5fc:	d10a      	bne.n	800a614 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	4798      	blx	r3
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	e128      	b.n	800a866 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d03e      	beq.n	800a69a <USBD_StdEPReq+0xe2>
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d002      	beq.n	800a626 <USBD_StdEPReq+0x6e>
 800a620:	2b00      	cmp	r3, #0
 800a622:	d070      	beq.n	800a706 <USBD_StdEPReq+0x14e>
 800a624:	e113      	b.n	800a84e <USBD_StdEPReq+0x296>
    {
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

<<<<<<< HEAD
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0320 	bic.w	r3, r3, #32
 8005062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a22      	ldr	r2, [pc, #136]	; (80050fc <TIM_OC2_SetConfig+0xe4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC2_SetConfig+0x68>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a21      	ldr	r2, [pc, #132]	; (8005100 <TIM_OC2_SetConfig+0xe8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10d      	bne.n	800509c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509a:	617b      	str	r3, [r7, #20]

  }
=======
      switch (pdev->dev_state)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d002      	beq.n	800a636 <USBD_StdEPReq+0x7e>
 800a630:	2b03      	cmp	r3, #3
 800a632:	d015      	beq.n	800a660 <USBD_StdEPReq+0xa8>
 800a634:	e02b      	b.n	800a68e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00c      	beq.n	800a656 <USBD_StdEPReq+0x9e>
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	2b80      	cmp	r3, #128	; 0x80
 800a640:	d009      	beq.n	800a656 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a642:	7bbb      	ldrb	r3, [r7, #14]
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f010 f816 	bl	801a678 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a64c:	2180      	movs	r1, #128	; 0x80
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f010 f812 	bl	801a678 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a654:	e020      	b.n	800a698 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fbac 	bl	800adb6 <USBD_CtlError>
        break;
 800a65e:	e01b      	b.n	800a698 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	885b      	ldrh	r3, [r3, #2]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10e      	bne.n	800a686 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <USBD_StdEPReq+0xce>
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b80      	cmp	r3, #128	; 0x80
 800a672:	d008      	beq.n	800a686 <USBD_StdEPReq+0xce>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	88db      	ldrh	r3, [r3, #6]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d104      	bne.n	800a686 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f00f fff9 	bl	801a678 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fc5e 	bl	800af48 <USBD_CtlSendStatus>

        break;
 800a68c:	e004      	b.n	800a698 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fb90 	bl	800adb6 <USBD_CtlError>
        break;
 800a696:	bf00      	nop
      }
      break;
 800a698:	e0de      	b.n	800a858 <USBD_StdEPReq+0x2a0>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <TIM_OC2_SetConfig+0xe4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC2_SetConfig+0x94>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <TIM_OC2_SetConfig+0xe8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d113      	bne.n	80050d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

<<<<<<< HEAD
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40010400 	.word	0x40010400

08005104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800514c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a21      	ldr	r2, [pc, #132]	; (80051e4 <TIM_OC3_SetConfig+0xe0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC3_SetConfig+0x66>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <TIM_OC3_SetConfig+0xe4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10d      	bne.n	8005186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_OC3_SetConfig+0xe0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC3_SetConfig+0x92>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <TIM_OC3_SetConfig+0xe4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d113      	bne.n	80051be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800519c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]
=======
      switch (pdev->dev_state)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d002      	beq.n	800a6aa <USBD_StdEPReq+0xf2>
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d015      	beq.n	800a6d4 <USBD_StdEPReq+0x11c>
 800a6a8:	e026      	b.n	800a6f8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6aa:	7bbb      	ldrb	r3, [r7, #14]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00c      	beq.n	800a6ca <USBD_StdEPReq+0x112>
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b80      	cmp	r3, #128	; 0x80
 800a6b4:	d009      	beq.n	800a6ca <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f00f ffdc 	bl	801a678 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a6c0:	2180      	movs	r1, #128	; 0x80
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f00f ffd8 	bl	801a678 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a6c8:	e01c      	b.n	800a704 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fb72 	bl	800adb6 <USBD_CtlError>
        break;
 800a6d2:	e017      	b.n	800a704 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	885b      	ldrh	r3, [r3, #2]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d112      	bne.n	800a702 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f00f ffe3 	bl	801a6b6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fc29 	bl	800af48 <USBD_CtlSendStatus>
        }
        break;
 800a6f6:	e004      	b.n	800a702 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fb5b 	bl	800adb6 <USBD_CtlError>
        break;
 800a700:	e000      	b.n	800a704 <USBD_StdEPReq+0x14c>
        break;
 800a702:	bf00      	nop
      }
      break;
 800a704:	e0a8      	b.n	800a858 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d002      	beq.n	800a716 <USBD_StdEPReq+0x15e>
 800a710:	2b03      	cmp	r3, #3
 800a712:	d031      	beq.n	800a778 <USBD_StdEPReq+0x1c0>
 800a714:	e095      	b.n	800a842 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <USBD_StdEPReq+0x174>
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	2b80      	cmp	r3, #128	; 0x80
 800a720:	d004      	beq.n	800a72c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fb46 	bl	800adb6 <USBD_CtlError>
          break;
 800a72a:	e08f      	b.n	800a84c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a72c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a730:	2b00      	cmp	r3, #0
 800a732:	da0b      	bge.n	800a74c <USBD_StdEPReq+0x194>
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	3310      	adds	r3, #16
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	4413      	add	r3, r2
 800a748:	3304      	adds	r3, #4
 800a74a:	e00a      	b.n	800a762 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	4413      	add	r3, r2
 800a762:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2202      	movs	r2, #2
 800a76e:	4619      	mov	r1, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fb8b 	bl	800ae8c <USBD_CtlSendData>
          break;
 800a776:	e069      	b.n	800a84c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800a778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	da11      	bge.n	800a7a4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	f003 020f 	and.w	r2, r3, #15
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	3318      	adds	r3, #24
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d117      	bne.n	800a7ca <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fb0a 	bl	800adb6 <USBD_CtlError>
            break;
 800a7a2:	e053      	b.n	800a84c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	f003 020f 	and.w	r2, r3, #15
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	440b      	add	r3, r1
 800a7b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 faf7 	bl	800adb6 <USBD_CtlError>
            break;
 800a7c8:	e040      	b.n	800a84c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a7ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	da0b      	bge.n	800a7ea <USBD_StdEPReq+0x232>
 800a7d2:	7bbb      	ldrb	r3, [r7, #14]
 800a7d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7d8:	4613      	mov	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	3310      	adds	r3, #16
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	e00a      	b.n	800a800 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	4413      	add	r3, r2
 800a800:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <USBD_StdEPReq+0x256>
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b80      	cmp	r3, #128	; 0x80
 800a80c:	d103      	bne.n	800a816 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e00e      	b.n	800a834 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f00f ff6a 	bl	801a6f4 <USBD_LL_IsStallEP>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2201      	movs	r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	e002      	b.n	800a834 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2202      	movs	r2, #2
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fb26 	bl	800ae8c <USBD_CtlSendData>
          break;
 800a840:	e004      	b.n	800a84c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fab6 	bl	800adb6 <USBD_CtlError>
        break;
 800a84a:	bf00      	nop
      }
      break;
 800a84c:	e004      	b.n	800a858 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fab0 	bl	800adb6 <USBD_CtlError>
      break;
 800a856:	bf00      	nop
    }
    break;
 800a858:	e004      	b.n	800a864 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 faaa 	bl	800adb6 <USBD_CtlError>
    break;
 800a862:	bf00      	nop
  }

  return ret;
 800a864:	7bfb      	ldrb	r3, [r7, #15]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
	...

0800a870 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	61da      	str	r2, [r3, #28]

<<<<<<< HEAD
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	621a      	str	r2, [r3, #32]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400

080051ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	031b      	lsls	r3, r3, #12
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a12      	ldr	r2, [pc, #72]	; (8005290 <TIM_OC4_SetConfig+0xa4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC4_SetConfig+0x68>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a11      	ldr	r2, [pc, #68]	; (8005294 <TIM_OC4_SetConfig+0xa8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d109      	bne.n	8005268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40010400 	.word	0x40010400

08005298 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a28      	ldr	r2, [pc, #160]	; (8005364 <TIM_TI1_SetConfig+0xcc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d017      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <TIM_TI1_SetConfig+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a24      	ldr	r2, [pc, #144]	; (800536c <TIM_TI1_SetConfig+0xd4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a23      	ldr	r2, [pc, #140]	; (8005370 <TIM_TI1_SetConfig+0xd8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <TIM_TI1_SetConfig+0xdc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a21      	ldr	r2, [pc, #132]	; (8005378 <TIM_TI1_SetConfig+0xe0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a20      	ldr	r2, [pc, #128]	; (800537c <TIM_TI1_SetConfig+0xe4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <TIM_TI1_SetConfig+0x6a>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <TIM_TI1_SetConfig+0x6c>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e003      	b.n	8005322 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	b2db      	uxtb	r3, r3
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f023 030a 	bic.w	r3, r3, #10
 800533c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 030a 	and.w	r3, r3, #10
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40010400 	.word	0x40010400
 8005378:	40014000 	.word	0x40014000
 800537c:	40001800 	.word	0x40001800

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f023 0210 	bic.w	r2, r3, #16
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800541c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	b29b      	uxth	r3, r3
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005430:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 0210 	bic.w	r2, r3, #16
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	031b      	lsls	r3, r3, #12
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	621a      	str	r2, [r3, #32]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 0303 	bic.w	r3, r3, #3
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
=======
  switch (req->wValue >> 8)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	885b      	ldrh	r3, [r3, #2]
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	b29b      	uxth	r3, r3
 800a882:	3b01      	subs	r3, #1
 800a884:	2b06      	cmp	r3, #6
 800a886:	f200 80c9 	bhi.w	800aa1c <USBD_GetDescriptor+0x1ac>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <USBD_GetDescriptor+0x20>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a8ad 	.word	0x0800a8ad
 800a894:	0800a8c5 	.word	0x0800a8c5
 800a898:	0800a905 	.word	0x0800a905
 800a89c:	0800aa1d 	.word	0x0800aa1d
 800a8a0:	0800aa1d 	.word	0x0800aa1d
 800a8a4:	0800a9c9 	.word	0x0800a9c9
 800a8a8:	0800a9ef 	.word	0x0800a9ef
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	7c12      	ldrb	r2, [r2, #16]
 800a8b8:	f107 010a 	add.w	r1, r7, #10
 800a8bc:	4610      	mov	r0, r2
 800a8be:	4798      	blx	r3
 800a8c0:	60f8      	str	r0, [r7, #12]
    break;
 800a8c2:	e0b0      	b.n	800aa26 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7c1b      	ldrb	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10d      	bne.n	800a8e8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d4:	f107 020a 	add.w	r2, r7, #10
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4798      	blx	r3
 800a8dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a8e6:	e09e      	b.n	800aa26 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f0:	f107 020a 	add.w	r2, r7, #10
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	4798      	blx	r3
 800a8f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	2202      	movs	r2, #2
 800a900:	701a      	strb	r2, [r3, #0]
    break;
 800a902:	e090      	b.n	800aa26 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	885b      	ldrh	r3, [r3, #2]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	d856      	bhi.n	800a9bc <USBD_GetDescriptor+0x14c>
 800a90e:	a201      	add	r2, pc, #4	; (adr r2, 800a914 <USBD_GetDescriptor+0xa4>)
 800a910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a914:	0800a92d 	.word	0x0800a92d
 800a918:	0800a945 	.word	0x0800a945
 800a91c:	0800a95d 	.word	0x0800a95d
 800a920:	0800a975 	.word	0x0800a975
 800a924:	0800a98d 	.word	0x0800a98d
 800a928:	0800a9a5 	.word	0x0800a9a5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c12      	ldrb	r2, [r2, #16]
 800a938:	f107 010a 	add.w	r1, r7, #10
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
 800a940:	60f8      	str	r0, [r7, #12]
      break;
 800a942:	e040      	b.n	800a9c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	7c12      	ldrb	r2, [r2, #16]
 800a950:	f107 010a 	add.w	r1, r7, #10
 800a954:	4610      	mov	r0, r2
 800a956:	4798      	blx	r3
 800a958:	60f8      	str	r0, [r7, #12]
      break;
 800a95a:	e034      	b.n	800a9c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	7c12      	ldrb	r2, [r2, #16]
 800a968:	f107 010a 	add.w	r1, r7, #10
 800a96c:	4610      	mov	r0, r2
 800a96e:	4798      	blx	r3
 800a970:	60f8      	str	r0, [r7, #12]
      break;
 800a972:	e028      	b.n	800a9c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	7c12      	ldrb	r2, [r2, #16]
 800a980:	f107 010a 	add.w	r1, r7, #10
 800a984:	4610      	mov	r0, r2
 800a986:	4798      	blx	r3
 800a988:	60f8      	str	r0, [r7, #12]
      break;
 800a98a:	e01c      	b.n	800a9c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	7c12      	ldrb	r2, [r2, #16]
 800a998:	f107 010a 	add.w	r1, r7, #10
 800a99c:	4610      	mov	r0, r2
 800a99e:	4798      	blx	r3
 800a9a0:	60f8      	str	r0, [r7, #12]
      break;
 800a9a2:	e010      	b.n	800a9c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	7c12      	ldrb	r2, [r2, #16]
 800a9b0:	f107 010a 	add.w	r1, r7, #10
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	4798      	blx	r3
 800a9b8:	60f8      	str	r0, [r7, #12]
      break;
 800a9ba:	e004      	b.n	800a9c6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9f9 	bl	800adb6 <USBD_CtlError>
      return;
 800a9c4:	e04b      	b.n	800aa5e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800a9c6:	e02e      	b.n	800aa26 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	7c1b      	ldrb	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d8:	f107 020a 	add.w	r2, r7, #10
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	60f8      	str	r0, [r7, #12]
      break;
 800a9e2:	e020      	b.n	800aa26 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f9e5 	bl	800adb6 <USBD_CtlError>
      return;
 800a9ec:	e037      	b.n	800aa5e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	7c1b      	ldrb	r3, [r3, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10d      	bne.n	800aa12 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	f107 020a 	add.w	r2, r7, #10
 800aa02:	4610      	mov	r0, r2
 800aa04:	4798      	blx	r3
 800aa06:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	2207      	movs	r2, #7
 800aa0e:	701a      	strb	r2, [r3, #0]
      break;
 800aa10:	e009      	b.n	800aa26 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f9ce 	bl	800adb6 <USBD_CtlError>
      return;
 800aa1a:	e020      	b.n	800aa5e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f9c9 	bl	800adb6 <USBD_CtlError>
    return;
 800aa24:	e01b      	b.n	800aa5e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800aa26:	897b      	ldrh	r3, [r7, #10]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d011      	beq.n	800aa50 <USBD_GetDescriptor+0x1e0>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	88db      	ldrh	r3, [r3, #6]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00d      	beq.n	800aa50 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	88da      	ldrh	r2, [r3, #6]
 800aa38:	897b      	ldrh	r3, [r7, #10]
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	bf28      	it	cs
 800aa3e:	4613      	movcs	r3, r2
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800aa44:	897b      	ldrh	r3, [r7, #10]
 800aa46:	461a      	mov	r2, r3
 800aa48:	68f9      	ldr	r1, [r7, #12]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fa1e 	bl	800ae8c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	88db      	ldrh	r3, [r3, #6]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fa75 	bl	800af48 <USBD_CtlSendStatus>
  }
}
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	889b      	ldrh	r3, [r3, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d130      	bne.n	800aad8 <USBD_SetAddress+0x74>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	88db      	ldrh	r3, [r3, #6]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d12c      	bne.n	800aad8 <USBD_SetAddress+0x74>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	885b      	ldrh	r3, [r3, #2]
 800aa82:	2b7f      	cmp	r3, #127	; 0x7f
 800aa84:	d828      	bhi.n	800aad8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	885b      	ldrh	r3, [r3, #2]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d104      	bne.n	800aaa6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f989 	bl	800adb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa4:	e01c      	b.n	800aae0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	7bfa      	ldrb	r2, [r7, #15]
 800aaaa:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f00f fe4a 	bl	801a74c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa45 	bl	800af48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aacc:	e008      	b.n	800aae0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad6:	e003      	b.n	800aae0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f96b 	bl	800adb6 <USBD_CtlError>
  }
}
 800aae0:	bf00      	nop
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	885b      	ldrh	r3, [r3, #2]
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	4b41      	ldr	r3, [pc, #260]	; (800ac00 <USBD_SetConfig+0x118>)
 800aafa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aafc:	4b40      	ldr	r3, [pc, #256]	; (800ac00 <USBD_SetConfig+0x118>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d904      	bls.n	800ab0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f955 	bl	800adb6 <USBD_CtlError>
 800ab0c:	e075      	b.n	800abfa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d002      	beq.n	800ab1e <USBD_SetConfig+0x36>
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d023      	beq.n	800ab64 <USBD_SetConfig+0x7c>
 800ab1c:	e062      	b.n	800abe4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800ab1e:	4b38      	ldr	r3, [pc, #224]	; (800ac00 <USBD_SetConfig+0x118>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d01a      	beq.n	800ab5c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ab26:	4b36      	ldr	r3, [pc, #216]	; (800ac00 <USBD_SetConfig+0x118>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2203      	movs	r2, #3
 800ab34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab38:	4b31      	ldr	r3, [pc, #196]	; (800ac00 <USBD_SetConfig+0x118>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff fa29 	bl	8009f96 <USBD_SetClassConfig>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d104      	bne.n	800ab54 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f932 	bl	800adb6 <USBD_CtlError>
          return;
 800ab52:	e052      	b.n	800abfa <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f9f7 	bl	800af48 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ab5a:	e04e      	b.n	800abfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f9f3 	bl	800af48 <USBD_CtlSendStatus>
      break;
 800ab62:	e04a      	b.n	800abfa <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab64:	4b26      	ldr	r3, [pc, #152]	; (800ac00 <USBD_SetConfig+0x118>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d112      	bne.n	800ab92 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800ab74:	4b22      	ldr	r3, [pc, #136]	; (800ac00 <USBD_SetConfig+0x118>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800ab7e:	4b20      	ldr	r3, [pc, #128]	; (800ac00 <USBD_SetConfig+0x118>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff fa25 	bl	8009fd4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f9dc 	bl	800af48 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ab90:	e033      	b.n	800abfa <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ab92:	4b1b      	ldr	r3, [pc, #108]	; (800ac00 <USBD_SetConfig+0x118>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d01d      	beq.n	800abdc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff fa13 	bl	8009fd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800abae:	4b14      	ldr	r3, [pc, #80]	; (800ac00 <USBD_SetConfig+0x118>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800abb8:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <USBD_SetConfig+0x118>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff f9e9 	bl	8009f96 <USBD_SetClassConfig>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d104      	bne.n	800abd4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f8f2 	bl	800adb6 <USBD_CtlError>
          return;
 800abd2:	e012      	b.n	800abfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f9b7 	bl	800af48 <USBD_CtlSendStatus>
      break;
 800abda:	e00e      	b.n	800abfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f9b3 	bl	800af48 <USBD_CtlSendStatus>
      break;
 800abe2:	e00a      	b.n	800abfa <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f8e5 	bl	800adb6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800abec:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <USBD_SetConfig+0x118>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff f9ee 	bl	8009fd4 <USBD_ClrClassConfig>
      break;
 800abf8:	bf00      	nop
    }
  }
}
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	20000464 	.word	0x20000464

0800ac04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	88db      	ldrh	r3, [r3, #6]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d004      	beq.n	800ac20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f8cc 	bl	800adb6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ac1e:	e021      	b.n	800ac64 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	db17      	blt.n	800ac5a <USBD_GetConfig+0x56>
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	dd02      	ble.n	800ac34 <USBD_GetConfig+0x30>
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d00b      	beq.n	800ac4a <USBD_GetConfig+0x46>
 800ac32:	e012      	b.n	800ac5a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f922 	bl	800ae8c <USBD_CtlSendData>
      break;
 800ac48:	e00c      	b.n	800ac64 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f91a 	bl	800ae8c <USBD_CtlSendData>
      break;
 800ac58:	e004      	b.n	800ac64 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f8aa 	bl	800adb6 <USBD_CtlError>
      break;
 800ac62:	bf00      	nop
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d81e      	bhi.n	800acc0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	88db      	ldrh	r3, [r3, #6]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d004      	beq.n	800ac94 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f892 	bl	800adb6 <USBD_CtlError>
      break;
 800ac92:	e01a      	b.n	800acca <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f043 0202 	orr.w	r2, r3, #2
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	330c      	adds	r3, #12
 800acb4:	2202      	movs	r2, #2
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f8e7 	bl	800ae8c <USBD_CtlSendData>
    break;
 800acbe:	e004      	b.n	800acca <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f877 	bl	800adb6 <USBD_CtlError>
    break;
 800acc8:	bf00      	nop
  }
}
 800acca:	bf00      	nop
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	885b      	ldrh	r3, [r3, #2]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d106      	bne.n	800acf2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f92b 	bl	800af48 <USBD_CtlSendStatus>
  }
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	621a      	str	r2, [r3, #32]
}
<<<<<<< HEAD
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	031b      	lsls	r3, r3, #12
 8005574:	b29b      	uxth	r3, r3
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	031b      	lsls	r3, r3, #12
 8005588:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
=======
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d80b      	bhi.n	800ad28 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	885b      	ldrh	r3, [r3, #2]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d10c      	bne.n	800ad32 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f911 	bl	800af48 <USBD_CtlSendStatus>
    }
    break;
 800ad26:	e004      	b.n	800ad32 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f843 	bl	800adb6 <USBD_CtlError>
    break;
 800ad30:	e000      	b.n	800ad34 <USBD_ClrFeature+0x3a>
    break;
 800ad32:	bf00      	nop
  }
}
 800ad34:	bf00      	nop
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	785a      	ldrb	r2, [r3, #1]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3302      	adds	r3, #2
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	3303      	adds	r3, #3
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4413      	add	r3, r2
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	3304      	adds	r3, #4
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3305      	adds	r3, #5
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	021b      	lsls	r3, r3, #8
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4413      	add	r3, r2
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	3306      	adds	r3, #6
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	3307      	adds	r3, #7
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	021b      	lsls	r3, r3, #8
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4413      	add	r3, r2
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	80da      	strh	r2, [r3, #6]

}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <USBD_CtlError>:
* @retval None
*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
=======
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800adc0:	2180      	movs	r1, #128	; 0x80
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f00f fc58 	bl	801a678 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800adc8:	2100      	movs	r1, #0
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f00f fc54 	bl	801a678 <USBD_LL_StallEP>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
=======
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d032      	beq.n	800ae54 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 f834 	bl	800ae5c <USBD_GetLen>
 800adf4:	4603      	mov	r3, r0
 800adf6:	3301      	adds	r3, #1
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	1c5a      	adds	r2, r3, #1
 800ae06:	75fa      	strb	r2, [r7, #23]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	7812      	ldrb	r2, [r2, #0]
 800ae12:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	75fa      	strb	r2, [r7, #23]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	4413      	add	r3, r2
 800ae20:	2203      	movs	r2, #3
 800ae22:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ae24:	e012      	b.n	800ae4c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	60fa      	str	r2, [r7, #12]
 800ae2c:	7dfa      	ldrb	r2, [r7, #23]
 800ae2e:	1c51      	adds	r1, r2, #1
 800ae30:	75f9      	strb	r1, [r7, #23]
 800ae32:	4611      	mov	r1, r2
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	440a      	add	r2, r1
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	75fa      	strb	r2, [r7, #23]
 800ae42:	461a      	mov	r2, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	4413      	add	r3, r2
 800ae48:	2200      	movs	r2, #0
 800ae4a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e8      	bne.n	800ae26 <USBD_GetString+0x4e>
    }
  }
}
 800ae54:	bf00      	nop
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e032      	b.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005670:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4313      	orrs	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e03f      	b.n	8005764 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fc fd63 	bl	80021c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005714:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa64 	bl	8005be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800572a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800573a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800574a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800ae68:	e005      	b.n	800ae76 <USBD_GetLen+0x1a>
    {
        len++;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3301      	adds	r3, #1
 800ae74:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f5      	bne.n	800ae6a <USBD_GetLen+0xe>
    }

    return len;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	4613      	mov	r3, r2
 800ae98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800aea2:	88fa      	ldrh	r2, [r7, #6]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aea8:	88fa      	ldrh	r2, [r7, #6]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800aeae:	88fb      	ldrh	r3, [r7, #6]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f00f fc68 	bl	801a78a <USBD_LL_Transmit>

  return USBD_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800aed2:	88fb      	ldrh	r3, [r7, #6]
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	2100      	movs	r1, #0
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f00f fc56 	bl	801a78a <USBD_LL_Transmit>

  return USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2203      	movs	r2, #3
 800aefa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800aefe:	88fa      	ldrh	r2, [r7, #6]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800af06:	88fa      	ldrh	r2, [r7, #6]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800af0e:	88fb      	ldrh	r3, [r7, #6]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	2100      	movs	r1, #0
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f00f fc5b 	bl	801a7d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	4613      	mov	r3, r2
 800af30:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af32:	88fb      	ldrh	r3, [r7, #6]
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	2100      	movs	r1, #0
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f00f fc49 	bl	801a7d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2204      	movs	r2, #4
 800af54:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af58:	2300      	movs	r3, #0
 800af5a:	2200      	movs	r2, #0
 800af5c:	2100      	movs	r1, #0
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f00f fc13 	bl	801a78a <USBD_LL_Transmit>

  return USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b082      	sub	sp, #8
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2205      	movs	r2, #5
 800af7a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800af7e:	2300      	movs	r3, #0
 800af80:	2200      	movs	r2, #0
 800af82:	2100      	movs	r1, #0
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f00f fc23 	bl	801a7d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <makeFreeRtosPriority>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_UART_IRQHandler+0x52>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f992 	bl	8005ae0 <UART_Receive_IT>
      return;
 80057bc:	e0cc      	b.n	8005958 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80ab 	beq.w	800591c <HAL_UART_IRQHandler+0x1b0>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_UART_IRQHandler+0x70>
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80a0 	beq.w	800591c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_UART_IRQHandler+0x90>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f4:	f043 0201 	orr.w	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
=======
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800afa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800afa6:	2b84      	cmp	r3, #132	; 0x84
 800afa8:	d005      	beq.n	800afb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800afaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	4413      	add	r3, r2
 800afb2:	3303      	adds	r3, #3
 800afb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800afb6:	68fb      	ldr	r3, [r7, #12]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <inHandlerMode>:
#endif
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_UART_IRQHandler+0xb0>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f043 0202 	orr.w	r2, r3, #2
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

<<<<<<< HEAD
    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_UART_IRQHandler+0xd0>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005834:	f043 0204 	orr.w	r2, r3, #4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_UART_IRQHandler+0xf0>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	f043 0208 	orr.w	r2, r3, #8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d078      	beq.n	8005956 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_UART_IRQHandler+0x112>
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f931 	bl	8005ae0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_UART_IRQHandler+0x13a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d031      	beq.n	800590a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f87a 	bl	80059a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d123      	bne.n	8005902 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d013      	beq.n	80058fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	4a22      	ldr	r2, [pc, #136]	; (8005960 <HAL_UART_IRQHandler+0x1f4>)
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc fe38 	bl	8002554 <HAL_DMA_Abort_IT>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e00e      	b.n	8005918 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f846 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	e00a      	b.n	8005918 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f842 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	e006      	b.n	8005918 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f83e 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005916:	e01e      	b.n	8005956 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	bf00      	nop
    return;
 800591a:	e01c      	b.n	8005956 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_UART_IRQHandler+0x1cc>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f867 	bl	8005a04 <UART_Transmit_IT>
    return;
 8005936:	e00f      	b.n	8005958 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_UART_IRQHandler+0x1ec>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8af 	bl	8005ab0 <UART_EndTransmit_IT>
    return;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005956:	bf00      	nop
  }
}
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	080059dd 	.word	0x080059dd

08005964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ffc8 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b21      	cmp	r3, #33	; 0x21
 8005a16:	d144      	bne.n	8005aa2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d11a      	bne.n	8005a58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	1c9a      	adds	r2, r3, #2
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]
 8005a4a:	e00e      	b.n	8005a6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]
 8005a56:	e008      	b.n	8005a6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	1c59      	adds	r1, r3, #1
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6211      	str	r1, [r2, #32]
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4619      	mov	r1, r3
 8005a78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e000      	b.n	8005aa4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005aa2:	2302      	movs	r3, #2
  }
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ff47 	bl	8005964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
=======
/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afca:	f3ef 8305 	mrs	r3, IPSR
 800afce:	607b      	str	r3, [r7, #4]
  return(result);
 800afd0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bf14      	ite	ne
 800afd6:	2301      	movne	r3, #1
 800afd8:	2300      	moveq	r3, #0
 800afda:	b2db      	uxtb	r3, r3
}
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800afec:	f001 fcfa 	bl	800c9e4 <vTaskStartScheduler>
  
  return osOK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800affa:	f7ff ffe3 	bl	800afc4 <inHandlerMode>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d003      	beq.n	800b00c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b004:	f001 fe06 	bl	800cc14 <xTaskGetTickCountFromISR>
 800b008:	4603      	mov	r3, r0
 800b00a:	e002      	b.n	800b012 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b00c:	f001 fdf2 	bl	800cbf4 <xTaskGetTickCount>
 800b010:	4603      	mov	r3, r0
  }
}
 800b012:	4618      	mov	r0, r3
 800b014:	bd80      	pop	{r7, pc}

0800b016 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b016:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b018:	b089      	sub	sp, #36	; 0x24
 800b01a:	af04      	add	r7, sp, #16
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d020      	beq.n	800b06a <osThreadCreate+0x54>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d01c      	beq.n	800b06a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685c      	ldr	r4, [r3, #4]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681d      	ldr	r5, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	691e      	ldr	r6, [r3, #16]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff ffa6 	bl	800af94 <makeFreeRtosPriority>
 800b048:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b052:	9202      	str	r2, [sp, #8]
 800b054:	9301      	str	r3, [sp, #4]
 800b056:	9100      	str	r1, [sp, #0]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	4632      	mov	r2, r6
 800b05c:	4629      	mov	r1, r5
 800b05e:	4620      	mov	r0, r4
 800b060:	f001 fb06 	bl	800c670 <xTaskCreateStatic>
 800b064:	4603      	mov	r3, r0
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	e01c      	b.n	800b0a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685c      	ldr	r4, [r3, #4]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b076:	b29e      	uxth	r6, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff ff88 	bl	800af94 <makeFreeRtosPriority>
 800b084:	4602      	mov	r2, r0
 800b086:	f107 030c 	add.w	r3, r7, #12
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	9200      	str	r2, [sp, #0]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	4632      	mov	r2, r6
 800b092:	4629      	mov	r1, r5
 800b094:	4620      	mov	r0, r4
 800b096:	f001 fb44 	bl	800c722 <xTaskCreate>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d001      	beq.n	800b0a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e000      	b.n	800b0a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <osDelay+0x16>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	e000      	b.n	800b0c6 <osDelay+0x18>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 fc58 	bl	800c97c <vTaskDelay>
  
  return osOK;
 800b0cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d007      	beq.n	800b0f6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	f000 fc7d 	bl	800b9ec <xQueueCreateMutexStatic>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	e003      	b.n	800b0fe <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	f000 fc60 	bl	800b9bc <xQueueCreateMutex>
 800b0fc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b112:	2300      	movs	r3, #0
 800b114:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <osMutexWait+0x18>
    return osErrorParameter;
 800b11c:	2380      	movs	r3, #128	; 0x80
 800b11e:	e03a      	b.n	800b196 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b12a:	d103      	bne.n	800b134 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b12c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b130:	60fb      	str	r3, [r7, #12]
 800b132:	e009      	b.n	800b148 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d006      	beq.n	800b148 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <osMutexWait+0x40>
      ticks = 1;
 800b144:	2301      	movs	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b148:	f7ff ff3c 	bl	800afc4 <inHandlerMode>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d017      	beq.n	800b182 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	461a      	mov	r2, r3
 800b158:	2100      	movs	r1, #0
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 f85e 	bl	800c21c <xQueueReceiveFromISR>
 800b160:	4603      	mov	r3, r0
 800b162:	2b01      	cmp	r3, #1
 800b164:	d001      	beq.n	800b16a <osMutexWait+0x62>
      return osErrorOS;
 800b166:	23ff      	movs	r3, #255	; 0xff
 800b168:	e015      	b.n	800b196 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d011      	beq.n	800b194 <osMutexWait+0x8c>
 800b170:	4b0b      	ldr	r3, [pc, #44]	; (800b1a0 <osMutexWait+0x98>)
 800b172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	e008      	b.n	800b194 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b182:	68f9      	ldr	r1, [r7, #12]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 ff41 	bl	800c00c <xQueueSemaphoreTake>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d001      	beq.n	800b194 <osMutexWait+0x8c>
    return osErrorOS;
 800b190:	23ff      	movs	r3, #255	; 0xff
 800b192:	e000      	b.n	800b196 <osMutexWait+0x8e>
  }
  
  return osOK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	e000ed04 	.word	0xe000ed04

0800b1a4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b1b4:	f7ff ff06 	bl	800afc4 <inHandlerMode>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d016      	beq.n	800b1ec <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b1be:	f107 0308 	add.w	r3, r7, #8
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fdbb 	bl	800bd40 <xQueueGiveFromISR>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d001      	beq.n	800b1d4 <osMutexRelease+0x30>
      return osErrorOS;
 800b1d0:	23ff      	movs	r3, #255	; 0xff
 800b1d2:	e017      	b.n	800b204 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d013      	beq.n	800b202 <osMutexRelease+0x5e>
 800b1da:	4b0c      	ldr	r3, [pc, #48]	; (800b20c <osMutexRelease+0x68>)
 800b1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	e00a      	b.n	800b202 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fc16 	bl	800ba24 <xQueueGenericSend>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d001      	beq.n	800b202 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b1fe:	23ff      	movs	r3, #255	; 0xff
 800b200:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b202:	68fb      	ldr	r3, [r7, #12]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af02      	add	r7, sp, #8
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d010      	beq.n	800b244 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d10b      	bne.n	800b240 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	2303      	movs	r3, #3
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	4613      	mov	r3, r2
 800b232:	2200      	movs	r2, #0
 800b234:	2100      	movs	r1, #0
 800b236:	2001      	movs	r0, #1
 800b238:	f000 fad8 	bl	800b7ec <xQueueGenericCreateStatic>
 800b23c:	4603      	mov	r3, r0
 800b23e:	e016      	b.n	800b26e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	e014      	b.n	800b26e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d110      	bne.n	800b26c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800b24a:	2203      	movs	r2, #3
 800b24c:	2100      	movs	r1, #0
 800b24e:	2001      	movs	r0, #1
 800b250:	f000 fb3e 	bl	800b8d0 <xQueueGenericCreate>
 800b254:	60f8      	str	r0, [r7, #12]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <osSemaphoreCreate+0x58>
 800b25c:	2300      	movs	r3, #0
 800b25e:	2200      	movs	r2, #0
 800b260:	2100      	movs	r1, #0
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f000 fbde 	bl	800ba24 <xQueueGenericSend>
      return sema;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	e000      	b.n	800b26e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b26c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b282:	2300      	movs	r3, #0
 800b284:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b28c:	2380      	movs	r3, #128	; 0x80
 800b28e:	e03a      	b.n	800b306 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b29a:	d103      	bne.n	800b2a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2a0:	60fb      	str	r3, [r7, #12]
 800b2a2:	e009      	b.n	800b2b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d006      	beq.n	800b2b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <osSemaphoreWait+0x40>
      ticks = 1;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b2b8:	f7ff fe84 	bl	800afc4 <inHandlerMode>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d017      	beq.n	800b2f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 ffa6 	bl	800c21c <xQueueReceiveFromISR>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d001      	beq.n	800b2da <osSemaphoreWait+0x62>
      return osErrorOS;
 800b2d6:	23ff      	movs	r3, #255	; 0xff
 800b2d8:	e015      	b.n	800b306 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d011      	beq.n	800b304 <osSemaphoreWait+0x8c>
 800b2e0:	4b0b      	ldr	r3, [pc, #44]	; (800b310 <osSemaphoreWait+0x98>)
 800b2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	e008      	b.n	800b304 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b2f2:	68f9      	ldr	r1, [r7, #12]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fe89 	bl	800c00c <xQueueSemaphoreTake>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d001      	beq.n	800b304 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b300:	23ff      	movs	r3, #255	; 0xff
 800b302:	e000      	b.n	800b306 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	e000ed04 	.word	0xe000ed04

0800b314 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b320:	2300      	movs	r3, #0
 800b322:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b324:	f7ff fe4e 	bl	800afc4 <inHandlerMode>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d016      	beq.n	800b35c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b32e:	f107 0308 	add.w	r3, r7, #8
 800b332:	4619      	mov	r1, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fd03 	bl	800bd40 <xQueueGiveFromISR>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d001      	beq.n	800b344 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b340:	23ff      	movs	r3, #255	; 0xff
 800b342:	e017      	b.n	800b374 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d013      	beq.n	800b372 <osSemaphoreRelease+0x5e>
 800b34a:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <osSemaphoreRelease+0x68>)
 800b34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	e00a      	b.n	800b372 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b35c:	2300      	movs	r3, #0
 800b35e:	2200      	movs	r2, #0
 800b360:	2100      	movs	r1, #0
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fb5e 	bl	800ba24 <xQueueGenericSend>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d001      	beq.n	800b372 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b36e:	23ff      	movs	r3, #255	; 0xff
 800b370:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b372:	68fb      	ldr	r3, [r7, #12]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	e000ed04 	.word	0xe000ed04

0800b380 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b388:	f7ff fe1c 	bl	800afc4 <inHandlerMode>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b392:	2382      	movs	r3, #130	; 0x82
 800b394:	e003      	b.n	800b39e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fff5 	bl	800c386 <vQueueDelete>

  return osOK; 
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b3a6:	b590      	push	{r4, r7, lr}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af02      	add	r7, sp, #8
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d012      	beq.n	800b3de <osMessageCreate+0x38>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00e      	beq.n	800b3de <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6818      	ldr	r0, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6859      	ldr	r1, [r3, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68dc      	ldr	r4, [r3, #12]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	f000 fa09 	bl	800b7ec <xQueueGenericCreateStatic>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	e008      	b.n	800b3f0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	f000 fa71 	bl	800b8d0 <xQueueGenericCreate>
 800b3ee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd90      	pop	{r4, r7, pc}

0800b3f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b404:	2300      	movs	r3, #0
 800b406:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <osMessagePut+0x1e>
    ticks = 1;
 800b412:	2301      	movs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b416:	f7ff fdd5 	bl	800afc4 <inHandlerMode>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d018      	beq.n	800b452 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b420:	f107 0210 	add.w	r2, r7, #16
 800b424:	f107 0108 	add.w	r1, r7, #8
 800b428:	2300      	movs	r3, #0
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 fbf4 	bl	800bc18 <xQueueGenericSendFromISR>
 800b430:	4603      	mov	r3, r0
 800b432:	2b01      	cmp	r3, #1
 800b434:	d001      	beq.n	800b43a <osMessagePut+0x42>
      return osErrorOS;
 800b436:	23ff      	movs	r3, #255	; 0xff
 800b438:	e018      	b.n	800b46c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d014      	beq.n	800b46a <osMessagePut+0x72>
 800b440:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <osMessagePut+0x7c>)
 800b442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	e00b      	b.n	800b46a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b452:	f107 0108 	add.w	r1, r7, #8
 800b456:	2300      	movs	r3, #0
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 fae2 	bl	800ba24 <xQueueGenericSend>
 800b460:	4603      	mov	r3, r0
 800b462:	2b01      	cmp	r3, #1
 800b464:	d001      	beq.n	800b46a <osMessagePut+0x72>
      return osErrorOS;
 800b466:	23ff      	movs	r3, #255	; 0xff
 800b468:	e000      	b.n	800b46c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3718      	adds	r7, #24
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b08b      	sub	sp, #44	; 0x2c
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b492:	2380      	movs	r3, #128	; 0x80
 800b494:	617b      	str	r3, [r7, #20]
    return event;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	461c      	mov	r4, r3
 800b49a:	f107 0314 	add.w	r3, r7, #20
 800b49e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4a6:	e054      	b.n	800b552 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4b6:	d103      	bne.n	800b4c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b4be:	e009      	b.n	800b4d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d006      	beq.n	800b4d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <osMessageGet+0x5c>
      ticks = 1;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b4d4:	f7ff fd76 	bl	800afc4 <inHandlerMode>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d01c      	beq.n	800b518 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b4de:	f107 0220 	add.w	r2, r7, #32
 800b4e2:	f107 0314 	add.w	r3, r7, #20
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	68b8      	ldr	r0, [r7, #8]
 800b4ec:	f000 fe96 	bl	800c21c <xQueueReceiveFromISR>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d102      	bne.n	800b4fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b4f6:	2310      	movs	r3, #16
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	e001      	b.n	800b500 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d01d      	beq.n	800b542 <osMessageGet+0xca>
 800b506:	4b15      	ldr	r3, [pc, #84]	; (800b55c <osMessageGet+0xe4>)
 800b508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	e014      	b.n	800b542 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b518:	f107 0314 	add.w	r3, r7, #20
 800b51c:	3304      	adds	r3, #4
 800b51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b520:	4619      	mov	r1, r3
 800b522:	68b8      	ldr	r0, [r7, #8]
 800b524:	f000 fc96 	bl	800be54 <xQueueReceive>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d102      	bne.n	800b534 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b52e:	2310      	movs	r3, #16
 800b530:	617b      	str	r3, [r7, #20]
 800b532:	e006      	b.n	800b542 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <osMessageGet+0xc6>
 800b53a:	2300      	movs	r3, #0
 800b53c:	e000      	b.n	800b540 <osMessageGet+0xc8>
 800b53e:	2340      	movs	r3, #64	; 0x40
 800b540:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	461c      	mov	r4, r3
 800b546:	f107 0314 	add.w	r3, r7, #20
 800b54a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b54e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	372c      	adds	r7, #44	; 0x2c
 800b556:	46bd      	mov	sp, r7
 800b558:	bd90      	pop	{r4, r7, pc}
 800b55a:	bf00      	nop
 800b55c:	e000ed04 	.word	0xe000ed04

0800b560 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b568:	f7ff fd2c 	bl	800afc4 <inHandlerMode>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d004      	beq.n	800b57c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 feec 	bl	800c350 <uxQueueMessagesWaitingFromISR>
 800b578:	4603      	mov	r3, r0
 800b57a:	e003      	b.n	800b584 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 feca 	bl	800c316 <uxQueueMessagesWaiting>
 800b582:	4603      	mov	r3, r0
  }
}
 800b584:	4618      	mov	r0, r3
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b594:	f7ff fd16 	bl	800afc4 <inHandlerMode>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <osMessageDelete+0x16>
    return osErrorISR;
 800b59e:	2382      	movs	r3, #130	; 0x82
 800b5a0:	e003      	b.n	800b5aa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 feef 	bl	800c386 <vQueueDelete>

  return osOK; 
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08005ae0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b22      	cmp	r3, #34	; 0x22
 8005af2:	d171      	bne.n	8005bd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d123      	bne.n	8005b46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10e      	bne.n	8005b2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	1c9a      	adds	r2, r3, #2
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	629a      	str	r2, [r3, #40]	; 0x28
 8005b28:	e029      	b.n	8005b7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
 8005b44:	e01b      	b.n	8005b7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6858      	ldr	r0, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6291      	str	r1, [r2, #40]	; 0x28
 8005b5e:	b2c2      	uxtb	r2, r0
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e00c      	b.n	8005b7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	1c58      	adds	r0, r3, #1
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	6288      	str	r0, [r1, #40]	; 0x28
 8005b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d120      	bne.n	8005bd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0220 	bic.w	r2, r2, #32
 8005ba0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff fed4 	bl	8005978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
=======
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f103 0208 	add.w	r2, r3, #8
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f103 0208 	add.w	r2, r3, #8
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f103 0208 	add.w	r2, r3, #8
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5e6:	bf00      	nop
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b083      	sub	sp, #12
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	611a      	str	r2, [r3, #16]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

      return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e002      	b.n	8005bda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
<<<<<<< HEAD
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...
=======
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <vListInsertEnd>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08005be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));
=======
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	609a      	str	r2, [r3, #8]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

<<<<<<< HEAD
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c24:	f023 030c 	bic.w	r3, r3, #12
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	68f9      	ldr	r1, [r7, #12]
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c50:	f040 80e4 	bne.w	8005e1c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4aab      	ldr	r2, [pc, #684]	; (8005f08 <UART_SetConfig+0x324>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <UART_SetConfig+0x84>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4aaa      	ldr	r2, [pc, #680]	; (8005f0c <UART_SetConfig+0x328>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d16c      	bne.n	8005d42 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005c68:	f7fe fc7c 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009a      	lsls	r2, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c82:	4aa3      	ldr	r2, [pc, #652]	; (8005f10 <UART_SetConfig+0x32c>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	011c      	lsls	r4, r3, #4
 8005c8c:	f7fe fc6a 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009a      	lsls	r2, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ca6:	f7fe fc5d 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009a      	lsls	r2, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	4a93      	ldr	r2, [pc, #588]	; (8005f10 <UART_SetConfig+0x32c>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	2264      	movs	r2, #100	; 0x64
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	1aeb      	subs	r3, r5, r3
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	3332      	adds	r3, #50	; 0x32
 8005cd4:	4a8e      	ldr	r2, [pc, #568]	; (8005f10 <UART_SetConfig+0x32c>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ce2:	441c      	add	r4, r3
 8005ce4:	f7fe fc3e 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009a      	lsls	r2, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	fbb2 f5f3 	udiv	r5, r2, r3
 8005cfe:	f7fe fc31 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009a      	lsls	r2, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	4a7d      	ldr	r2, [pc, #500]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2264      	movs	r2, #100	; 0x64
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	1aeb      	subs	r3, r5, r3
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	3332      	adds	r3, #50	; 0x32
 8005d2c:	4a78      	ldr	r2, [pc, #480]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 0207 	and.w	r2, r3, #7
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4422      	add	r2, r4
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	e154      	b.n	8005fec <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005d42:	f7fe fbfb 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005d46:	4602      	mov	r2, r0
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009a      	lsls	r2, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	4a6c      	ldr	r2, [pc, #432]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	011c      	lsls	r4, r3, #4
 8005d66:	f7fe fbe9 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009a      	lsls	r2, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d80:	f7fe fbdc 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005d84:	4602      	mov	r2, r0
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009a      	lsls	r2, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	4a5d      	ldr	r2, [pc, #372]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	2264      	movs	r2, #100	; 0x64
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	1aeb      	subs	r3, r5, r3
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	3332      	adds	r3, #50	; 0x32
 8005dae:	4a58      	ldr	r2, [pc, #352]	; (8005f10 <UART_SetConfig+0x32c>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dbc:	441c      	add	r4, r3
 8005dbe:	f7fe fbbd 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	fbb2 f5f3 	udiv	r5, r2, r3
 8005dd8:	f7fe fbb0 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009a      	lsls	r2, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	4a47      	ldr	r2, [pc, #284]	; (8005f10 <UART_SetConfig+0x32c>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2264      	movs	r2, #100	; 0x64
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	1aeb      	subs	r3, r5, r3
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a42      	ldr	r2, [pc, #264]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f003 0207 	and.w	r2, r3, #7
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4422      	add	r2, r4
 8005e18:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005e1a:	e0e7      	b.n	8005fec <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a39      	ldr	r2, [pc, #228]	; (8005f08 <UART_SetConfig+0x324>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <UART_SetConfig+0x24c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a38      	ldr	r2, [pc, #224]	; (8005f0c <UART_SetConfig+0x328>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d171      	bne.n	8005f14 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005e30:	f7fe fb98 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009a      	lsls	r2, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	4a31      	ldr	r2, [pc, #196]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	011c      	lsls	r4, r3, #4
 8005e54:	f7fe fb86 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009a      	lsls	r2, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e6e:	f7fe fb79 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009a      	lsls	r2, r3, #2
 8005e7c:	441a      	add	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	2264      	movs	r2, #100	; 0x64
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
 8005e96:	1aeb      	subs	r3, r5, r3
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	3332      	adds	r3, #50	; 0x32
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea8:	441c      	add	r4, r3
 8005eaa:	f7fe fb5b 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	441a      	add	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ec4:	f7fe fb4e 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009a      	lsls	r2, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <UART_SetConfig+0x32c>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	2264      	movs	r2, #100	; 0x64
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	1aeb      	subs	r3, r5, r3
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	3332      	adds	r3, #50	; 0x32
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <UART_SetConfig+0x32c>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f003 020f 	and.w	r2, r3, #15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4422      	add	r2, r4
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	e071      	b.n	8005fec <UART_SetConfig+0x408>
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	40011400 	.word	0x40011400
 8005f10:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005f14:	f7fe fb12 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009a      	lsls	r2, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	4a31      	ldr	r2, [pc, #196]	; (8005ff4 <UART_SetConfig+0x410>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	011c      	lsls	r4, r3, #4
 8005f38:	f7fe fb00 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009a      	lsls	r2, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f52:	f7fe faf3 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f56:	4602      	mov	r2, r0
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009a      	lsls	r2, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <UART_SetConfig+0x410>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2264      	movs	r2, #100	; 0x64
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	1aeb      	subs	r3, r5, r3
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	3332      	adds	r3, #50	; 0x32
 8005f80:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <UART_SetConfig+0x410>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f8c:	441c      	add	r4, r3
 8005f8e:	f7fe fad5 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f92:	4602      	mov	r2, r0
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009a      	lsls	r2, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	fbb2 f5f3 	udiv	r5, r2, r3
 8005fa8:	f7fe fac8 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009a      	lsls	r2, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <UART_SetConfig+0x410>)
 8005fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	2264      	movs	r2, #100	; 0x64
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	1aeb      	subs	r3, r5, r3
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	3332      	adds	r3, #50	; 0x32
 8005fd6:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <UART_SetConfig+0x410>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4422      	add	r2, r4
 8005fe8:	609a      	str	r2, [r3, #8]
}
 8005fea:	e7ff      	b.n	8005fec <UART_SetConfig+0x408>
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff4:	51eb851f 	.word	0x51eb851f

08005ff8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	; 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	fab3 f383 	clz	r3, r3
 800601a:	b2db      	uxtb	r3, r3
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	2103      	movs	r1, #3
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	fa93 f3a3 	rbit	r3, r3
 8006032:	61bb      	str	r3, [r7, #24]
  return result;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	fab3 f383 	clz	r3, r3
 800603a:	b2db      	uxtb	r3, r3
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	431a      	orrs	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	431a      	orrs	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	605a      	str	r2, [r3, #4]
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006086:	b480      	push	{r7}
 8006088:	b089      	sub	sp, #36	; 0x24
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	fa93 f3a3 	rbit	r3, r3
 80060a0:	613b      	str	r3, [r7, #16]
  return result;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	fab3 f383 	clz	r3, r3
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2103      	movs	r1, #3
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	401a      	ands	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa93 f3a3 	rbit	r3, r3
 80060c0:	61bb      	str	r3, [r7, #24]
  return result;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	fab3 f383 	clz	r3, r3
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	fa01 f303 	lsl.w	r3, r1, r3
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80060d8:	bf00      	nop
 80060da:	3724      	adds	r7, #36	; 0x24
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	fa93 f3a3 	rbit	r3, r3
 80060fe:	613b      	str	r3, [r7, #16]
  return result;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	fab3 f383 	clz	r3, r3
 8006106:	b2db      	uxtb	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	2103      	movs	r1, #3
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	401a      	ands	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	61bb      	str	r3, [r7, #24]
  return result;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	fab3 f383 	clz	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60da      	str	r2, [r3, #12]
}
 8006136:	bf00      	nop
 8006138:	3724      	adds	r7, #36	; 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006142:	b480      	push	{r7}
 8006144:	b089      	sub	sp, #36	; 0x24
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	fa93 f3a3 	rbit	r3, r3
 800615c:	613b      	str	r3, [r7, #16]
  return result;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	fab3 f383 	clz	r3, r3
 8006164:	b2db      	uxtb	r3, r3
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	210f      	movs	r1, #15
 800616a:	fa01 f303 	lsl.w	r3, r1, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	401a      	ands	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	61bb      	str	r3, [r7, #24]
  return result;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	fab3 f383 	clz	r3, r3
 8006184:	b2db      	uxtb	r3, r3
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	fa01 f303 	lsl.w	r3, r1, r3
 800618e:	431a      	orrs	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006194:	bf00      	nop
 8006196:	3724      	adds	r7, #36	; 0x24
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b089      	sub	sp, #36	; 0x24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	fa93 f3a3 	rbit	r3, r3
 80061bc:	613b      	str	r3, [r7, #16]
  return result;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	fab3 f383 	clz	r3, r3
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	210f      	movs	r1, #15
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	43db      	mvns	r3, r3
 80061d0:	401a      	ands	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	fa93 f3a3 	rbit	r3, r3
 80061de:	61bb      	str	r3, [r7, #24]
  return result;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	fa01 f303 	lsl.w	r3, r1, r3
 80061f0:	431a      	orrs	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80061f6:	bf00      	nop
 80061f8:	3724      	adds	r7, #36	; 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
=======
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	601a      	str	r2, [r3, #0]
}
 800b648:	bf00      	nop
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b66a:	d103      	bne.n	800b674 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	e00c      	b.n	800b68e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3308      	adds	r3, #8
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	e002      	b.n	800b682 <vListInsert+0x2e>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	60fb      	str	r3, [r7, #12]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d2f6      	bcs.n	800b67c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	685a      	ldr	r2, [r3, #4]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	1c5a      	adds	r2, r3, #1
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	601a      	str	r2, [r3, #0]
}
 800b6ba:	bf00      	nop
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <uxListRemove>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08006202 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
<<<<<<< HEAD
 8006202:	b580      	push	{r7, lr}
 8006204:	b088      	sub	sp, #32
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006210:	2300      	movs	r3, #0
 8006212:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	fa93 f3a3 	rbit	r3, r3
 8006220:	613b      	str	r3, [r7, #16]
  return result;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	fab3 f383 	clz	r3, r3
 8006228:	b2db      	uxtb	r3, r3
 800622a:	61fb      	str	r3, [r7, #28]
=======
 800b6c6:	b480      	push	{r7}
 800b6c8:	b085      	sub	sp, #20
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	6892      	ldr	r2, [r2, #8]
 800b6dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	6852      	ldr	r2, [r2, #4]
 800b6e6:	605a      	str	r2, [r3, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800622c:	e049      	b.n	80062c2 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	2101      	movs	r1, #1
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]

<<<<<<< HEAD
    if (currentpin)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d03b      	beq.n	80062bc <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	461a      	mov	r2, r3
 800624a:	69b9      	ldr	r1, [r7, #24]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fed3 	bl	8005ff8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d003      	beq.n	8006262 <LL_GPIO_Init+0x60>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d106      	bne.n	8006270 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	461a      	mov	r2, r3
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ff0b 	bl	8006086 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	461a      	mov	r2, r3
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ff33 	bl	80060e4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d11a      	bne.n	80062bc <LL_GPIO_Init+0xba>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	fa93 f3a3 	rbit	r3, r3
 8006290:	60bb      	str	r3, [r7, #8]
  return result;
 8006292:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
=======
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d103      	bne.n	800b6fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	689a      	ldr	r2, [r3, #8]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	1e5a      	subs	r2, r3, #1
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
	...

0800b71c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <xQueueGenericReset+0x28>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006294:	fab3 f383 	clz	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b07      	cmp	r3, #7
 800629c:	d807      	bhi.n	80062ae <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	461a      	mov	r2, r3
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff ff4b 	bl	8006142 <LL_GPIO_SetAFPin_0_7>
 80062ac:	e006      	b.n	80062bc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	461a      	mov	r2, r3
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ff72 	bl	80061a0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	3301      	adds	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ae      	bne.n	800622e <LL_GPIO_Init+0x2c>
  }

<<<<<<< HEAD
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d003      	beq.n	80062e0 <LL_GPIO_Init+0xde>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d107      	bne.n	80062f0 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff feb3 	bl	8006056 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <LL_I2C_Enable>:
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f043 0201 	orr.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <LL_I2C_Disable>:
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <LL_I2C_ConfigFilters>:
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f023 021f 	bic.w	r2, r3, #31
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	430b      	orrs	r3, r1
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_I2C_SetOwnAddress1>:
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800637a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	430a      	orrs	r2, r1
 8006384:	431a      	orrs	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	609a      	str	r2, [r3, #8]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8006398:	b490      	push	{r4, r7}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80063a6:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80063a8:	2400      	movs	r4, #0
=======
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	60bb      	str	r3, [r7, #8]
 800b742:	e7fe      	b.n	800b742 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b744:	f002 f8d2 	bl	800d8ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b750:	68f9      	ldr	r1, [r7, #12]
 800b752:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b754:	fb01 f303 	mul.w	r3, r1, r3
 800b758:	441a      	add	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b774:	3b01      	subs	r3, #1
 800b776:	68f9      	ldr	r1, [r7, #12]
 800b778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b77a:	fb01 f303 	mul.w	r3, r1, r3
 800b77e:	441a      	add	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	22ff      	movs	r2, #255	; 0xff
 800b788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	22ff      	movs	r2, #255	; 0xff
 800b790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d114      	bne.n	800b7c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d01a      	beq.n	800b7d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3310      	adds	r3, #16
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f001 fb80 	bl	800ceac <xTaskRemoveFromEventList>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d012      	beq.n	800b7d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7b2:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <xQueueGenericReset+0xcc>)
 800b7b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	e009      	b.n	800b7d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3310      	adds	r3, #16
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fef2 	bl	800b5b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3324      	adds	r3, #36	; 0x24
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7ff feed 	bl	800b5b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7d8:	f002 f8b6 	bl	800d948 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7dc:	2301      	movs	r3, #1
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b08e      	sub	sp, #56	; 0x38
 800b7f0:	af02      	add	r7, sp, #8
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d109      	bne.n	800b814 <xQueueGenericCreateStatic+0x28>
 800b800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	62bb      	str	r3, [r7, #40]	; 0x28
 800b812:	e7fe      	b.n	800b812 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d109      	bne.n	800b82e <xQueueGenericCreateStatic+0x42>
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
 800b82c:	e7fe      	b.n	800b82c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <xQueueGenericCreateStatic+0x4e>
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <xQueueGenericCreateStatic+0x52>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <xQueueGenericCreateStatic+0x54>
 800b83e:	2300      	movs	r3, #0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d109      	bne.n	800b858 <xQueueGenericCreateStatic+0x6c>
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	623b      	str	r3, [r7, #32]
 800b856:	e7fe      	b.n	800b856 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <xQueueGenericCreateStatic+0x78>
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <xQueueGenericCreateStatic+0x7c>
 800b864:	2301      	movs	r3, #1
 800b866:	e000      	b.n	800b86a <xQueueGenericCreateStatic+0x7e>
 800b868:	2300      	movs	r3, #0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d109      	bne.n	800b882 <xQueueGenericCreateStatic+0x96>
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	61fb      	str	r3, [r7, #28]
 800b880:	e7fe      	b.n	800b880 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b882:	2348      	movs	r3, #72	; 0x48
 800b884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b48      	cmp	r3, #72	; 0x48
 800b88a:	d009      	beq.n	800b8a0 <xQueueGenericCreateStatic+0xb4>
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	61bb      	str	r3, [r7, #24]
 800b89e:	e7fe      	b.n	800b89e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00d      	beq.n	800b8c6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f842 	bl	800b94a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3730      	adds	r7, #48	; 0x30
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4a3f      	ldr	r2, [pc, #252]	; (80064ac <LL_I2C_ConfigSpeed+0x114>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	0c9c      	lsrs	r4, r3, #18

<<<<<<< HEAD
  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063bc:	ea44 0203 	orr.w	r2, r4, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4938      	ldr	r1, [pc, #224]	; (80064b0 <LL_I2C_ConfigSpeed+0x118>)
 80063d0:	428b      	cmp	r3, r1
 80063d2:	d801      	bhi.n	80063d8 <LL_I2C_ConfigSpeed+0x40>
 80063d4:	1c63      	adds	r3, r4, #1
 80063d6:	e008      	b.n	80063ea <LL_I2C_ConfigSpeed+0x52>
 80063d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80063dc:	fb03 f304 	mul.w	r3, r3, r4
 80063e0:	4934      	ldr	r1, [pc, #208]	; (80064b4 <LL_I2C_ConfigSpeed+0x11c>)
 80063e2:	fba1 1303 	umull	r1, r3, r1, r3
 80063e6:	099b      	lsrs	r3, r3, #6
 80063e8:	3301      	adds	r3, #1
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <LL_I2C_ConfigSpeed+0x118>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d939      	bls.n	800646c <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d117      	bne.n	800642e <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4413      	add	r3, r2
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	fbb2 f3f3 	udiv	r3, r2, r3
 800640c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006426:	e01d      	b.n	8006464 <LL_I2C_ConfigSpeed+0xcc>
 8006428:	f248 0301 	movw	r3, #32769	; 0x8001
 800642c:	e01a      	b.n	8006464 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009a      	lsls	r2, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009a      	lsls	r2, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800645a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645e:	e001      	b.n	8006464 <LL_I2C_ConfigSpeed+0xcc>
 8006460:	f248 0301 	movw	r3, #32769	; 0x8001
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	ea43 0402 	orr.w	r4, r3, r2
 800646a:	e010      	b.n	800648e <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800647a:	2b03      	cmp	r3, #3
 800647c:	d905      	bls.n	800648a <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	e000      	b.n	800648c <LL_I2C_ConfigSpeed+0xf4>
 800648a:	2304      	movs	r3, #4
 800648c:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8006496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800649a:	ea44 0203 	orr.w	r2, r4, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	61da      	str	r2, [r3, #28]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc90      	pop	{r4, r7}
 80064aa:	4770      	bx	lr
 80064ac:	431bde83 	.word	0x431bde83
 80064b0:	000186a0 	.word	0x000186a0
 80064b4:	10624dd3 	.word	0x10624dd3

080064b8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 021a 	bic.w	r2, r3, #26
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff03 	bl	800631a <LL_I2C_Disable>
=======
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08a      	sub	sp, #40	; 0x28
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d109      	bne.n	800b8f8 <xQueueGenericCreate+0x28>
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	613b      	str	r3, [r7, #16]
 800b8f6:	e7fe      	b.n	800b8f6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	61fb      	str	r3, [r7, #28]
 800b902:	e004      	b.n	800b90e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	fb02 f303 	mul.w	r3, r2, r3
 800b90c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	3348      	adds	r3, #72	; 0x48
 800b912:	4618      	mov	r0, r3
 800b914:	f002 f904 	bl	800db20 <pvPortMalloc>
 800b918:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00f      	beq.n	800b940 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	3348      	adds	r3, #72	; 0x48
 800b924:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b92e:	79fa      	ldrb	r2, [r7, #7]
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	4613      	mov	r3, r2
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	68b9      	ldr	r1, [r7, #8]
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 f805 	bl	800b94a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b940:	69bb      	ldr	r3, [r7, #24]
	}
 800b942:	4618      	mov	r0, r3
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <prvInitialiseNewQueue>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f89d 	bl	8006658 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68d9      	ldr	r1, [r3, #12]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	461a      	mov	r2, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ff06 	bl	800633a <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800652e:	6939      	ldr	r1, [r7, #16]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff2d 	bl	8006398 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6959      	ldr	r1, [r3, #20]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	461a      	mov	r2, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff0c 	bl	8006366 <LL_I2C_SetOwnAddress1>

<<<<<<< HEAD
  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ffaf 	bl	80064b8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff fecd 	bl	80062fa <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ffb9 	bl	80064de <LL_I2C_AcknowledgeNextData>
=======
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	607a      	str	r2, [r7, #4]
 800b956:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d103      	bne.n	800b966 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e002      	b.n	800b96c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b978:	2101      	movs	r1, #1
 800b97a:	69b8      	ldr	r0, [r7, #24]
 800b97c:	f7ff fece 	bl	800b71c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return SUCCESS;
 800656c:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...
=======
 800b980:	bf00      	nop
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08006578 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <LL_RCC_GetSysClkSource+0x18>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 030c 	and.w	r3, r3, #12
}
 8006584:	4618      	mov	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40023800 	.word	0x40023800

08006594 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <LL_RCC_GetAHBPrescaler+0x18>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40023800 	.word	0x40023800

080065b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80065bc:	4618      	mov	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800

080065cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800

080065e8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <LL_RCC_PLL_GetMainSource+0x18>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800

08006604 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006608:	4b04      	ldr	r3, [pc, #16]	; (800661c <LL_RCC_PLL_GetN+0x18>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006612:	4618      	mov	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40023800 	.word	0x40023800

08006620 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <LL_RCC_PLL_GetP+0x18>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40023800 	.word	0x40023800

0800663c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006640:	4b04      	ldr	r3, [pc, #16]	; (8006654 <LL_RCC_PLL_GetDivider+0x18>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800

08006658 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006660:	f000 f820 	bl	80066a4 <RCC_GetSystemClockFreq>
 8006664:	4602      	mov	r2, r0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	601a      	str	r2, [r3, #0]

<<<<<<< HEAD
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f83e 	bl	80066f0 <RCC_GetHCLKClockFreq>
 8006674:	4602      	mov	r2, r0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f84c 	bl	800671c <RCC_GetPCLK1ClockFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]
=======
	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00e      	beq.n	800b9b4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f838 	bl	800ba24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f858 	bl	8006744 <RCC_GetPCLK2ClockFreq>
 8006694:	4602      	mov	r2, r0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60da      	str	r2, [r3, #12]
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
080066a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80066ae:	f7ff ff63 	bl	8006578 <LL_RCC_GetSysClkSource>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d006      	beq.n	80066c6 <RCC_GetSystemClockFreq+0x22>
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d007      	beq.n	80066cc <RCC_GetSystemClockFreq+0x28>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80066c0:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <RCC_GetSystemClockFreq+0x44>)
 80066c2:	607b      	str	r3, [r7, #4]
      break;
 80066c4:	e00a      	b.n	80066dc <RCC_GetSystemClockFreq+0x38>
=======
	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b9ce:	79fb      	ldrb	r3, [r7, #7]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6939      	ldr	r1, [r7, #16]
 800b9d4:	6978      	ldr	r0, [r7, #20]
 800b9d6:	f7ff ff7b 	bl	800b8d0 <xQueueGenericCreate>
 800b9da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f7ff ffd3 	bl	800b988 <prvInitialiseMutex>

		return pxNewQueue;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
	}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <RCC_GetSystemClockFreq+0x48>)
 80066c8:	607b      	str	r3, [r7, #4]
      break;
 80066ca:	e007      	b.n	80066dc <RCC_GetSystemClockFreq+0x38>

<<<<<<< HEAD
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80066cc:	2008      	movs	r0, #8
 80066ce:	f000 f84d 	bl	800676c <RCC_PLL_GetFreqDomain_SYS>
 80066d2:	6078      	str	r0, [r7, #4]
      break;
 80066d4:	e002      	b.n	80066dc <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80066d6:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <RCC_GetSystemClockFreq+0x44>)
 80066d8:	607b      	str	r3, [r7, #4]
      break;
 80066da:	bf00      	nop
  }
=======
	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	617b      	str	r3, [r7, #20]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba00:	79fb      	ldrb	r3, [r7, #7]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2200      	movs	r2, #0
 800ba08:	6939      	ldr	r1, [r7, #16]
 800ba0a:	6978      	ldr	r0, [r7, #20]
 800ba0c:	f7ff feee 	bl	800b7ec <xQueueGenericCreateStatic>
 800ba10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff ffb8 	bl	800b988 <prvInitialiseMutex>

		return pxNewQueue;
 800ba18:	68fb      	ldr	r3, [r7, #12]
	}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <xQueueGenericSend>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return frequency;
 80066dc:	687b      	ldr	r3, [r7, #4]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	00f42400 	.word	0x00f42400
 80066ec:	007a1200 	.word	0x007a1200

080066f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
<<<<<<< HEAD
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80066f8:	f7ff ff4c 	bl	8006594 <LL_RCC_GetAHBPrescaler>
 80066fc:	4603      	mov	r3, r0
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	4a04      	ldr	r2, [pc, #16]	; (8006718 <RCC_GetHCLKClockFreq+0x28>)
 8006706:	5cd3      	ldrb	r3, [r2, r3]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	40d3      	lsrs	r3, r2
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	0800c868 	.word	0x0800c868

0800671c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006724:	f7ff ff44 	bl	80065b0 <LL_RCC_GetAPB1Prescaler>
 8006728:	4603      	mov	r3, r0
 800672a:	0a9b      	lsrs	r3, r3, #10
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <RCC_GetPCLK1ClockFreq+0x24>)
 800672e:	5cd3      	ldrb	r3, [r2, r3]
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	40d3      	lsrs	r3, r2
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	0800c878 	.word	0x0800c878

08006744 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800674c:	f7ff ff3e 	bl	80065cc <LL_RCC_GetAPB2Prescaler>
 8006750:	4603      	mov	r3, r0
 8006752:	0b5b      	lsrs	r3, r3, #13
 8006754:	4a04      	ldr	r2, [pc, #16]	; (8006768 <RCC_GetPCLK2ClockFreq+0x24>)
 8006756:	5cd3      	ldrb	r3, [r2, r3]
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	40d3      	lsrs	r3, r2
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	0800c878 	.word	0x0800c878

0800676c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
=======
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08e      	sub	sp, #56	; 0x38
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
 800ba30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba32:	2300      	movs	r3, #0
 800ba34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d109      	bne.n	800ba54 <xQueueGenericSend+0x30>
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba52:	e7fe      	b.n	800ba52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d103      	bne.n	800ba62 <xQueueGenericSend+0x3e>
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <xQueueGenericSend+0x42>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e000      	b.n	800ba68 <xQueueGenericSend+0x44>
 800ba66:	2300      	movs	r3, #0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d109      	bne.n	800ba80 <xQueueGenericSend+0x5c>
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7e:	e7fe      	b.n	800ba7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d103      	bne.n	800ba8e <xQueueGenericSend+0x6a>
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d101      	bne.n	800ba92 <xQueueGenericSend+0x6e>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <xQueueGenericSend+0x70>
 800ba92:	2300      	movs	r3, #0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d109      	bne.n	800baac <xQueueGenericSend+0x88>
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	623b      	str	r3, [r7, #32]
 800baaa:	e7fe      	b.n	800baaa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baac:	f001 fbba 	bl	800d224 <xTaskGetSchedulerState>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d102      	bne.n	800babc <xQueueGenericSend+0x98>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <xQueueGenericSend+0x9c>
 800babc:	2301      	movs	r3, #1
 800babe:	e000      	b.n	800bac2 <xQueueGenericSend+0x9e>
 800bac0:	2300      	movs	r3, #0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d109      	bne.n	800bada <xQueueGenericSend+0xb6>
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	61fb      	str	r3, [r7, #28]
 800bad8:	e7fe      	b.n	800bad8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bada:	f001 ff07 	bl	800d8ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d302      	bcc.n	800baf0 <xQueueGenericSend+0xcc>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b02      	cmp	r3, #2
 800baee:	d129      	bne.n	800bb44 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	68b9      	ldr	r1, [r7, #8]
 800baf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf6:	f000 fc80 	bl	800c3fa <prvCopyDataToQueue>
 800bafa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d010      	beq.n	800bb26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb06:	3324      	adds	r3, #36	; 0x24
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f001 f9cf 	bl	800ceac <xTaskRemoveFromEventList>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d013      	beq.n	800bb3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb14:	4b3f      	ldr	r3, [pc, #252]	; (800bc14 <xQueueGenericSend+0x1f0>)
 800bb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	e00a      	b.n	800bb3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d007      	beq.n	800bb3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb2c:	4b39      	ldr	r3, [pc, #228]	; (800bc14 <xQueueGenericSend+0x1f0>)
 800bb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb3c:	f001 ff04 	bl	800d948 <vPortExitCritical>
				return pdPASS;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e063      	b.n	800bc0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d103      	bne.n	800bb52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb4a:	f001 fefd 	bl	800d948 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	e05c      	b.n	800bc0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d106      	bne.n	800bb66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb58:	f107 0314 	add.w	r3, r7, #20
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f001 fa07 	bl	800cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb66:	f001 feef 	bl	800d948 <vPortExitCritical>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006780:	f7ff ff32 	bl	80065e8 <LL_RCC_PLL_GetMainSource>
 8006784:	60f8      	str	r0, [r7, #12]

<<<<<<< HEAD
  switch (pllsource)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800678c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006790:	d003      	beq.n	800679a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8006792:	e005      	b.n	80067a0 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006796:	617b      	str	r3, [r7, #20]
      break;
 8006798:	e005      	b.n	80067a6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800679a:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800679c:	617b      	str	r3, [r7, #20]
      break;
 800679e:	e002      	b.n	80067a6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80067a2:	617b      	str	r3, [r7, #20]
      break;
 80067a4:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d113      	bne.n	80067d4 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80067ac:	f7ff ff46 	bl	800663c <LL_RCC_PLL_GetDivider>
 80067b0:	4602      	mov	r2, r0
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	fbb3 f4f2 	udiv	r4, r3, r2
 80067b8:	f7ff ff24 	bl	8006604 <LL_RCC_PLL_GetN>
 80067bc:	4603      	mov	r3, r0
 80067be:	fb03 f404 	mul.w	r4, r3, r4
 80067c2:	f7ff ff2d 	bl	8006620 <LL_RCC_PLL_GetP>
 80067c6:	4603      	mov	r3, r0
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	3301      	adds	r3, #1
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80067d2:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80067d4:	693b      	ldr	r3, [r7, #16]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd90      	pop	{r4, r7, pc}
 80067de:	bf00      	nop
 80067e0:	00f42400 	.word	0x00f42400
 80067e4:	007a1200 	.word	0x007a1200

080067e8 <LL_USART_IsEnabled>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	bf0c      	ite	eq
 80067fe:	2301      	moveq	r3, #1
 8006800:	2300      	movne	r3, #0
 8006802:	b2db      	uxtb	r3, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <LL_USART_SetStopBitsLength>:
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
=======
		vTaskSuspendAll();
 800bb6a:	f000 ff99 	bl	800caa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb6e:	f001 febd 	bl	800d8ec <vPortEnterCritical>
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb78:	b25b      	sxtb	r3, r3
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb7e:	d103      	bne.n	800bb88 <xQueueGenericSend+0x164>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb8e:	b25b      	sxtb	r3, r3
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb94:	d103      	bne.n	800bb9e <xQueueGenericSend+0x17a>
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb9e:	f001 fed3 	bl	800d948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bba2:	1d3a      	adds	r2, r7, #4
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f001 f9f6 	bl	800cf9c <xTaskCheckForTimeOut>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d124      	bne.n	800bc00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbb8:	f000 fd17 	bl	800c5ea <prvIsQueueFull>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d018      	beq.n	800bbf4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	3310      	adds	r3, #16
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 f94a 	bl	800ce64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd2:	f000 fca2 	bl	800c51a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbd6:	f000 ff71 	bl	800cabc <xTaskResumeAll>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f47f af7c 	bne.w	800bada <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bbe2:	4b0c      	ldr	r3, [pc, #48]	; (800bc14 <xQueueGenericSend+0x1f0>)
 800bbe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	e772      	b.n	800bada <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbf6:	f000 fc90 	bl	800c51a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbfa:	f000 ff5f 	bl	800cabc <xTaskResumeAll>
 800bbfe:	e76c      	b.n	800bada <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc02:	f000 fc8a 	bl	800c51a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc06:	f000 ff59 	bl	800cabc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc0a:	2300      	movs	r3, #0
		}
	}
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3738      	adds	r7, #56	; 0x38
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	e000ed04 	.word	0xe000ed04

0800bc18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08006836 <LL_USART_SetHWFlowCtrl>:
{
<<<<<<< HEAD
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	615a      	str	r2, [r3, #20]
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <LL_USART_SetBaudRate>:
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006870:	d152      	bne.n	8006918 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009a      	lsls	r2, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	4a4f      	ldr	r2, [pc, #316]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	b29b      	uxth	r3, r3
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	b299      	uxth	r1, r3
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009a      	lsls	r2, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a8:	4b46      	ldr	r3, [pc, #280]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068aa:	fba3 0302 	umull	r0, r3, r3, r2
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	2064      	movs	r0, #100	; 0x64
 80068b2:	fb00 f303 	mul.w	r3, r0, r3
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	3332      	adds	r3, #50	; 0x32
 80068bc:	4a41      	ldr	r2, [pc, #260]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	440b      	add	r3, r1
 80068d2:	b299      	uxth	r1, r3
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009a      	lsls	r2, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068e8:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068ea:	fba3 0302 	umull	r0, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2064      	movs	r0, #100	; 0x64
 80068f2:	fb00 f303 	mul.w	r3, r0, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	3332      	adds	r3, #50	; 0x32
 80068fc:	4a31      	ldr	r2, [pc, #196]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	b29b      	uxth	r3, r3
 800690c:	440b      	add	r3, r1
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	609a      	str	r2, [r3, #8]
}
 8006916:	e04f      	b.n	80069b8 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009a      	lsls	r2, r3, #2
 8006922:	441a      	add	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	b29b      	uxth	r3, r3
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	b299      	uxth	r1, r3
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009a      	lsls	r2, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	fbb2 f2f3 	udiv	r2, r2, r3
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 8006950:	fba3 0302 	umull	r0, r3, r3, r2
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	2064      	movs	r0, #100	; 0x64
 8006958:	fb00 f303 	mul.w	r3, r0, r3
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	3332      	adds	r3, #50	; 0x32
 8006962:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 8006964:	fba2 2303 	umull	r2, r3, r2, r3
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	b29b      	uxth	r3, r3
 800696c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006970:	b29b      	uxth	r3, r3
 8006972:	440b      	add	r3, r1
 8006974:	b299      	uxth	r1, r3
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009a      	lsls	r2, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	fbb2 f2f3 	udiv	r2, r2, r3
 800698a:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 800698c:	fba3 0302 	umull	r0, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	2064      	movs	r0, #100	; 0x64
 8006994:	fb00 f303 	mul.w	r3, r0, r3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	3332      	adds	r3, #50	; 0x32
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80069a0:	fba2 2303 	umull	r2, r3, r2, r3
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	440b      	add	r3, r1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	609a      	str	r2, [r3, #8]
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	51eb851f 	.word	0x51eb851f

080069c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff ff04 	bl	80067e8 <LL_USART_IsEnabled>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d16c      	bne.n	8006ac0 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80069ee:	f023 030c 	bic.w	r3, r3, #12
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	6851      	ldr	r1, [r2, #4]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	68d2      	ldr	r2, [r2, #12]
 80069fa:	4311      	orrs	r1, r2
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	6912      	ldr	r2, [r2, #16]
 8006a00:	4311      	orrs	r1, r2
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	6992      	ldr	r2, [r2, #24]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fefb 	bl	8006810 <LL_USART_SetStopBitsLength>
=======
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08e      	sub	sp, #56	; 0x38
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d109      	bne.n	800bc44 <xQueueGenericSendFromISR+0x2c>
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
 800bc42:	e7fe      	b.n	800bc42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d103      	bne.n	800bc52 <xQueueGenericSendFromISR+0x3a>
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <xQueueGenericSendFromISR+0x3e>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e000      	b.n	800bc58 <xQueueGenericSendFromISR+0x40>
 800bc56:	2300      	movs	r3, #0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d109      	bne.n	800bc70 <xQueueGenericSendFromISR+0x58>
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	623b      	str	r3, [r7, #32]
 800bc6e:	e7fe      	b.n	800bc6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d103      	bne.n	800bc7e <xQueueGenericSendFromISR+0x66>
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d101      	bne.n	800bc82 <xQueueGenericSendFromISR+0x6a>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <xQueueGenericSendFromISR+0x6c>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d109      	bne.n	800bc9c <xQueueGenericSendFromISR+0x84>
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	61fb      	str	r3, [r7, #28]
 800bc9a:	e7fe      	b.n	800bc9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc9c:	f001 ff02 	bl	800daa4 <vPortValidateInterruptPriority>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff ff08 	bl	8006836 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fe14 	bl	8006658 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a26      	ldr	r2, [pc, #152]	; (8006acc <LL_USART_Init+0x104>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d102      	bne.n	8006a3e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e02f      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a23      	ldr	r2, [pc, #140]	; (8006ad0 <LL_USART_Init+0x108>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d102      	bne.n	8006a4c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	e028      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <LL_USART_Init+0x10c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d102      	bne.n	8006a5a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	e021      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <LL_USART_Init+0x110>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d102      	bne.n	8006a68 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	e01a      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <LL_USART_Init+0x114>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d102      	bne.n	8006a76 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e013      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <LL_USART_Init+0x118>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d102      	bne.n	8006a84 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	e00c      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <LL_USART_Init+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d102      	bne.n	8006a92 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	e005      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <LL_USART_Init+0x120>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8006aac:	2300      	movs	r3, #0
 8006aae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699a      	ldr	r2, [r3, #24]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fece 	bl	800685c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40011000 	.word	0x40011000
 8006ad0:	40004400 	.word	0x40004400
 8006ad4:	40004800 	.word	0x40004800
 8006ad8:	40011400 	.word	0x40011400
 8006adc:	40004c00 	.word	0x40004c00
 8006ae0:	40005000 	.word	0x40005000
 8006ae4:	40007800 	.word	0x40007800
 8006ae8:	40007c00 	.word	0x40007c00

08006aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aec:	b084      	sub	sp, #16
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	f107 001c 	add.w	r0, r7, #28
 8006afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

<<<<<<< HEAD
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d122      	bne.n	8006b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d105      	bne.n	8006b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fa7c 	bl	800803c <USB_CoreReset>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e01a      	b.n	8006b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fa70 	bl	800803c <USB_CoreReset>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
=======
	__asm volatile
 800bca0:	f3ef 8211 	mrs	r2, BASEPRI
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	61ba      	str	r2, [r7, #24]
 800bcb6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d302      	bcc.n	800bcce <xQueueGenericSendFromISR+0xb6>
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d12c      	bne.n	800bd28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcde:	f000 fb8c 	bl	800c3fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bce2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcea:	d112      	bne.n	800bd12 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d016      	beq.n	800bd22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf6:	3324      	adds	r3, #36	; 0x24
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f001 f8d7 	bl	800ceac <xTaskRemoveFromEventList>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00e      	beq.n	800bd22 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00b      	beq.n	800bd22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	e007      	b.n	800bd22 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd16:	3301      	adds	r3, #1
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	b25a      	sxtb	r2, r3
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd22:	2301      	movs	r3, #1
 800bd24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bd26:	e001      	b.n	800bd2c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    if (cfg.battery_charging_enable == 0U)
 8006b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38
 8006b72:	e005      	b.n	8006b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d10b      	bne.n	8006b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f043 0206 	orr.w	r2, r3, #6
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006baa:	b004      	add	sp, #16
 8006bac:	4770      	bx	lr
	...

08006bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
<<<<<<< HEAD
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d165      	bne.n	8006c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4a41      	ldr	r2, [pc, #260]	; (8006ccc <USB_SetTurnaroundTime+0x11c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d906      	bls.n	8006bda <USB_SetTurnaroundTime+0x2a>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a40      	ldr	r2, [pc, #256]	; (8006cd0 <USB_SetTurnaroundTime+0x120>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d802      	bhi.n	8006bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bd4:	230f      	movs	r3, #15
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e062      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a3c      	ldr	r2, [pc, #240]	; (8006cd0 <USB_SetTurnaroundTime+0x120>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d906      	bls.n	8006bf0 <USB_SetTurnaroundTime+0x40>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a3b      	ldr	r2, [pc, #236]	; (8006cd4 <USB_SetTurnaroundTime+0x124>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d802      	bhi.n	8006bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006bea:	230e      	movs	r3, #14
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e057      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a38      	ldr	r2, [pc, #224]	; (8006cd4 <USB_SetTurnaroundTime+0x124>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d906      	bls.n	8006c06 <USB_SetTurnaroundTime+0x56>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4a37      	ldr	r2, [pc, #220]	; (8006cd8 <USB_SetTurnaroundTime+0x128>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d802      	bhi.n	8006c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c00:	230d      	movs	r3, #13
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e04c      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4a33      	ldr	r2, [pc, #204]	; (8006cd8 <USB_SetTurnaroundTime+0x128>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d906      	bls.n	8006c1c <USB_SetTurnaroundTime+0x6c>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4a32      	ldr	r2, [pc, #200]	; (8006cdc <USB_SetTurnaroundTime+0x12c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d802      	bhi.n	8006c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c16:	230c      	movs	r3, #12
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e041      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4a2f      	ldr	r2, [pc, #188]	; (8006cdc <USB_SetTurnaroundTime+0x12c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d906      	bls.n	8006c32 <USB_SetTurnaroundTime+0x82>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4a2e      	ldr	r2, [pc, #184]	; (8006ce0 <USB_SetTurnaroundTime+0x130>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d802      	bhi.n	8006c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c2c:	230b      	movs	r3, #11
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e036      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4a2a      	ldr	r2, [pc, #168]	; (8006ce0 <USB_SetTurnaroundTime+0x130>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d906      	bls.n	8006c48 <USB_SetTurnaroundTime+0x98>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4a29      	ldr	r2, [pc, #164]	; (8006ce4 <USB_SetTurnaroundTime+0x134>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d802      	bhi.n	8006c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c42:	230a      	movs	r3, #10
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	e02b      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4a26      	ldr	r2, [pc, #152]	; (8006ce4 <USB_SetTurnaroundTime+0x134>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d906      	bls.n	8006c5e <USB_SetTurnaroundTime+0xae>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4a25      	ldr	r2, [pc, #148]	; (8006ce8 <USB_SetTurnaroundTime+0x138>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d802      	bhi.n	8006c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c58:	2309      	movs	r3, #9
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e020      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <USB_SetTurnaroundTime+0x138>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d906      	bls.n	8006c74 <USB_SetTurnaroundTime+0xc4>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4a20      	ldr	r2, [pc, #128]	; (8006cec <USB_SetTurnaroundTime+0x13c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d802      	bhi.n	8006c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c6e:	2308      	movs	r3, #8
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e015      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <USB_SetTurnaroundTime+0x13c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d906      	bls.n	8006c8a <USB_SetTurnaroundTime+0xda>
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <USB_SetTurnaroundTime+0x140>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d802      	bhi.n	8006c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c84:	2307      	movs	r3, #7
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e00a      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c8a:	2306      	movs	r3, #6
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e007      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c96:	2309      	movs	r3, #9
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	e001      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c9c:	2309      	movs	r3, #9
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	60da      	str	r2, [r3, #12]
=======
	__asm volatile
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3738      	adds	r7, #56	; 0x38
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	00d8acbf 	.word	0x00d8acbf
 8006cd0:	00e4e1bf 	.word	0x00e4e1bf
 8006cd4:	00f423ff 	.word	0x00f423ff
 8006cd8:	0106737f 	.word	0x0106737f
 8006cdc:	011a499f 	.word	0x011a499f
 8006ce0:	01312cff 	.word	0x01312cff
 8006ce4:	014ca43f 	.word	0x014ca43f
 8006ce8:	016e35ff 	.word	0x016e35ff
 8006cec:	01a6ab1f 	.word	0x01a6ab1f
 8006cf0:	01e847ff 	.word	0x01e847ff

08006cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f043 0201 	orr.w	r2, r3, #1
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f023 0201 	bic.w	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d106      	bne.n	8006d64 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	e00b      	b.n	8006d7c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	e001      	b.n	8006d7c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e003      	b.n	8006d84 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d7c:	2032      	movs	r0, #50	; 0x32
 8006d7e:	f7fb fae5 	bl	800234c <HAL_Delay>

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	e009      	b.n	8006dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3340      	adds	r3, #64	; 0x40
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0e      	cmp	r3, #14
 8006dc4:	d9f2      	bls.n	8006dac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d112      	bne.n	8006df2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38
 8006df0:	e00b      	b.n	8006e0a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e10:	461a      	mov	r2, r3
 8006e12:	2300      	movs	r3, #0
 8006e14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	461a      	mov	r2, r3
 8006e26:	680b      	ldr	r3, [r1, #0]
 8006e28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d10c      	bne.n	8006e4a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f961 	bl	8007100 <USB_SetDevSpeed>
 8006e3e:	e008      	b.n	8006e52 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e40:	2101      	movs	r1, #1
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f95c 	bl	8007100 <USB_SetDevSpeed>
 8006e48:	e003      	b.n	8006e52 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f957 	bl	8007100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e52:	2110      	movs	r1, #16
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f90b 	bl	8007070 <USB_FlushTxFifo>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f929 	bl	80070bc <USB_FlushRxFifo>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	461a      	mov	r2, r3
 8006e88:	2300      	movs	r3, #0
 8006e8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e92:	461a      	mov	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	e043      	b.n	8006f26 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb4:	d118      	bne.n	8006ee8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	e013      	b.n	8006efa <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e008      	b.n	8006efa <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6013      	str	r3, [r2, #0]
    }
=======
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08e      	sub	sp, #56	; 0x38
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d109      	bne.n	800bd68 <xQueueGiveFromISR+0x28>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	623b      	str	r3, [r7, #32]
 800bd66:	e7fe      	b.n	800bd66 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d009      	beq.n	800bd84 <xQueueGiveFromISR+0x44>
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	61fb      	str	r3, [r7, #28]
 800bd82:	e7fe      	b.n	800bd82 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d103      	bne.n	800bd94 <xQueueGiveFromISR+0x54>
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d101      	bne.n	800bd98 <xQueueGiveFromISR+0x58>
 800bd94:	2301      	movs	r3, #1
 800bd96:	e000      	b.n	800bd9a <xQueueGiveFromISR+0x5a>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d109      	bne.n	800bdb2 <xQueueGiveFromISR+0x72>
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	61bb      	str	r3, [r7, #24]
 800bdb0:	e7fe      	b.n	800bdb0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdb2:	f001 fe77 	bl	800daa4 <vPortValidateInterruptPriority>
	__asm volatile
 800bdb6:	f3ef 8211 	mrs	r2, BASEPRI
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	617a      	str	r2, [r7, #20]
 800bdcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bdce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d22b      	bcs.n	800be3a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bdf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdfc:	d112      	bne.n	800be24 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be02:	2b00      	cmp	r3, #0
 800be04:	d016      	beq.n	800be34 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	3324      	adds	r3, #36	; 0x24
 800be0a:	4618      	mov	r0, r3
 800be0c:	f001 f84e 	bl	800ceac <xTaskRemoveFromEventList>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00e      	beq.n	800be34 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2201      	movs	r2, #1
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	e007      	b.n	800be34 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be28:	3301      	adds	r3, #1
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	b25a      	sxtb	r2, r3
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be34:	2301      	movs	r3, #1
 800be36:	637b      	str	r3, [r7, #52]	; 0x34
 800be38:	e001      	b.n	800be3e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	637b      	str	r3, [r7, #52]	; 0x34
 800be3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3738      	adds	r7, #56	; 0x38
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08c      	sub	sp, #48	; 0x30
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800be60:	2300      	movs	r3, #0
 800be62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d109      	bne.n	800be82 <xQueueReceive+0x2e>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	623b      	str	r3, [r7, #32]
 800be80:	e7fe      	b.n	800be80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d103      	bne.n	800be90 <xQueueReceive+0x3c>
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <xQueueReceive+0x40>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <xQueueReceive+0x42>
 800be94:	2300      	movs	r3, #0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d109      	bne.n	800beae <xQueueReceive+0x5a>
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	61fb      	str	r3, [r7, #28]
 800beac:	e7fe      	b.n	800beac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beae:	f001 f9b9 	bl	800d224 <xTaskGetSchedulerState>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d102      	bne.n	800bebe <xQueueReceive+0x6a>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <xQueueReceive+0x6e>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e000      	b.n	800bec4 <xQueueReceive+0x70>
 800bec2:	2300      	movs	r3, #0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d109      	bne.n	800bedc <xQueueReceive+0x88>
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	61bb      	str	r3, [r7, #24]
 800beda:	e7fe      	b.n	800beda <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bedc:	f001 fd06 	bl	800d8ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01f      	beq.n	800bf2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800beec:	68b9      	ldr	r1, [r7, #8]
 800beee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef0:	f000 faed 	bl	800c4ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	1e5a      	subs	r2, r3, #1
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00f      	beq.n	800bf24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	3310      	adds	r3, #16
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 ffcf 	bl	800ceac <xTaskRemoveFromEventList>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d007      	beq.n	800bf24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf14:	4b3c      	ldr	r3, [pc, #240]	; (800c008 <xQueueReceive+0x1b4>)
 800bf16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf1a:	601a      	str	r2, [r3, #0]
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf24:	f001 fd10 	bl	800d948 <vPortExitCritical>
				return pdPASS;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e069      	b.n	800c000 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d103      	bne.n	800bf3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf32:	f001 fd09 	bl	800d948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf36:	2300      	movs	r3, #0
 800bf38:	e062      	b.n	800c000 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d106      	bne.n	800bf4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf40:	f107 0310 	add.w	r3, r7, #16
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 f813 	bl	800cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf4e:	f001 fcfb 	bl	800d948 <vPortExitCritical>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	461a      	mov	r2, r3
 8006f08:	2300      	movs	r3, #0
 8006f0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3301      	adds	r3, #1
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d3b7      	bcc.n	8006e9e <USB_DevInit+0x112>
  }

<<<<<<< HEAD
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e043      	b.n	8006fbc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f4a:	d118      	bne.n	8006f7e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e013      	b.n	8006f90 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	461a      	mov	r2, r3
 8006f76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	e008      	b.n	8006f90 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d3b7      	bcc.n	8006f34 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d111      	bne.n	8007002 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4b20      	ldr	r3, [pc, #128]	; (8007068 <USB_DevInit+0x2dc>)
 8006fe8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffc:	f043 0303 	orr.w	r3, r3, #3
 8007000:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800700e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f043 0210 	orr.w	r2, r3, #16
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <USB_DevInit+0x2e0>)
 8007028:	4313      	orrs	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800702e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f043 0208 	orr.w	r2, r3, #8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d107      	bne.n	8007056 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800704e:	f043 0304 	orr.w	r3, r3, #4
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007062:	b004      	add	sp, #16
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	00800100 	.word	0x00800100
 800706c:	803c3800 	.word	0x803c3800

08007070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	019b      	lsls	r3, r3, #6
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <USB_FlushTxFifo+0x48>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d901      	bls.n	800709c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d0f0      	beq.n	800708a <USB_FlushTxFifo+0x1a>
=======
		vTaskSuspendAll();
 800bf52:	f000 fda5 	bl	800caa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf56:	f001 fcc9 	bl	800d8ec <vPortEnterCritical>
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf60:	b25b      	sxtb	r3, r3
 800bf62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf66:	d103      	bne.n	800bf70 <xQueueReceive+0x11c>
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf76:	b25b      	sxtb	r3, r3
 800bf78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf7c:	d103      	bne.n	800bf86 <xQueueReceive+0x132>
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf86:	f001 fcdf 	bl	800d948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf8a:	1d3a      	adds	r2, r7, #4
 800bf8c:	f107 0310 	add.w	r3, r7, #16
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 f802 	bl	800cf9c <xTaskCheckForTimeOut>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d123      	bne.n	800bfe6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa0:	f000 fb0d 	bl	800c5be <prvIsQueueEmpty>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d017      	beq.n	800bfda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	3324      	adds	r3, #36	; 0x24
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 ff56 	bl	800ce64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfba:	f000 faae 	bl	800c51a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfbe:	f000 fd7d 	bl	800cabc <xTaskResumeAll>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d189      	bne.n	800bedc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bfc8:	4b0f      	ldr	r3, [pc, #60]	; (800c008 <xQueueReceive+0x1b4>)
 800bfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	e780      	b.n	800bedc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bfda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfdc:	f000 fa9d 	bl	800c51a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfe0:	f000 fd6c 	bl	800cabc <xTaskResumeAll>
 800bfe4:	e77a      	b.n	800bedc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bfe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe8:	f000 fa97 	bl	800c51a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfec:	f000 fd66 	bl	800cabc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff2:	f000 fae4 	bl	800c5be <prvIsQueueEmpty>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f43f af6f 	beq.w	800bedc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c000:	4618      	mov	r0, r3
 800c002:	3730      	adds	r7, #48	; 0x30
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	e000ed04 	.word	0xe000ed04

0800c00c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08e      	sub	sp, #56	; 0x38
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c016:	2300      	movs	r3, #0
 800c018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c01e:	2300      	movs	r3, #0
 800c020:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	2b00      	cmp	r3, #0
 800c026:	d109      	bne.n	800c03c <xQueueSemaphoreTake+0x30>
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	623b      	str	r3, [r7, #32]
 800c03a:	e7fe      	b.n	800c03a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <xQueueSemaphoreTake+0x4c>
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	61fb      	str	r3, [r7, #28]
 800c056:	e7fe      	b.n	800c056 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c058:	f001 f8e4 	bl	800d224 <xTaskGetSchedulerState>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <xQueueSemaphoreTake+0x5c>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <xQueueSemaphoreTake+0x60>
 800c068:	2301      	movs	r3, #1
 800c06a:	e000      	b.n	800c06e <xQueueSemaphoreTake+0x62>
 800c06c:	2300      	movs	r3, #0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <xQueueSemaphoreTake+0x7a>
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	61bb      	str	r3, [r7, #24]
 800c084:	e7fe      	b.n	800c084 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c086:	f001 fc31 	bl	800d8ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c092:	2b00      	cmp	r3, #0
 800c094:	d024      	beq.n	800c0e0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	1e5a      	subs	r2, r3, #1
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d104      	bne.n	800c0b0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c0a6:	f001 fa83 	bl	800d5b0 <pvTaskIncrementMutexHeldCount>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00f      	beq.n	800c0d8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	3310      	adds	r3, #16
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f000 fef5 	bl	800ceac <xTaskRemoveFromEventList>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0c8:	4b53      	ldr	r3, [pc, #332]	; (800c218 <xQueueSemaphoreTake+0x20c>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c0d8:	f001 fc36 	bl	800d948 <vPortExitCritical>
				return pdPASS;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e096      	b.n	800c20e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d110      	bne.n	800c108 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <xQueueSemaphoreTake+0xf4>
 800c0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	617b      	str	r3, [r7, #20]
 800c0fe:	e7fe      	b.n	800c0fe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c100:	f001 fc22 	bl	800d948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c104:	2300      	movs	r3, #0
 800c106:	e082      	b.n	800c20e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c10e:	f107 030c 	add.w	r3, r7, #12
 800c112:	4618      	mov	r0, r3
 800c114:	f000 ff2c 	bl	800cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c118:	2301      	movs	r3, #1
 800c11a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c11c:	f001 fc14 	bl	800d948 <vPortExitCritical>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	00030d40 	.word	0x00030d40

<<<<<<< HEAD
080070bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2210      	movs	r2, #16
 80070cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <USB_FlushRxFifo+0x40>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d901      	bls.n	80070e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d0f0      	beq.n	80070ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	00030d40 	.word	0x00030d40

08007100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007120:	4313      	orrs	r3, r2
 8007122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
=======
		vTaskSuspendAll();
 800c120:	f000 fcbe 	bl	800caa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c124:	f001 fbe2 	bl	800d8ec <vPortEnterCritical>
 800c128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c12e:	b25b      	sxtb	r3, r3
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c134:	d103      	bne.n	800c13e <xQueueSemaphoreTake+0x132>
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c144:	b25b      	sxtb	r3, r3
 800c146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c14a:	d103      	bne.n	800c154 <xQueueSemaphoreTake+0x148>
 800c14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14e:	2200      	movs	r2, #0
 800c150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c154:	f001 fbf8 	bl	800d948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c158:	463a      	mov	r2, r7
 800c15a:	f107 030c 	add.w	r3, r7, #12
 800c15e:	4611      	mov	r1, r2
 800c160:	4618      	mov	r0, r3
 800c162:	f000 ff1b 	bl	800cf9c <xTaskCheckForTimeOut>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d132      	bne.n	800c1d2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c16c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c16e:	f000 fa26 	bl	800c5be <prvIsQueueEmpty>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d026      	beq.n	800c1c6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c180:	f001 fbb4 	bl	800d8ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	4618      	mov	r0, r3
 800c18a:	f001 f869 	bl	800d260 <xTaskPriorityInherit>
 800c18e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c190:	f001 fbda 	bl	800d948 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	3324      	adds	r3, #36	; 0x24
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fe61 	bl	800ce64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1a4:	f000 f9b9 	bl	800c51a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1a8:	f000 fc88 	bl	800cabc <xTaskResumeAll>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f47f af69 	bne.w	800c086 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c1b4:	4b18      	ldr	r3, [pc, #96]	; (800c218 <xQueueSemaphoreTake+0x20c>)
 800c1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ba:	601a      	str	r2, [r3, #0]
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	e75f      	b.n	800c086 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c1c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1c8:	f000 f9a7 	bl	800c51a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1cc:	f000 fc76 	bl	800cabc <xTaskResumeAll>
 800c1d0:	e759      	b.n	800c086 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c1d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1d4:	f000 f9a1 	bl	800c51a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1d8:	f000 fc70 	bl	800cabc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1de:	f000 f9ee 	bl	800c5be <prvIsQueueEmpty>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f43f af4e 	beq.w	800c086 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00d      	beq.n	800c20c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c1f0:	f001 fb7c 	bl	800d8ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c1f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1f6:	f000 f8e8 	bl	800c3ca <prvGetDisinheritPriorityAfterTimeout>
 800c1fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c202:	4618      	mov	r0, r3
 800c204:	f001 f936 	bl	800d474 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c208:	f001 fb9e 	bl	800d948 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c20c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3738      	adds	r7, #56	; 0x38
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <xQueueReceiveFromISR>:
	}
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007132:	b480      	push	{r7}
 8007134:	b087      	sub	sp, #28
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 0306 	and.w	r3, r3, #6
 800714a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]
 8007156:	e00a      	b.n	800716e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USB_GetDevSpeed+0x32>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b06      	cmp	r3, #6
 8007162:	d102      	bne.n	800716a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007164:	2302      	movs	r3, #2
 8007166:	75fb      	strb	r3, [r7, #23]
 8007168:	e001      	b.n	800716e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800716a:	230f      	movs	r3, #15
 800716c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d13a      	bne.n	800720e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	2101      	movs	r1, #1
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d155      	bne.n	800727c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	059b      	lsls	r3, r3, #22
 80071f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071f4:	4313      	orrs	r3, r2
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e036      	b.n	800727c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007214:	69da      	ldr	r2, [r3, #28]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	2101      	movs	r1, #1
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	68f9      	ldr	r1, [r7, #12]
 8007228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800722c:	4313      	orrs	r3, r2
 800722e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d11a      	bne.n	800727c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	78db      	ldrb	r3, [r3, #3]
 8007260:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007262:	430b      	orrs	r3, r1
 8007264:	4313      	orrs	r3, r2
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800727a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d135      	bne.n	8007314 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f303 	lsl.w	r3, r1, r3
 80072be:	b29b      	uxth	r3, r3
 80072c0:	43db      	mvns	r3, r3
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c8:	4013      	ands	r3, r2
 80072ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	2101      	movs	r1, #1
 80072de:	fa01 f303 	lsl.w	r3, r1, r3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	43db      	mvns	r3, r3
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ec:	4013      	ands	r3, r2
 80072ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	0159      	lsls	r1, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	440b      	add	r3, r1
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	4619      	mov	r1, r3
 800730c:	4b1f      	ldr	r3, [pc, #124]	; (800738c <USB_DeactivateEndpoint+0x100>)
 800730e:	4013      	ands	r3, r2
 8007310:	600b      	str	r3, [r1, #0]
 8007312:	e034      	b.n	800737e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f303 	lsl.w	r3, r1, r3
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	43db      	mvns	r3, r3
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007334:	4013      	ands	r3, r2
 8007336:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	43db      	mvns	r3, r3
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007358:	4013      	ands	r3, r2
 800735a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	0159      	lsls	r1, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	440b      	add	r3, r1
 8007372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007376:	4619      	mov	r1, r3
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <USB_DeactivateEndpoint+0x104>)
 800737a:	4013      	ands	r3, r2
 800737c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }
=======
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08e      	sub	sp, #56	; 0x38
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d109      	bne.n	800c246 <xQueueReceiveFromISR+0x2a>
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	623b      	str	r3, [r7, #32]
 800c244:	e7fe      	b.n	800c244 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d103      	bne.n	800c254 <xQueueReceiveFromISR+0x38>
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c250:	2b00      	cmp	r3, #0
 800c252:	d101      	bne.n	800c258 <xQueueReceiveFromISR+0x3c>
 800c254:	2301      	movs	r3, #1
 800c256:	e000      	b.n	800c25a <xQueueReceiveFromISR+0x3e>
 800c258:	2300      	movs	r3, #0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d109      	bne.n	800c272 <xQueueReceiveFromISR+0x56>
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	61fb      	str	r3, [r7, #28]
 800c270:	e7fe      	b.n	800c270 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c272:	f001 fc17 	bl	800daa4 <vPortValidateInterruptPriority>
	__asm volatile
 800c276:	f3ef 8211 	mrs	r2, BASEPRI
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	61ba      	str	r2, [r7, #24]
 800c28c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c28e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c290:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d02f      	beq.n	800c2fe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c2a8:	68b9      	ldr	r1, [r7, #8]
 800c2aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2ac:	f000 f90f 	bl	800c4ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	1e5a      	subs	r2, r3, #1
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c2b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c0:	d112      	bne.n	800c2e8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d016      	beq.n	800c2f8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	3310      	adds	r3, #16
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 fdec 	bl	800ceac <xTaskRemoveFromEventList>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00e      	beq.n	800c2f8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00b      	beq.n	800c2f8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	601a      	str	r2, [r3, #0]
 800c2e6:	e007      	b.n	800c2f8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	b25a      	sxtb	r2, r3
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c2fc:	e001      	b.n	800c302 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c2fe:	2300      	movs	r3, #0
 800c300:	637b      	str	r3, [r7, #52]	; 0x34
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3738      	adds	r7, #56	; 0x38
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d109      	bne.n	800c338 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	60bb      	str	r3, [r7, #8]
 800c336:	e7fe      	b.n	800c336 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800c338:	f001 fad8 	bl	800d8ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c340:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c342:	f001 fb01 	bl	800d948 <vPortExitCritical>

	return uxReturn;
 800c346:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d109      	bne.n	800c372 <uxQueueMessagesWaitingFromISR+0x22>
 800c35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	60bb      	str	r3, [r7, #8]
 800c370:	e7fe      	b.n	800c370 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c376:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800c378:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d109      	bne.n	800c3ac <vQueueDelete+0x26>
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	60bb      	str	r3, [r7, #8]
 800c3aa:	e7fe      	b.n	800c3aa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f000 f935 	bl	800c61c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f001 fc71 	bl	800dca4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c3c2:	bf00      	nop
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	ec337800 	.word	0xec337800
 8007390:	eff37800 	.word	0xeff37800

<<<<<<< HEAD
08007394 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 815c 	bne.w	800766e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d132      	bne.n	8007424 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007400:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741c:	0cdb      	lsrs	r3, r3, #19
 800741e:	04db      	lsls	r3, r3, #19
 8007420:	6113      	str	r3, [r2, #16]
 8007422:	e074      	b.n	800750e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743e:	0cdb      	lsrs	r3, r3, #19
 8007440:	04db      	lsls	r3, r3, #19
 8007442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007462:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6959      	ldr	r1, [r3, #20]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	440b      	add	r3, r1
 8007480:	1e59      	subs	r1, r3, #1
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	fbb1 f3f3 	udiv	r3, r1, r3
 800748a:	04d9      	lsls	r1, r3, #19
 800748c:	4b9d      	ldr	r3, [pc, #628]	; (8007704 <USB_EPStartXfer+0x370>)
 800748e:	400b      	ands	r3, r1
 8007490:	69b9      	ldr	r1, [r7, #24]
 8007492:	0148      	lsls	r0, r1, #5
 8007494:	69f9      	ldr	r1, [r7, #28]
 8007496:	4401      	add	r1, r0
 8007498:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800749c:	4313      	orrs	r3, r2
 800749e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b6:	69b9      	ldr	r1, [r7, #24]
 80074b8:	0148      	lsls	r0, r1, #5
 80074ba:	69f9      	ldr	r1, [r7, #28]
 80074bc:	4401      	add	r1, r0
 80074be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074c2:	4313      	orrs	r3, r2
 80074c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	78db      	ldrb	r3, [r3, #3]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d11f      	bne.n	800750e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800750c:	6113      	str	r3, [r2, #16]
      }
    }
=======
	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d006      	beq.n	800c3e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f1c3 0307 	rsb	r3, r3, #7
 800c3e4:	60fb      	str	r3, [r7, #12]
 800c3e6:	e001      	b.n	800c3ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
	}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3714      	adds	r7, #20
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <prvCopyDataToQueue>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    if (dma == 1U)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d14b      	bne.n	80075ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	461a      	mov	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	78db      	ldrb	r3, [r3, #3]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d128      	bne.n	800758a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d110      	bne.n	800756a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e00f      	b.n	800758a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007588:	6013      	str	r3, [r2, #0]
        }
      }

<<<<<<< HEAD
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e12f      	b.n	800780c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ca:	6013      	str	r3, [r2, #0]
=======
static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b086      	sub	sp, #24
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c406:	2300      	movs	r3, #0
 800c408:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

      if (ep->type != EP_TYPE_ISOC)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	78db      	ldrb	r3, [r3, #3]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d015      	beq.n	8007600 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8117 	beq.w	800780c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	2101      	movs	r1, #1
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	69f9      	ldr	r1, [r7, #28]
 80075f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fa:	4313      	orrs	r3, r2
 80075fc:	634b      	str	r3, [r1, #52]	; 0x34
 80075fe:	e105      	b.n	800780c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760c:	2b00      	cmp	r3, #0
 800760e:	d110      	bne.n	8007632 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	440a      	add	r2, r1
 8007626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	e00f      	b.n	8007652 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	0151      	lsls	r1, r2, #5
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	440a      	add	r2, r1
 8007648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007650:	6013      	str	r3, [r2, #0]
        }

<<<<<<< HEAD
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	68d9      	ldr	r1, [r3, #12]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	b298      	uxth	r0, r3
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4603      	mov	r3, r0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fa2b 	bl	8007ac2 <USB_WritePacket>
 800766c:	e0ce      	b.n	800780c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	0cdb      	lsrs	r3, r3, #19
 800768a:	04db      	lsls	r3, r3, #19
 800768c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d126      	bne.n	8007708 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d0:	69b9      	ldr	r1, [r7, #24]
 80076d2:	0148      	lsls	r0, r1, #5
 80076d4:	69f9      	ldr	r1, [r7, #28]
 80076d6:	4401      	add	r1, r0
 80076d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076dc:	4313      	orrs	r3, r2
 80076de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076fe:	6113      	str	r3, [r2, #16]
 8007700:	e036      	b.n	8007770 <USB_EPStartXfer+0x3dc>
 8007702:	bf00      	nop
 8007704:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	695a      	ldr	r2, [r3, #20]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	4413      	add	r3, r2
 8007712:	1e5a      	subs	r2, r3, #1
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	8afb      	ldrh	r3, [r7, #22]
 800772e:	04d9      	lsls	r1, r3, #19
 8007730:	4b39      	ldr	r3, [pc, #228]	; (8007818 <USB_EPStartXfer+0x484>)
 8007732:	400b      	ands	r3, r1
 8007734:	69b9      	ldr	r1, [r7, #24]
 8007736:	0148      	lsls	r0, r1, #5
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	4401      	add	r1, r0
 800773c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007740:	4313      	orrs	r3, r2
 8007742:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	8af9      	ldrh	r1, [r7, #22]
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007760:	69b9      	ldr	r1, [r7, #24]
 8007762:	0148      	lsls	r0, r1, #5
 8007764:	69f9      	ldr	r1, [r7, #28]
 8007766:	4401      	add	r1, r0
 8007768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800776c:	4313      	orrs	r3, r2
 800776e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10d      	bne.n	8007792 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	68d9      	ldr	r1, [r3, #12]
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	460a      	mov	r2, r1
 8007790:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	78db      	ldrb	r3, [r3, #3]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d128      	bne.n	80077ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d110      	bne.n	80077cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e00f      	b.n	80077ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800780a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	1ff80000 	.word	0x1ff80000

0800781c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b01      	cmp	r3, #1
 800783a:	f040 80cd 	bne.w	80079d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d132      	bne.n	80078ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007860:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007864:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007868:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a4:	0cdb      	lsrs	r3, r3, #19
 80078a6:	04db      	lsls	r3, r3, #19
 80078a8:	6113      	str	r3, [r2, #16]
 80078aa:	e04e      	b.n	800794a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	0cdb      	lsrs	r3, r3, #19
 80078c8:	04db      	lsls	r3, r3, #19
 80078ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d903      	bls.n	8007904 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800793a:	6939      	ldr	r1, [r7, #16]
 800793c:	0148      	lsls	r0, r1, #5
 800793e:	6979      	ldr	r1, [r7, #20]
 8007940:	4401      	add	r1, r0
 8007942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007946:	4313      	orrs	r3, r2
 8007948:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d11e      	bne.n	800798e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	461a      	mov	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	440a      	add	r2, r1
 8007982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	e092      	b.n	8007ab4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d07e      	beq.n	8007ab4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	2101      	movs	r1, #1
 80079c8:	fa01 f303 	lsl.w	r3, r1, r3
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079d2:	4313      	orrs	r3, r2
 80079d4:	634b      	str	r3, [r1, #52]	; 0x34
 80079d6:	e06d      	b.n	8007ab4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f2:	0cdb      	lsrs	r3, r3, #19
 80079f4:	04db      	lsls	r3, r3, #19
 80079f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a1a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a62:	6939      	ldr	r1, [r7, #16]
 8007a64:	0148      	lsls	r0, r1, #5
 8007a66:	6979      	ldr	r1, [r7, #20]
 8007a68:	4401      	add	r1, r0
 8007a6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d10d      	bne.n	8007a94 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	68d9      	ldr	r1, [r3, #12]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a90:	460a      	mov	r2, r1
 8007a92:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
=======
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10d      	bne.n	800c434 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d14d      	bne.n	800c4bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	4618      	mov	r0, r3
 800c426:	f000 ffa1 	bl	800d36c <xTaskPriorityDisinherit>
 800c42a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	605a      	str	r2, [r3, #4]
 800c432:	e043      	b.n	800c4bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d119      	bne.n	800c46e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6898      	ldr	r0, [r3, #8]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c442:	461a      	mov	r2, r3
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	f00e fa68 	bl	801a91a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	689a      	ldr	r2, [r3, #8]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	441a      	add	r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	689a      	ldr	r2, [r3, #8]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	429a      	cmp	r2, r3
 800c462:	d32b      	bcc.n	800c4bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	609a      	str	r2, [r3, #8]
 800c46c:	e026      	b.n	800c4bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	68d8      	ldr	r0, [r3, #12]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c476:	461a      	mov	r2, r3
 800c478:	68b9      	ldr	r1, [r7, #8]
 800c47a:	f00e fa4e 	bl	801a91a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c486:	425b      	negs	r3, r3
 800c488:	441a      	add	r2, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	68da      	ldr	r2, [r3, #12]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d207      	bcs.n	800c4aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a2:	425b      	negs	r3, r3
 800c4a4:	441a      	add	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d105      	bne.n	800c4bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c4c4:	697b      	ldr	r3, [r7, #20]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d018      	beq.n	800c512 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68da      	ldr	r2, [r3, #12]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e8:	441a      	add	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	68da      	ldr	r2, [r3, #12]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d303      	bcc.n	800c502 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68d9      	ldr	r1, [r3, #12]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50a:	461a      	mov	r2, r3
 800c50c:	6838      	ldr	r0, [r7, #0]
 800c50e:	f00e fa04 	bl	801a91a <memcpy>
	}
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b084      	sub	sp, #16
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c522:	f001 f9e3 	bl	800d8ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c52c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c52e:	e011      	b.n	800c554 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c534:	2b00      	cmp	r3, #0
 800c536:	d012      	beq.n	800c55e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3324      	adds	r3, #36	; 0x24
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 fcb5 	bl	800ceac <xTaskRemoveFromEventList>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d001      	beq.n	800c54c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c548:	f000 fd88 	bl	800d05c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
 800c54e:	3b01      	subs	r3, #1
 800c550:	b2db      	uxtb	r3, r3
 800c552:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	dce9      	bgt.n	800c530 <prvUnlockQueue+0x16>
 800c55c:	e000      	b.n	800c560 <prvUnlockQueue+0x46>
					break;
 800c55e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	22ff      	movs	r2, #255	; 0xff
 800c564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c568:	f001 f9ee 	bl	800d948 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c56c:	f001 f9be 	bl	800d8ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c576:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c578:	e011      	b.n	800c59e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d012      	beq.n	800c5a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	3310      	adds	r3, #16
 800c586:	4618      	mov	r0, r3
 800c588:	f000 fc90 	bl	800ceac <xTaskRemoveFromEventList>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c592:	f000 fd63 	bl	800d05c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c596:	7bbb      	ldrb	r3, [r7, #14]
 800c598:	3b01      	subs	r3, #1
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c59e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dce9      	bgt.n	800c57a <prvUnlockQueue+0x60>
 800c5a6:	e000      	b.n	800c5aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c5a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	22ff      	movs	r2, #255	; 0xff
 800c5ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c5b2:	f001 f9c9 	bl	800d948 <vPortExitCritical>
}
 800c5b6:	bf00      	nop
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08007ac2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
<<<<<<< HEAD
 8007ac2:	b480      	push	{r7}
 8007ac4:	b089      	sub	sp, #36	; 0x24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	4611      	mov	r1, r2
 8007ace:	461a      	mov	r2, r3
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	71fb      	strb	r3, [r7, #7]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d11a      	bne.n	8007b1e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ae8:	88bb      	ldrh	r3, [r7, #4]
 8007aea:	3303      	adds	r3, #3
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007af0:	2300      	movs	r3, #0
 8007af2:	61bb      	str	r3, [r7, #24]
 8007af4:	e00f      	b.n	8007b16 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	031a      	lsls	r2, r3, #12
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b02:	461a      	mov	r2, r3
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d3eb      	bcc.n	8007af6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3724      	adds	r7, #36	; 0x24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
=======
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5c6:	f001 f991 	bl	800d8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d102      	bne.n	800c5d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	60fb      	str	r3, [r7, #12]
 800c5d6:	e001      	b.n	800c5dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c5dc:	f001 f9b4 	bl	800d948 <vPortExitCritical>

	return xReturn;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08007b2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
<<<<<<< HEAD
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	; 0x24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	3303      	adds	r3, #3
 8007b46:	089b      	lsrs	r3, r3, #2
 8007b48:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	e00b      	b.n	8007b68 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	3301      	adds	r3, #1
 8007b66:	61bb      	str	r3, [r7, #24]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d3ef      	bcc.n	8007b50 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007b70:	69fb      	ldr	r3, [r7, #28]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3724      	adds	r7, #36	; 0x24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d12c      	bne.n	8007bf4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	db12      	blt.n	8007bd2 <USB_EPSetStall+0x54>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00f      	beq.n	8007bd2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e02b      	b.n	8007c4c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	db12      	blt.n	8007c2c <USB_EPSetStall+0xae>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00f      	beq.n	8007c2c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	0151      	lsls	r1, r2, #5
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	440a      	add	r2, r1
 8007c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c2a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c4a:	6013      	str	r3, [r2, #0]
  }
=======
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5f2:	f001 f97b 	bl	800d8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d102      	bne.n	800c608 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c602:	2301      	movs	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]
 800c606:	e001      	b.n	800c60c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c608:	2300      	movs	r3, #0
 800c60a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c60c:	f001 f99c 	bl	800d948 <vPortExitCritical>

	return xReturn;
 800c610:	68fb      	ldr	r3, [r7, #12]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c624:	2300      	movs	r3, #0
 800c626:	60fb      	str	r3, [r7, #12]
 800c628:	e016      	b.n	800c658 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c62a:	4a10      	ldr	r2, [pc, #64]	; (800c66c <vQueueUnregisterQueue+0x50>)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	4413      	add	r3, r2
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	429a      	cmp	r2, r3
 800c638:	d10b      	bne.n	800c652 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c63a:	4a0c      	ldr	r2, [pc, #48]	; (800c66c <vQueueUnregisterQueue+0x50>)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2100      	movs	r1, #0
 800c640:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c644:	4a09      	ldr	r2, [pc, #36]	; (800c66c <vQueueUnregisterQueue+0x50>)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	4413      	add	r3, r2
 800c64c:	2200      	movs	r2, #0
 800c64e:	605a      	str	r2, [r3, #4]
				break;
 800c650:	e005      	b.n	800c65e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3301      	adds	r3, #1
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b07      	cmp	r3, #7
 800c65c:	d9e5      	bls.n	800c62a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c65e:	bf00      	nop
 800c660:	3714      	adds	r7, #20
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	20007600 	.word	0x20007600

0800c670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08e      	sub	sp, #56	; 0x38
 800c674:	af04      	add	r7, sp, #16
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
 800c67c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c680:	2b00      	cmp	r3, #0
 800c682:	d109      	bne.n	800c698 <xTaskCreateStatic+0x28>
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	623b      	str	r3, [r7, #32]
 800c696:	e7fe      	b.n	800c696 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d109      	bne.n	800c6b2 <xTaskCreateStatic+0x42>
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	61fb      	str	r3, [r7, #28]
 800c6b0:	e7fe      	b.n	800c6b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c6b2:	2354      	movs	r3, #84	; 0x54
 800c6b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	2b54      	cmp	r3, #84	; 0x54
 800c6ba:	d009      	beq.n	800c6d0 <xTaskCreateStatic+0x60>
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	61bb      	str	r3, [r7, #24]
 800c6ce:	e7fe      	b.n	800c6ce <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

<<<<<<< HEAD
08007c5a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d128      	bne.n	8007cc8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	78db      	ldrb	r3, [r3, #3]
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d003      	beq.n	8007ca6 <USB_EPClearStall+0x4c>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	78db      	ldrb	r3, [r3, #3]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d138      	bne.n	8007d18 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e027      	b.n	8007d18 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	78db      	ldrb	r3, [r3, #3]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d003      	beq.n	8007cf8 <USB_EPClearStall+0x9e>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	78db      	ldrb	r3, [r3, #3]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d10f      	bne.n	8007d18 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d16:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d48:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d60:	4313      	orrs	r3, r2
 8007d62:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d8c:	f023 0302 	bic.w	r3, r3, #2
 8007d90:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d92:	2003      	movs	r0, #3
 8007d94:	f7fa fada 	bl	800234c <HAL_Delay>

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007dc2:	2003      	movs	r0, #3
 8007dc4:	f7fa fac2 	bl	800234c <HAL_Delay>

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4013      	ands	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dea:	68fb      	ldr	r3, [r7, #12]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	0c1b      	lsrs	r3, r3, #16
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	b29b      	uxth	r3, r3
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ecc:	01db      	lsls	r3, r3, #7
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007eea:	68bb      	ldr	r3, [r7, #8]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0301 	and.w	r3, r3, #1
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
=======
		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01e      	beq.n	800c714 <xTaskCreateStatic+0xa4>
 800c6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d01b      	beq.n	800c714 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	9303      	str	r3, [sp, #12]
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f4:	9302      	str	r3, [sp, #8]
 800c6f6:	f107 0314 	add.w	r3, r7, #20
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	68b9      	ldr	r1, [r7, #8]
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f000 f850 	bl	800c7ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c70c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c70e:	f000 f8cb 	bl	800c8a8 <prvAddNewTaskToReadyList>
 800c712:	e001      	b.n	800c718 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800c714:	2300      	movs	r3, #0
 800c716:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c718:	697b      	ldr	r3, [r7, #20]
	}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3728      	adds	r7, #40	; 0x28
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c722:	b580      	push	{r7, lr}
 800c724:	b08c      	sub	sp, #48	; 0x30
 800c726:	af04      	add	r7, sp, #16
 800c728:	60f8      	str	r0, [r7, #12]
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	603b      	str	r3, [r7, #0]
 800c72e:	4613      	mov	r3, r2
 800c730:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c732:	88fb      	ldrh	r3, [r7, #6]
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4618      	mov	r0, r3
 800c738:	f001 f9f2 	bl	800db20 <pvPortMalloc>
 800c73c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00e      	beq.n	800c762 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c744:	2054      	movs	r0, #84	; 0x54
 800c746:	f001 f9eb 	bl	800db20 <pvPortMalloc>
 800c74a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d003      	beq.n	800c75a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	631a      	str	r2, [r3, #48]	; 0x30
 800c758:	e005      	b.n	800c766 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c75a:	6978      	ldr	r0, [r7, #20]
 800c75c:	f001 faa2 	bl	800dca4 <vPortFree>
 800c760:	e001      	b.n	800c766 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d017      	beq.n	800c79c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c774:	88fa      	ldrh	r2, [r7, #6]
 800c776:	2300      	movs	r3, #0
 800c778:	9303      	str	r3, [sp, #12]
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	9302      	str	r3, [sp, #8]
 800c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c780:	9301      	str	r3, [sp, #4]
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	68b9      	ldr	r1, [r7, #8]
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f000 f80e 	bl	800c7ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c790:	69f8      	ldr	r0, [r7, #28]
 800c792:	f000 f889 	bl	800c8a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c796:	2301      	movs	r3, #1
 800c798:	61bb      	str	r3, [r7, #24]
 800c79a:	e002      	b.n	800c7a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c79c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c7a2:	69bb      	ldr	r3, [r7, #24]
	}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3720      	adds	r7, #32
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	f023 0307 	bic.w	r3, r3, #7
 800c7d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	f003 0307 	and.w	r3, r3, #7
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d009      	beq.n	800c7f2 <prvInitialiseNewTask+0x46>
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	617b      	str	r3, [r7, #20]
 800c7f0:	e7fe      	b.n	800c7f0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	61fb      	str	r3, [r7, #28]
 800c7f6:	e012      	b.n	800c81e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	7819      	ldrb	r1, [r3, #0]
 800c800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	4413      	add	r3, r2
 800c806:	3334      	adds	r3, #52	; 0x34
 800c808:	460a      	mov	r2, r1
 800c80a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	4413      	add	r3, r2
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d006      	beq.n	800c826 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	3301      	adds	r3, #1
 800c81c:	61fb      	str	r3, [r7, #28]
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	2b0f      	cmp	r3, #15
 800c822:	d9e9      	bls.n	800c7f8 <prvInitialiseNewTask+0x4c>
 800c824:	e000      	b.n	800c828 <prvInitialiseNewTask+0x7c>
		{
			break;
 800c826:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	2b06      	cmp	r3, #6
 800c834:	d901      	bls.n	800c83a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c836:	2306      	movs	r3, #6
 800c838:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c83e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c844:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	2200      	movs	r2, #0
 800c84a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84e:	3304      	adds	r3, #4
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe fece 	bl	800b5f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	3318      	adds	r3, #24
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe fec9 	bl	800b5f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c864:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c868:	f1c3 0207 	rsb	r2, r3, #7
 800c86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c874:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	2200      	movs	r2, #0
 800c87a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	68f9      	ldr	r1, [r7, #12]
 800c888:	69b8      	ldr	r0, [r7, #24]
 800c88a:	f000 ff0b 	bl	800d6a4 <pxPortInitialiseStack>
 800c88e:	4602      	mov	r2, r0
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8a0:	bf00      	nop
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08007f14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 0306 	and.w	r3, r3, #6
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d109      	bne.n	8007f5c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f56:	f043 0303 	orr.w	r3, r3, #3
 8007f5a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	333c      	adds	r3, #60	; 0x3c
 8007f96:	3304      	adds	r3, #4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4a26      	ldr	r2, [pc, #152]	; (8008038 <USB_EP0_OutStart+0xb8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d90a      	bls.n	8007fba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb4:	d101      	bne.n	8007fba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e037      	b.n	800802a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe8:	f043 0318 	orr.w	r3, r3, #24
 8007fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ffc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008000:	6113      	str	r3, [r2, #16]
=======
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8b0:	f001 f81c 	bl	800d8ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8b4:	4b2a      	ldr	r3, [pc, #168]	; (800c960 <prvAddNewTaskToReadyList+0xb8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	4a29      	ldr	r2, [pc, #164]	; (800c960 <prvAddNewTaskToReadyList+0xb8>)
 800c8bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8be:	4b29      	ldr	r3, [pc, #164]	; (800c964 <prvAddNewTaskToReadyList+0xbc>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d109      	bne.n	800c8da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8c6:	4a27      	ldr	r2, [pc, #156]	; (800c964 <prvAddNewTaskToReadyList+0xbc>)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8cc:	4b24      	ldr	r3, [pc, #144]	; (800c960 <prvAddNewTaskToReadyList+0xb8>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d110      	bne.n	800c8f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c8d4:	f000 fbe6 	bl	800d0a4 <prvInitialiseTaskLists>
 800c8d8:	e00d      	b.n	800c8f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8da:	4b23      	ldr	r3, [pc, #140]	; (800c968 <prvAddNewTaskToReadyList+0xc0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d109      	bne.n	800c8f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8e2:	4b20      	ldr	r3, [pc, #128]	; (800c964 <prvAddNewTaskToReadyList+0xbc>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d802      	bhi.n	800c8f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8f0:	4a1c      	ldr	r2, [pc, #112]	; (800c964 <prvAddNewTaskToReadyList+0xbc>)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8f6:	4b1d      	ldr	r3, [pc, #116]	; (800c96c <prvAddNewTaskToReadyList+0xc4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	4a1b      	ldr	r2, [pc, #108]	; (800c96c <prvAddNewTaskToReadyList+0xc4>)
 800c8fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c904:	2201      	movs	r2, #1
 800c906:	409a      	lsls	r2, r3
 800c908:	4b19      	ldr	r3, [pc, #100]	; (800c970 <prvAddNewTaskToReadyList+0xc8>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	4a18      	ldr	r2, [pc, #96]	; (800c970 <prvAddNewTaskToReadyList+0xc8>)
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c916:	4613      	mov	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4a15      	ldr	r2, [pc, #84]	; (800c974 <prvAddNewTaskToReadyList+0xcc>)
 800c920:	441a      	add	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3304      	adds	r3, #4
 800c926:	4619      	mov	r1, r3
 800c928:	4610      	mov	r0, r2
 800c92a:	f7fe fe6f 	bl	800b60c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c92e:	f001 f80b 	bl	800d948 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c932:	4b0d      	ldr	r3, [pc, #52]	; (800c968 <prvAddNewTaskToReadyList+0xc0>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00e      	beq.n	800c958 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c93a:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <prvAddNewTaskToReadyList+0xbc>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c944:	429a      	cmp	r2, r3
 800c946:	d207      	bcs.n	800c958 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c948:	4b0b      	ldr	r3, [pc, #44]	; (800c978 <prvAddNewTaskToReadyList+0xd0>)
 800c94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c958:	bf00      	nop
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20000568 	.word	0x20000568
 800c964:	20000468 	.word	0x20000468
 800c968:	20000574 	.word	0x20000574
 800c96c:	20000584 	.word	0x20000584
 800c970:	20000570 	.word	0x20000570
 800c974:	2000046c 	.word	0x2000046c
 800c978:	e000ed04 	.word	0xe000ed04

0800c97c <vTaskDelay>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  if (dma == 1U)
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d10f      	bne.n	8008028 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008022:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008026:	6013      	str	r3, [r2, #0]
  }

<<<<<<< HEAD
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	4f54300a 	.word	0x4f54300a

0800803c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <USB_CoreReset+0x64>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e01b      	b.n	8008092 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	daf2      	bge.n	8008048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	f043 0201 	orr.w	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <USB_CoreReset+0x64>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d901      	bls.n	8008084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e006      	b.n	8008092 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b01      	cmp	r3, #1
 800808e:	d0f0      	beq.n	8008072 <USB_CoreReset+0x36>
=======
	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c984:	2300      	movs	r3, #0
 800c986:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d016      	beq.n	800c9bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c98e:	4b13      	ldr	r3, [pc, #76]	; (800c9dc <vTaskDelay+0x60>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d009      	beq.n	800c9aa <vTaskDelay+0x2e>
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	60bb      	str	r3, [r7, #8]
 800c9a8:	e7fe      	b.n	800c9a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c9aa:	f000 f879 	bl	800caa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fe11 	bl	800d5d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c9b6:	f000 f881 	bl	800cabc <xTaskResumeAll>
 800c9ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d107      	bne.n	800c9d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c9c2:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <vTaskDelay+0x64>)
 800c9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20000590 	.word	0x20000590
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <vTaskStartScheduler>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	00030d40 	.word	0x00030d40

080080a4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
<<<<<<< HEAD
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <HAL_ETH_RxCpltCallback+0x1c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fbab 	bl	800980c <osSemaphoreRelease>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000454 	.word	0x20000454

080080c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7c1b      	ldrb	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d115      	bne.n	8008108 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e0:	2202      	movs	r2, #2
 80080e2:	2181      	movs	r1, #129	; 0x81
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f003 fd50 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f4:	2202      	movs	r2, #2
 80080f6:	2101      	movs	r1, #1
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f003 fd46 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008106:	e012      	b.n	800812e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	2202      	movs	r2, #2
 800810c:	2181      	movs	r1, #129	; 0x81
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f003 fd3b 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	2202      	movs	r2, #2
 800811e:	2101      	movs	r1, #1
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f003 fd32 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800812e:	2308      	movs	r3, #8
 8008130:	2203      	movs	r2, #3
 8008132:	2182      	movs	r1, #130	; 0x82
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f003 fd28 	bl	800bb8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008140:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008144:	f003 fe98 	bl	800be78 <malloc>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
=======
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08a      	sub	sp, #40	; 0x28
 800c9e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9f2:	463a      	mov	r2, r7
 800c9f4:	1d39      	adds	r1, r7, #4
 800c9f6:	f107 0308 	add.w	r3, r7, #8
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7f4 f8ee 	bl	8000bdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	9202      	str	r2, [sp, #8]
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	460a      	mov	r2, r1
 800ca12:	491d      	ldr	r1, [pc, #116]	; (800ca88 <vTaskStartScheduler+0xa4>)
 800ca14:	481d      	ldr	r0, [pc, #116]	; (800ca8c <vTaskStartScheduler+0xa8>)
 800ca16:	f7ff fe2b 	bl	800c670 <xTaskCreateStatic>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	4b1c      	ldr	r3, [pc, #112]	; (800ca90 <vTaskStartScheduler+0xac>)
 800ca1e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca20:	4b1b      	ldr	r3, [pc, #108]	; (800ca90 <vTaskStartScheduler+0xac>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	e001      	b.n	800ca32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d115      	bne.n	800ca64 <vTaskStartScheduler+0x80>
 800ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca4a:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <vTaskStartScheduler+0xb0>)
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca52:	4b11      	ldr	r3, [pc, #68]	; (800ca98 <vTaskStartScheduler+0xb4>)
 800ca54:	2201      	movs	r2, #1
 800ca56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ca58:	4b10      	ldr	r3, [pc, #64]	; (800ca9c <vTaskStartScheduler+0xb8>)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca5e:	f000 fea7 	bl	800d7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca62:	e00d      	b.n	800ca80 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca6a:	d109      	bne.n	800ca80 <vTaskStartScheduler+0x9c>
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	e7fe      	b.n	800ca7e <vTaskStartScheduler+0x9a>
}
 800ca80:	bf00      	nop
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	0801b8b8 	.word	0x0801b8b8
 800ca8c:	0800d075 	.word	0x0800d075
 800ca90:	2000058c 	.word	0x2000058c
 800ca94:	20000588 	.word	0x20000588
 800ca98:	20000574 	.word	0x20000574
 800ca9c:	2000056c 	.word	0x2000056c

0800caa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800caa0:	b480      	push	{r7}
 800caa2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800caa4:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <vTaskSuspendAll+0x18>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3301      	adds	r3, #1
 800caaa:	4a03      	ldr	r2, [pc, #12]	; (800cab8 <vTaskSuspendAll+0x18>)
 800caac:	6013      	str	r3, [r2, #0]
}
 800caae:	bf00      	nop
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	20000590 	.word	0x20000590

0800cabc <xTaskResumeAll>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  if(pdev->pClassData == NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
 8008160:	e026      	b.n	80081b0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008168:	60bb      	str	r3, [r7, #8]

<<<<<<< HEAD
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	7c1b      	ldrb	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008196:	2101      	movs	r1, #1
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f003 fde7 	bl	800bd6c <USBD_LL_PrepareReceive>
 800819e:	e007      	b.n	80081b0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081a6:	2340      	movs	r3, #64	; 0x40
 80081a8:	2101      	movs	r1, #1
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f003 fdde 	bl	800bd6c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80081ca:	2181      	movs	r1, #129	; 0x81
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f003 fd02 	bl	800bbd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80081d8:	2101      	movs	r1, #1
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f003 fcfb 	bl	800bbd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80081e8:	2182      	movs	r1, #130	; 0x82
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f003 fcf3 	bl	800bbd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008210:	4618      	mov	r0, r3
 8008212:	f003 fe39 	bl	800be88 <free>
    pdev->pClassData = NULL;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
=======
BaseType_t xTaskResumeAll( void )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cac6:	2300      	movs	r3, #0
 800cac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800caca:	4b41      	ldr	r3, [pc, #260]	; (800cbd0 <xTaskResumeAll+0x114>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d109      	bne.n	800cae6 <xTaskResumeAll+0x2a>
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	603b      	str	r3, [r7, #0]
 800cae4:	e7fe      	b.n	800cae4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cae6:	f000 ff01 	bl	800d8ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800caea:	4b39      	ldr	r3, [pc, #228]	; (800cbd0 <xTaskResumeAll+0x114>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3b01      	subs	r3, #1
 800caf0:	4a37      	ldr	r2, [pc, #220]	; (800cbd0 <xTaskResumeAll+0x114>)
 800caf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caf4:	4b36      	ldr	r3, [pc, #216]	; (800cbd0 <xTaskResumeAll+0x114>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d161      	bne.n	800cbc0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cafc:	4b35      	ldr	r3, [pc, #212]	; (800cbd4 <xTaskResumeAll+0x118>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d05d      	beq.n	800cbc0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb04:	e02e      	b.n	800cb64 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800cb06:	4b34      	ldr	r3, [pc, #208]	; (800cbd8 <xTaskResumeAll+0x11c>)
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3318      	adds	r3, #24
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fdd7 	bl	800b6c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fe fdd2 	bl	800b6c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb26:	2201      	movs	r2, #1
 800cb28:	409a      	lsls	r2, r3
 800cb2a:	4b2c      	ldr	r3, [pc, #176]	; (800cbdc <xTaskResumeAll+0x120>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	4a2a      	ldr	r2, [pc, #168]	; (800cbdc <xTaskResumeAll+0x120>)
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb38:	4613      	mov	r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4413      	add	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4a27      	ldr	r2, [pc, #156]	; (800cbe0 <xTaskResumeAll+0x124>)
 800cb42:	441a      	add	r2, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3304      	adds	r3, #4
 800cb48:	4619      	mov	r1, r3
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	f7fe fd5e 	bl	800b60c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb54:	4b23      	ldr	r3, [pc, #140]	; (800cbe4 <xTaskResumeAll+0x128>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d302      	bcc.n	800cb64 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800cb5e:	4b22      	ldr	r3, [pc, #136]	; (800cbe8 <xTaskResumeAll+0x12c>)
 800cb60:	2201      	movs	r2, #1
 800cb62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb64:	4b1c      	ldr	r3, [pc, #112]	; (800cbd8 <xTaskResumeAll+0x11c>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1cc      	bne.n	800cb06 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb72:	f000 fb31 	bl	800d1d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb76:	4b1d      	ldr	r3, [pc, #116]	; (800cbec <xTaskResumeAll+0x130>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d010      	beq.n	800cba4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb82:	f000 f859 	bl	800cc38 <xTaskIncrementTick>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cb8c:	4b16      	ldr	r3, [pc, #88]	; (800cbe8 <xTaskResumeAll+0x12c>)
 800cb8e:	2201      	movs	r2, #1
 800cb90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1f1      	bne.n	800cb82 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cb9e:	4b13      	ldr	r3, [pc, #76]	; (800cbec <xTaskResumeAll+0x130>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cba4:	4b10      	ldr	r3, [pc, #64]	; (800cbe8 <xTaskResumeAll+0x12c>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d009      	beq.n	800cbc0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbac:	2301      	movs	r3, #1
 800cbae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbb0:	4b0f      	ldr	r3, [pc, #60]	; (800cbf0 <xTaskResumeAll+0x134>)
 800cbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbc0:	f000 fec2 	bl	800d948 <vPortExitCritical>

	return xAlreadyYielded;
 800cbc4:	68bb      	ldr	r3, [r7, #8]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20000590 	.word	0x20000590
 800cbd4:	20000568 	.word	0x20000568
 800cbd8:	20000528 	.word	0x20000528
 800cbdc:	20000570 	.word	0x20000570
 800cbe0:	2000046c 	.word	0x2000046c
 800cbe4:	20000468 	.word	0x20000468
 800cbe8:	2000057c 	.word	0x2000057c
 800cbec:	20000578 	.word	0x20000578
 800cbf0:	e000ed04 	.word	0xe000ed04

0800cbf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08008228 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008238:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824e:	2b00      	cmp	r3, #0
 8008250:	d039      	beq.n	80082c6 <USBD_CDC_Setup+0x9e>
 8008252:	2b20      	cmp	r3, #32
 8008254:	d17c      	bne.n	8008350 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	88db      	ldrh	r3, [r3, #6]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d029      	beq.n	80082b2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b25b      	sxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	da11      	bge.n	800828c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008274:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	88d2      	ldrh	r2, [r2, #6]
 800827a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800827c:	6939      	ldr	r1, [r7, #16]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88db      	ldrh	r3, [r3, #6]
 8008282:	461a      	mov	r2, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f99b 	bl	80095c0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800828a:	e068      	b.n	800835e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	785a      	ldrb	r2, [r3, #1]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	b2da      	uxtb	r2, r3
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082a2:	6939      	ldr	r1, [r7, #16]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	88db      	ldrh	r3, [r3, #6]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 f9b6 	bl	800961c <USBD_CtlPrepareRx>
    break;
 80082b0:	e055      	b.n	800835e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	7850      	ldrb	r0, [r2, #1]
 80082be:	2200      	movs	r2, #0
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	4798      	blx	r3
    break;
 80082c4:	e04b      	b.n	800835e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	2b0a      	cmp	r3, #10
 80082cc:	d017      	beq.n	80082fe <USBD_CDC_Setup+0xd6>
 80082ce:	2b0b      	cmp	r3, #11
 80082d0:	d029      	beq.n	8008326 <USBD_CDC_Setup+0xfe>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d133      	bne.n	800833e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d107      	bne.n	80082f0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80082e0:	f107 030c 	add.w	r3, r7, #12
 80082e4:	2202      	movs	r2, #2
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f969 	bl	80095c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80082ee:	e02e      	b.n	800834e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 f8f9 	bl	80094ea <USBD_CtlError>
			  ret = USBD_FAIL;
 80082f8:	2302      	movs	r3, #2
 80082fa:	75fb      	strb	r3, [r7, #23]
      break;
 80082fc:	e027      	b.n	800834e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008304:	2b03      	cmp	r3, #3
 8008306:	d107      	bne.n	8008318 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008308:	f107 030f 	add.w	r3, r7, #15
 800830c:	2201      	movs	r2, #1
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 f955 	bl	80095c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008316:	e01a      	b.n	800834e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 f8e5 	bl	80094ea <USBD_CtlError>
			  ret = USBD_FAIL;
 8008320:	2302      	movs	r3, #2
 8008322:	75fb      	strb	r3, [r7, #23]
      break;
 8008324:	e013      	b.n	800834e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800832c:	2b03      	cmp	r3, #3
 800832e:	d00d      	beq.n	800834c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f8d9 	bl	80094ea <USBD_CtlError>
			  ret = USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800833c:	e006      	b.n	800834c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f8d2 	bl	80094ea <USBD_CtlError>
      ret = USBD_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	75fb      	strb	r3, [r7, #23]
      break;
 800834a:	e000      	b.n	800834e <USBD_CDC_Setup+0x126>
      break;
 800834c:	bf00      	nop
    }
    break;
 800834e:	e006      	b.n	800835e <USBD_CDC_Setup+0x136>
=======
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbfa:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <xTaskGetTickCount+0x1c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc00:	687b      	ldr	r3, [r7, #4]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	2000056c 	.word	0x2000056c

0800cc14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc1a:	f000 ff43 	bl	800daa4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cc1e:	2300      	movs	r3, #0
 800cc20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cc22:	4b04      	ldr	r3, [pc, #16]	; (800cc34 <xTaskGetTickCountFromISR+0x20>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc28:	683b      	ldr	r3, [r7, #0]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	2000056c 	.word	0x2000056c

0800cc38 <xTaskIncrementTick>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  default:
    USBD_CtlError (pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f8c9 	bl	80094ea <USBD_CtlError>
    ret = USBD_FAIL;
 8008358:	2302      	movs	r3, #2
 800835a:	75fb      	strb	r3, [r7, #23]
    break;
 800835c:	bf00      	nop
  }

  return ret;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800837a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008382:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800838a:	2b00      	cmp	r3, #0
 800838c:	d03a      	beq.n	8008404 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	331c      	adds	r3, #28
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d029      	beq.n	80083f8 <USBD_CDC_DataIn+0x90>
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	331c      	adds	r3, #28
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	78f9      	ldrb	r1, [r7, #3]
 80083b8:	68b8      	ldr	r0, [r7, #8]
 80083ba:	460b      	mov	r3, r1
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	1a5b      	subs	r3, r3, r1
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4403      	add	r3, r0
 80083c4:	3344      	adds	r3, #68	; 0x44
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80083cc:	fb03 f301 	mul.w	r3, r3, r1
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d110      	bne.n	80083f8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	331c      	adds	r3, #28
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80083ea:	78f9      	ldrb	r1, [r7, #3]
 80083ec:	2300      	movs	r3, #0
 80083ee:	2200      	movs	r2, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f003 fc98 	bl	800bd26 <USBD_LL_Transmit>
 80083f6:	e003      	b.n	8008400 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e000      	b.n	8008406 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008404:	2302      	movs	r3, #2
  }
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008420:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f003 fcc3 	bl	800bdb2 <USBD_LL_GetRxDataSize>
 800842c:	4602      	mov	r2, r0
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008452:	4611      	mov	r1, r2
 8008454:	4798      	blx	r3

    return USBD_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e000      	b.n	800845c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800845a:	2302      	movs	r3, #2
  }
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008472:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800847a:	2b00      	cmp	r3, #0
 800847c:	d015      	beq.n	80084aa <USBD_CDC_EP0_RxReady+0x46>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008484:	2bff      	cmp	r3, #255	; 0xff
 8008486:	d010      	beq.n	80084aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008496:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800849e:	b292      	uxth	r2, r2
 80084a0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2243      	movs	r2, #67	; 0x43
 80084c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80084c2:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20000090 	.word	0x20000090
=======
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc42:	4b50      	ldr	r3, [pc, #320]	; (800cd84 <xTaskIncrementTick+0x14c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f040 808c 	bne.w	800cd64 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc4c:	4b4e      	ldr	r3, [pc, #312]	; (800cd88 <xTaskIncrementTick+0x150>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3301      	adds	r3, #1
 800cc52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc54:	4a4c      	ldr	r2, [pc, #304]	; (800cd88 <xTaskIncrementTick+0x150>)
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d11f      	bne.n	800cca0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc60:	4b4a      	ldr	r3, [pc, #296]	; (800cd8c <xTaskIncrementTick+0x154>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d009      	beq.n	800cc7e <xTaskIncrementTick+0x46>
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	e7fe      	b.n	800cc7c <xTaskIncrementTick+0x44>
 800cc7e:	4b43      	ldr	r3, [pc, #268]	; (800cd8c <xTaskIncrementTick+0x154>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	4b42      	ldr	r3, [pc, #264]	; (800cd90 <xTaskIncrementTick+0x158>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a40      	ldr	r2, [pc, #256]	; (800cd8c <xTaskIncrementTick+0x154>)
 800cc8a:	6013      	str	r3, [r2, #0]
 800cc8c:	4a40      	ldr	r2, [pc, #256]	; (800cd90 <xTaskIncrementTick+0x158>)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6013      	str	r3, [r2, #0]
 800cc92:	4b40      	ldr	r3, [pc, #256]	; (800cd94 <xTaskIncrementTick+0x15c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3301      	adds	r3, #1
 800cc98:	4a3e      	ldr	r2, [pc, #248]	; (800cd94 <xTaskIncrementTick+0x15c>)
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	f000 fa9c 	bl	800d1d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cca0:	4b3d      	ldr	r3, [pc, #244]	; (800cd98 <xTaskIncrementTick+0x160>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d34d      	bcc.n	800cd46 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccaa:	4b38      	ldr	r3, [pc, #224]	; (800cd8c <xTaskIncrementTick+0x154>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <xTaskIncrementTick+0x80>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e000      	b.n	800ccba <xTaskIncrementTick+0x82>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d004      	beq.n	800ccc8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccbe:	4b36      	ldr	r3, [pc, #216]	; (800cd98 <xTaskIncrementTick+0x160>)
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccc4:	601a      	str	r2, [r3, #0]
					break;
 800ccc6:	e03e      	b.n	800cd46 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ccc8:	4b30      	ldr	r3, [pc, #192]	; (800cd8c <xTaskIncrementTick+0x154>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d203      	bcs.n	800cce8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cce0:	4a2d      	ldr	r2, [pc, #180]	; (800cd98 <xTaskIncrementTick+0x160>)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6013      	str	r3, [r2, #0]
						break;
 800cce6:	e02e      	b.n	800cd46 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	3304      	adds	r3, #4
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fe fcea 	bl	800b6c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d004      	beq.n	800cd04 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fe fce1 	bl	800b6c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd08:	2201      	movs	r2, #1
 800cd0a:	409a      	lsls	r2, r3
 800cd0c:	4b23      	ldr	r3, [pc, #140]	; (800cd9c <xTaskIncrementTick+0x164>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	4a22      	ldr	r2, [pc, #136]	; (800cd9c <xTaskIncrementTick+0x164>)
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4a1f      	ldr	r2, [pc, #124]	; (800cda0 <xTaskIncrementTick+0x168>)
 800cd24:	441a      	add	r2, r3
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	3304      	adds	r3, #4
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	f7fe fc6d 	bl	800b60c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd36:	4b1b      	ldr	r3, [pc, #108]	; (800cda4 <xTaskIncrementTick+0x16c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3b4      	bcc.n	800ccaa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cd40:	2301      	movs	r3, #1
 800cd42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd44:	e7b1      	b.n	800ccaa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd46:	4b17      	ldr	r3, [pc, #92]	; (800cda4 <xTaskIncrementTick+0x16c>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4c:	4914      	ldr	r1, [pc, #80]	; (800cda0 <xTaskIncrementTick+0x168>)
 800cd4e:	4613      	mov	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	440b      	add	r3, r1
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d907      	bls.n	800cd6e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
 800cd62:	e004      	b.n	800cd6e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd64:	4b10      	ldr	r3, [pc, #64]	; (800cda8 <xTaskIncrementTick+0x170>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	4a0f      	ldr	r2, [pc, #60]	; (800cda8 <xTaskIncrementTick+0x170>)
 800cd6c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd6e:	4b0f      	ldr	r3, [pc, #60]	; (800cdac <xTaskIncrementTick+0x174>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800cd76:	2301      	movs	r3, #1
 800cd78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd7a:	697b      	ldr	r3, [r7, #20]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	20000590 	.word	0x20000590
 800cd88:	2000056c 	.word	0x2000056c
 800cd8c:	20000520 	.word	0x20000520
 800cd90:	20000524 	.word	0x20000524
 800cd94:	20000580 	.word	0x20000580
 800cd98:	20000588 	.word	0x20000588
 800cd9c:	20000570 	.word	0x20000570
 800cda0:	2000046c 	.word	0x2000046c
 800cda4:	20000468 	.word	0x20000468
 800cda8:	20000578 	.word	0x20000578
 800cdac:	2000057c 	.word	0x2000057c

0800cdb0 <vTaskSwitchContext>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

080084d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2243      	movs	r2, #67	; 0x43
 80084e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80084e2:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	2000004c 	.word	0x2000004c

080084f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
<<<<<<< HEAD
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2243      	movs	r2, #67	; 0x43
 8008500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008502:	4b03      	ldr	r3, [pc, #12]	; (8008510 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	200000d4 	.word	0x200000d4

08008514 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	220a      	movs	r2, #10
 8008520:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008522:	4b03      	ldr	r3, [pc, #12]	; (8008530 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20000008 	.word	0x20000008
=======
 800cdb0:	b480      	push	{r7}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdb6:	4b26      	ldr	r3, [pc, #152]	; (800ce50 <vTaskSwitchContext+0xa0>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d003      	beq.n	800cdc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdbe:	4b25      	ldr	r3, [pc, #148]	; (800ce54 <vTaskSwitchContext+0xa4>)
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdc4:	e03e      	b.n	800ce44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800cdc6:	4b23      	ldr	r3, [pc, #140]	; (800ce54 <vTaskSwitchContext+0xa4>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800cdcc:	4b22      	ldr	r3, [pc, #136]	; (800ce58 <vTaskSwitchContext+0xa8>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	fab3 f383 	clz	r3, r3
 800cdd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cdda:	7afb      	ldrb	r3, [r7, #11]
 800cddc:	f1c3 031f 	rsb	r3, r3, #31
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	491e      	ldr	r1, [pc, #120]	; (800ce5c <vTaskSwitchContext+0xac>)
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	4613      	mov	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	440b      	add	r3, r1
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <vTaskSwitchContext+0x5a>
	__asm volatile
 800cdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	607b      	str	r3, [r7, #4]
 800ce08:	e7fe      	b.n	800ce08 <vTaskSwitchContext+0x58>
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4a11      	ldr	r2, [pc, #68]	; (800ce5c <vTaskSwitchContext+0xac>)
 800ce16:	4413      	add	r3, r2
 800ce18:	613b      	str	r3, [r7, #16]
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	605a      	str	r2, [r3, #4]
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d104      	bne.n	800ce3a <vTaskSwitchContext+0x8a>
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	605a      	str	r2, [r3, #4]
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	4a07      	ldr	r2, [pc, #28]	; (800ce60 <vTaskSwitchContext+0xb0>)
 800ce42:	6013      	str	r3, [r2, #0]
}
 800ce44:	bf00      	nop
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	20000590 	.word	0x20000590
 800ce54:	2000057c 	.word	0x2000057c
 800ce58:	20000570 	.word	0x20000570
 800ce5c:	2000046c 	.word	0x2000046c
 800ce60:	20000468 	.word	0x20000468

0800ce64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08008534 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< HEAD
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800853e:	2302      	movs	r3, #2
 8008540:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008562:	b480      	push	{r7}
 8008564:	b087      	sub	sp, #28
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008576:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008580:	88fa      	ldrh	r2, [r7, #6]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
=======
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d109      	bne.n	800ce88 <vTaskPlaceOnEventList+0x24>
 800ce74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	60fb      	str	r3, [r7, #12]
 800ce86:	e7fe      	b.n	800ce86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce88:	4b07      	ldr	r3, [pc, #28]	; (800cea8 <vTaskPlaceOnEventList+0x44>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3318      	adds	r3, #24
 800ce8e:	4619      	mov	r1, r3
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7fe fbdf 	bl	800b654 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce96:	2101      	movs	r1, #1
 800ce98:	6838      	ldr	r0, [r7, #0]
 800ce9a:	f000 fb9d 	bl	800d5d8 <prvAddCurrentTaskToDelayedList>
}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20000468 	.word	0x20000468

0800ceac <xTaskRemoveFromEventList>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
<<<<<<< HEAD
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d017      	beq.n	8008608 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	7c1b      	ldrb	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d109      	bne.n	80085f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ea:	2101      	movs	r1, #1
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f003 fbbd 	bl	800bd6c <USBD_LL_PrepareReceive>
 80085f2:	e007      	b.n	8008604 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	2101      	movs	r1, #1
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f003 fbb4 	bl	800bd6c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e000      	b.n	800860a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008608:	2302      	movs	r3, #2
  }
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	4613      	mov	r3, r2
 800861e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008626:	2302      	movs	r3, #2
 8008628:	e01a      	b.n	8008660 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	79fa      	ldrb	r2, [r7, #7]
 8008656:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f003 fa2f 	bl	800babc <USBD_LL_Init>

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d006      	beq.n	800868a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	e001      	b.n	800868e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800868a:	2302      	movs	r3, #2
 800868c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
=======
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d109      	bne.n	800ced6 <xTaskRemoveFromEventList+0x2a>
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	e7fe      	b.n	800ced4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	3318      	adds	r3, #24
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fe fbf3 	bl	800b6c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cee0:	4b1d      	ldr	r3, [pc, #116]	; (800cf58 <xTaskRemoveFromEventList+0xac>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d11c      	bne.n	800cf22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fbea 	bl	800b6c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef6:	2201      	movs	r2, #1
 800cef8:	409a      	lsls	r2, r3
 800cefa:	4b18      	ldr	r3, [pc, #96]	; (800cf5c <xTaskRemoveFromEventList+0xb0>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4313      	orrs	r3, r2
 800cf00:	4a16      	ldr	r2, [pc, #88]	; (800cf5c <xTaskRemoveFromEventList+0xb0>)
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf08:	4613      	mov	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4a13      	ldr	r2, [pc, #76]	; (800cf60 <xTaskRemoveFromEventList+0xb4>)
 800cf12:	441a      	add	r2, r3
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	3304      	adds	r3, #4
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	f7fe fb76 	bl	800b60c <vListInsertEnd>
 800cf20:	e005      	b.n	800cf2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	3318      	adds	r3, #24
 800cf26:	4619      	mov	r1, r3
 800cf28:	480e      	ldr	r0, [pc, #56]	; (800cf64 <xTaskRemoveFromEventList+0xb8>)
 800cf2a:	f7fe fb6f 	bl	800b60c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf32:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <xTaskRemoveFromEventList+0xbc>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d905      	bls.n	800cf48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf40:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <xTaskRemoveFromEventList+0xc0>)
 800cf42:	2201      	movs	r2, #1
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	e001      	b.n	800cf4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800cf4c:	697b      	ldr	r3, [r7, #20]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20000590 	.word	0x20000590
 800cf5c:	20000570 	.word	0x20000570
 800cf60:	2000046c 	.word	0x2000046c
 800cf64:	20000528 	.word	0x20000528
 800cf68:	20000468 	.word	0x20000468
 800cf6c:	2000057c 	.word	0x2000057c

0800cf70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f003 fa55 	bl	800bb54 <USBD_LL_Start>

  return USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
=======
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf78:	4b06      	ldr	r3, [pc, #24]	; (800cf94 <vTaskInternalSetTimeOutState+0x24>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf80:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <vTaskInternalSetTimeOutState+0x28>)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	605a      	str	r2, [r3, #4]
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	20000580 	.word	0x20000580
 800cf98:	2000056c 	.word	0x2000056c

0800cf9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

080086b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
<<<<<<< HEAD
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80086d6:	2302      	movs	r3, #2
 80086d8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00c      	beq.n	80086fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	4611      	mov	r1, r2
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
=======
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d109      	bne.n	800cfc0 <xTaskCheckForTimeOut+0x24>
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	613b      	str	r3, [r7, #16]
 800cfbe:	e7fe      	b.n	800cfbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <xTaskCheckForTimeOut+0x3e>
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	e7fe      	b.n	800cfd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800cfda:	f000 fc87 	bl	800d8ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfde:	4b1d      	ldr	r3, [pc, #116]	; (800d054 <xTaskCheckForTimeOut+0xb8>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cff6:	d102      	bne.n	800cffe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cff8:	2300      	movs	r3, #0
 800cffa:	61fb      	str	r3, [r7, #28]
 800cffc:	e023      	b.n	800d046 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	4b15      	ldr	r3, [pc, #84]	; (800d058 <xTaskCheckForTimeOut+0xbc>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	429a      	cmp	r2, r3
 800d008:	d007      	beq.n	800d01a <xTaskCheckForTimeOut+0x7e>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	429a      	cmp	r2, r3
 800d012:	d302      	bcc.n	800d01a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d014:	2301      	movs	r3, #1
 800d016:	61fb      	str	r3, [r7, #28]
 800d018:	e015      	b.n	800d046 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	429a      	cmp	r2, r3
 800d022:	d20b      	bcs.n	800d03c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	1ad2      	subs	r2, r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff ff9d 	bl	800cf70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d036:	2300      	movs	r3, #0
 800d038:	61fb      	str	r3, [r7, #28]
 800d03a:	e004      	b.n	800d046 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d042:	2301      	movs	r3, #1
 800d044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d046:	f000 fc7f 	bl	800d948 <vPortExitCritical>

	return xReturn;
 800d04a:	69fb      	ldr	r3, [r7, #28]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3720      	adds	r7, #32
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	2000056c 	.word	0x2000056c
 800d058:	20000580 	.word	0x20000580

0800d05c <vTaskMissedYield>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08008708 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	78fa      	ldrb	r2, [r7, #3]
 800871e:	4611      	mov	r1, r2
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	4798      	blx	r3
  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fe95 	bl	8009470 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008754:	461a      	mov	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	2b01      	cmp	r3, #1
 8008768:	d00c      	beq.n	8008784 <USBD_LL_SetupStage+0x56>
 800876a:	2b01      	cmp	r3, #1
 800876c:	d302      	bcc.n	8008774 <USBD_LL_SetupStage+0x46>
 800876e:	2b02      	cmp	r3, #2
 8008770:	d010      	beq.n	8008794 <USBD_LL_SetupStage+0x66>
 8008772:	e017      	b.n	80087a4 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fa05 	bl	8008b8c <USBD_StdDevReq>
    break;
 8008782:	e01a      	b.n	80087ba <USBD_LL_SetupStage+0x8c>
=======
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d060:	4b03      	ldr	r3, [pc, #12]	; (800d070 <vTaskMissedYield+0x14>)
 800d062:	2201      	movs	r2, #1
 800d064:	601a      	str	r2, [r3, #0]
}
 800d066:	bf00      	nop
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	2000057c 	.word	0x2000057c

0800d074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d07c:	f000 f852 	bl	800d124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d080:	4b06      	ldr	r3, [pc, #24]	; (800d09c <prvIdleTask+0x28>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d9f9      	bls.n	800d07c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d088:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <prvIdleTask+0x2c>)
 800d08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d08e:	601a      	str	r2, [r3, #0]
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d098:	e7f0      	b.n	800d07c <prvIdleTask+0x8>
 800d09a:	bf00      	nop
 800d09c:	2000046c 	.word	0x2000046c
 800d0a0:	e000ed04 	.word	0xe000ed04

0800d0a4 <prvInitialiseTaskLists>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa67 	bl	8008c60 <USBD_StdItfReq>
    break;
 8008792:	e012      	b.n	80087ba <USBD_LL_SetupStage+0x8c>

<<<<<<< HEAD
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 faa5 	bl	8008cec <USBD_StdEPReq>
    break;
 80087a2:	e00a      	b.n	80087ba <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80087aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f003 fa2e 	bl	800bc14 <USBD_LL_StallEP>
    break;
 80087b8:	bf00      	nop
  }

  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	460b      	mov	r3, r1
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80087d2:	7afb      	ldrb	r3, [r7, #11]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d14b      	bne.n	8008870 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80087de:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d134      	bne.n	8008854 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d919      	bls.n	800882a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800880c:	429a      	cmp	r2, r3
 800880e:	d203      	bcs.n	8008818 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008814:	b29b      	uxth	r3, r3
 8008816:	e002      	b.n	800881e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800881c:	b29b      	uxth	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 ff18 	bl	8009658 <USBD_CtlContinueRx>
 8008828:	e038      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800883c:	2b03      	cmp	r3, #3
 800883e:	d105      	bne.n	800884c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 ff15 	bl	800967c <USBD_CtlSendStatus>
 8008852:	e023      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800885a:	2b05      	cmp	r3, #5
 800885c:	d11e      	bne.n	800889c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008866:	2100      	movs	r1, #0
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f003 f9d3 	bl	800bc14 <USBD_LL_StallEP>
 800886e:	e015      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00d      	beq.n	8008898 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008882:	2b03      	cmp	r3, #3
 8008884:	d108      	bne.n	8008898 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	7afa      	ldrb	r2, [r7, #11]
 8008890:	4611      	mov	r1, r2
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	4798      	blx	r3
 8008896:	e001      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008898:	2302      	movs	r3, #2
 800889a:	e000      	b.n	800889e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
=======
static void prvInitialiseTaskLists( void )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	607b      	str	r3, [r7, #4]
 800d0ae:	e00c      	b.n	800d0ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4a12      	ldr	r2, [pc, #72]	; (800d104 <prvInitialiseTaskLists+0x60>)
 800d0bc:	4413      	add	r3, r2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe fa77 	bl	800b5b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	607b      	str	r3, [r7, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b06      	cmp	r3, #6
 800d0ce:	d9ef      	bls.n	800d0b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0d0:	480d      	ldr	r0, [pc, #52]	; (800d108 <prvInitialiseTaskLists+0x64>)
 800d0d2:	f7fe fa6e 	bl	800b5b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0d6:	480d      	ldr	r0, [pc, #52]	; (800d10c <prvInitialiseTaskLists+0x68>)
 800d0d8:	f7fe fa6b 	bl	800b5b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0dc:	480c      	ldr	r0, [pc, #48]	; (800d110 <prvInitialiseTaskLists+0x6c>)
 800d0de:	f7fe fa68 	bl	800b5b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0e2:	480c      	ldr	r0, [pc, #48]	; (800d114 <prvInitialiseTaskLists+0x70>)
 800d0e4:	f7fe fa65 	bl	800b5b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0e8:	480b      	ldr	r0, [pc, #44]	; (800d118 <prvInitialiseTaskLists+0x74>)
 800d0ea:	f7fe fa62 	bl	800b5b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0ee:	4b0b      	ldr	r3, [pc, #44]	; (800d11c <prvInitialiseTaskLists+0x78>)
 800d0f0:	4a05      	ldr	r2, [pc, #20]	; (800d108 <prvInitialiseTaskLists+0x64>)
 800d0f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <prvInitialiseTaskLists+0x7c>)
 800d0f6:	4a05      	ldr	r2, [pc, #20]	; (800d10c <prvInitialiseTaskLists+0x68>)
 800d0f8:	601a      	str	r2, [r3, #0]
}
 800d0fa:	bf00      	nop
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	2000046c 	.word	0x2000046c
 800d108:	200004f8 	.word	0x200004f8
 800d10c:	2000050c 	.word	0x2000050c
 800d110:	20000528 	.word	0x20000528
 800d114:	2000053c 	.word	0x2000053c
 800d118:	20000554 	.word	0x20000554
 800d11c:	20000520 	.word	0x20000520
 800d120:	20000524 	.word	0x20000524

0800d124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

080088a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
<<<<<<< HEAD
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	460b      	mov	r3, r1
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d17f      	bne.n	80089ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3314      	adds	r3, #20
 80088be:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d15c      	bne.n	8008984 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d915      	bls.n	8008902 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	60da      	str	r2, [r3, #12]
=======
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d12a:	e019      	b.n	800d160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d12c:	f000 fbde 	bl	800d8ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d130:	4b0f      	ldr	r3, [pc, #60]	; (800d170 <prvCheckTasksWaitingTermination+0x4c>)
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3304      	adds	r3, #4
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fe fac2 	bl	800b6c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d142:	4b0c      	ldr	r3, [pc, #48]	; (800d174 <prvCheckTasksWaitingTermination+0x50>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	3b01      	subs	r3, #1
 800d148:	4a0a      	ldr	r2, [pc, #40]	; (800d174 <prvCheckTasksWaitingTermination+0x50>)
 800d14a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d14c:	4b0a      	ldr	r3, [pc, #40]	; (800d178 <prvCheckTasksWaitingTermination+0x54>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	3b01      	subs	r3, #1
 800d152:	4a09      	ldr	r2, [pc, #36]	; (800d178 <prvCheckTasksWaitingTermination+0x54>)
 800d154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d156:	f000 fbf7 	bl	800d948 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f80e 	bl	800d17c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d160:	4b05      	ldr	r3, [pc, #20]	; (800d178 <prvCheckTasksWaitingTermination+0x54>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e1      	bne.n	800d12c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	2000053c 	.word	0x2000053c
 800d174:	20000568 	.word	0x20000568
 800d178:	20000550 	.word	0x20000550

0800d17c <prvDeleteTCB>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 fe82 	bl	80095f8 <USBD_CtlContinueSendData>

<<<<<<< HEAD
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80088f4:	2300      	movs	r3, #0
 80088f6:	2200      	movs	r2, #0
 80088f8:	2100      	movs	r1, #0
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f003 fa36 	bl	800bd6c <USBD_LL_PrepareReceive>
 8008900:	e04e      	b.n	80089a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	6912      	ldr	r2, [r2, #16]
 800890a:	fbb3 f1f2 	udiv	r1, r3, r2
 800890e:	fb02 f201 	mul.w	r2, r2, r1
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11c      	bne.n	8008952 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008920:	429a      	cmp	r2, r3
 8008922:	d316      	bcc.n	8008952 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800892e:	429a      	cmp	r2, r3
 8008930:	d20f      	bcs.n	8008952 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008932:	2200      	movs	r2, #0
 8008934:	2100      	movs	r1, #0
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fe5e 	bl	80095f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008944:	2300      	movs	r3, #0
 8008946:	2200      	movs	r2, #0
 8008948:	2100      	movs	r1, #0
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f003 fa0e 	bl	800bd6c <USBD_LL_PrepareReceive>
 8008950:	e026      	b.n	80089a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008964:	2b03      	cmp	r3, #3
 8008966:	d105      	bne.n	8008974 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008974:	2180      	movs	r1, #128	; 0x80
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f003 f94c 	bl	800bc14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fe90 	bl	80096a2 <USBD_CtlReceiveStatus>
 8008982:	e00d      	b.n	80089a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800898a:	2b04      	cmp	r3, #4
 800898c:	d004      	beq.n	8008998 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f003 f93a 	bl	800bc14 <USBD_LL_StallEP>
      }
    }
=======
	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d108      	bne.n	800d1a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fd86 	bl	800dca4 <vPortFree>
				vPortFree( pxTCB );
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fd83 	bl	800dca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d19e:	e017      	b.n	800d1d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d103      	bne.n	800d1b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fd7a 	bl	800dca4 <vPortFree>
	}
 800d1b0:	e00e      	b.n	800d1d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d009      	beq.n	800d1d0 <prvDeleteTCB+0x54>
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	60fb      	str	r3, [r7, #12]
 800d1ce:	e7fe      	b.n	800d1ce <prvDeleteTCB+0x52>
	}
 800d1d0:	bf00      	nop
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <prvResetNextTaskUnblockTime>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    if (pdev->dev_test_mode == 1U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d11d      	bne.n	80089e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff fe82 	bl	80086b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80089b8:	e015      	b.n	80089e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00d      	beq.n	80089e2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d108      	bne.n	80089e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	7afa      	ldrb	r2, [r7, #11]
 80089da:	4611      	mov	r1, r2
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	4798      	blx	r3
 80089e0:	e001      	b.n	80089e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089e2:	2302      	movs	r3, #2
 80089e4:	e000      	b.n	80089e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
<<<<<<< HEAD
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089f8:	2340      	movs	r3, #64	; 0x40
 80089fa:	2200      	movs	r2, #0
 80089fc:	2100      	movs	r1, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f003 f8c3 	bl	800bb8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2240      	movs	r2, #64	; 0x40
 8008a10:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
=======
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1de:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <prvResetNextTaskUnblockTime+0x44>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <prvResetNextTaskUnblockTime+0x14>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e000      	b.n	800d1ee <prvResetNextTaskUnblockTime+0x16>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d004      	beq.n	800d1fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1f2:	4b0b      	ldr	r3, [pc, #44]	; (800d220 <prvResetNextTaskUnblockTime+0x48>)
 800d1f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1fa:	e008      	b.n	800d20e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d1fc:	4b07      	ldr	r3, [pc, #28]	; (800d21c <prvResetNextTaskUnblockTime+0x44>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	4a05      	ldr	r2, [pc, #20]	; (800d220 <prvResetNextTaskUnblockTime+0x48>)
 800d20c:	6013      	str	r3, [r2, #0]
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	20000520 	.word	0x20000520
 800d220:	20000588 	.word	0x20000588

0800d224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a14:	2340      	movs	r3, #64	; 0x40
 8008a16:	2200      	movs	r2, #0
 8008a18:	2180      	movs	r1, #128	; 0x80
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f003 f8b5 	bl	800bb8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	619a      	str	r2, [r3, #24]

<<<<<<< HEAD
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2240      	movs	r2, #64	; 0x40
 8008a2a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6852      	ldr	r2, [r2, #4]
 8008a60:	b2d2      	uxtb	r2, r2
 8008a62:	4611      	mov	r1, r2
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4798      	blx	r3
  }

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
=======
	BaseType_t xTaskGetSchedulerState( void )
	{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d22a:	4b0b      	ldr	r3, [pc, #44]	; (800d258 <xTaskGetSchedulerState+0x34>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d102      	bne.n	800d238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d232:	2301      	movs	r3, #1
 800d234:	607b      	str	r3, [r7, #4]
 800d236:	e008      	b.n	800d24a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d238:	4b08      	ldr	r3, [pc, #32]	; (800d25c <xTaskGetSchedulerState+0x38>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d102      	bne.n	800d246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d240:	2302      	movs	r3, #2
 800d242:	607b      	str	r3, [r7, #4]
 800d244:	e001      	b.n	800d24a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d246:	2300      	movs	r3, #0
 800d248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d24a:	687b      	ldr	r3, [r7, #4]
	}
 800d24c:	4618      	mov	r0, r3
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	20000574 	.word	0x20000574
 800d25c:	20000590 	.word	0x20000590

0800d260 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08008a72 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	78fa      	ldrb	r2, [r7, #3]
 8008a82:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

<<<<<<< HEAD
08008a92 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/
=======
	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d26c:	2300      	movs	r3, #0
 800d26e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d06e      	beq.n	800d354 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27a:	4b39      	ldr	r3, [pc, #228]	; (800d360 <xTaskPriorityInherit+0x100>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	429a      	cmp	r2, r3
 800d282:	d25e      	bcs.n	800d342 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	699b      	ldr	r3, [r3, #24]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	db06      	blt.n	800d29a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d28c:	4b34      	ldr	r3, [pc, #208]	; (800d360 <xTaskPriorityInherit+0x100>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d292:	f1c3 0207 	rsb	r2, r3, #7
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6959      	ldr	r1, [r3, #20]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4a2e      	ldr	r2, [pc, #184]	; (800d364 <xTaskPriorityInherit+0x104>)
 800d2ac:	4413      	add	r3, r2
 800d2ae:	4299      	cmp	r1, r3
 800d2b0:	d101      	bne.n	800d2b6 <xTaskPriorityInherit+0x56>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e000      	b.n	800d2b8 <xTaskPriorityInherit+0x58>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d03a      	beq.n	800d332 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	3304      	adds	r3, #4
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fe fa00 	bl	800b6c6 <uxListRemove>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d115      	bne.n	800d2f8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d0:	4924      	ldr	r1, [pc, #144]	; (800d364 <xTaskPriorityInherit+0x104>)
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	4413      	add	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	440b      	add	r3, r1
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10a      	bne.n	800d2f8 <xTaskPriorityInherit+0x98>
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ec:	43da      	mvns	r2, r3
 800d2ee:	4b1e      	ldr	r3, [pc, #120]	; (800d368 <xTaskPriorityInherit+0x108>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	4a1c      	ldr	r2, [pc, #112]	; (800d368 <xTaskPriorityInherit+0x108>)
 800d2f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2f8:	4b19      	ldr	r3, [pc, #100]	; (800d360 <xTaskPriorityInherit+0x100>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d306:	2201      	movs	r2, #1
 800d308:	409a      	lsls	r2, r3
 800d30a:	4b17      	ldr	r3, [pc, #92]	; (800d368 <xTaskPriorityInherit+0x108>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4313      	orrs	r3, r2
 800d310:	4a15      	ldr	r2, [pc, #84]	; (800d368 <xTaskPriorityInherit+0x108>)
 800d312:	6013      	str	r3, [r2, #0]
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d318:	4613      	mov	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4a10      	ldr	r2, [pc, #64]	; (800d364 <xTaskPriorityInherit+0x104>)
 800d322:	441a      	add	r2, r3
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	3304      	adds	r3, #4
 800d328:	4619      	mov	r1, r3
 800d32a:	4610      	mov	r0, r2
 800d32c:	f7fe f96e 	bl	800b60c <vListInsertEnd>
 800d330:	e004      	b.n	800d33c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d332:	4b0b      	ldr	r3, [pc, #44]	; (800d360 <xTaskPriorityInherit+0x100>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	62da      	str	r2, [r3, #44]	; 0x2c
				}
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d10b      	bne.n	8008b08 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08008b12 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
=======
				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d33c:	2301      	movs	r3, #1
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	e008      	b.n	800d354 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d346:	4b06      	ldr	r3, [pc, #24]	; (800d360 <xTaskPriorityInherit+0x100>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d201      	bcs.n	800d354 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d350:	2301      	movs	r3, #1
 800d352:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d354:	68fb      	ldr	r3, [r7, #12]
	}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	20000468 	.word	0x20000468
 800d364:	2000046c 	.word	0x2000046c
 800d368:	20000570 	.word	0x20000570

0800d36c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08008b2c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

<<<<<<< HEAD
  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6852      	ldr	r2, [r2, #4]
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]
=======
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d378:	2300      	movs	r3, #0
 800d37a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d06c      	beq.n	800d45c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d382:	4b39      	ldr	r3, [pc, #228]	; (800d468 <xTaskPriorityDisinherit+0xfc>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d009      	beq.n	800d3a0 <xTaskPriorityDisinherit+0x34>
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e7fe      	b.n	800d39e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d109      	bne.n	800d3bc <xTaskPriorityDisinherit+0x50>
 800d3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	60bb      	str	r3, [r7, #8]
 800d3ba:	e7fe      	b.n	800d3ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3c0:	1e5a      	subs	r2, r3, #1
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d044      	beq.n	800d45c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d140      	bne.n	800d45c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe f971 	bl	800b6c6 <uxListRemove>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d115      	bne.n	800d416 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ee:	491f      	ldr	r1, [pc, #124]	; (800d46c <xTaskPriorityDisinherit+0x100>)
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	440b      	add	r3, r1
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10a      	bne.n	800d416 <xTaskPriorityDisinherit+0xaa>
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d404:	2201      	movs	r2, #1
 800d406:	fa02 f303 	lsl.w	r3, r2, r3
 800d40a:	43da      	mvns	r2, r3
 800d40c:	4b18      	ldr	r3, [pc, #96]	; (800d470 <xTaskPriorityDisinherit+0x104>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4013      	ands	r3, r2
 800d412:	4a17      	ldr	r2, [pc, #92]	; (800d470 <xTaskPriorityDisinherit+0x104>)
 800d414:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d422:	f1c3 0207 	rsb	r2, r3, #7
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42e:	2201      	movs	r2, #1
 800d430:	409a      	lsls	r2, r3
 800d432:	4b0f      	ldr	r3, [pc, #60]	; (800d470 <xTaskPriorityDisinherit+0x104>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4313      	orrs	r3, r2
 800d438:	4a0d      	ldr	r2, [pc, #52]	; (800d470 <xTaskPriorityDisinherit+0x104>)
 800d43a:	6013      	str	r3, [r2, #0]
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4a08      	ldr	r2, [pc, #32]	; (800d46c <xTaskPriorityDisinherit+0x100>)
 800d44a:	441a      	add	r2, r3
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	3304      	adds	r3, #4
 800d450:	4619      	mov	r1, r3
 800d452:	4610      	mov	r0, r2
 800d454:	f7fe f8da 	bl	800b60c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d458:	2301      	movs	r3, #1
 800d45a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d45c:	697b      	ldr	r3, [r7, #20]
	}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20000468 	.word	0x20000468
 800d46c:	2000046c 	.word	0x2000046c
 800d470:	20000570 	.word	0x20000570

0800d474 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d004      	beq.n	8008bb0 <USBD_StdDevReq+0x24>
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d002      	beq.n	8008bb0 <USBD_StdDevReq+0x24>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d008      	beq.n	8008bc0 <USBD_StdDevReq+0x34>
 8008bae:	e04c      	b.n	8008c4a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
    break;
 8008bbe:	e049      	b.n	8008c54 <USBD_StdDevReq+0xc8>

<<<<<<< HEAD
  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b09      	cmp	r3, #9
 8008bc6:	d83a      	bhi.n	8008c3e <USBD_StdDevReq+0xb2>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <USBD_StdDevReq+0x44>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008c21 	.word	0x08008c21
 8008bd4:	08008c35 	.word	0x08008c35
 8008bd8:	08008c3f 	.word	0x08008c3f
 8008bdc:	08008c2b 	.word	0x08008c2b
 8008be0:	08008c3f 	.word	0x08008c3f
 8008be4:	08008c03 	.word	0x08008c03
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008c3f 	.word	0x08008c3f
 8008bf0:	08008c17 	.word	0x08008c17
 8008bf4:	08008c0d 	.word	0x08008c0d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f9d2 	bl	8008fa4 <USBD_GetDescriptor>
      break;
 8008c00:	e022      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fac7 	bl	8009198 <USBD_SetAddress>
      break;
 8008c0a:	e01d      	b.n	8008c48 <USBD_StdDevReq+0xbc>
=======
	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d474:	b580      	push	{r7, lr}
 800d476:	b088      	sub	sp, #32
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d482:	2301      	movs	r3, #1
 800d484:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 8086 	beq.w	800d59a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d492:	2b00      	cmp	r3, #0
 800d494:	d109      	bne.n	800d4aa <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49a:	f383 8811 	msr	BASEPRI, r3
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	60fb      	str	r3, [r7, #12]
 800d4a8:	e7fe      	b.n	800d4a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d902      	bls.n	800d4ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	61fb      	str	r3, [r7, #28]
 800d4b8:	e002      	b.n	800d4c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	69fa      	ldr	r2, [r7, #28]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d067      	beq.n	800d59a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d162      	bne.n	800d59a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d4d4:	4b33      	ldr	r3, [pc, #204]	; (800d5a4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d109      	bne.n	800d4f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	60bb      	str	r3, [r7, #8]
 800d4f0:	e7fe      	b.n	800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	69fa      	ldr	r2, [r7, #28]
 800d4fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	db04      	blt.n	800d510 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	f1c3 0207 	rsb	r2, r3, #7
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	6959      	ldr	r1, [r3, #20]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	4613      	mov	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4a22      	ldr	r2, [pc, #136]	; (800d5a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d520:	4413      	add	r3, r2
 800d522:	4299      	cmp	r1, r3
 800d524:	d101      	bne.n	800d52a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800d526:	2301      	movs	r3, #1
 800d528:	e000      	b.n	800d52c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d52a:	2300      	movs	r3, #0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d034      	beq.n	800d59a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	3304      	adds	r3, #4
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe f8c6 	bl	800b6c6 <uxListRemove>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d115      	bne.n	800d56c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d544:	4918      	ldr	r1, [pc, #96]	; (800d5a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d546:	4613      	mov	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	440b      	add	r3, r1
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10a      	bne.n	800d56c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55a:	2201      	movs	r2, #1
 800d55c:	fa02 f303 	lsl.w	r3, r2, r3
 800d560:	43da      	mvns	r2, r3
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4013      	ands	r3, r2
 800d568:	4a10      	ldr	r2, [pc, #64]	; (800d5ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d56a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d570:	2201      	movs	r2, #1
 800d572:	409a      	lsls	r2, r3
 800d574:	4b0d      	ldr	r3, [pc, #52]	; (800d5ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4313      	orrs	r3, r2
 800d57a:	4a0c      	ldr	r2, [pc, #48]	; (800d5ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d57c:	6013      	str	r3, [r2, #0]
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d582:	4613      	mov	r3, r2
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	4413      	add	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4a07      	ldr	r2, [pc, #28]	; (800d5a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d58c:	441a      	add	r2, r3
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	3304      	adds	r3, #4
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f7fe f839 	bl	800b60c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d59a:	bf00      	nop
 800d59c:	3720      	adds	r7, #32
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20000468 	.word	0x20000468
 800d5a8:	2000046c 	.word	0x2000046c
 800d5ac:	20000570 	.word	0x20000570

0800d5b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb04 	bl	800921c <USBD_SetConfig>
      break;
 8008c14:	e018      	b.n	8008c48 <USBD_StdDevReq+0xbc>

<<<<<<< HEAD
    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fb8d 	bl	8009338 <USBD_GetConfig>
      break;
 8008c1e:	e013      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fbbc 	bl	80093a0 <USBD_GetStatus>
      break;
 8008c28:	e00e      	b.n	8008c48 <USBD_StdDevReq+0xbc>

=======
	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d5b0:	b480      	push	{r7}
 800d5b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5b4:	4b07      	ldr	r3, [pc, #28]	; (800d5d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5bc:	4b05      	ldr	r3, [pc, #20]	; (800d5d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5c2:	3201      	adds	r2, #1
 800d5c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d5c6:	4b03      	ldr	r3, [pc, #12]	; (800d5d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
	}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	20000468 	.word	0x20000468

0800d5d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fbea 	bl	8009406 <USBD_SetFeature>
      break;
 8008c32:	e009      	b.n	8008c48 <USBD_StdDevReq+0xbc>

<<<<<<< HEAD
    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fbf9 	bl	800942e <USBD_ClrFeature>
      break;
 8008c3c:	e004      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fc52 	bl	80094ea <USBD_CtlError>
      break;
 8008c46:	bf00      	nop
    }
    break;
 8008c48:	e004      	b.n	8008c54 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc4c 	bl	80094ea <USBD_CtlError>
    break;
 8008c52:	bf00      	nop
  }

  return ret;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
=======
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5e2:	4b29      	ldr	r3, [pc, #164]	; (800d688 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5e8:	4b28      	ldr	r3, [pc, #160]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe f869 	bl	800b6c6 <uxListRemove>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10b      	bne.n	800d612 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d5fa:	4b24      	ldr	r3, [pc, #144]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	2201      	movs	r2, #1
 800d602:	fa02 f303 	lsl.w	r3, r2, r3
 800d606:	43da      	mvns	r2, r3
 800d608:	4b21      	ldr	r3, [pc, #132]	; (800d690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4013      	ands	r3, r2
 800d60e:	4a20      	ldr	r2, [pc, #128]	; (800d690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d610:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d618:	d10a      	bne.n	800d630 <prvAddCurrentTaskToDelayedList+0x58>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d620:	4b1a      	ldr	r3, [pc, #104]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3304      	adds	r3, #4
 800d626:	4619      	mov	r1, r3
 800d628:	481a      	ldr	r0, [pc, #104]	; (800d694 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d62a:	f7fd ffef 	bl	800b60c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d62e:	e026      	b.n	800d67e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4413      	add	r3, r2
 800d636:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d638:	4b14      	ldr	r3, [pc, #80]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	429a      	cmp	r2, r3
 800d646:	d209      	bcs.n	800d65c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d648:	4b13      	ldr	r3, [pc, #76]	; (800d698 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	4b0f      	ldr	r3, [pc, #60]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3304      	adds	r3, #4
 800d652:	4619      	mov	r1, r3
 800d654:	4610      	mov	r0, r2
 800d656:	f7fd fffd 	bl	800b654 <vListInsert>
}
 800d65a:	e010      	b.n	800d67e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d65c:	4b0f      	ldr	r3, [pc, #60]	; (800d69c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	4b0a      	ldr	r3, [pc, #40]	; (800d68c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3304      	adds	r3, #4
 800d666:	4619      	mov	r1, r3
 800d668:	4610      	mov	r0, r2
 800d66a:	f7fd fff3 	bl	800b654 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d66e:	4b0c      	ldr	r3, [pc, #48]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	429a      	cmp	r2, r3
 800d676:	d202      	bcs.n	800d67e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d678:	4a09      	ldr	r2, [pc, #36]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6013      	str	r3, [r2, #0]
}
 800d67e:	bf00      	nop
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	2000056c 	.word	0x2000056c
 800d68c:	20000468 	.word	0x20000468
 800d690:	20000570 	.word	0x20000570
 800d694:	20000554 	.word	0x20000554
 800d698:	20000524 	.word	0x20000524
 800d69c:	20000520 	.word	0x20000520
 800d6a0:	20000588 	.word	0x20000588

0800d6a4 <pxPortInitialiseStack>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08008c60 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d003      	beq.n	8008c82 <USBD_StdItfReq+0x22>
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	d001      	beq.n	8008c82 <USBD_StdItfReq+0x22>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d12a      	bne.n	8008cd8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d81d      	bhi.n	8008cca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	889b      	ldrh	r3, [r3, #4]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d813      	bhi.n	8008cc0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	88db      	ldrh	r3, [r3, #6]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d110      	bne.n	8008cd4 <USBD_StdItfReq+0x74>
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10d      	bne.n	8008cd4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fcdf 	bl	800967c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008cbe:	e009      	b.n	8008cd4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fc11 	bl	80094ea <USBD_CtlError>
      break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc0c 	bl	80094ea <USBD_CtlError>
      break;
 8008cd2:	e000      	b.n	8008cd6 <USBD_StdItfReq+0x76>
      break;
 8008cd4:	bf00      	nop
    }
    break;
 8008cd6:	e004      	b.n	8008ce2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fc05 	bl	80094ea <USBD_CtlError>
    break;
 8008ce0:	bf00      	nop
  }

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
=======
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	3b04      	subs	r3, #4
 800d6b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3b04      	subs	r3, #4
 800d6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f023 0201 	bic.w	r2, r3, #1
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3b04      	subs	r3, #4
 800d6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6d4:	4a0c      	ldr	r2, [pc, #48]	; (800d708 <pxPortInitialiseStack+0x64>)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3b14      	subs	r3, #20
 800d6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	3b04      	subs	r3, #4
 800d6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f06f 0202 	mvn.w	r2, #2
 800d6f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	3b20      	subs	r3, #32
 800d6f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3714      	adds	r7, #20
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	0800d70d 	.word	0x0800d70d

0800d70c <prvTaskExitError>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

08008cec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	889b      	ldrh	r3, [r3, #4]
 8008cfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d004      	beq.n	8008d16 <USBD_StdEPReq+0x2a>
 8008d0c:	2b40      	cmp	r3, #64	; 0x40
 8008d0e:	d002      	beq.n	8008d16 <USBD_StdEPReq+0x2a>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <USBD_StdEPReq+0x3a>
 8008d14:	e13b      	b.n	8008f8e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
    break;
 8008d24:	e138      	b.n	8008f98 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d10a      	bne.n	8008d48 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	e128      	b.n	8008f9a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d03e      	beq.n	8008dce <USBD_StdEPReq+0xe2>
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d002      	beq.n	8008d5a <USBD_StdEPReq+0x6e>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d070      	beq.n	8008e3a <USBD_StdEPReq+0x14e>
 8008d58:	e113      	b.n	8008f82 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d002      	beq.n	8008d6a <USBD_StdEPReq+0x7e>
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d015      	beq.n	8008d94 <USBD_StdEPReq+0xa8>
 8008d68:	e02b      	b.n	8008dc2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00c      	beq.n	8008d8a <USBD_StdEPReq+0x9e>
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d009      	beq.n	8008d8a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f002 ff4a 	bl	800bc14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008d80:	2180      	movs	r1, #128	; 0x80
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f002 ff46 	bl	800bc14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d88:	e020      	b.n	8008dcc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbac 	bl	80094ea <USBD_CtlError>
        break;
 8008d92:	e01b      	b.n	8008dcc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	885b      	ldrh	r3, [r3, #2]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10e      	bne.n	8008dba <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <USBD_StdEPReq+0xce>
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b80      	cmp	r3, #128	; 0x80
 8008da6:	d008      	beq.n	8008dba <USBD_StdEPReq+0xce>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	88db      	ldrh	r3, [r3, #6]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f002 ff2d 	bl	800bc14 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fc5e 	bl	800967c <USBD_CtlSendStatus>

        break;
 8008dc0:	e004      	b.n	8008dcc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fb90 	bl	80094ea <USBD_CtlError>
        break;
 8008dca:	bf00      	nop
      }
      break;
 8008dcc:	e0de      	b.n	8008f8c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d002      	beq.n	8008dde <USBD_StdEPReq+0xf2>
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d015      	beq.n	8008e08 <USBD_StdEPReq+0x11c>
 8008ddc:	e026      	b.n	8008e2c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00c      	beq.n	8008dfe <USBD_StdEPReq+0x112>
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2b80      	cmp	r3, #128	; 0x80
 8008de8:	d009      	beq.n	8008dfe <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f002 ff10 	bl	800bc14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008df4:	2180      	movs	r1, #128	; 0x80
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f002 ff0c 	bl	800bc14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008dfc:	e01c      	b.n	8008e38 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fb72 	bl	80094ea <USBD_CtlError>
        break;
 8008e06:	e017      	b.n	8008e38 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d112      	bne.n	8008e36 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f002 ff17 	bl	800bc52 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fc29 	bl	800967c <USBD_CtlSendStatus>
        }
        break;
 8008e2a:	e004      	b.n	8008e36 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb5b 	bl	80094ea <USBD_CtlError>
        break;
 8008e34:	e000      	b.n	8008e38 <USBD_StdEPReq+0x14c>
        break;
 8008e36:	bf00      	nop
      }
      break;
 8008e38:	e0a8      	b.n	8008f8c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d002      	beq.n	8008e4a <USBD_StdEPReq+0x15e>
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d031      	beq.n	8008eac <USBD_StdEPReq+0x1c0>
 8008e48:	e095      	b.n	8008f76 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <USBD_StdEPReq+0x174>
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	2b80      	cmp	r3, #128	; 0x80
 8008e54:	d004      	beq.n	8008e60 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fb46 	bl	80094ea <USBD_CtlError>
          break;
 8008e5e:	e08f      	b.n	8008f80 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da0b      	bge.n	8008e80 <USBD_StdEPReq+0x194>
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e6e:	4613      	mov	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	3310      	adds	r3, #16
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	e00a      	b.n	8008e96 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fb8b 	bl	80095c0 <USBD_CtlSendData>
          break;
 8008eaa:	e069      	b.n	8008f80 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da11      	bge.n	8008ed8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 020f 	and.w	r2, r3, #15
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3318      	adds	r3, #24
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d117      	bne.n	8008efe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb0a 	bl	80094ea <USBD_CtlError>
            break;
 8008ed6:	e053      	b.n	8008f80 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	f003 020f 	and.w	r2, r3, #15
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 faf7 	bl	80094ea <USBD_CtlError>
            break;
 8008efc:	e040      	b.n	8008f80 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008efe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da0b      	bge.n	8008f1e <USBD_StdEPReq+0x232>
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	3310      	adds	r3, #16
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	4413      	add	r3, r2
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	e00a      	b.n	8008f34 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <USBD_StdEPReq+0x256>
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b80      	cmp	r3, #128	; 0x80
 8008f40:	d103      	bne.n	8008f4a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	e00e      	b.n	8008f68 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f002 fe9e 	bl	800bc90 <USBD_LL_IsStallEP>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e002      	b.n	8008f68 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fb26 	bl	80095c0 <USBD_CtlSendData>
          break;
 8008f74:	e004      	b.n	8008f80 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fab6 	bl	80094ea <USBD_CtlError>
        break;
 8008f7e:	bf00      	nop
      }
      break;
 8008f80:	e004      	b.n	8008f8c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fab0 	bl	80094ea <USBD_CtlError>
      break;
 8008f8a:	bf00      	nop
    }
    break;
 8008f8c:	e004      	b.n	8008f98 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 faaa 	bl	80094ea <USBD_CtlError>
    break;
 8008f96:	bf00      	nop
  }

  return ret;
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
=======
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <prvTaskExitError+0x50>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d71e:	d009      	beq.n	800d734 <prvTaskExitError+0x28>
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	e7fe      	b.n	800d732 <prvTaskExitError+0x26>
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d746:	bf00      	nop
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d0fc      	beq.n	800d748 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d74e:	bf00      	nop
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20000118 	.word	0x20000118

0800d760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d760:	4b07      	ldr	r3, [pc, #28]	; (800d780 <pxCurrentTCBConst2>)
 800d762:	6819      	ldr	r1, [r3, #0]
 800d764:	6808      	ldr	r0, [r1, #0]
 800d766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76a:	f380 8809 	msr	PSP, r0
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f04f 0000 	mov.w	r0, #0
 800d776:	f380 8811 	msr	BASEPRI, r0
 800d77a:	4770      	bx	lr
 800d77c:	f3af 8000 	nop.w

0800d780 <pxCurrentTCBConst2>:
 800d780:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop

0800d788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d788:	4808      	ldr	r0, [pc, #32]	; (800d7ac <prvPortStartFirstTask+0x24>)
 800d78a:	6800      	ldr	r0, [r0, #0]
 800d78c:	6800      	ldr	r0, [r0, #0]
 800d78e:	f380 8808 	msr	MSP, r0
 800d792:	f04f 0000 	mov.w	r0, #0
 800d796:	f380 8814 	msr	CONTROL, r0
 800d79a:	b662      	cpsie	i
 800d79c:	b661      	cpsie	f
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	df00      	svc	0
 800d7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d7aa:	bf00      	nop
 800d7ac:	e000ed08 	.word	0xe000ed08

0800d7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7b6:	4b44      	ldr	r3, [pc, #272]	; (800d8c8 <xPortStartScheduler+0x118>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a44      	ldr	r2, [pc, #272]	; (800d8cc <xPortStartScheduler+0x11c>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d109      	bne.n	800d7d4 <xPortStartScheduler+0x24>
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	613b      	str	r3, [r7, #16]
 800d7d2:	e7fe      	b.n	800d7d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7d4:	4b3c      	ldr	r3, [pc, #240]	; (800d8c8 <xPortStartScheduler+0x118>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a3d      	ldr	r2, [pc, #244]	; (800d8d0 <xPortStartScheduler+0x120>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d109      	bne.n	800d7f2 <xPortStartScheduler+0x42>
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	60fb      	str	r3, [r7, #12]
 800d7f0:	e7fe      	b.n	800d7f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7f2:	4b38      	ldr	r3, [pc, #224]	; (800d8d4 <xPortStartScheduler+0x124>)
 800d7f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	22ff      	movs	r2, #255	; 0xff
 800d802:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d80c:	78fb      	ldrb	r3, [r7, #3]
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d814:	b2da      	uxtb	r2, r3
 800d816:	4b30      	ldr	r3, [pc, #192]	; (800d8d8 <xPortStartScheduler+0x128>)
 800d818:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d81a:	4b30      	ldr	r3, [pc, #192]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d81c:	2207      	movs	r2, #7
 800d81e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d820:	e009      	b.n	800d836 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d822:	4b2e      	ldr	r3, [pc, #184]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3b01      	subs	r3, #1
 800d828:	4a2c      	ldr	r2, [pc, #176]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d82a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d82c:	78fb      	ldrb	r3, [r7, #3]
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	005b      	lsls	r3, r3, #1
 800d832:	b2db      	uxtb	r3, r3
 800d834:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d83e:	2b80      	cmp	r3, #128	; 0x80
 800d840:	d0ef      	beq.n	800d822 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d842:	4b26      	ldr	r3, [pc, #152]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f1c3 0307 	rsb	r3, r3, #7
 800d84a:	2b04      	cmp	r3, #4
 800d84c:	d009      	beq.n	800d862 <xPortStartScheduler+0xb2>
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	60bb      	str	r3, [r7, #8]
 800d860:	e7fe      	b.n	800d860 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d862:	4b1e      	ldr	r3, [pc, #120]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	021b      	lsls	r3, r3, #8
 800d868:	4a1c      	ldr	r2, [pc, #112]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d86a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d86c:	4b1b      	ldr	r3, [pc, #108]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d874:	4a19      	ldr	r2, [pc, #100]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d876:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d880:	4b17      	ldr	r3, [pc, #92]	; (800d8e0 <xPortStartScheduler+0x130>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a16      	ldr	r2, [pc, #88]	; (800d8e0 <xPortStartScheduler+0x130>)
 800d886:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d88a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d88c:	4b14      	ldr	r3, [pc, #80]	; (800d8e0 <xPortStartScheduler+0x130>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a13      	ldr	r2, [pc, #76]	; (800d8e0 <xPortStartScheduler+0x130>)
 800d892:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d896:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d898:	f000 f8d6 	bl	800da48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d89c:	4b11      	ldr	r3, [pc, #68]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d8a2:	f000 f8f5 	bl	800da90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d8a6:	4b10      	ldr	r3, [pc, #64]	; (800d8e8 <xPortStartScheduler+0x138>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a0f      	ldr	r2, [pc, #60]	; (800d8e8 <xPortStartScheduler+0x138>)
 800d8ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d8b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8b2:	f7ff ff69 	bl	800d788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8b6:	f7ff fa7b 	bl	800cdb0 <vTaskSwitchContext>
	prvTaskExitError();
 800d8ba:	f7ff ff27 	bl	800d70c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8be:	2300      	movs	r3, #0
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3718      	adds	r7, #24
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	e000ed00 	.word	0xe000ed00
 800d8cc:	410fc271 	.word	0x410fc271
 800d8d0:	410fc270 	.word	0x410fc270
 800d8d4:	e000e400 	.word	0xe000e400
 800d8d8:	20000594 	.word	0x20000594
 800d8dc:	20000598 	.word	0x20000598
 800d8e0:	e000ed20 	.word	0xe000ed20
 800d8e4:	20000118 	.word	0x20000118
 800d8e8:	e000ef34 	.word	0xe000ef34

0800d8ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d904:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <vPortEnterCritical+0x54>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3301      	adds	r3, #1
 800d90a:	4a0d      	ldr	r2, [pc, #52]	; (800d940 <vPortEnterCritical+0x54>)
 800d90c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d90e:	4b0c      	ldr	r3, [pc, #48]	; (800d940 <vPortEnterCritical+0x54>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d10e      	bne.n	800d934 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d916:	4b0b      	ldr	r3, [pc, #44]	; (800d944 <vPortEnterCritical+0x58>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d009      	beq.n	800d934 <vPortEnterCritical+0x48>
 800d920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	603b      	str	r3, [r7, #0]
 800d932:	e7fe      	b.n	800d932 <vPortEnterCritical+0x46>
	}
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	20000118 	.word	0x20000118
 800d944:	e000ed04 	.word	0xe000ed04

0800d948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d94e:	4b11      	ldr	r3, [pc, #68]	; (800d994 <vPortExitCritical+0x4c>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d109      	bne.n	800d96a <vPortExitCritical+0x22>
 800d956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	607b      	str	r3, [r7, #4]
 800d968:	e7fe      	b.n	800d968 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d96a:	4b0a      	ldr	r3, [pc, #40]	; (800d994 <vPortExitCritical+0x4c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	3b01      	subs	r3, #1
 800d970:	4a08      	ldr	r2, [pc, #32]	; (800d994 <vPortExitCritical+0x4c>)
 800d972:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d974:	4b07      	ldr	r3, [pc, #28]	; (800d994 <vPortExitCritical+0x4c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d104      	bne.n	800d986 <vPortExitCritical+0x3e>
 800d97c:	2300      	movs	r3, #0
 800d97e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d986:	bf00      	nop
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	20000118 	.word	0x20000118
	...

0800d9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;

<<<<<<< HEAD

  switch (req->wValue >> 8)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	885b      	ldrh	r3, [r3, #2]
 8008fb2:	0a1b      	lsrs	r3, r3, #8
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b06      	cmp	r3, #6
 8008fba:	f200 80c9 	bhi.w	8009150 <USBD_GetDescriptor+0x1ac>
 8008fbe:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBD_GetDescriptor+0x20>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08008fe1 	.word	0x08008fe1
 8008fc8:	08008ff9 	.word	0x08008ff9
 8008fcc:	08009039 	.word	0x08009039
 8008fd0:	08009151 	.word	0x08009151
 8008fd4:	08009151 	.word	0x08009151
 8008fd8:	080090fd 	.word	0x080090fd
 8008fdc:	08009123 	.word	0x08009123
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 010a 	add.w	r1, r7, #10
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
    break;
 8008ff6:	e0b0      	b.n	800915a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	7c1b      	ldrb	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10d      	bne.n	800901c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f107 020a 	add.w	r2, r7, #10
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
 8009010:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	2202      	movs	r2, #2
 8009018:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800901a:	e09e      	b.n	800915a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	f107 020a 	add.w	r2, r7, #10
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	2202      	movs	r2, #2
 8009034:	701a      	strb	r2, [r3, #0]
    break;
 8009036:	e090      	b.n	800915a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	885b      	ldrh	r3, [r3, #2]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b05      	cmp	r3, #5
 8009040:	d856      	bhi.n	80090f0 <USBD_GetDescriptor+0x14c>
 8009042:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <USBD_GetDescriptor+0xa4>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	08009061 	.word	0x08009061
 800904c:	08009079 	.word	0x08009079
 8009050:	08009091 	.word	0x08009091
 8009054:	080090a9 	.word	0x080090a9
 8009058:	080090c1 	.word	0x080090c1
 800905c:	080090d9 	.word	0x080090d9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7c12      	ldrb	r2, [r2, #16]
 800906c:	f107 010a 	add.w	r1, r7, #10
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
      break;
 8009076:	e040      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7c12      	ldrb	r2, [r2, #16]
 8009084:	f107 010a 	add.w	r1, r7, #10
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	60f8      	str	r0, [r7, #12]
      break;
 800908e:	e034      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 010a 	add.w	r1, r7, #10
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
      break;
 80090a6:	e028      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 010a 	add.w	r1, r7, #10
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
      break;
 80090be:	e01c      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	7c12      	ldrb	r2, [r2, #16]
 80090cc:	f107 010a 	add.w	r1, r7, #10
 80090d0:	4610      	mov	r0, r2
 80090d2:	4798      	blx	r3
 80090d4:	60f8      	str	r0, [r7, #12]
      break;
 80090d6:	e010      	b.n	80090fa <USBD_GetDescriptor+0x156>
=======
	__asm volatile
 800d9a0:	f3ef 8009 	mrs	r0, PSP
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	4b15      	ldr	r3, [pc, #84]	; (800da00 <pxCurrentTCBConst>)
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	f01e 0f10 	tst.w	lr, #16
 800d9b0:	bf08      	it	eq
 800d9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ba:	6010      	str	r0, [r2, #0]
 800d9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9c4:	f380 8811 	msr	BASEPRI, r0
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f7ff f9ee 	bl	800cdb0 <vTaskSwitchContext>
 800d9d4:	f04f 0000 	mov.w	r0, #0
 800d9d8:	f380 8811 	msr	BASEPRI, r0
 800d9dc:	bc09      	pop	{r0, r3}
 800d9de:	6819      	ldr	r1, [r3, #0]
 800d9e0:	6808      	ldr	r0, [r1, #0]
 800d9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e6:	f01e 0f10 	tst.w	lr, #16
 800d9ea:	bf08      	it	eq
 800d9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9f0:	f380 8809 	msr	PSP, r0
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w

0800da00 <pxCurrentTCBConst>:
 800da00:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop

0800da08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da20:	f7ff f90a 	bl	800cc38 <xTaskIncrementTick>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d003      	beq.n	800da32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da2a:	4b06      	ldr	r3, [pc, #24]	; (800da44 <SysTick_Handler+0x3c>)
 800da2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	2300      	movs	r3, #0
 800da34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	e000ed04 	.word	0xe000ed04

0800da48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da48:	b480      	push	{r7}
 800da4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da4c:	4b0b      	ldr	r3, [pc, #44]	; (800da7c <vPortSetupTimerInterrupt+0x34>)
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da52:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <vPortSetupTimerInterrupt+0x38>)
 800da54:	2200      	movs	r2, #0
 800da56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da58:	4b0a      	ldr	r3, [pc, #40]	; (800da84 <vPortSetupTimerInterrupt+0x3c>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a0a      	ldr	r2, [pc, #40]	; (800da88 <vPortSetupTimerInterrupt+0x40>)
 800da5e:	fba2 2303 	umull	r2, r3, r2, r3
 800da62:	099b      	lsrs	r3, r3, #6
 800da64:	4a09      	ldr	r2, [pc, #36]	; (800da8c <vPortSetupTimerInterrupt+0x44>)
 800da66:	3b01      	subs	r3, #1
 800da68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da6a:	4b04      	ldr	r3, [pc, #16]	; (800da7c <vPortSetupTimerInterrupt+0x34>)
 800da6c:	2207      	movs	r2, #7
 800da6e:	601a      	str	r2, [r3, #0]
}
 800da70:	bf00      	nop
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	e000e010 	.word	0xe000e010
 800da80:	e000e018 	.word	0xe000e018
 800da84:	20000000 	.word	0x20000000
 800da88:	10624dd3 	.word	0x10624dd3
 800da8c:	e000e014 	.word	0xe000e014

0800da90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800daa0 <vPortEnableVFP+0x10>
 800da94:	6801      	ldr	r1, [r0, #0]
 800da96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da9a:	6001      	str	r1, [r0, #0]
 800da9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da9e:	bf00      	nop
 800daa0:	e000ed88 	.word	0xe000ed88

0800daa4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	7c12      	ldrb	r2, [r2, #16]
 80090e4:	f107 010a 	add.w	r1, r7, #10
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
      break;
 80090ee:	e004      	b.n	80090fa <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9f9 	bl	80094ea <USBD_CtlError>
      return;
 80090f8:	e04b      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80090fa:	e02e      	b.n	800915a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

<<<<<<< HEAD
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7c1b      	ldrb	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	f107 020a 	add.w	r2, r7, #10
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	60f8      	str	r0, [r7, #12]
      break;
 8009116:	e020      	b.n	800915a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9e5 	bl	80094ea <USBD_CtlError>
      return;
 8009120:	e037      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7c1b      	ldrb	r3, [r3, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10d      	bne.n	8009146 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	f107 020a 	add.w	r2, r7, #10
 8009136:	4610      	mov	r0, r2
 8009138:	4798      	blx	r3
 800913a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	2207      	movs	r2, #7
 8009142:	701a      	strb	r2, [r3, #0]
      break;
 8009144:	e009      	b.n	800915a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9ce 	bl	80094ea <USBD_CtlError>
      return;
 800914e:	e020      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f9c9 	bl	80094ea <USBD_CtlError>
    return;
 8009158:	e01b      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800915a:	897b      	ldrh	r3, [r7, #10]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d011      	beq.n	8009184 <USBD_GetDescriptor+0x1e0>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	88db      	ldrh	r3, [r3, #6]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00d      	beq.n	8009184 <USBD_GetDescriptor+0x1e0>
  {
=======
	void vPortValidateInterruptPriority( void )
	{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800daaa:	f3ef 8305 	mrs	r3, IPSR
 800daae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b0f      	cmp	r3, #15
 800dab4:	d913      	bls.n	800dade <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dab6:	4a16      	ldr	r2, [pc, #88]	; (800db10 <vPortValidateInterruptPriority+0x6c>)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4413      	add	r3, r2
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dac0:	4b14      	ldr	r3, [pc, #80]	; (800db14 <vPortValidateInterruptPriority+0x70>)
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	7afa      	ldrb	r2, [r7, #11]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d209      	bcs.n	800dade <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	607b      	str	r3, [r7, #4]
 800dadc:	e7fe      	b.n	800dadc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dade:	4b0e      	ldr	r3, [pc, #56]	; (800db18 <vPortValidateInterruptPriority+0x74>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dae6:	4b0d      	ldr	r3, [pc, #52]	; (800db1c <vPortValidateInterruptPriority+0x78>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	429a      	cmp	r2, r3
 800daec:	d909      	bls.n	800db02 <vPortValidateInterruptPriority+0x5e>
 800daee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	e7fe      	b.n	800db00 <vPortValidateInterruptPriority+0x5c>
	}
 800db02:	bf00      	nop
 800db04:	3714      	adds	r7, #20
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	e000e3f0 	.word	0xe000e3f0
 800db14:	20000594 	.word	0x20000594
 800db18:	e000ed0c 	.word	0xe000ed0c
 800db1c:	20000598 	.word	0x20000598

0800db20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

    len = MIN(len, req->wLength);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	88da      	ldrh	r2, [r3, #6]
 800916c:	897b      	ldrh	r3, [r7, #10]
 800916e:	4293      	cmp	r3, r2
 8009170:	bf28      	it	cs
 8009172:	4613      	movcs	r3, r2
 8009174:	b29b      	uxth	r3, r3
 8009176:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009178:	897b      	ldrh	r3, [r7, #10]
 800917a:	461a      	mov	r2, r3
 800917c:	68f9      	ldr	r1, [r7, #12]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa1e 	bl	80095c0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	88db      	ldrh	r3, [r3, #6]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fa75 	bl	800967c <USBD_CtlSendStatus>
  }
}
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	889b      	ldrh	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d130      	bne.n	800920c <USBD_SetAddress+0x74>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d12c      	bne.n	800920c <USBD_SetAddress+0x74>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	2b7f      	cmp	r3, #127	; 0x7f
 80091b8:	d828      	bhi.n	800920c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d104      	bne.n	80091da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f989 	bl	80094ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d8:	e01c      	b.n	8009214 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	7bfa      	ldrb	r2, [r7, #15]
 80091de:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f002 fd7e 	bl	800bce8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fa45 	bl	800967c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009200:	e008      	b.n	8009214 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920a:	e003      	b.n	8009214 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f96b 	bl	80094ea <USBD_CtlError>
  }
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	885b      	ldrh	r3, [r3, #2]
 800922a:	b2da      	uxtb	r2, r3
 800922c:	4b41      	ldr	r3, [pc, #260]	; (8009334 <USBD_SetConfig+0x118>)
 800922e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009230:	4b40      	ldr	r3, [pc, #256]	; (8009334 <USBD_SetConfig+0x118>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d904      	bls.n	8009242 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f955 	bl	80094ea <USBD_CtlError>
 8009240:	e075      	b.n	800932e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009248:	2b02      	cmp	r3, #2
 800924a:	d002      	beq.n	8009252 <USBD_SetConfig+0x36>
 800924c:	2b03      	cmp	r3, #3
 800924e:	d023      	beq.n	8009298 <USBD_SetConfig+0x7c>
 8009250:	e062      	b.n	8009318 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009252:	4b38      	ldr	r3, [pc, #224]	; (8009334 <USBD_SetConfig+0x118>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01a      	beq.n	8009290 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800925a:	4b36      	ldr	r3, [pc, #216]	; (8009334 <USBD_SetConfig+0x118>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2203      	movs	r2, #3
 8009268:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800926c:	4b31      	ldr	r3, [pc, #196]	; (8009334 <USBD_SetConfig+0x118>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fa29 	bl	80086ca <USBD_SetClassConfig>
 8009278:	4603      	mov	r3, r0
 800927a:	2b02      	cmp	r3, #2
 800927c:	d104      	bne.n	8009288 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f932 	bl	80094ea <USBD_CtlError>
          return;
 8009286:	e052      	b.n	800932e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f9f7 	bl	800967c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800928e:	e04e      	b.n	800932e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f9f3 	bl	800967c <USBD_CtlSendStatus>
      break;
 8009296:	e04a      	b.n	800932e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009298:	4b26      	ldr	r3, [pc, #152]	; (8009334 <USBD_SetConfig+0x118>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d112      	bne.n	80092c6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80092a8:	4b22      	ldr	r3, [pc, #136]	; (8009334 <USBD_SetConfig+0x118>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80092b2:	4b20      	ldr	r3, [pc, #128]	; (8009334 <USBD_SetConfig+0x118>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff fa25 	bl	8008708 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9dc 	bl	800967c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80092c4:	e033      	b.n	800932e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80092c6:	4b1b      	ldr	r3, [pc, #108]	; (8009334 <USBD_SetConfig+0x118>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d01d      	beq.n	8009310 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fa13 	bl	8008708 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092e2:	4b14      	ldr	r3, [pc, #80]	; (8009334 <USBD_SetConfig+0x118>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092ec:	4b11      	ldr	r3, [pc, #68]	; (8009334 <USBD_SetConfig+0x118>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff f9e9 	bl	80086ca <USBD_SetClassConfig>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d104      	bne.n	8009308 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f8f2 	bl	80094ea <USBD_CtlError>
          return;
 8009306:	e012      	b.n	800932e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f9b7 	bl	800967c <USBD_CtlSendStatus>
      break;
 800930e:	e00e      	b.n	800932e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f9b3 	bl	800967c <USBD_CtlSendStatus>
      break;
 8009316:	e00a      	b.n	800932e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f8e5 	bl	80094ea <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009320:	4b04      	ldr	r3, [pc, #16]	; (8009334 <USBD_SetConfig+0x118>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff f9ee 	bl	8008708 <USBD_ClrClassConfig>
      break;
 800932c:	bf00      	nop
    }
  }
}
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20000458 	.word	0x20000458

08009338 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	88db      	ldrh	r3, [r3, #6]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d004      	beq.n	8009354 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f8cc 	bl	80094ea <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009352:	e021      	b.n	8009398 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800935a:	2b01      	cmp	r3, #1
 800935c:	db17      	blt.n	800938e <USBD_GetConfig+0x56>
 800935e:	2b02      	cmp	r3, #2
 8009360:	dd02      	ble.n	8009368 <USBD_GetConfig+0x30>
 8009362:	2b03      	cmp	r3, #3
 8009364:	d00b      	beq.n	800937e <USBD_GetConfig+0x46>
 8009366:	e012      	b.n	800938e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3308      	adds	r3, #8
 8009372:	2201      	movs	r2, #1
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f922 	bl	80095c0 <USBD_CtlSendData>
      break;
 800937c:	e00c      	b.n	8009398 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3304      	adds	r3, #4
 8009382:	2201      	movs	r2, #1
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f91a 	bl	80095c0 <USBD_CtlSendData>
      break;
 800938c:	e004      	b.n	8009398 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f8aa 	bl	80094ea <USBD_CtlError>
      break;
 8009396:	bf00      	nop
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093b0:	3b01      	subs	r3, #1
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d81e      	bhi.n	80093f4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	88db      	ldrh	r3, [r3, #6]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d004      	beq.n	80093c8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f892 	bl	80094ea <USBD_CtlError>
      break;
 80093c6:	e01a      	b.n	80093fe <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f043 0202 	orr.w	r2, r3, #2
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	330c      	adds	r3, #12
 80093e8:	2202      	movs	r2, #2
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f8e7 	bl	80095c0 <USBD_CtlSendData>
    break;
 80093f2:	e004      	b.n	80093fe <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f877 	bl	80094ea <USBD_CtlError>
    break;
 80093fc:	bf00      	nop
  }
}
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	885b      	ldrh	r3, [r3, #2]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d106      	bne.n	8009426 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f92b 	bl	800967c <USBD_CtlSendStatus>
  }

}
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
=======
 800db20:	b580      	push	{r7, lr}
 800db22:	b08a      	sub	sp, #40	; 0x28
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db28:	2300      	movs	r3, #0
 800db2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db2c:	f7fe ffb8 	bl	800caa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db30:	4b57      	ldr	r3, [pc, #348]	; (800dc90 <pvPortMalloc+0x170>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db38:	f000 f90c 	bl	800dd54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db3c:	4b55      	ldr	r3, [pc, #340]	; (800dc94 <pvPortMalloc+0x174>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4013      	ands	r3, r2
 800db44:	2b00      	cmp	r3, #0
 800db46:	f040 808c 	bne.w	800dc62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01c      	beq.n	800db8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800db50:	2208      	movs	r2, #8
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4413      	add	r3, r2
 800db56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f003 0307 	and.w	r3, r3, #7
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d013      	beq.n	800db8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f023 0307 	bic.w	r3, r3, #7
 800db68:	3308      	adds	r3, #8
 800db6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	2b00      	cmp	r3, #0
 800db74:	d009      	beq.n	800db8a <pvPortMalloc+0x6a>
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	617b      	str	r3, [r7, #20]
 800db88:	e7fe      	b.n	800db88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d068      	beq.n	800dc62 <pvPortMalloc+0x142>
 800db90:	4b41      	ldr	r3, [pc, #260]	; (800dc98 <pvPortMalloc+0x178>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	429a      	cmp	r2, r3
 800db98:	d863      	bhi.n	800dc62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db9a:	4b40      	ldr	r3, [pc, #256]	; (800dc9c <pvPortMalloc+0x17c>)
 800db9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db9e:	4b3f      	ldr	r3, [pc, #252]	; (800dc9c <pvPortMalloc+0x17c>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dba4:	e004      	b.n	800dbb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d903      	bls.n	800dbc2 <pvPortMalloc+0xa2>
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1f1      	bne.n	800dba6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbc2:	4b33      	ldr	r3, [pc, #204]	; (800dc90 <pvPortMalloc+0x170>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d04a      	beq.n	800dc62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2208      	movs	r2, #8
 800dbd2:	4413      	add	r3, r2
 800dbd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	685a      	ldr	r2, [r3, #4]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	1ad2      	subs	r2, r2, r3
 800dbe6:	2308      	movs	r3, #8
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d91e      	bls.n	800dc2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	f003 0307 	and.w	r3, r3, #7
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d009      	beq.n	800dc14 <pvPortMalloc+0xf4>
 800dc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc04:	f383 8811 	msr	BASEPRI, r3
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	613b      	str	r3, [r7, #16]
 800dc12:	e7fe      	b.n	800dc12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	1ad2      	subs	r2, r2, r3
 800dc1c:	69bb      	ldr	r3, [r7, #24]
 800dc1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc26:	69b8      	ldr	r0, [r7, #24]
 800dc28:	f000 f8f6 	bl	800de18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc2c:	4b1a      	ldr	r3, [pc, #104]	; (800dc98 <pvPortMalloc+0x178>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	4a18      	ldr	r2, [pc, #96]	; (800dc98 <pvPortMalloc+0x178>)
 800dc38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc3a:	4b17      	ldr	r3, [pc, #92]	; (800dc98 <pvPortMalloc+0x178>)
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	4b18      	ldr	r3, [pc, #96]	; (800dca0 <pvPortMalloc+0x180>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d203      	bcs.n	800dc4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc46:	4b14      	ldr	r3, [pc, #80]	; (800dc98 <pvPortMalloc+0x178>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a15      	ldr	r2, [pc, #84]	; (800dca0 <pvPortMalloc+0x180>)
 800dc4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	4b10      	ldr	r3, [pc, #64]	; (800dc94 <pvPortMalloc+0x174>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	431a      	orrs	r2, r3
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	2200      	movs	r2, #0
 800dc60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc62:	f7fe ff2b 	bl	800cabc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	f003 0307 	and.w	r3, r3, #7
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d009      	beq.n	800dc84 <pvPortMalloc+0x164>
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	e7fe      	b.n	800dc82 <pvPortMalloc+0x162>
	return pvReturn;
 800dc84:	69fb      	ldr	r3, [r7, #28]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3728      	adds	r7, #40	; 0x28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	200041a4 	.word	0x200041a4
 800dc94:	200041b0 	.word	0x200041b0
 800dc98:	200041a8 	.word	0x200041a8
 800dc9c:	2000419c 	.word	0x2000419c
 800dca0:	200041ac 	.word	0x200041ac

0800dca4 <vPortFree>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

0800942e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800943e:	3b01      	subs	r3, #1
 8009440:	2b02      	cmp	r3, #2
 8009442:	d80b      	bhi.n	800945c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	885b      	ldrh	r3, [r3, #2]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d10c      	bne.n	8009466 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f911 	bl	800967c <USBD_CtlSendStatus>
    }
    break;
 800945a:	e004      	b.n	8009466 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f843 	bl	80094ea <USBD_CtlError>
    break;
 8009464:	e000      	b.n	8009468 <USBD_ClrFeature+0x3a>
    break;
 8009466:	bf00      	nop
  }
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	785a      	ldrb	r2, [r3, #1]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	3302      	adds	r3, #2
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	b29a      	uxth	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3303      	adds	r3, #3
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	021b      	lsls	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	4413      	add	r3, r2
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	3304      	adds	r3, #4
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	3305      	adds	r3, #5
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	4413      	add	r3, r2
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	3306      	adds	r3, #6
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	3307      	adds	r3, #7
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4413      	add	r3, r2
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	80da      	strh	r2, [r3, #6]

}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80094f4:	2180      	movs	r1, #128	; 0x80
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f002 fb8c 	bl	800bc14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80094fc:	2100      	movs	r1, #0
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f002 fb88 	bl	800bc14 <USBD_LL_StallEP>
=======
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d046      	beq.n	800dd44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dcb6:	2308      	movs	r3, #8
 800dcb8:	425b      	negs	r3, r3
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	685a      	ldr	r2, [r3, #4]
 800dcc8:	4b20      	ldr	r3, [pc, #128]	; (800dd4c <vPortFree+0xa8>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4013      	ands	r3, r2
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d109      	bne.n	800dce6 <vPortFree+0x42>
 800dcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	60fb      	str	r3, [r7, #12]
 800dce4:	e7fe      	b.n	800dce4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d009      	beq.n	800dd02 <vPortFree+0x5e>
 800dcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	60bb      	str	r3, [r7, #8]
 800dd00:	e7fe      	b.n	800dd00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	4b11      	ldr	r3, [pc, #68]	; (800dd4c <vPortFree+0xa8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d019      	beq.n	800dd44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d115      	bne.n	800dd44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	4b0b      	ldr	r3, [pc, #44]	; (800dd4c <vPortFree+0xa8>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	43db      	mvns	r3, r3
 800dd22:	401a      	ands	r2, r3
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd28:	f7fe feba 	bl	800caa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <vPortFree+0xac>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4413      	add	r3, r2
 800dd36:	4a06      	ldr	r2, [pc, #24]	; (800dd50 <vPortFree+0xac>)
 800dd38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd3a:	6938      	ldr	r0, [r7, #16]
 800dd3c:	f000 f86c 	bl	800de18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dd40:	f7fe febc 	bl	800cabc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd44:	bf00      	nop
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	200041b0 	.word	0x200041b0
 800dd50:	200041a8 	.word	0x200041a8

0800dd54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
}
 8009504:	bf00      	nop
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d032      	beq.n	8009588 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f834 	bl	8009590 <USBD_GetLen>
 8009528:	4603      	mov	r3, r0
 800952a:	3301      	adds	r3, #1
 800952c:	b29b      	uxth	r3, r3
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	75fa      	strb	r2, [r7, #23]
 800953c:	461a      	mov	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	4413      	add	r3, r2
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	75fa      	strb	r2, [r7, #23]
 800954e:	461a      	mov	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	4413      	add	r3, r2
 8009554:	2203      	movs	r2, #3
 8009556:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009558:	e012      	b.n	8009580 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	60fa      	str	r2, [r7, #12]
 8009560:	7dfa      	ldrb	r2, [r7, #23]
 8009562:	1c51      	adds	r1, r2, #1
 8009564:	75f9      	strb	r1, [r7, #23]
 8009566:	4611      	mov	r1, r2
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	440a      	add	r2, r1
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	75fa      	strb	r2, [r7, #23]
 8009576:	461a      	mov	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4413      	add	r3, r2
 800957c:	2200      	movs	r2, #0
 800957e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e8      	bne.n	800955a <USBD_GetString+0x4e>
    }
  }
}
 8009588:	bf00      	nop
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800959c:	e005      	b.n	80095aa <USBD_GetLen+0x1a>
    {
        len++;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	3301      	adds	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3301      	adds	r3, #1
 80095a8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f5      	bne.n	800959e <USBD_GetLen+0xe>
    }

    return len;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2202      	movs	r2, #2
 80095d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80095d6:	88fa      	ldrh	r2, [r7, #6]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80095dc:	88fa      	ldrh	r2, [r7, #6]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80095e2:	88fb      	ldrh	r3, [r7, #6]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	2100      	movs	r1, #0
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f002 fb9c 	bl	800bd26 <USBD_LL_Transmit>

  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
=======
 800dd54:	b480      	push	{r7}
 800dd56:	b085      	sub	sp, #20
 800dd58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dd5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd60:	4b27      	ldr	r3, [pc, #156]	; (800de00 <prvHeapInit+0xac>)
 800dd62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f003 0307 	and.w	r3, r3, #7
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00c      	beq.n	800dd88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3307      	adds	r3, #7
 800dd72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f023 0307 	bic.w	r3, r3, #7
 800dd7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	4a1f      	ldr	r2, [pc, #124]	; (800de00 <prvHeapInit+0xac>)
 800dd84:	4413      	add	r3, r2
 800dd86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd8c:	4a1d      	ldr	r2, [pc, #116]	; (800de04 <prvHeapInit+0xb0>)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd92:	4b1c      	ldr	r3, [pc, #112]	; (800de04 <prvHeapInit+0xb0>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dda0:	2208      	movs	r2, #8
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f023 0307 	bic.w	r3, r3, #7
 800ddae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4a15      	ldr	r2, [pc, #84]	; (800de08 <prvHeapInit+0xb4>)
 800ddb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <prvHeapInit+0xb4>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ddbe:	4b12      	ldr	r3, [pc, #72]	; (800de08 <prvHeapInit+0xb4>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	1ad2      	subs	r2, r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ddd4:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <prvHeapInit+0xb4>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	4a0a      	ldr	r2, [pc, #40]	; (800de0c <prvHeapInit+0xb8>)
 800dde2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	4a09      	ldr	r2, [pc, #36]	; (800de10 <prvHeapInit+0xbc>)
 800ddea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ddec:	4b09      	ldr	r3, [pc, #36]	; (800de14 <prvHeapInit+0xc0>)
 800ddee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ddf2:	601a      	str	r2, [r3, #0]
}
 800ddf4:	bf00      	nop
 800ddf6:	3714      	adds	r7, #20
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	2000059c 	.word	0x2000059c
 800de04:	2000419c 	.word	0x2000419c
 800de08:	200041a4 	.word	0x200041a4
 800de0c:	200041ac 	.word	0x200041ac
 800de10:	200041a8 	.word	0x200041a8
 800de14:	200041b0 	.word	0x200041b0

0800de18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

080095f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	2100      	movs	r1, #0
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f002 fb8a 	bl	800bd26 <USBD_LL_Transmit>

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	4613      	mov	r3, r2
 8009628:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2203      	movs	r2, #3
 800962e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009632:	88fa      	ldrh	r2, [r7, #6]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800963a:	88fa      	ldrh	r2, [r7, #6]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	2100      	movs	r1, #0
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f002 fb8f 	bl	800bd6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	2100      	movs	r1, #0
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f002 fb7d 	bl	800bd6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2204      	movs	r2, #4
 8009688:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800968c:	2300      	movs	r3, #0
 800968e:	2200      	movs	r2, #0
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f002 fb47 	bl	800bd26 <USBD_LL_Transmit>

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2205      	movs	r2, #5
 80096ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80096b2:	2300      	movs	r3, #0
 80096b4:	2200      	movs	r2, #0
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 fb57 	bl	800bd6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80096d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096da:	2b84      	cmp	r3, #132	; 0x84
 80096dc:	d005      	beq.n	80096ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80096de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	3303      	adds	r3, #3
 80096e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80096ea:	68fb      	ldr	r3, [r7, #12]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096fe:	f3ef 8305 	mrs	r3, IPSR
 8009702:	607b      	str	r3, [r7, #4]
  return(result);
 8009704:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009706:	2b00      	cmp	r3, #0
 8009708:	bf14      	ite	ne
 800970a:	2301      	movne	r3, #1
 800970c:	2300      	moveq	r3, #0
 800970e:	b2db      	uxtb	r3, r3
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009720:	f000 fd70 	bl	800a204 <vTaskStartScheduler>
  
  return osOK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	bd80      	pop	{r7, pc}

0800972a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800972e:	f7ff ffe3 	bl	80096f8 <inHandlerMode>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009738:	f000 fe7c 	bl	800a434 <xTaskGetTickCountFromISR>
 800973c:	4603      	mov	r3, r0
 800973e:	e002      	b.n	8009746 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009740:	f000 fe68 	bl	800a414 <xTaskGetTickCount>
 8009744:	4603      	mov	r3, r0
  }
}
 8009746:	4618      	mov	r0, r3
 8009748:	bd80      	pop	{r7, pc}

0800974a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800974a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974c:	b089      	sub	sp, #36	; 0x24
 800974e:	af04      	add	r7, sp, #16
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d020      	beq.n	800979e <osThreadCreate+0x54>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01c      	beq.n	800979e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685c      	ldr	r4, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681d      	ldr	r5, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691e      	ldr	r6, [r3, #16]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff ffa6 	bl	80096c8 <makeFreeRtosPriority>
 800977c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009786:	9202      	str	r2, [sp, #8]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	9100      	str	r1, [sp, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	4632      	mov	r2, r6
 8009790:	4629      	mov	r1, r5
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fb7b 	bl	8009e8e <xTaskCreateStatic>
 8009798:	4603      	mov	r3, r0
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	e01c      	b.n	80097d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685c      	ldr	r4, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097aa:	b29e      	uxth	r6, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff ff88 	bl	80096c8 <makeFreeRtosPriority>
 80097b8:	4602      	mov	r2, r0
 80097ba:	f107 030c 	add.w	r3, r7, #12
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	9200      	str	r2, [sp, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	4632      	mov	r2, r6
 80097c6:	4629      	mov	r1, r5
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 fbb9 	bl	8009f40 <xTaskCreate>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d001      	beq.n	80097d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	e000      	b.n	80097da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80097d8:	68fb      	ldr	r3, [r7, #12]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <osDelay+0x16>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	e000      	b.n	80097fa <osDelay+0x18>
 80097f8:	2301      	movs	r3, #1
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fcce 	bl	800a19c <vTaskDelay>
  
  return osOK;
 8009800:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009818:	2300      	movs	r3, #0
 800981a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800981c:	f7ff ff6c 	bl	80096f8 <inHandlerMode>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d016      	beq.n	8009854 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009826:	f107 0308 	add.w	r3, r7, #8
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f9d1 	bl	8009bd4 <xQueueGiveFromISR>
 8009832:	4603      	mov	r3, r0
 8009834:	2b01      	cmp	r3, #1
 8009836:	d001      	beq.n	800983c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009838:	23ff      	movs	r3, #255	; 0xff
 800983a:	e017      	b.n	800986c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d013      	beq.n	800986a <osSemaphoreRelease+0x5e>
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <osSemaphoreRelease+0x68>)
 8009844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	e00a      	b.n	800986a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009854:	2300      	movs	r3, #0
 8009856:	2200      	movs	r2, #0
 8009858:	2100      	movs	r1, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f8c0 	bl	80099e0 <xQueueGenericSend>
 8009860:	4603      	mov	r3, r0
 8009862:	2b01      	cmp	r3, #1
 8009864:	d001      	beq.n	800986a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009866:	23ff      	movs	r3, #255	; 0xff
 8009868:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800986a:	68fb      	ldr	r3, [r7, #12]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f103 0208 	add.w	r2, r3, #8
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f103 0208 	add.w	r2, r3, #8
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f103 0208 	add.w	r2, r3, #8
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	601a      	str	r2, [r3, #0]
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009930:	d103      	bne.n	800993a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e00c      	b.n	8009954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3308      	adds	r3, #8
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e002      	b.n	8009948 <vListInsert+0x2e>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	429a      	cmp	r2, r3
 8009952:	d2f6      	bcs.n	8009942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	601a      	str	r2, [r3, #0]
}
 8009980:	bf00      	nop
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	6892      	ldr	r2, [r2, #8]
 80099a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6852      	ldr	r2, [r2, #4]
 80099ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d103      	bne.n	80099c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	1e5a      	subs	r2, r3, #1
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08e      	sub	sp, #56	; 0x38
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099ee:	2300      	movs	r3, #0
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a0e:	e7fe      	b.n	8009a0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <xQueueGenericSend+0x3e>
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <xQueueGenericSend+0x42>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <xQueueGenericSend+0x44>
 8009a22:	2300      	movs	r3, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d109      	bne.n	8009a3c <xQueueGenericSend+0x5c>
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3a:	e7fe      	b.n	8009a3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d103      	bne.n	8009a4a <xQueueGenericSend+0x6a>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <xQueueGenericSend+0x6e>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <xQueueGenericSend+0x70>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d109      	bne.n	8009a68 <xQueueGenericSend+0x88>
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623b      	str	r3, [r7, #32]
 8009a66:	e7fe      	b.n	8009a66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a68:	f000 ffec 	bl	800aa44 <xTaskGetSchedulerState>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <xQueueGenericSend+0x98>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <xQueueGenericSend+0x9c>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <xQueueGenericSend+0x9e>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <xQueueGenericSend+0xb6>
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	e7fe      	b.n	8009a94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a96:	f001 fa01 	bl	800ae9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d302      	bcc.n	8009aac <xQueueGenericSend+0xcc>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d129      	bne.n	8009b00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ab2:	f000 f918 	bl	8009ce6 <prvCopyDataToQueue>
 8009ab6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d010      	beq.n	8009ae2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	3324      	adds	r3, #36	; 0x24
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fe01 	bl	800a6cc <xTaskRemoveFromEventList>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d013      	beq.n	8009af8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ad0:	4b3f      	ldr	r3, [pc, #252]	; (8009bd0 <xQueueGenericSend+0x1f0>)
 8009ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	e00a      	b.n	8009af8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d007      	beq.n	8009af8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ae8:	4b39      	ldr	r3, [pc, #228]	; (8009bd0 <xQueueGenericSend+0x1f0>)
 8009aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009af8:	f001 f9fe 	bl	800aef8 <vPortExitCritical>
				return pdPASS;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e063      	b.n	8009bc8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d103      	bne.n	8009b0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b06:	f001 f9f7 	bl	800aef8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e05c      	b.n	8009bc8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d106      	bne.n	8009b22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fe39 	bl	800a790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b22:	f001 f9e9 	bl	800aef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b26:	f000 fbcb 	bl	800a2c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b2a:	f001 f9b7 	bl	800ae9c <vPortEnterCritical>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b34:	b25b      	sxtb	r3, r3
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b3a:	d103      	bne.n	8009b44 <xQueueGenericSend+0x164>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b4a:	b25b      	sxtb	r3, r3
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b50:	d103      	bne.n	8009b5a <xQueueGenericSend+0x17a>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b5a:	f001 f9cd 	bl	800aef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b5e:	1d3a      	adds	r2, r7, #4
 8009b60:	f107 0314 	add.w	r3, r7, #20
 8009b64:	4611      	mov	r1, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fe28 	bl	800a7bc <xTaskCheckForTimeOut>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d124      	bne.n	8009bbc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b74:	f000 f973 	bl	8009e5e <prvIsQueueFull>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d018      	beq.n	8009bb0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	3310      	adds	r3, #16
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fd7c 	bl	800a684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b8e:	f000 f914 	bl	8009dba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b92:	f000 fba3 	bl	800a2dc <xTaskResumeAll>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f47f af7c 	bne.w	8009a96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <xQueueGenericSend+0x1f0>)
 8009ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	e772      	b.n	8009a96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bb2:	f000 f902 	bl	8009dba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bb6:	f000 fb91 	bl	800a2dc <xTaskResumeAll>
 8009bba:	e76c      	b.n	8009a96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bbe:	f000 f8fc 	bl	8009dba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bc2:	f000 fb8b 	bl	800a2dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bc6:	2300      	movs	r3, #0
		}
	}
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3738      	adds	r7, #56	; 0x38
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08e      	sub	sp, #56	; 0x38
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d109      	bne.n	8009bfc <xQueueGiveFromISR+0x28>
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	623b      	str	r3, [r7, #32]
 8009bfa:	e7fe      	b.n	8009bfa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d009      	beq.n	8009c18 <xQueueGiveFromISR+0x44>
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	61fb      	str	r3, [r7, #28]
 8009c16:	e7fe      	b.n	8009c16 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <xQueueGiveFromISR+0x54>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <xQueueGiveFromISR+0x58>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <xQueueGiveFromISR+0x5a>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <xQueueGiveFromISR+0x72>
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	e7fe      	b.n	8009c44 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c46:	f001 fa05 	bl	800b054 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	617a      	str	r2, [r7, #20]
 8009c60:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d22b      	bcs.n	8009cce <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c90:	d112      	bne.n	8009cb8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d016      	beq.n	8009cc8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	3324      	adds	r3, #36	; 0x24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fd14 	bl	800a6cc <xTaskRemoveFromEventList>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00e      	beq.n	8009cc8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00b      	beq.n	8009cc8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e007      	b.n	8009cc8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	b25a      	sxtb	r2, r3
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	637b      	str	r3, [r7, #52]	; 0x34
 8009ccc:	e001      	b.n	8009cd2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3738      	adds	r7, #56	; 0x38
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10d      	bne.n	8009d20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d14d      	bne.n	8009da8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 feb5 	bl	800aa80 <xTaskPriorityDisinherit>
 8009d16:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
 8009d1e:	e043      	b.n	8009da8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d119      	bne.n	8009d5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6898      	ldr	r0, [r3, #8]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	f002 f8b1 	bl	800be98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	441a      	add	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d32b      	bcc.n	8009da8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	609a      	str	r2, [r3, #8]
 8009d58:	e026      	b.n	8009da8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68d8      	ldr	r0, [r3, #12]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	461a      	mov	r2, r3
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	f002 f897 	bl	800be98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	425b      	negs	r3, r3
 8009d74:	441a      	add	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d207      	bcs.n	8009d96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	685a      	ldr	r2, [r3, #4]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	425b      	negs	r3, r3
 8009d90:	441a      	add	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d105      	bne.n	8009da8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009db0:	697b      	ldr	r3, [r7, #20]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dc2:	f001 f86b 	bl	800ae9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dcc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dce:	e011      	b.n	8009df4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d012      	beq.n	8009dfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3324      	adds	r3, #36	; 0x24
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 fc75 	bl	800a6cc <xTaskRemoveFromEventList>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009de8:	f000 fd48 	bl	800a87c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dce9      	bgt.n	8009dd0 <prvUnlockQueue+0x16>
 8009dfc:	e000      	b.n	8009e00 <prvUnlockQueue+0x46>
					break;
 8009dfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	22ff      	movs	r2, #255	; 0xff
 8009e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e08:	f001 f876 	bl	800aef8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e0c:	f001 f846 	bl	800ae9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e18:	e011      	b.n	8009e3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d012      	beq.n	8009e48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3310      	adds	r3, #16
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fc50 	bl	800a6cc <xTaskRemoveFromEventList>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e32:	f000 fd23 	bl	800a87c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	dce9      	bgt.n	8009e1a <prvUnlockQueue+0x60>
 8009e46:	e000      	b.n	8009e4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	22ff      	movs	r2, #255	; 0xff
 8009e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e52:	f001 f851 	bl	800aef8 <vPortExitCritical>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e66:	f001 f819 	bl	800ae9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d102      	bne.n	8009e7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e76:	2301      	movs	r3, #1
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e001      	b.n	8009e80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e80:	f001 f83a 	bl	800aef8 <vPortExitCritical>

	return xReturn;
 8009e84:	68fb      	ldr	r3, [r7, #12]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b08e      	sub	sp, #56	; 0x38
 8009e92:	af04      	add	r7, sp, #16
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <xTaskCreateStatic+0x28>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	623b      	str	r3, [r7, #32]
 8009eb4:	e7fe      	b.n	8009eb4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d109      	bne.n	8009ed0 <xTaskCreateStatic+0x42>
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	e7fe      	b.n	8009ece <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ed0:	2354      	movs	r3, #84	; 0x54
 8009ed2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b54      	cmp	r3, #84	; 0x54
 8009ed8:	d009      	beq.n	8009eee <xTaskCreateStatic+0x60>
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	61bb      	str	r3, [r7, #24]
 8009eec:	e7fe      	b.n	8009eec <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01e      	beq.n	8009f32 <xTaskCreateStatic+0xa4>
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01b      	beq.n	8009f32 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	f107 0314 	add.w	r3, r7, #20
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f850 	bl	8009fca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f2c:	f000 f8cc 	bl	800a0c8 <prvAddNewTaskToReadyList>
 8009f30:	e001      	b.n	8009f36 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f36:	697b      	ldr	r3, [r7, #20]
	}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3728      	adds	r7, #40	; 0x28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08c      	sub	sp, #48	; 0x30
 8009f44:	af04      	add	r7, sp, #16
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f50:	88fb      	ldrh	r3, [r7, #6]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 f8bb 	bl	800b0d0 <pvPortMalloc>
 8009f5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00e      	beq.n	8009f80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009f62:	2054      	movs	r0, #84	; 0x54
 8009f64:	f001 f8b4 	bl	800b0d0 <pvPortMalloc>
 8009f68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	631a      	str	r2, [r3, #48]	; 0x30
 8009f76:	e005      	b.n	8009f84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f78:	6978      	ldr	r0, [r7, #20]
 8009f7a:	f001 f96b 	bl	800b254 <vPortFree>
 8009f7e:	e001      	b.n	8009f84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d017      	beq.n	8009fba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f92:	88fa      	ldrh	r2, [r7, #6]
 8009f94:	2300      	movs	r3, #0
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 f80e 	bl	8009fca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fae:	69f8      	ldr	r0, [r7, #28]
 8009fb0:	f000 f88a 	bl	800a0c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	e002      	b.n	8009fc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3720      	adds	r7, #32
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b088      	sub	sp, #32
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	607a      	str	r2, [r7, #4]
 8009fd6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f003 0307 	and.w	r3, r3, #7
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d009      	beq.n	800a010 <prvInitialiseNewTask+0x46>
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	e7fe      	b.n	800a00e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a010:	2300      	movs	r3, #0
 800a012:	61fb      	str	r3, [r7, #28]
 800a014:	e012      	b.n	800a03c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	7819      	ldrb	r1, [r3, #0]
 800a01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	3334      	adds	r3, #52	; 0x34
 800a026:	460a      	mov	r2, r1
 800a028:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	4413      	add	r3, r2
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d006      	beq.n	800a044 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	3301      	adds	r3, #1
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	2b0f      	cmp	r3, #15
 800a040:	d9e9      	bls.n	800a016 <prvInitialiseNewTask+0x4c>
 800a042:	e000      	b.n	800a046 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a044:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	2b06      	cmp	r3, #6
 800a052:	d901      	bls.n	800a058 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a054:	2306      	movs	r3, #6
 800a056:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a05c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a062:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	2200      	movs	r2, #0
 800a068:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	3304      	adds	r3, #4
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fc22 	bl	80098b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	3318      	adds	r3, #24
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff fc1d 	bl	80098b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	f1c3 0207 	rsb	r2, r3, #7
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	68f9      	ldr	r1, [r7, #12]
 800a0a6:	69b8      	ldr	r0, [r7, #24]
 800a0a8:	f000 fdd4 	bl	800ac54 <pxPortInitialiseStack>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0be:	bf00      	nop
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0d0:	f000 fee4 	bl	800ae9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0d4:	4b2a      	ldr	r3, [pc, #168]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	4a29      	ldr	r2, [pc, #164]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0de:	4b29      	ldr	r3, [pc, #164]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0e6:	4a27      	ldr	r2, [pc, #156]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0ec:	4b24      	ldr	r3, [pc, #144]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d110      	bne.n	800a116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0f4:	f000 fbe6 	bl	800a8c4 <prvInitialiseTaskLists>
 800a0f8:	e00d      	b.n	800a116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <prvAddNewTaskToReadyList+0xc0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a102:	4b20      	ldr	r3, [pc, #128]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d802      	bhi.n	800a116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a110:	4a1c      	ldr	r2, [pc, #112]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a116:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <prvAddNewTaskToReadyList+0xc4>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	4a1b      	ldr	r2, [pc, #108]	; (800a18c <prvAddNewTaskToReadyList+0xc4>)
 800a11e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	2201      	movs	r2, #1
 800a126:	409a      	lsls	r2, r3
 800a128:	4b19      	ldr	r3, [pc, #100]	; (800a190 <prvAddNewTaskToReadyList+0xc8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	4a18      	ldr	r2, [pc, #96]	; (800a190 <prvAddNewTaskToReadyList+0xc8>)
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4a15      	ldr	r2, [pc, #84]	; (800a194 <prvAddNewTaskToReadyList+0xcc>)
 800a140:	441a      	add	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3304      	adds	r3, #4
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7ff fbc2 	bl	80098d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a14e:	f000 fed3 	bl	800aef8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a152:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <prvAddNewTaskToReadyList+0xc0>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00e      	beq.n	800a178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a15a:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	429a      	cmp	r2, r3
 800a166:	d207      	bcs.n	800a178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <prvAddNewTaskToReadyList+0xd0>)
 800a16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	2000055c 	.word	0x2000055c
 800a184:	2000045c 	.word	0x2000045c
 800a188:	20000568 	.word	0x20000568
 800a18c:	20000578 	.word	0x20000578
 800a190:	20000564 	.word	0x20000564
 800a194:	20000460 	.word	0x20000460
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d016      	beq.n	800a1dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ae:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <vTaskDelay+0x60>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d009      	beq.n	800a1ca <vTaskDelay+0x2e>
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	60bb      	str	r3, [r7, #8]
 800a1c8:	e7fe      	b.n	800a1c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a1ca:	f000 f879 	bl	800a2c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fcd9 	bl	800ab88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1d6:	f000 f881 	bl	800a2dc <xTaskResumeAll>
 800a1da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d107      	bne.n	800a1f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a1e2:	4b07      	ldr	r3, [pc, #28]	; (800a200 <vTaskDelay+0x64>)
 800a1e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1f2:	bf00      	nop
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000584 	.word	0x20000584
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	; 0x28
 800a208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a212:	463a      	mov	r2, r7
 800a214:	1d39      	adds	r1, r7, #4
 800a216:	f107 0308 	add.w	r3, r7, #8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f6 fc94 	bl	8000b48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	9202      	str	r2, [sp, #8]
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	2300      	movs	r3, #0
 800a230:	460a      	mov	r2, r1
 800a232:	491d      	ldr	r1, [pc, #116]	; (800a2a8 <vTaskStartScheduler+0xa4>)
 800a234:	481d      	ldr	r0, [pc, #116]	; (800a2ac <vTaskStartScheduler+0xa8>)
 800a236:	f7ff fe2a 	bl	8009e8e <xTaskCreateStatic>
 800a23a:	4602      	mov	r2, r0
 800a23c:	4b1c      	ldr	r3, [pc, #112]	; (800a2b0 <vTaskStartScheduler+0xac>)
 800a23e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a240:	4b1b      	ldr	r3, [pc, #108]	; (800a2b0 <vTaskStartScheduler+0xac>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a248:	2301      	movs	r3, #1
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	e001      	b.n	800a252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d115      	bne.n	800a284 <vTaskStartScheduler+0x80>
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a26a:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <vTaskStartScheduler+0xb0>)
 800a26c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a270:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a272:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <vTaskStartScheduler+0xb4>)
 800a274:	2201      	movs	r2, #1
 800a276:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a278:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <vTaskStartScheduler+0xb8>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a27e:	f000 fd6f 	bl	800ad60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a282:	e00d      	b.n	800a2a0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28a:	d109      	bne.n	800a2a0 <vTaskStartScheduler+0x9c>
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	e7fe      	b.n	800a29e <vTaskStartScheduler+0x9a>
}
 800a2a0:	bf00      	nop
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	0800c818 	.word	0x0800c818
 800a2ac:	0800a895 	.word	0x0800a895
 800a2b0:	20000580 	.word	0x20000580
 800a2b4:	2000057c 	.word	0x2000057c
 800a2b8:	20000568 	.word	0x20000568
 800a2bc:	20000560 	.word	0x20000560

0800a2c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <vTaskSuspendAll+0x18>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	4a03      	ldr	r2, [pc, #12]	; (800a2d8 <vTaskSuspendAll+0x18>)
 800a2cc:	6013      	str	r3, [r2, #0]
}
 800a2ce:	bf00      	nop
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	20000584 	.word	0x20000584

0800a2dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2ea:	4b41      	ldr	r3, [pc, #260]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d109      	bne.n	800a306 <xTaskResumeAll+0x2a>
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	e7fe      	b.n	800a304 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a306:	f000 fdc9 	bl	800ae9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a30a:	4b39      	ldr	r3, [pc, #228]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3b01      	subs	r3, #1
 800a310:	4a37      	ldr	r2, [pc, #220]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a312:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a314:	4b36      	ldr	r3, [pc, #216]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d161      	bne.n	800a3e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a31c:	4b35      	ldr	r3, [pc, #212]	; (800a3f4 <xTaskResumeAll+0x118>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d05d      	beq.n	800a3e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a324:	e02e      	b.n	800a384 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a326:	4b34      	ldr	r3, [pc, #208]	; (800a3f8 <xTaskResumeAll+0x11c>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3318      	adds	r3, #24
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff fb2a 	bl	800998c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fb25 	bl	800998c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	2201      	movs	r2, #1
 800a348:	409a      	lsls	r2, r3
 800a34a:	4b2c      	ldr	r3, [pc, #176]	; (800a3fc <xTaskResumeAll+0x120>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4313      	orrs	r3, r2
 800a350:	4a2a      	ldr	r2, [pc, #168]	; (800a3fc <xTaskResumeAll+0x120>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a27      	ldr	r2, [pc, #156]	; (800a400 <xTaskResumeAll+0x124>)
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7ff fab1 	bl	80098d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	4b23      	ldr	r3, [pc, #140]	; (800a404 <xTaskResumeAll+0x128>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d302      	bcc.n	800a384 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a37e:	4b22      	ldr	r3, [pc, #136]	; (800a408 <xTaskResumeAll+0x12c>)
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a384:	4b1c      	ldr	r3, [pc, #112]	; (800a3f8 <xTaskResumeAll+0x11c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1cc      	bne.n	800a326 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a392:	f000 fb31 	bl	800a9f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <xTaskResumeAll+0x130>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d010      	beq.n	800a3c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f000 f859 	bl	800a458 <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a3ac:	4b16      	ldr	r3, [pc, #88]	; (800a408 <xTaskResumeAll+0x12c>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f1      	bne.n	800a3a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a3be:	4b13      	ldr	r3, [pc, #76]	; (800a40c <xTaskResumeAll+0x130>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3c4:	4b10      	ldr	r3, [pc, #64]	; (800a408 <xTaskResumeAll+0x12c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3d0:	4b0f      	ldr	r3, [pc, #60]	; (800a410 <xTaskResumeAll+0x134>)
 800a3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3e0:	f000 fd8a 	bl	800aef8 <vPortExitCritical>

	return xAlreadyYielded;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000584 	.word	0x20000584
 800a3f4:	2000055c 	.word	0x2000055c
 800a3f8:	2000051c 	.word	0x2000051c
 800a3fc:	20000564 	.word	0x20000564
 800a400:	20000460 	.word	0x20000460
 800a404:	2000045c 	.word	0x2000045c
 800a408:	20000570 	.word	0x20000570
 800a40c:	2000056c 	.word	0x2000056c
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <xTaskGetTickCount+0x1c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a420:	687b      	ldr	r3, [r7, #4]
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20000560 	.word	0x20000560

0800a434 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a43a:	f000 fe0b 	bl	800b054 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a43e:	2300      	movs	r3, #0
 800a440:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a442:	4b04      	ldr	r3, [pc, #16]	; (800a454 <xTaskGetTickCountFromISR+0x20>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a448:	683b      	ldr	r3, [r7, #0]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000560 	.word	0x20000560

0800a458 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a45e:	2300      	movs	r3, #0
 800a460:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a462:	4b50      	ldr	r3, [pc, #320]	; (800a5a4 <xTaskIncrementTick+0x14c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f040 808c 	bne.w	800a584 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a46c:	4b4e      	ldr	r3, [pc, #312]	; (800a5a8 <xTaskIncrementTick+0x150>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a474:	4a4c      	ldr	r2, [pc, #304]	; (800a5a8 <xTaskIncrementTick+0x150>)
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d11f      	bne.n	800a4c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a480:	4b4a      	ldr	r3, [pc, #296]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <xTaskIncrementTick+0x46>
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	e7fe      	b.n	800a49c <xTaskIncrementTick+0x44>
 800a49e:	4b43      	ldr	r3, [pc, #268]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	4b42      	ldr	r3, [pc, #264]	; (800a5b0 <xTaskIncrementTick+0x158>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a40      	ldr	r2, [pc, #256]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	4a40      	ldr	r2, [pc, #256]	; (800a5b0 <xTaskIncrementTick+0x158>)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	4b40      	ldr	r3, [pc, #256]	; (800a5b4 <xTaskIncrementTick+0x15c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	4a3e      	ldr	r2, [pc, #248]	; (800a5b4 <xTaskIncrementTick+0x15c>)
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	f000 fa9c 	bl	800a9f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4c0:	4b3d      	ldr	r3, [pc, #244]	; (800a5b8 <xTaskIncrementTick+0x160>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d34d      	bcc.n	800a566 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ca:	4b38      	ldr	r3, [pc, #224]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <xTaskIncrementTick+0x80>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <xTaskIncrementTick+0x82>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4de:	4b36      	ldr	r3, [pc, #216]	; (800a5b8 <xTaskIncrementTick+0x160>)
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4e4:	601a      	str	r2, [r3, #0]
					break;
 800a4e6:	e03e      	b.n	800a566 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4e8:	4b30      	ldr	r3, [pc, #192]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d203      	bcs.n	800a508 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a500:	4a2d      	ldr	r2, [pc, #180]	; (800a5b8 <xTaskIncrementTick+0x160>)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6013      	str	r3, [r2, #0]
						break;
 800a506:	e02e      	b.n	800a566 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fa3d 	bl	800998c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	2b00      	cmp	r3, #0
 800a518:	d004      	beq.n	800a524 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	3318      	adds	r3, #24
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fa34 	bl	800998c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	2201      	movs	r2, #1
 800a52a:	409a      	lsls	r2, r3
 800a52c:	4b23      	ldr	r3, [pc, #140]	; (800a5bc <xTaskIncrementTick+0x164>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4313      	orrs	r3, r2
 800a532:	4a22      	ldr	r2, [pc, #136]	; (800a5bc <xTaskIncrementTick+0x164>)
 800a534:	6013      	str	r3, [r2, #0]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <xTaskIncrementTick+0x168>)
 800a544:	441a      	add	r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3304      	adds	r3, #4
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f7ff f9c0 	bl	80098d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <xTaskIncrementTick+0x16c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d3b4      	bcc.n	800a4ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a564:	e7b1      	b.n	800a4ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a566:	4b17      	ldr	r3, [pc, #92]	; (800a5c4 <xTaskIncrementTick+0x16c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56c:	4914      	ldr	r1, [pc, #80]	; (800a5c0 <xTaskIncrementTick+0x168>)
 800a56e:	4613      	mov	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	440b      	add	r3, r1
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d907      	bls.n	800a58e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a57e:	2301      	movs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	e004      	b.n	800a58e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a584:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <xTaskIncrementTick+0x170>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3301      	adds	r3, #1
 800a58a:	4a0f      	ldr	r2, [pc, #60]	; (800a5c8 <xTaskIncrementTick+0x170>)
 800a58c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a58e:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <xTaskIncrementTick+0x174>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a596:	2301      	movs	r3, #1
 800a598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a59a:	697b      	ldr	r3, [r7, #20]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000584 	.word	0x20000584
 800a5a8:	20000560 	.word	0x20000560
 800a5ac:	20000514 	.word	0x20000514
 800a5b0:	20000518 	.word	0x20000518
 800a5b4:	20000574 	.word	0x20000574
 800a5b8:	2000057c 	.word	0x2000057c
 800a5bc:	20000564 	.word	0x20000564
 800a5c0:	20000460 	.word	0x20000460
 800a5c4:	2000045c 	.word	0x2000045c
 800a5c8:	2000056c 	.word	0x2000056c
 800a5cc:	20000570 	.word	0x20000570

0800a5d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5d6:	4b26      	ldr	r3, [pc, #152]	; (800a670 <vTaskSwitchContext+0xa0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5de:	4b25      	ldr	r3, [pc, #148]	; (800a674 <vTaskSwitchContext+0xa4>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5e4:	e03e      	b.n	800a664 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a5e6:	4b23      	ldr	r3, [pc, #140]	; (800a674 <vTaskSwitchContext+0xa4>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a5ec:	4b22      	ldr	r3, [pc, #136]	; (800a678 <vTaskSwitchContext+0xa8>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	fab3 f383 	clz	r3, r3
 800a5f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	f1c3 031f 	rsb	r3, r3, #31
 800a600:	617b      	str	r3, [r7, #20]
 800a602:	491e      	ldr	r1, [pc, #120]	; (800a67c <vTaskSwitchContext+0xac>)
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	607b      	str	r3, [r7, #4]
 800a628:	e7fe      	b.n	800a628 <vTaskSwitchContext+0x58>
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a11      	ldr	r2, [pc, #68]	; (800a67c <vTaskSwitchContext+0xac>)
 800a636:	4413      	add	r3, r2
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	605a      	str	r2, [r3, #4]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	3308      	adds	r3, #8
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d104      	bne.n	800a65a <vTaskSwitchContext+0x8a>
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	605a      	str	r2, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	4a07      	ldr	r2, [pc, #28]	; (800a680 <vTaskSwitchContext+0xb0>)
 800a662:	6013      	str	r3, [r2, #0]
}
 800a664:	bf00      	nop
 800a666:	371c      	adds	r7, #28
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	20000584 	.word	0x20000584
 800a674:	20000570 	.word	0x20000570
 800a678:	20000564 	.word	0x20000564
 800a67c:	20000460 	.word	0x20000460
 800a680:	2000045c 	.word	0x2000045c

0800a684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <vTaskPlaceOnEventList+0x24>
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	e7fe      	b.n	800a6a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6a8:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <vTaskPlaceOnEventList+0x44>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3318      	adds	r3, #24
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff f932 	bl	800991a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	6838      	ldr	r0, [r7, #0]
 800a6ba:	f000 fa65 	bl	800ab88 <prvAddCurrentTaskToDelayedList>
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	2000045c 	.word	0x2000045c

0800a6cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d109      	bne.n	800a6f6 <xTaskRemoveFromEventList+0x2a>
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e7fe      	b.n	800a6f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	3318      	adds	r3, #24
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff f946 	bl	800998c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a700:	4b1d      	ldr	r3, [pc, #116]	; (800a778 <xTaskRemoveFromEventList+0xac>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11c      	bne.n	800a742 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff f93d 	bl	800998c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	2201      	movs	r2, #1
 800a718:	409a      	lsls	r2, r3
 800a71a:	4b18      	ldr	r3, [pc, #96]	; (800a77c <xTaskRemoveFromEventList+0xb0>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4313      	orrs	r3, r2
 800a720:	4a16      	ldr	r2, [pc, #88]	; (800a77c <xTaskRemoveFromEventList+0xb0>)
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a13      	ldr	r2, [pc, #76]	; (800a780 <xTaskRemoveFromEventList+0xb4>)
 800a732:	441a      	add	r2, r3
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7ff f8c9 	bl	80098d2 <vListInsertEnd>
 800a740:	e005      	b.n	800a74e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	3318      	adds	r3, #24
 800a746:	4619      	mov	r1, r3
 800a748:	480e      	ldr	r0, [pc, #56]	; (800a784 <xTaskRemoveFromEventList+0xb8>)
 800a74a:	f7ff f8c2 	bl	80098d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a752:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <xTaskRemoveFromEventList+0xbc>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	429a      	cmp	r2, r3
 800a75a:	d905      	bls.n	800a768 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a75c:	2301      	movs	r3, #1
 800a75e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <xTaskRemoveFromEventList+0xc0>)
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	e001      	b.n	800a76c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a76c:	697b      	ldr	r3, [r7, #20]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000584 	.word	0x20000584
 800a77c:	20000564 	.word	0x20000564
 800a780:	20000460 	.word	0x20000460
 800a784:	2000051c 	.word	0x2000051c
 800a788:	2000045c 	.word	0x2000045c
 800a78c:	20000570 	.word	0x20000570

0800a790 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a798:	4b06      	ldr	r3, [pc, #24]	; (800a7b4 <vTaskInternalSetTimeOutState+0x24>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <vTaskInternalSetTimeOutState+0x28>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	605a      	str	r2, [r3, #4]
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	20000574 	.word	0x20000574
 800a7b8:	20000560 	.word	0x20000560

0800a7bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d109      	bne.n	800a7e0 <xTaskCheckForTimeOut+0x24>
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	e7fe      	b.n	800a7de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d109      	bne.n	800a7fa <xTaskCheckForTimeOut+0x3e>
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e7fe      	b.n	800a7f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a7fa:	f000 fb4f 	bl	800ae9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7fe:	4b1d      	ldr	r3, [pc, #116]	; (800a874 <xTaskCheckForTimeOut+0xb8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a816:	d102      	bne.n	800a81e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a818:	2300      	movs	r3, #0
 800a81a:	61fb      	str	r3, [r7, #28]
 800a81c:	e023      	b.n	800a866 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <xTaskCheckForTimeOut+0xbc>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d007      	beq.n	800a83a <xTaskCheckForTimeOut+0x7e>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	d302      	bcc.n	800a83a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	61fb      	str	r3, [r7, #28]
 800a838:	e015      	b.n	800a866 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	429a      	cmp	r2, r3
 800a842:	d20b      	bcs.n	800a85c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff ff9d 	bl	800a790 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	e004      	b.n	800a866 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a862:	2301      	movs	r3, #1
 800a864:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a866:	f000 fb47 	bl	800aef8 <vPortExitCritical>

	return xReturn;
 800a86a:	69fb      	ldr	r3, [r7, #28]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000560 	.word	0x20000560
 800a878:	20000574 	.word	0x20000574

0800a87c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a880:	4b03      	ldr	r3, [pc, #12]	; (800a890 <vTaskMissedYield+0x14>)
 800a882:	2201      	movs	r2, #1
 800a884:	601a      	str	r2, [r3, #0]
}
 800a886:	bf00      	nop
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20000570 	.word	0x20000570

0800a894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a89c:	f000 f852 	bl	800a944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <prvIdleTask+0x28>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d9f9      	bls.n	800a89c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <prvIdleTask+0x2c>)
 800a8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8b8:	e7f0      	b.n	800a89c <prvIdleTask+0x8>
 800a8ba:	bf00      	nop
 800a8bc:	20000460 	.word	0x20000460
 800a8c0:	e000ed04 	.word	0xe000ed04

0800a8c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	607b      	str	r3, [r7, #4]
 800a8ce:	e00c      	b.n	800a8ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4a12      	ldr	r2, [pc, #72]	; (800a924 <prvInitialiseTaskLists+0x60>)
 800a8dc:	4413      	add	r3, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe ffca 	bl	8009878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b06      	cmp	r3, #6
 800a8ee:	d9ef      	bls.n	800a8d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8f0:	480d      	ldr	r0, [pc, #52]	; (800a928 <prvInitialiseTaskLists+0x64>)
 800a8f2:	f7fe ffc1 	bl	8009878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8f6:	480d      	ldr	r0, [pc, #52]	; (800a92c <prvInitialiseTaskLists+0x68>)
 800a8f8:	f7fe ffbe 	bl	8009878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8fc:	480c      	ldr	r0, [pc, #48]	; (800a930 <prvInitialiseTaskLists+0x6c>)
 800a8fe:	f7fe ffbb 	bl	8009878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a902:	480c      	ldr	r0, [pc, #48]	; (800a934 <prvInitialiseTaskLists+0x70>)
 800a904:	f7fe ffb8 	bl	8009878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a908:	480b      	ldr	r0, [pc, #44]	; (800a938 <prvInitialiseTaskLists+0x74>)
 800a90a:	f7fe ffb5 	bl	8009878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a90e:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <prvInitialiseTaskLists+0x78>)
 800a910:	4a05      	ldr	r2, [pc, #20]	; (800a928 <prvInitialiseTaskLists+0x64>)
 800a912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a914:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <prvInitialiseTaskLists+0x7c>)
 800a916:	4a05      	ldr	r2, [pc, #20]	; (800a92c <prvInitialiseTaskLists+0x68>)
 800a918:	601a      	str	r2, [r3, #0]
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000460 	.word	0x20000460
 800a928:	200004ec 	.word	0x200004ec
 800a92c:	20000500 	.word	0x20000500
 800a930:	2000051c 	.word	0x2000051c
 800a934:	20000530 	.word	0x20000530
 800a938:	20000548 	.word	0x20000548
 800a93c:	20000514 	.word	0x20000514
 800a940:	20000518 	.word	0x20000518

0800a944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a94a:	e019      	b.n	800a980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a94c:	f000 faa6 	bl	800ae9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <prvCheckTasksWaitingTermination+0x4c>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3304      	adds	r3, #4
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff f815 	bl	800998c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <prvCheckTasksWaitingTermination+0x50>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a0a      	ldr	r2, [pc, #40]	; (800a994 <prvCheckTasksWaitingTermination+0x50>)
 800a96a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3b01      	subs	r3, #1
 800a972:	4a09      	ldr	r2, [pc, #36]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a976:	f000 fabf 	bl	800aef8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f80e 	bl	800a99c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e1      	bne.n	800a94c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a988:	bf00      	nop
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	20000530 	.word	0x20000530
 800a994:	2000055c 	.word	0x2000055c
 800a998:	20000544 	.word	0x20000544

0800a99c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d108      	bne.n	800a9c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fc4e 	bl	800b254 <vPortFree>
				vPortFree( pxTCB );
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc4b 	bl	800b254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9be:	e017      	b.n	800a9f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d103      	bne.n	800a9d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fc42 	bl	800b254 <vPortFree>
	}
 800a9d0:	e00e      	b.n	800a9f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d009      	beq.n	800a9f0 <prvDeleteTCB+0x54>
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	e7fe      	b.n	800a9ee <prvDeleteTCB+0x52>
	}
 800a9f0:	bf00      	nop
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <prvResetNextTaskUnblockTime+0x44>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <prvResetNextTaskUnblockTime+0x14>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e000      	b.n	800aa0e <prvResetNextTaskUnblockTime+0x16>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa12:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <prvResetNextTaskUnblockTime+0x48>)
 800aa14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa1a:	e008      	b.n	800aa2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa1c:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <prvResetNextTaskUnblockTime+0x44>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	4a05      	ldr	r2, [pc, #20]	; (800aa40 <prvResetNextTaskUnblockTime+0x48>)
 800aa2c:	6013      	str	r3, [r2, #0]
}
 800aa2e:	bf00      	nop
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	20000514 	.word	0x20000514
 800aa40:	2000057c 	.word	0x2000057c

0800aa44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <xTaskGetSchedulerState+0x34>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d102      	bne.n	800aa58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa52:	2301      	movs	r3, #1
 800aa54:	607b      	str	r3, [r7, #4]
 800aa56:	e008      	b.n	800aa6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa58:	4b08      	ldr	r3, [pc, #32]	; (800aa7c <xTaskGetSchedulerState+0x38>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa60:	2302      	movs	r3, #2
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	e001      	b.n	800aa6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa66:	2300      	movs	r3, #0
 800aa68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa6a:	687b      	ldr	r3, [r7, #4]
	}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	20000568 	.word	0x20000568
 800aa7c:	20000584 	.word	0x20000584

0800aa80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d06c      	beq.n	800ab70 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa96:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <xTaskPriorityDisinherit+0xfc>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d009      	beq.n	800aab4 <xTaskPriorityDisinherit+0x34>
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e7fe      	b.n	800aab2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <xTaskPriorityDisinherit+0x50>
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	60bb      	str	r3, [r7, #8]
 800aace:	e7fe      	b.n	800aace <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad4:	1e5a      	subs	r2, r3, #1
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d044      	beq.n	800ab70 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d140      	bne.n	800ab70 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe ff4a 	bl	800998c <uxListRemove>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d115      	bne.n	800ab2a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab02:	491f      	ldr	r1, [pc, #124]	; (800ab80 <xTaskPriorityDisinherit+0x100>)
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10a      	bne.n	800ab2a <xTaskPriorityDisinherit+0xaa>
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	2201      	movs	r2, #1
 800ab1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1e:	43da      	mvns	r2, r3
 800ab20:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4013      	ands	r3, r2
 800ab26:	4a17      	ldr	r2, [pc, #92]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab36:	f1c3 0207 	rsb	r2, r3, #7
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	2201      	movs	r2, #1
 800ab44:	409a      	lsls	r2, r3
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	4a0d      	ldr	r2, [pc, #52]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <xTaskPriorityDisinherit+0x100>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe feb3 	bl	80098d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2000045c 	.word	0x2000045c
 800ab80:	20000460 	.word	0x20000460
 800ab84:	20000564 	.word	0x20000564

0800ab88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab92:	4b29      	ldr	r3, [pc, #164]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab98:	4b28      	ldr	r3, [pc, #160]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fef4 	bl	800998c <uxListRemove>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10b      	bne.n	800abc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800abaa:	4b24      	ldr	r3, [pc, #144]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	2201      	movs	r2, #1
 800abb2:	fa02 f303 	lsl.w	r3, r2, r3
 800abb6:	43da      	mvns	r2, r3
 800abb8:	4b21      	ldr	r3, [pc, #132]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4013      	ands	r3, r2
 800abbe:	4a20      	ldr	r2, [pc, #128]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800abc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc8:	d10a      	bne.n	800abe0 <prvAddCurrentTaskToDelayedList+0x58>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d007      	beq.n	800abe0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abd0:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3304      	adds	r3, #4
 800abd6:	4619      	mov	r1, r3
 800abd8:	481a      	ldr	r0, [pc, #104]	; (800ac44 <prvAddCurrentTaskToDelayedList+0xbc>)
 800abda:	f7fe fe7a 	bl	80098d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abde:	e026      	b.n	800ac2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abe8:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d209      	bcs.n	800ac0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abf8:	4b13      	ldr	r3, [pc, #76]	; (800ac48 <prvAddCurrentTaskToDelayedList+0xc0>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f7fe fe88 	bl	800991a <vListInsert>
}
 800ac0a:	e010      	b.n	800ac2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac0c:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4619      	mov	r1, r3
 800ac18:	4610      	mov	r0, r2
 800ac1a:	f7fe fe7e 	bl	800991a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac1e:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d202      	bcs.n	800ac2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac28:	4a09      	ldr	r2, [pc, #36]	; (800ac50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6013      	str	r3, [r2, #0]
}
 800ac2e:	bf00      	nop
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20000560 	.word	0x20000560
 800ac3c:	2000045c 	.word	0x2000045c
 800ac40:	20000564 	.word	0x20000564
 800ac44:	20000548 	.word	0x20000548
 800ac48:	20000518 	.word	0x20000518
 800ac4c:	20000514 	.word	0x20000514
 800ac50:	2000057c 	.word	0x2000057c

0800ac54 <pxPortInitialiseStack>:

/*
 * See header file for description.
=======
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de20:	4b28      	ldr	r3, [pc, #160]	; (800dec4 <prvInsertBlockIntoFreeList+0xac>)
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e002      	b.n	800de2c <prvInsertBlockIntoFreeList+0x14>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	429a      	cmp	r2, r3
 800de34:	d8f7      	bhi.n	800de26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	4413      	add	r3, r2
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	429a      	cmp	r2, r3
 800de46:	d108      	bne.n	800de5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	441a      	add	r2, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	441a      	add	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d118      	bne.n	800dea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	4b15      	ldr	r3, [pc, #84]	; (800dec8 <prvInsertBlockIntoFreeList+0xb0>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	429a      	cmp	r2, r3
 800de78:	d00d      	beq.n	800de96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	685a      	ldr	r2, [r3, #4]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	441a      	add	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	e008      	b.n	800dea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de96:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <prvInsertBlockIntoFreeList+0xb0>)
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	e003      	b.n	800dea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	429a      	cmp	r2, r3
 800deae:	d002      	beq.n	800deb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800deb6:	bf00      	nop
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	2000419c 	.word	0x2000419c
 800dec8:	200041a4 	.word	0x200041a4

0800decc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	330c      	adds	r3, #12
 800dedc:	461a      	mov	r2, r3
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f002 f96f 	bl	80101c4 <tcpip_send_msg_wait_sem>
 800dee6:	4603      	mov	r3, r0
 800dee8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800deea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d103      	bne.n	800defa <netconn_apimsg+0x2e>
    return apimsg->err;
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800def8:	e001      	b.n	800defe <netconn_apimsg+0x32>
  }
  return err;
 800defa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
	...

0800df08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08a      	sub	sp, #40	; 0x28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	4603      	mov	r3, r0
 800df10:	603a      	str	r2, [r7, #0]
 800df12:	71fb      	strb	r3, [r7, #7]
 800df14:	460b      	mov	r3, r1
 800df16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800df18:	79fb      	ldrb	r3, [r7, #7]
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	4618      	mov	r0, r3
 800df1e:	f000 ff83 	bl	800ee28 <netconn_alloc>
 800df22:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	2b00      	cmp	r3, #0
 800df28:	d054      	beq.n	800dfd4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800df2a:	79bb      	ldrb	r3, [r7, #6]
 800df2c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800df32:	f107 030c 	add.w	r3, r7, #12
 800df36:	4619      	mov	r1, r3
 800df38:	4829      	ldr	r0, [pc, #164]	; (800dfe0 <netconn_new_with_proto_and_callback+0xd8>)
 800df3a:	f7ff ffc7 	bl	800decc <netconn_apimsg>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800df44:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d043      	beq.n	800dfd4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <netconn_new_with_proto_and_callback+0x58>
 800df54:	4b23      	ldr	r3, [pc, #140]	; (800dfe4 <netconn_new_with_proto_and_callback+0xdc>)
 800df56:	2289      	movs	r2, #137	; 0x89
 800df58:	4923      	ldr	r1, [pc, #140]	; (800dfe8 <netconn_new_with_proto_and_callback+0xe0>)
 800df5a:	4824      	ldr	r0, [pc, #144]	; (800dfec <netconn_new_with_proto_and_callback+0xe4>)
 800df5c:	f00c fd98 	bl	801aa90 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	3310      	adds	r3, #16
 800df64:	4618      	mov	r0, r3
 800df66:	f00b fe81 	bl	8019c6c <sys_mbox_valid>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d105      	bne.n	800df7c <netconn_new_with_proto_and_callback+0x74>
 800df70:	4b1c      	ldr	r3, [pc, #112]	; (800dfe4 <netconn_new_with_proto_and_callback+0xdc>)
 800df72:	228a      	movs	r2, #138	; 0x8a
 800df74:	491e      	ldr	r1, [pc, #120]	; (800dff0 <netconn_new_with_proto_and_callback+0xe8>)
 800df76:	481d      	ldr	r0, [pc, #116]	; (800dfec <netconn_new_with_proto_and_callback+0xe4>)
 800df78:	f00c fd8a 	bl	801aa90 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	3314      	adds	r3, #20
 800df80:	4618      	mov	r0, r3
 800df82:	f00b fe73 	bl	8019c6c <sys_mbox_valid>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d005      	beq.n	800df98 <netconn_new_with_proto_and_callback+0x90>
 800df8c:	4b15      	ldr	r3, [pc, #84]	; (800dfe4 <netconn_new_with_proto_and_callback+0xdc>)
 800df8e:	228c      	movs	r2, #140	; 0x8c
 800df90:	4918      	ldr	r1, [pc, #96]	; (800dff4 <netconn_new_with_proto_and_callback+0xec>)
 800df92:	4816      	ldr	r0, [pc, #88]	; (800dfec <netconn_new_with_proto_and_callback+0xe4>)
 800df94:	f00c fd7c 	bl	801aa90 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	330c      	adds	r3, #12
 800df9c:	4618      	mov	r0, r3
 800df9e:	f00b fef6 	bl	8019d8e <sys_sem_valid>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d105      	bne.n	800dfb4 <netconn_new_with_proto_and_callback+0xac>
 800dfa8:	4b0e      	ldr	r3, [pc, #56]	; (800dfe4 <netconn_new_with_proto_and_callback+0xdc>)
 800dfaa:	228f      	movs	r2, #143	; 0x8f
 800dfac:	4912      	ldr	r1, [pc, #72]	; (800dff8 <netconn_new_with_proto_and_callback+0xf0>)
 800dfae:	480f      	ldr	r0, [pc, #60]	; (800dfec <netconn_new_with_proto_and_callback+0xe4>)
 800dfb0:	f00c fd6e 	bl	801aa90 <iprintf>
      sys_sem_free(&conn->op_completed);
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	330c      	adds	r3, #12
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f00b fedb 	bl	8019d74 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	3310      	adds	r3, #16
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f00b fdb6 	bl	8019b34 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800dfc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfca:	2007      	movs	r0, #7
 800dfcc:	f002 fd9a 	bl	8010b04 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e000      	b.n	800dfd6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3728      	adds	r7, #40	; 0x28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	0800edd1 	.word	0x0800edd1
 800dfe4:	0801b8c0 	.word	0x0801b8c0
 800dfe8:	0801b8f4 	.word	0x0801b8f4
 800dfec:	0801b918 	.word	0x0801b918
 800dff0:	0801b940 	.word	0x0801b940
 800dff4:	0801b958 	.word	0x0801b958
 800dff8:	0801b97c 	.word	0x0801b97c

0800dffc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b088      	sub	sp, #32
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <netconn_delete+0x12>
    return ERR_OK;
 800e00a:	2300      	movs	r3, #0
 800e00c:	e016      	b.n	800e03c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e012:	2329      	movs	r3, #41	; 0x29
 800e014:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e016:	f107 0308 	add.w	r3, r7, #8
 800e01a:	4619      	mov	r1, r3
 800e01c:	4809      	ldr	r0, [pc, #36]	; (800e044 <netconn_delete+0x48>)
 800e01e:	f7ff ff55 	bl	800decc <netconn_apimsg>
 800e022:	4603      	mov	r3, r0
 800e024:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e026:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <netconn_delete+0x38>
    return err;
 800e02e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e032:	e003      	b.n	800e03c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 ff67 	bl	800ef08 <netconn_free>

  return ERR_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3720      	adds	r7, #32
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	0800f38d 	.word	0x0800f38d

0800e048 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08a      	sub	sp, #40	; 0x28
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	4613      	mov	r3, r2
 800e054:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d108      	bne.n	800e06e <netconn_bind+0x26>
 800e05c:	4b11      	ldr	r3, [pc, #68]	; (800e0a4 <netconn_bind+0x5c>)
 800e05e:	22ff      	movs	r2, #255	; 0xff
 800e060:	4911      	ldr	r1, [pc, #68]	; (800e0a8 <netconn_bind+0x60>)
 800e062:	4812      	ldr	r0, [pc, #72]	; (800e0ac <netconn_bind+0x64>)
 800e064:	f00c fd14 	bl	801aa90 <iprintf>
 800e068:	f06f 030f 	mvn.w	r3, #15
 800e06c:	e015      	b.n	800e09a <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d101      	bne.n	800e078 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800e074:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <netconn_bind+0x68>)
 800e076:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e080:	88fb      	ldrh	r3, [r7, #6]
 800e082:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e084:	f107 0310 	add.w	r3, r7, #16
 800e088:	4619      	mov	r1, r3
 800e08a:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <netconn_bind+0x6c>)
 800e08c:	f7ff ff1e 	bl	800decc <netconn_apimsg>
 800e090:	4603      	mov	r3, r0
 800e092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800e096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3728      	adds	r7, #40	; 0x28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	0801b8c0 	.word	0x0801b8c0
 800e0a8:	0801b9f8 	.word	0x0801b9f8
 800e0ac:	0801b918 	.word	0x0801b918
 800e0b0:	0801e0d4 	.word	0x0801e0d4
 800e0b4:	0800f591 	.word	0x0800f591

0800e0b8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b088      	sub	sp, #32
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d109      	bne.n	800e0de <netconn_listen_with_backlog+0x26>
 800e0ca:	4b0d      	ldr	r3, [pc, #52]	; (800e100 <netconn_listen_with_backlog+0x48>)
 800e0cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e0d0:	490c      	ldr	r1, [pc, #48]	; (800e104 <netconn_listen_with_backlog+0x4c>)
 800e0d2:	480d      	ldr	r0, [pc, #52]	; (800e108 <netconn_listen_with_backlog+0x50>)
 800e0d4:	f00c fcdc 	bl	801aa90 <iprintf>
 800e0d8:	f06f 030f 	mvn.w	r3, #15
 800e0dc:	e00b      	b.n	800e0f6 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e0e2:	f107 0308 	add.w	r3, r7, #8
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4808      	ldr	r0, [pc, #32]	; (800e10c <netconn_listen_with_backlog+0x54>)
 800e0ea:	f7ff feef 	bl	800decc <netconn_apimsg>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800e0f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3720      	adds	r7, #32
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	0801b8c0 	.word	0x0801b8c0
 800e104:	0801ba58 	.word	0x0801ba58
 800e108:	0801b918 	.word	0x0801b918
 800e10c:	0800f651 	.word	0x0800f651

0800e110 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d109      	bne.n	800e134 <netconn_accept+0x24>
 800e120:	4b34      	ldr	r3, [pc, #208]	; (800e1f4 <netconn_accept+0xe4>)
 800e122:	f240 128d 	movw	r2, #397	; 0x18d
 800e126:	4934      	ldr	r1, [pc, #208]	; (800e1f8 <netconn_accept+0xe8>)
 800e128:	4834      	ldr	r0, [pc, #208]	; (800e1fc <netconn_accept+0xec>)
 800e12a:	f00c fcb1 	bl	801aa90 <iprintf>
 800e12e:	f06f 030f 	mvn.w	r3, #15
 800e132:	e05b      	b.n	800e1ec <netconn_accept+0xdc>
  *new_conn = NULL;
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	2200      	movs	r2, #0
 800e138:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d109      	bne.n	800e154 <netconn_accept+0x44>
 800e140:	4b2c      	ldr	r3, [pc, #176]	; (800e1f4 <netconn_accept+0xe4>)
 800e142:	f240 128f 	movw	r2, #399	; 0x18f
 800e146:	492e      	ldr	r1, [pc, #184]	; (800e200 <netconn_accept+0xf0>)
 800e148:	482c      	ldr	r0, [pc, #176]	; (800e1fc <netconn_accept+0xec>)
 800e14a:	f00c fca1 	bl	801aa90 <iprintf>
 800e14e:	f06f 030f 	mvn.w	r3, #15
 800e152:	e04b      	b.n	800e1ec <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e15a:	f113 0f0c 	cmn.w	r3, #12
 800e15e:	da03      	bge.n	800e168 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e166:	e041      	b.n	800e1ec <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3314      	adds	r3, #20
 800e16c:	4618      	mov	r0, r3
 800e16e:	f00b fd7d 	bl	8019c6c <sys_mbox_valid>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d102      	bne.n	800e17e <netconn_accept+0x6e>
    return ERR_CLSD;
 800e178:	f06f 030e 	mvn.w	r3, #14
 800e17c:	e036      	b.n	800e1ec <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	3314      	adds	r3, #20
 800e182:	f107 010c 	add.w	r1, r7, #12
 800e186:	2200      	movs	r2, #0
 800e188:	4618      	mov	r0, r3
 800e18a:	f00b fd14 	bl	8019bb6 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e196:	2b00      	cmp	r3, #0
 800e198:	d005      	beq.n	800e1a6 <netconn_accept+0x96>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e19e:	2200      	movs	r2, #0
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	4a16      	ldr	r2, [pc, #88]	; (800e204 <netconn_accept+0xf4>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d102      	bne.n	800e1b4 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800e1ae:	f06f 030c 	mvn.w	r3, #12
 800e1b2:	e01b      	b.n	800e1ec <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d114      	bne.n	800e1e4 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00e      	beq.n	800e1de <netconn_accept+0xce>
 800e1c0:	f00b fe70 	bl	8019ea4 <sys_arch_protect>
 800e1c4:	6138      	str	r0, [r7, #16]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e1cc:	f113 0f0c 	cmn.w	r3, #12
 800e1d0:	db02      	blt.n	800e1d8 <netconn_accept+0xc8>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	22f1      	movs	r2, #241	; 0xf1
 800e1d6:	721a      	strb	r2, [r3, #8]
 800e1d8:	6938      	ldr	r0, [r7, #16]
 800e1da:	f00b fe71 	bl	8019ec0 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800e1de:	f06f 030e 	mvn.w	r3, #14
 800e1e2:	e003      	b.n	800e1ec <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	697a      	ldr	r2, [r7, #20]
 800e1e8:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e1ea:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	0801b8c0 	.word	0x0801b8c0
 800e1f8:	0801ba78 	.word	0x0801ba78
 800e1fc:	0801b918 	.word	0x0801b918
 800e200:	0801ba98 	.word	0x0801ba98
 800e204:	20007640 	.word	0x20007640

0800e208 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b08a      	sub	sp, #40	; 0x28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800e212:	2300      	movs	r3, #0
 800e214:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d109      	bne.n	800e230 <netconn_recv_data+0x28>
 800e21c:	4b5c      	ldr	r3, [pc, #368]	; (800e390 <netconn_recv_data+0x188>)
 800e21e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800e222:	495c      	ldr	r1, [pc, #368]	; (800e394 <netconn_recv_data+0x18c>)
 800e224:	485c      	ldr	r0, [pc, #368]	; (800e398 <netconn_recv_data+0x190>)
 800e226:	f00c fc33 	bl	801aa90 <iprintf>
 800e22a:	f06f 030f 	mvn.w	r3, #15
 800e22e:	e0aa      	b.n	800e386 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d109      	bne.n	800e250 <netconn_recv_data+0x48>
 800e23c:	4b54      	ldr	r3, [pc, #336]	; (800e390 <netconn_recv_data+0x188>)
 800e23e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800e242:	4956      	ldr	r1, [pc, #344]	; (800e39c <netconn_recv_data+0x194>)
 800e244:	4854      	ldr	r0, [pc, #336]	; (800e398 <netconn_recv_data+0x190>)
 800e246:	f00c fc23 	bl	801aa90 <iprintf>
 800e24a:	f06f 030f 	mvn.w	r3, #15
 800e24e:	e09a      	b.n	800e386 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e258:	2b10      	cmp	r3, #16
 800e25a:	d115      	bne.n	800e288 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3310      	adds	r3, #16
 800e260:	4618      	mov	r0, r3
 800e262:	f00b fd03 	bl	8019c6c <sys_mbox_valid>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10d      	bne.n	800e288 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3314      	adds	r3, #20
 800e270:	4618      	mov	r0, r3
 800e272:	f00b fcfb 	bl	8019c6c <sys_mbox_valid>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <netconn_recv_data+0x7a>
 800e27c:	f06f 030a 	mvn.w	r3, #10
 800e280:	e081      	b.n	800e386 <netconn_recv_data+0x17e>
 800e282:	f06f 030e 	mvn.w	r3, #14
 800e286:	e07e      	b.n	800e386 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	3310      	adds	r3, #16
 800e28c:	4618      	mov	r0, r3
 800e28e:	f00b fced 	bl	8019c6c <sys_mbox_valid>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d109      	bne.n	800e2ac <netconn_recv_data+0xa4>
 800e298:	4b3d      	ldr	r3, [pc, #244]	; (800e390 <netconn_recv_data+0x188>)
 800e29a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800e29e:	4940      	ldr	r1, [pc, #256]	; (800e3a0 <netconn_recv_data+0x198>)
 800e2a0:	483d      	ldr	r0, [pc, #244]	; (800e398 <netconn_recv_data+0x190>)
 800e2a2:	f00c fbf5 	bl	801aa90 <iprintf>
 800e2a6:	f06f 030a 	mvn.w	r3, #10
 800e2aa:	e06c      	b.n	800e386 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e2b2:	f113 0f0c 	cmn.w	r3, #12
 800e2b6:	da03      	bge.n	800e2c0 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e2be:	e062      	b.n	800e386 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3310      	adds	r3, #16
 800e2c4:	f107 0120 	add.w	r1, r7, #32
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f00b fc73 	bl	8019bb6 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2d8:	2b10      	cmp	r3, #16
 800e2da:	d138      	bne.n	800e34e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	891b      	ldrh	r3, [r3, #8]
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	e001      	b.n	800e2f2 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800e2f2:	f107 030c 	add.w	r3, r7, #12
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	482a      	ldr	r0, [pc, #168]	; (800e3a4 <netconn_recv_data+0x19c>)
 800e2fa:	f7ff fde7 	bl	800decc <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d120      	bne.n	800e346 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d005      	beq.n	800e318 <netconn_recv_data+0x110>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e310:	2200      	movs	r2, #0
 800e312:	2101      	movs	r1, #1
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10b      	bne.n	800e338 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d003      	beq.n	800e332 <netconn_recv_data+0x12a>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e330:	e029      	b.n	800e386 <netconn_recv_data+0x17e>
 800e332:	f06f 030d 	mvn.w	r3, #13
 800e336:	e026      	b.n	800e386 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e338:	2101      	movs	r1, #1
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f926 	bl	800e58c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e340:	f06f 030e 	mvn.w	r3, #14
 800e344:	e01f      	b.n	800e386 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	891b      	ldrh	r3, [r3, #8]
 800e34a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e34c:	e00d      	b.n	800e36a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d106      	bne.n	800e362 <netconn_recv_data+0x15a>
 800e354:	4b0e      	ldr	r3, [pc, #56]	; (800e390 <netconn_recv_data+0x188>)
 800e356:	f240 223e 	movw	r2, #574	; 0x23e
 800e35a:	4913      	ldr	r1, [pc, #76]	; (800e3a8 <netconn_recv_data+0x1a0>)
 800e35c:	480e      	ldr	r0, [pc, #56]	; (800e398 <netconn_recv_data+0x190>)
 800e35e:	f00c fb97 	bl	801aa90 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	891b      	ldrh	r3, [r3, #8]
 800e368:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d005      	beq.n	800e37e <netconn_recv_data+0x176>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e378:	2101      	movs	r1, #1
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e37e:	6a3a      	ldr	r2, [r7, #32]
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3728      	adds	r7, #40	; 0x28
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	0801b8c0 	.word	0x0801b8c0
 800e394:	0801bab8 	.word	0x0801bab8
 800e398:	0801b918 	.word	0x0801b918
 800e39c:	0801bad8 	.word	0x0801bad8
 800e3a0:	0801baf4 	.word	0x0801baf4
 800e3a4:	0800f7d5 	.word	0x0800f7d5
 800e3a8:	0801bb14 	.word	0x0801bb14

0800e3ac <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d109      	bne.n	800e3d4 <netconn_recv+0x28>
 800e3c0:	4b31      	ldr	r3, [pc, #196]	; (800e488 <netconn_recv+0xdc>)
 800e3c2:	f44f 721d 	mov.w	r2, #628	; 0x274
 800e3c6:	4931      	ldr	r1, [pc, #196]	; (800e48c <netconn_recv+0xe0>)
 800e3c8:	4831      	ldr	r0, [pc, #196]	; (800e490 <netconn_recv+0xe4>)
 800e3ca:	f00c fb61 	bl	801aa90 <iprintf>
 800e3ce:	f06f 030f 	mvn.w	r3, #15
 800e3d2:	e054      	b.n	800e47e <netconn_recv+0xd2>
  *new_buf = NULL;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d109      	bne.n	800e3f4 <netconn_recv+0x48>
 800e3e0:	4b29      	ldr	r3, [pc, #164]	; (800e488 <netconn_recv+0xdc>)
 800e3e2:	f240 2276 	movw	r2, #630	; 0x276
 800e3e6:	492b      	ldr	r1, [pc, #172]	; (800e494 <netconn_recv+0xe8>)
 800e3e8:	4829      	ldr	r0, [pc, #164]	; (800e490 <netconn_recv+0xe4>)
 800e3ea:	f00c fb51 	bl	801aa90 <iprintf>
 800e3ee:	f06f 030f 	mvn.w	r3, #15
 800e3f2:	e044      	b.n	800e47e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3fc:	2b10      	cmp	r3, #16
 800e3fe:	d139      	bne.n	800e474 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800e400:	2300      	movs	r3, #0
 800e402:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e404:	2006      	movs	r0, #6
 800e406:	f002 fb2b 	bl	8010a60 <memp_malloc>
 800e40a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d102      	bne.n	800e418 <netconn_recv+0x6c>
      return ERR_MEM;
 800e412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e416:	e032      	b.n	800e47e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800e418:	f107 030c 	add.w	r3, r7, #12
 800e41c:	4619      	mov	r1, r3
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f7ff fef2 	bl	800e208 <netconn_recv_data>
 800e424:	4603      	mov	r3, r0
 800e426:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e428:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d006      	beq.n	800e43e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800e430:	6979      	ldr	r1, [r7, #20]
 800e432:	2006      	movs	r0, #6
 800e434:	f002 fb66 	bl	8010b04 <memp_free>
      return err;
 800e438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e43c:	e01f      	b.n	800e47e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d106      	bne.n	800e452 <netconn_recv+0xa6>
 800e444:	4b10      	ldr	r3, [pc, #64]	; (800e488 <netconn_recv+0xdc>)
 800e446:	f240 228a 	movw	r2, #650	; 0x28a
 800e44a:	4913      	ldr	r1, [pc, #76]	; (800e498 <netconn_recv+0xec>)
 800e44c:	4810      	ldr	r0, [pc, #64]	; (800e490 <netconn_recv+0xe4>)
 800e44e:	f00c fb1f 	bl	801aa90 <iprintf>

    buf->p = p;
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	2200      	movs	r2, #0
 800e462:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	2200      	movs	r2, #0
 800e468:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800e470:	2300      	movs	r3, #0
 800e472:	e004      	b.n	800e47e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff fec6 	bl	800e208 <netconn_recv_data>
 800e47c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3718      	adds	r7, #24
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	0801b8c0 	.word	0x0801b8c0
 800e48c:	0801bab8 	.word	0x0801bab8
 800e490:	0801b918 	.word	0x0801b918
 800e494:	0801bad8 	.word	0x0801bad8
 800e498:	0801bb20 	.word	0x0801bb20

0800e49c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08a      	sub	sp, #40	; 0x28
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
 800e4a8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d109      	bne.n	800e4c4 <netconn_write_partly+0x28>
 800e4b0:	4b31      	ldr	r3, [pc, #196]	; (800e578 <netconn_write_partly+0xdc>)
 800e4b2:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e4b6:	4931      	ldr	r1, [pc, #196]	; (800e57c <netconn_write_partly+0xe0>)
 800e4b8:	4831      	ldr	r0, [pc, #196]	; (800e580 <netconn_write_partly+0xe4>)
 800e4ba:	f00c fae9 	bl	801aa90 <iprintf>
 800e4be:	f06f 030f 	mvn.w	r3, #15
 800e4c2:	e054      	b.n	800e56e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4cc:	2b10      	cmp	r3, #16
 800e4ce:	d009      	beq.n	800e4e4 <netconn_write_partly+0x48>
 800e4d0:	4b29      	ldr	r3, [pc, #164]	; (800e578 <netconn_write_partly+0xdc>)
 800e4d2:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e4d6:	492b      	ldr	r1, [pc, #172]	; (800e584 <netconn_write_partly+0xe8>)
 800e4d8:	4829      	ldr	r0, [pc, #164]	; (800e580 <netconn_write_partly+0xe4>)
 800e4da:	f00c fad9 	bl	801aa90 <iprintf>
 800e4de:	f06f 0305 	mvn.w	r3, #5
 800e4e2:	e044      	b.n	800e56e <netconn_write_partly+0xd2>
  if (size == 0) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d101      	bne.n	800e4ee <netconn_write_partly+0x52>
    return ERR_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	e03f      	b.n	800e56e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	7f1b      	ldrb	r3, [r3, #28]
 800e4f2:	f003 0302 	and.w	r3, r3, #2
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d104      	bne.n	800e504 <netconn_write_partly+0x68>
 800e4fa:	78fb      	ldrb	r3, [r7, #3]
 800e4fc:	f003 0304 	and.w	r3, r3, #4
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <netconn_write_partly+0x6c>
 800e504:	2301      	movs	r3, #1
 800e506:	e000      	b.n	800e50a <netconn_write_partly+0x6e>
 800e508:	2300      	movs	r3, #0
 800e50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e50e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e512:	2b00      	cmp	r3, #0
 800e514:	d005      	beq.n	800e522 <netconn_write_partly+0x86>
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d102      	bne.n	800e522 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e51c:	f06f 0305 	mvn.w	r3, #5
 800e520:	e025      	b.n	800e56e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e52a:	78fb      	ldrb	r3, [r7, #3]
 800e52c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e534:	f107 0310 	add.w	r3, r7, #16
 800e538:	4619      	mov	r1, r3
 800e53a:	4813      	ldr	r0, [pc, #76]	; (800e588 <netconn_write_partly+0xec>)
 800e53c:	f7ff fcc6 	bl	800decc <netconn_apimsg>
 800e540:	4603      	mov	r3, r0
 800e542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800e546:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d10d      	bne.n	800e56a <netconn_write_partly+0xce>
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	2b00      	cmp	r3, #0
 800e552:	d00a      	beq.n	800e56a <netconn_write_partly+0xce>
    if (dontblock) {
 800e554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d003      	beq.n	800e564 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800e55c:	69fa      	ldr	r2, [r7, #28]
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	e002      	b.n	800e56a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800e564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e56a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3728      	adds	r7, #40	; 0x28
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	0801b8c0 	.word	0x0801b8c0
 800e57c:	0801bb48 	.word	0x0801bb48
 800e580:	0801b918 	.word	0x0801b918
 800e584:	0801bb64 	.word	0x0801bb64
 800e588:	0800fbb5 	.word	0x0800fbb5

0800e58c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b088      	sub	sp, #32
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d109      	bne.n	800e5b2 <netconn_close_shutdown+0x26>
 800e59e:	4b0f      	ldr	r3, [pc, #60]	; (800e5dc <netconn_close_shutdown+0x50>)
 800e5a0:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e5a4:	490e      	ldr	r1, [pc, #56]	; (800e5e0 <netconn_close_shutdown+0x54>)
 800e5a6:	480f      	ldr	r0, [pc, #60]	; (800e5e4 <netconn_close_shutdown+0x58>)
 800e5a8:	f00c fa72 	bl	801aa90 <iprintf>
 800e5ac:	f06f 030f 	mvn.w	r3, #15
 800e5b0:	e00f      	b.n	800e5d2 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e5b6:	78fb      	ldrb	r3, [r7, #3]
 800e5b8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e5ba:	2329      	movs	r3, #41	; 0x29
 800e5bc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e5be:	f107 0308 	add.w	r3, r7, #8
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4808      	ldr	r0, [pc, #32]	; (800e5e8 <netconn_close_shutdown+0x5c>)
 800e5c6:	f7ff fc81 	bl	800decc <netconn_apimsg>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800e5ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3720      	adds	r7, #32
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	0801b8c0 	.word	0x0801b8c0
 800e5e0:	0801bb88 	.word	0x0801bb88
 800e5e4:	0801b918 	.word	0x0801b918
 800e5e8:	0800fd15 	.word	0x0800fd15

0800e5ec <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800e5f4:	2103      	movs	r1, #3
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff ffc8 	bl	800e58c <netconn_close_shutdown>
 800e5fc:	4603      	mov	r3, r0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3708      	adds	r7, #8
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
	...

0800e608 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d105      	bne.n	800e628 <recv_udp+0x20>
 800e61c:	4b34      	ldr	r3, [pc, #208]	; (800e6f0 <recv_udp+0xe8>)
 800e61e:	22b1      	movs	r2, #177	; 0xb1
 800e620:	4934      	ldr	r1, [pc, #208]	; (800e6f4 <recv_udp+0xec>)
 800e622:	4835      	ldr	r0, [pc, #212]	; (800e6f8 <recv_udp+0xf0>)
 800e624:	f00c fa34 	bl	801aa90 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d105      	bne.n	800e63a <recv_udp+0x32>
 800e62e:	4b30      	ldr	r3, [pc, #192]	; (800e6f0 <recv_udp+0xe8>)
 800e630:	22b2      	movs	r2, #178	; 0xb2
 800e632:	4932      	ldr	r1, [pc, #200]	; (800e6fc <recv_udp+0xf4>)
 800e634:	4830      	ldr	r0, [pc, #192]	; (800e6f8 <recv_udp+0xf0>)
 800e636:	f00c fa2b 	bl	801aa90 <iprintf>
  conn = (struct netconn *)arg;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d103      	bne.n	800e64c <recv_udp+0x44>
    pbuf_free(p);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f002 ffb7 	bl	80115b8 <pbuf_free>
    return;
 800e64a:	e04d      	b.n	800e6e8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	68ba      	ldr	r2, [r7, #8]
 800e652:	429a      	cmp	r2, r3
 800e654:	d005      	beq.n	800e662 <recv_udp+0x5a>
 800e656:	4b26      	ldr	r3, [pc, #152]	; (800e6f0 <recv_udp+0xe8>)
 800e658:	22ba      	movs	r2, #186	; 0xba
 800e65a:	4929      	ldr	r1, [pc, #164]	; (800e700 <recv_udp+0xf8>)
 800e65c:	4826      	ldr	r0, [pc, #152]	; (800e6f8 <recv_udp+0xf0>)
 800e65e:	f00c fa17 	bl	801aa90 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	3310      	adds	r3, #16
 800e666:	4618      	mov	r0, r3
 800e668:	f00b fb00 	bl	8019c6c <sys_mbox_valid>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d103      	bne.n	800e67a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f002 ffa0 	bl	80115b8 <pbuf_free>
    return;
 800e678:	e036      	b.n	800e6e8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e67a:	2006      	movs	r0, #6
 800e67c:	f002 f9f0 	bl	8010a60 <memp_malloc>
 800e680:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d103      	bne.n	800e690 <recv_udp+0x88>
    pbuf_free(p);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f002 ff95 	bl	80115b8 <pbuf_free>
    return;
 800e68e:	e02b      	b.n	800e6e8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <recv_udp+0xa0>
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	e000      	b.n	800e6aa <recv_udp+0xa2>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	69ba      	ldr	r2, [r7, #24]
 800e6ac:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e6b2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	891b      	ldrh	r3, [r3, #8]
 800e6b8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	3310      	adds	r3, #16
 800e6be:	69b9      	ldr	r1, [r7, #24]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f00b fa5e 	bl	8019b82 <sys_mbox_trypost>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d003      	beq.n	800e6d4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800e6cc:	69b8      	ldr	r0, [r7, #24]
 800e6ce:	f001 fbc9 	bl	800fe64 <netbuf_delete>
    return;
 800e6d2:	e009      	b.n	800e6e8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d005      	beq.n	800e6e8 <recv_udp+0xe0>
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e0:	8afa      	ldrh	r2, [r7, #22]
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	69f8      	ldr	r0, [r7, #28]
 800e6e6:	4798      	blx	r3
  }
}
 800e6e8:	3720      	adds	r7, #32
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0801bba4 	.word	0x0801bba4
 800e6f4:	0801bbd8 	.word	0x0801bbd8
 800e6f8:	0801bbfc 	.word	0x0801bbfc
 800e6fc:	0801bc24 	.word	0x0801bc24
 800e700:	0801bc44 	.word	0x0801bc44

0800e704 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b088      	sub	sp, #32
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
 800e710:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d105      	bne.n	800e724 <recv_tcp+0x20>
 800e718:	4b39      	ldr	r3, [pc, #228]	; (800e800 <recv_tcp+0xfc>)
 800e71a:	22f9      	movs	r2, #249	; 0xf9
 800e71c:	4939      	ldr	r1, [pc, #228]	; (800e804 <recv_tcp+0x100>)
 800e71e:	483a      	ldr	r0, [pc, #232]	; (800e808 <recv_tcp+0x104>)
 800e720:	f00c f9b6 	bl	801aa90 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d105      	bne.n	800e736 <recv_tcp+0x32>
 800e72a:	4b35      	ldr	r3, [pc, #212]	; (800e800 <recv_tcp+0xfc>)
 800e72c:	22fa      	movs	r2, #250	; 0xfa
 800e72e:	4937      	ldr	r1, [pc, #220]	; (800e80c <recv_tcp+0x108>)
 800e730:	4835      	ldr	r0, [pc, #212]	; (800e808 <recv_tcp+0x104>)
 800e732:	f00c f9ad 	bl	801aa90 <iprintf>
  conn = (struct netconn *)arg;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d102      	bne.n	800e746 <recv_tcp+0x42>
    return ERR_VAL;
 800e740:	f06f 0305 	mvn.w	r3, #5
 800e744:	e057      	b.n	800e7f6 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d006      	beq.n	800e75e <recv_tcp+0x5a>
 800e750:	4b2b      	ldr	r3, [pc, #172]	; (800e800 <recv_tcp+0xfc>)
 800e752:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e756:	492e      	ldr	r1, [pc, #184]	; (800e810 <recv_tcp+0x10c>)
 800e758:	482b      	ldr	r0, [pc, #172]	; (800e808 <recv_tcp+0x104>)
 800e75a:	f00c f999 	bl	801aa90 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	3310      	adds	r3, #16
 800e762:	4618      	mov	r0, r3
 800e764:	f00b fa82 	bl	8019c6c <sys_mbox_valid>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10d      	bne.n	800e78a <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d008      	beq.n	800e786 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	891b      	ldrh	r3, [r3, #8]
 800e778:	4619      	mov	r1, r3
 800e77a:	68b8      	ldr	r0, [r7, #8]
 800e77c:	f003 fdf6 	bl	801236c <tcp_recved>
      pbuf_free(p);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f002 ff19 	bl	80115b8 <pbuf_free>
    }
    return ERR_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	e035      	b.n	800e7f6 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800e78a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d011      	beq.n	800e7b6 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00e      	beq.n	800e7b6 <recv_tcp+0xb2>
 800e798:	f00b fb84 	bl	8019ea4 <sys_arch_protect>
 800e79c:	6178      	str	r0, [r7, #20]
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e7a4:	f113 0f0c 	cmn.w	r3, #12
 800e7a8:	db02      	blt.n	800e7b0 <recv_tcp+0xac>
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	78fa      	ldrb	r2, [r7, #3]
 800e7ae:	721a      	strb	r2, [r3, #8]
 800e7b0:	6978      	ldr	r0, [r7, #20]
 800e7b2:	f00b fb85 	bl	8019ec0 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d003      	beq.n	800e7c4 <recv_tcp+0xc0>
    len = p->tot_len;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	891b      	ldrh	r3, [r3, #8]
 800e7c0:	83fb      	strh	r3, [r7, #30]
 800e7c2:	e001      	b.n	800e7c8 <recv_tcp+0xc4>
  } else {
    len = 0;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	3310      	adds	r3, #16
 800e7cc:	6879      	ldr	r1, [r7, #4]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f00b f9d7 	bl	8019b82 <sys_mbox_trypost>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d002      	beq.n	800e7e0 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7de:	e00a      	b.n	800e7f6 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d005      	beq.n	800e7f4 <recv_tcp+0xf0>
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ec:	8bfa      	ldrh	r2, [r7, #30]
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	69b8      	ldr	r0, [r7, #24]
 800e7f2:	4798      	blx	r3
  }

  return ERR_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3720      	adds	r7, #32
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	0801bba4 	.word	0x0801bba4
 800e804:	0801bc64 	.word	0x0801bc64
 800e808:	0801bbfc 	.word	0x0801bbfc
 800e80c:	0801bc88 	.word	0x0801bc88
 800e810:	0801bca8 	.word	0x0801bca8

0800e814 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d106      	bne.n	800e836 <poll_tcp+0x22>
 800e828:	4b29      	ldr	r3, [pc, #164]	; (800e8d0 <poll_tcp+0xbc>)
 800e82a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e82e:	4929      	ldr	r1, [pc, #164]	; (800e8d4 <poll_tcp+0xc0>)
 800e830:	4829      	ldr	r0, [pc, #164]	; (800e8d8 <poll_tcp+0xc4>)
 800e832:	f00c f92d 	bl	801aa90 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	785b      	ldrb	r3, [r3, #1]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d104      	bne.n	800e848 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e83e:	2101      	movs	r1, #1
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f001 f813 	bl	800f86c <lwip_netconn_do_writemore>
 800e846:	e016      	b.n	800e876 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	785b      	ldrb	r3, [r3, #1]
 800e84c:	2b04      	cmp	r3, #4
 800e84e:	d112      	bne.n	800e876 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00a      	beq.n	800e86e <poll_tcp+0x5a>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85c:	7a5b      	ldrb	r3, [r3, #9]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d005      	beq.n	800e86e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e866:	7a5a      	ldrb	r2, [r3, #9]
 800e868:	3a01      	subs	r2, #1
 800e86a:	b2d2      	uxtb	r2, r2
 800e86c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e86e:	2101      	movs	r1, #1
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f000 fc13 	bl	800f09c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	7f1b      	ldrb	r3, [r3, #28]
 800e87a:	f003 0310 	and.w	r3, r3, #16
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d021      	beq.n	800e8c6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d01d      	beq.n	800e8c6 <poll_tcp+0xb2>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e892:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e896:	d316      	bcc.n	800e8c6 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e8a0:	2b04      	cmp	r3, #4
 800e8a2:	d810      	bhi.n	800e8c6 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	7f1b      	ldrb	r3, [r3, #28]
 800e8a8:	f023 0310 	bic.w	r3, r3, #16
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d005      	beq.n	800e8c6 <poll_tcp+0xb2>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2102      	movs	r1, #2
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	0801bba4 	.word	0x0801bba4
 800e8d4:	0801bcc8 	.word	0x0801bcc8
 800e8d8:	0801bbfc 	.word	0x0801bbfc

0800e8dc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b086      	sub	sp, #24
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d106      	bne.n	800e902 <sent_tcp+0x26>
 800e8f4:	4b20      	ldr	r3, [pc, #128]	; (800e978 <sent_tcp+0x9c>)
 800e8f6:	f240 1261 	movw	r2, #353	; 0x161
 800e8fa:	4920      	ldr	r1, [pc, #128]	; (800e97c <sent_tcp+0xa0>)
 800e8fc:	4820      	ldr	r0, [pc, #128]	; (800e980 <sent_tcp+0xa4>)
 800e8fe:	f00c f8c7 	bl	801aa90 <iprintf>

  if (conn) {
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d032      	beq.n	800e96e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	785b      	ldrb	r3, [r3, #1]
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d104      	bne.n	800e91a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e910:	2101      	movs	r1, #1
 800e912:	6978      	ldr	r0, [r7, #20]
 800e914:	f000 ffaa 	bl	800f86c <lwip_netconn_do_writemore>
 800e918:	e007      	b.n	800e92a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	785b      	ldrb	r3, [r3, #1]
 800e91e:	2b04      	cmp	r3, #4
 800e920:	d103      	bne.n	800e92a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e922:	2101      	movs	r1, #1
 800e924:	6978      	ldr	r0, [r7, #20]
 800e926:	f000 fbb9 	bl	800f09c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d01d      	beq.n	800e96e <sent_tcp+0x92>
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e93a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e93e:	d316      	bcc.n	800e96e <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e948:	2b04      	cmp	r3, #4
 800e94a:	d810      	bhi.n	800e96e <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	7f1b      	ldrb	r3, [r3, #28]
 800e950:	f023 0310 	bic.w	r3, r3, #16
 800e954:	b2da      	uxtb	r2, r3
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <sent_tcp+0x92>
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e966:	88fa      	ldrh	r2, [r7, #6]
 800e968:	2102      	movs	r1, #2
 800e96a:	6978      	ldr	r0, [r7, #20]
 800e96c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	0801bba4 	.word	0x0801bba4
 800e97c:	0801bcc8 	.word	0x0801bcc8
 800e980:	0801bbfc 	.word	0x0801bbfc

0800e984 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b08a      	sub	sp, #40	; 0x28
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	460b      	mov	r3, r1
 800e98e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <err_tcp+0x24>
 800e99a:	4b6c      	ldr	r3, [pc, #432]	; (800eb4c <err_tcp+0x1c8>)
 800e99c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e9a0:	496b      	ldr	r1, [pc, #428]	; (800eb50 <err_tcp+0x1cc>)
 800e9a2:	486c      	ldr	r0, [pc, #432]	; (800eb54 <err_tcp+0x1d0>)
 800e9a4:	f00c f874 	bl	801aa90 <iprintf>

  conn->pcb.tcp = NULL;
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	785b      	ldrb	r3, [r3, #1]
 800e9b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800e9bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9c0:	2b04      	cmp	r3, #4
 800e9c2:	d114      	bne.n	800e9ee <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d018      	beq.n	800ea00 <err_tcp+0x7c>
 800e9ce:	f00b fa69 	bl	8019ea4 <sys_arch_protect>
 800e9d2:	61b8      	str	r0, [r7, #24]
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9da:	f113 0f0c 	cmn.w	r3, #12
 800e9de:	db02      	blt.n	800e9e6 <err_tcp+0x62>
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	721a      	strb	r2, [r3, #8]
 800e9e6:	69b8      	ldr	r0, [r7, #24]
 800e9e8:	f00b fa6a 	bl	8019ec0 <sys_arch_unprotect>
 800e9ec:	e008      	b.n	800ea00 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800e9ee:	f00b fa59 	bl	8019ea4 <sys_arch_protect>
 800e9f2:	61f8      	str	r0, [r7, #28]
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	78fa      	ldrb	r2, [r7, #3]
 800e9f8:	721a      	strb	r2, [r3, #8]
 800e9fa:	69f8      	ldr	r0, [r7, #28]
 800e9fc:	f00b fa60 	bl	8019ec0 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d005      	beq.n	800ea14 <err_tcp+0x90>
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	2104      	movs	r1, #4
 800ea10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea12:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d005      	beq.n	800ea28 <err_tcp+0xa4>
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea20:	2200      	movs	r2, #0
 800ea22:	2100      	movs	r1, #0
 800ea24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea26:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d005      	beq.n	800ea3c <err_tcp+0xb8>
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea34:	2200      	movs	r2, #0
 800ea36:	2102      	movs	r1, #2
 800ea38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea3a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	3310      	adds	r3, #16
 800ea40:	4618      	mov	r0, r3
 800ea42:	f00b f913 	bl	8019c6c <sys_mbox_valid>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d005      	beq.n	800ea58 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	3310      	adds	r3, #16
 800ea50:	2100      	movs	r1, #0
 800ea52:	4618      	mov	r0, r3
 800ea54:	f00b f895 	bl	8019b82 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	3314      	adds	r3, #20
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f00b f905 	bl	8019c6c <sys_mbox_valid>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d005      	beq.n	800ea74 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800ea68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6a:	3314      	adds	r3, #20
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f00b f887 	bl	8019b82 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ea74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d007      	beq.n	800ea8c <err_tcp+0x108>
 800ea7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea80:	2b04      	cmp	r3, #4
 800ea82:	d003      	beq.n	800ea8c <err_tcp+0x108>
 800ea84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d14d      	bne.n	800eb28 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8e:	7f1b      	ldrb	r3, [r3, #28]
 800ea90:	f003 0304 	and.w	r3, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	bf14      	ite	ne
 800ea98:	2301      	movne	r3, #1
 800ea9a:	2300      	moveq	r3, #0
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	7f1b      	ldrb	r3, [r3, #28]
 800eaa4:	f023 0304 	bic.w	r3, r3, #4
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d145      	bne.n	800eb40 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d106      	bne.n	800eaca <err_tcp+0x146>
 800eabc:	4b23      	ldr	r3, [pc, #140]	; (800eb4c <err_tcp+0x1c8>)
 800eabe:	f240 12b3 	movw	r2, #435	; 0x1b3
 800eac2:	4925      	ldr	r1, [pc, #148]	; (800eb58 <err_tcp+0x1d4>)
 800eac4:	4823      	ldr	r0, [pc, #140]	; (800eb54 <err_tcp+0x1d0>)
 800eac6:	f00b ffe3 	bl	801aa90 <iprintf>
      conn->current_msg->err = err;
 800eaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eace:	78fa      	ldrb	r2, [r7, #3]
 800ead0:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	330c      	adds	r3, #12
 800eada:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800eadc:	6938      	ldr	r0, [r7, #16]
 800eade:	f00b f956 	bl	8019d8e <sys_sem_valid>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d106      	bne.n	800eaf6 <err_tcp+0x172>
 800eae8:	4b18      	ldr	r3, [pc, #96]	; (800eb4c <err_tcp+0x1c8>)
 800eaea:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800eaee:	491b      	ldr	r1, [pc, #108]	; (800eb5c <err_tcp+0x1d8>)
 800eaf0:	4818      	ldr	r0, [pc, #96]	; (800eb54 <err_tcp+0x1d0>)
 800eaf2:	f00b ffcd 	bl	801aa90 <iprintf>
      conn->current_msg = NULL;
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf8:	2200      	movs	r2, #0
 800eafa:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00e      	beq.n	800eb20 <err_tcp+0x19c>
 800eb02:	f00b f9cf 	bl	8019ea4 <sys_arch_protect>
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eb0e:	f113 0f0c 	cmn.w	r3, #12
 800eb12:	db02      	blt.n	800eb1a <err_tcp+0x196>
 800eb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb16:	78fa      	ldrb	r2, [r7, #3]
 800eb18:	721a      	strb	r2, [r3, #8]
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f00b f9d0 	bl	8019ec0 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800eb20:	6938      	ldr	r0, [r7, #16]
 800eb22:	f00b f91a 	bl	8019d5a <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800eb26:	e00b      	b.n	800eb40 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d008      	beq.n	800eb42 <err_tcp+0x1be>
 800eb30:	4b06      	ldr	r3, [pc, #24]	; (800eb4c <err_tcp+0x1c8>)
 800eb32:	f240 12bd 	movw	r2, #445	; 0x1bd
 800eb36:	490a      	ldr	r1, [pc, #40]	; (800eb60 <err_tcp+0x1dc>)
 800eb38:	4806      	ldr	r0, [pc, #24]	; (800eb54 <err_tcp+0x1d0>)
 800eb3a:	f00b ffa9 	bl	801aa90 <iprintf>
  }
}
 800eb3e:	e000      	b.n	800eb42 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800eb40:	bf00      	nop
}
 800eb42:	bf00      	nop
 800eb44:	3728      	adds	r7, #40	; 0x28
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	0801bba4 	.word	0x0801bba4
 800eb50:	0801bcc8 	.word	0x0801bcc8
 800eb54:	0801bbfc 	.word	0x0801bbfc
 800eb58:	0801bcd8 	.word	0x0801bcd8
 800eb5c:	0801bcf4 	.word	0x0801bcf4
 800eb60:	0801bd10 	.word	0x0801bd10

0800eb64 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800eb72:	6879      	ldr	r1, [r7, #4]
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f004 f9db 	bl	8012f30 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800eb7a:	490a      	ldr	r1, [pc, #40]	; (800eba4 <setup_tcp+0x40>)
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f004 f9e9 	bl	8012f54 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800eb82:	4909      	ldr	r1, [pc, #36]	; (800eba8 <setup_tcp+0x44>)
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f004 fa07 	bl	8012f98 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	4907      	ldr	r1, [pc, #28]	; (800ebac <setup_tcp+0x48>)
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f004 fa5c 	bl	801304c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800eb94:	4906      	ldr	r1, [pc, #24]	; (800ebb0 <setup_tcp+0x4c>)
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f004 fa1e 	bl	8012fd8 <tcp_err>
}
 800eb9c:	bf00      	nop
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	0800e705 	.word	0x0800e705
 800eba8:	0800e8dd 	.word	0x0800e8dd
 800ebac:	0800e815 	.word	0x0800e815
 800ebb0:	0800e985 	.word	0x0800e985

0800ebb4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d102      	bne.n	800ebd2 <accept_function+0x1e>
    return ERR_VAL;
 800ebcc:	f06f 0305 	mvn.w	r3, #5
 800ebd0:	e08d      	b.n	800ecee <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	3314      	adds	r3, #20
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f00b f848 	bl	8019c6c <sys_mbox_valid>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d102      	bne.n	800ebe8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ebe2:	f06f 0305 	mvn.w	r3, #5
 800ebe6:	e082      	b.n	800ecee <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d115      	bne.n	800ec1a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	3314      	adds	r3, #20
 800ebf2:	4941      	ldr	r1, [pc, #260]	; (800ecf8 <accept_function+0x144>)
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f00a ffc4 	bl	8019b82 <sys_mbox_trypost>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d109      	bne.n	800ec14 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d005      	beq.n	800ec14 <accept_function+0x60>
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2100      	movs	r1, #0
 800ec10:	69f8      	ldr	r0, [r7, #28]
 800ec12:	4798      	blx	r3
    }
    return ERR_VAL;
 800ec14:	f06f 0305 	mvn.w	r3, #5
 800ec18:	e069      	b.n	800ecee <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	781a      	ldrb	r2, [r3, #0]
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec22:	4619      	mov	r1, r3
 800ec24:	4610      	mov	r0, r2
 800ec26:	f000 f8ff 	bl	800ee28 <netconn_alloc>
 800ec2a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d115      	bne.n	800ec5e <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	3314      	adds	r3, #20
 800ec36:	4930      	ldr	r1, [pc, #192]	; (800ecf8 <accept_function+0x144>)
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f00a ffa2 	bl	8019b82 <sys_mbox_trypost>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d109      	bne.n	800ec58 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d005      	beq.n	800ec58 <accept_function+0xa4>
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec50:	2200      	movs	r2, #0
 800ec52:	2100      	movs	r1, #0
 800ec54:	69f8      	ldr	r0, [r7, #28]
 800ec56:	4798      	blx	r3
    }
    return ERR_MEM;
 800ec58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec5c:	e047      	b.n	800ecee <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ec64:	69b8      	ldr	r0, [r7, #24]
 800ec66:	f7ff ff7d 	bl	800eb64 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	79fa      	ldrb	r2, [r7, #7]
 800ec6e:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	3314      	adds	r3, #20
 800ec74:	69b9      	ldr	r1, [r7, #24]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f00a ff83 	bl	8019b82 <sys_mbox_trypost>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d02a      	beq.n	800ecd8 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ec88:	2100      	movs	r1, #0
 800ec8a:	6978      	ldr	r0, [r7, #20]
 800ec8c:	f004 f950 	bl	8012f30 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ec90:	2100      	movs	r1, #0
 800ec92:	6978      	ldr	r0, [r7, #20]
 800ec94:	f004 f95e 	bl	8012f54 <tcp_recv>
    tcp_sent(pcb, NULL);
 800ec98:	2100      	movs	r1, #0
 800ec9a:	6978      	ldr	r0, [r7, #20]
 800ec9c:	f004 f97c 	bl	8012f98 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800eca0:	2200      	movs	r2, #0
 800eca2:	2100      	movs	r1, #0
 800eca4:	6978      	ldr	r0, [r7, #20]
 800eca6:	f004 f9d1 	bl	801304c <tcp_poll>
    tcp_err(pcb, NULL);
 800ecaa:	2100      	movs	r1, #0
 800ecac:	6978      	ldr	r0, [r7, #20]
 800ecae:	f004 f993 	bl	8012fd8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	3310      	adds	r3, #16
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f00a ff39 	bl	8019b34 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	3310      	adds	r3, #16
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f00a ffe1 	bl	8019c8e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800eccc:	69b8      	ldr	r0, [r7, #24]
 800ecce:	f000 f91b 	bl	800ef08 <netconn_free>
    return ERR_MEM;
 800ecd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecd6:	e00a      	b.n	800ecee <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d005      	beq.n	800ecec <accept_function+0x138>
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece4:	2200      	movs	r2, #0
 800ece6:	2100      	movs	r1, #0
 800ece8:	69f8      	ldr	r0, [r7, #28]
 800ecea:	4798      	blx	r3
  }

  return ERR_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3720      	adds	r7, #32
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20007640 	.word	0x20007640

0800ecfc <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ecfc:	b590      	push	{r4, r7, lr}
 800ecfe:	b085      	sub	sp, #20
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d006      	beq.n	800ed20 <pcb_new+0x24>
 800ed12:	4b2b      	ldr	r3, [pc, #172]	; (800edc0 <pcb_new+0xc4>)
 800ed14:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800ed18:	492a      	ldr	r1, [pc, #168]	; (800edc4 <pcb_new+0xc8>)
 800ed1a:	482b      	ldr	r0, [pc, #172]	; (800edc8 <pcb_new+0xcc>)
 800ed1c:	f00b feb8 	bl	801aa90 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed2a:	2b10      	cmp	r3, #16
 800ed2c:	d022      	beq.n	800ed74 <pcb_new+0x78>
 800ed2e:	2b20      	cmp	r3, #32
 800ed30:	d133      	bne.n	800ed9a <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681c      	ldr	r4, [r3, #0]
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f008 fc94 	bl	8017666 <udp_new_ip_type>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d02a      	beq.n	800eda2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	2b22      	cmp	r3, #34	; 0x22
 800ed54:	d104      	bne.n	800ed60 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6858      	ldr	r0, [r3, #4]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	4917      	ldr	r1, [pc, #92]	; (800edcc <pcb_new+0xd0>)
 800ed6e:	f008 fc1f 	bl	80175b0 <udp_recv>
    }
    break;
 800ed72:	e016      	b.n	800eda2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681c      	ldr	r4, [r3, #0]
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f004 f8ca 	bl	8012f14 <tcp_new_ip_type>
 800ed80:	4603      	mov	r3, r0
 800ed82:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00b      	beq.n	800eda6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff fee6 	bl	800eb64 <setup_tcp>
    }
    break;
 800ed98:	e005      	b.n	800eda6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	22fa      	movs	r2, #250	; 0xfa
 800ed9e:	711a      	strb	r2, [r3, #4]
    return;
 800eda0:	e00a      	b.n	800edb8 <pcb_new+0xbc>
    break;
 800eda2:	bf00      	nop
 800eda4:	e000      	b.n	800eda8 <pcb_new+0xac>
    break;
 800eda6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d102      	bne.n	800edb8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	22ff      	movs	r2, #255	; 0xff
 800edb6:	711a      	strb	r2, [r3, #4]
  }
}
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd90      	pop	{r4, r7, pc}
 800edbe:	bf00      	nop
 800edc0:	0801bba4 	.word	0x0801bba4
 800edc4:	0801bd2c 	.word	0x0801bd2c
 800edc8:	0801bbfc 	.word	0x0801bbfc
 800edcc:	0800e609 	.word	0x0800e609

0800edd0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d102      	bne.n	800edf2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7ff ff85 	bl	800ecfc <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d012      	beq.n	800ee20 <lwip_netconn_do_newconn+0x50>
 800edfa:	f00b f853 	bl	8019ea4 <sys_arch_protect>
 800edfe:	60b8      	str	r0, [r7, #8]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ee08:	f113 0f0c 	cmn.w	r3, #12
 800ee0c:	db05      	blt.n	800ee1a <lwip_netconn_do_newconn+0x4a>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ee18:	721a      	strb	r2, [r3, #8]
 800ee1a:	68b8      	ldr	r0, [r7, #8]
 800ee1c:	f00b f850 	bl	8019ec0 <sys_arch_unprotect>
}
 800ee20:	bf00      	nop
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	6039      	str	r1, [r7, #0]
 800ee32:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ee34:	2007      	movs	r0, #7
 800ee36:	f001 fe13 	bl	8010a60 <memp_malloc>
 800ee3a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d101      	bne.n	800ee46 <netconn_alloc+0x1e>
    return NULL;
 800ee42:	2300      	movs	r3, #0
 800ee44:	e055      	b.n	800eef2 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	79fa      	ldrb	r2, [r7, #7]
 800ee50:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	2200      	movs	r2, #0
 800ee56:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800ee58:	79fb      	ldrb	r3, [r7, #7]
 800ee5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee5e:	2b10      	cmp	r3, #16
 800ee60:	d004      	beq.n	800ee6c <netconn_alloc+0x44>
 800ee62:	2b20      	cmp	r3, #32
 800ee64:	d105      	bne.n	800ee72 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ee66:	2306      	movs	r3, #6
 800ee68:	60fb      	str	r3, [r7, #12]
    break;
 800ee6a:	e00a      	b.n	800ee82 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ee6c:	2306      	movs	r3, #6
 800ee6e:	60fb      	str	r3, [r7, #12]
    break;
 800ee70:	e007      	b.n	800ee82 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ee72:	4b22      	ldr	r3, [pc, #136]	; (800eefc <netconn_alloc+0xd4>)
 800ee74:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ee78:	4921      	ldr	r1, [pc, #132]	; (800ef00 <netconn_alloc+0xd8>)
 800ee7a:	4822      	ldr	r0, [pc, #136]	; (800ef04 <netconn_alloc+0xdc>)
 800ee7c:	f00b fe08 	bl	801aa90 <iprintf>
    goto free_and_return;
 800ee80:	e032      	b.n	800eee8 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	3310      	adds	r3, #16
 800ee86:	68f9      	ldr	r1, [r7, #12]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f00a fe31 	bl	8019af0 <sys_mbox_new>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d128      	bne.n	800eee6 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	330c      	adds	r3, #12
 800ee98:	2100      	movs	r1, #0
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f00a ff04 	bl	8019ca8 <sys_sem_new>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d005      	beq.n	800eeb2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	3310      	adds	r3, #16
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f00a fe42 	bl	8019b34 <sys_mbox_free>
    goto free_and_return;
 800eeb0:	e01a      	b.n	800eee8 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	3314      	adds	r3, #20
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f00a fee9 	bl	8019c8e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	2200      	movs	r2, #0
 800eec0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eec8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2200      	movs	r2, #0
 800eed4:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	2200      	movs	r2, #0
 800eeda:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	2200      	movs	r2, #0
 800eee0:	771a      	strb	r2, [r3, #28]
  return conn;
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	e005      	b.n	800eef2 <netconn_alloc+0xca>
    goto free_and_return;
 800eee6:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800eee8:	68b9      	ldr	r1, [r7, #8]
 800eeea:	2007      	movs	r0, #7
 800eeec:	f001 fe0a 	bl	8010b04 <memp_free>
  return NULL;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	0801bba4 	.word	0x0801bba4
 800ef00:	0801bd4c 	.word	0x0801bd4c
 800ef04:	0801bbfc 	.word	0x0801bbfc

0800ef08 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d006      	beq.n	800ef26 <netconn_free+0x1e>
 800ef18:	4b1b      	ldr	r3, [pc, #108]	; (800ef88 <netconn_free+0x80>)
 800ef1a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ef1e:	491b      	ldr	r1, [pc, #108]	; (800ef8c <netconn_free+0x84>)
 800ef20:	481b      	ldr	r0, [pc, #108]	; (800ef90 <netconn_free+0x88>)
 800ef22:	f00b fdb5 	bl	801aa90 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3310      	adds	r3, #16
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f00a fe9e 	bl	8019c6c <sys_mbox_valid>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d006      	beq.n	800ef44 <netconn_free+0x3c>
 800ef36:	4b14      	ldr	r3, [pc, #80]	; (800ef88 <netconn_free+0x80>)
 800ef38:	f240 22e2 	movw	r2, #738	; 0x2e2
 800ef3c:	4915      	ldr	r1, [pc, #84]	; (800ef94 <netconn_free+0x8c>)
 800ef3e:	4814      	ldr	r0, [pc, #80]	; (800ef90 <netconn_free+0x88>)
 800ef40:	f00b fda6 	bl	801aa90 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3314      	adds	r3, #20
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f00a fe8f 	bl	8019c6c <sys_mbox_valid>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d006      	beq.n	800ef62 <netconn_free+0x5a>
 800ef54:	4b0c      	ldr	r3, [pc, #48]	; (800ef88 <netconn_free+0x80>)
 800ef56:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ef5a:	490f      	ldr	r1, [pc, #60]	; (800ef98 <netconn_free+0x90>)
 800ef5c:	480c      	ldr	r0, [pc, #48]	; (800ef90 <netconn_free+0x88>)
 800ef5e:	f00b fd97 	bl	801aa90 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	330c      	adds	r3, #12
 800ef66:	4618      	mov	r0, r3
 800ef68:	f00a ff04 	bl	8019d74 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	330c      	adds	r3, #12
 800ef70:	4618      	mov	r0, r3
 800ef72:	f00a ff1d 	bl	8019db0 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	2007      	movs	r0, #7
 800ef7a:	f001 fdc3 	bl	8010b04 <memp_free>
}
 800ef7e:	bf00      	nop
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	0801bba4 	.word	0x0801bba4
 800ef8c:	0801bd74 	.word	0x0801bd74
 800ef90:	0801bbfc 	.word	0x0801bbfc
 800ef94:	0801bda4 	.word	0x0801bda4
 800ef98:	0801bde0 	.word	0x0801bde0

0800ef9c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	3310      	adds	r3, #16
 800efa8:	4618      	mov	r0, r3
 800efaa:	f00a fe5f 	bl	8019c6c <sys_mbox_valid>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d035      	beq.n	800f020 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800efb4:	e01e      	b.n	800eff4 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efbe:	2b10      	cmp	r3, #16
 800efc0:	d114      	bne.n	800efec <netconn_drain+0x50>
        if (mem != NULL) {
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d015      	beq.n	800eff4 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d007      	beq.n	800efe4 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	891b      	ldrh	r3, [r3, #8]
 800efdc:	4619      	mov	r1, r3
 800efde:	4610      	mov	r0, r2
 800efe0:	f003 f9c4 	bl	801236c <tcp_recved>
          }
          pbuf_free(p);
 800efe4:	6978      	ldr	r0, [r7, #20]
 800efe6:	f002 fae7 	bl	80115b8 <pbuf_free>
 800efea:	e003      	b.n	800eff4 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 ff38 	bl	800fe64 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3310      	adds	r3, #16
 800eff8:	f107 020c 	add.w	r2, r7, #12
 800effc:	4611      	mov	r1, r2
 800effe:	4618      	mov	r0, r3
 800f000:	f00a fe18 	bl	8019c34 <sys_arch_mbox_tryfetch>
 800f004:	4603      	mov	r3, r0
 800f006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f00a:	d1d4      	bne.n	800efb6 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	3310      	adds	r3, #16
 800f010:	4618      	mov	r0, r3
 800f012:	f00a fd8f 	bl	8019b34 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	3310      	adds	r3, #16
 800f01a:	4618      	mov	r0, r3
 800f01c:	f00a fe37 	bl	8019c8e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	3314      	adds	r3, #20
 800f024:	4618      	mov	r0, r3
 800f026:	f00a fe21 	bl	8019c6c <sys_mbox_valid>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d02e      	beq.n	800f08e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f030:	e017      	b.n	800f062 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	4a18      	ldr	r2, [pc, #96]	; (800f098 <netconn_drain+0xfc>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d013      	beq.n	800f062 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800f03e:	6938      	ldr	r0, [r7, #16]
 800f040:	f7ff ffac 	bl	800ef9c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d007      	beq.n	800f05c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	4618      	mov	r0, r3
 800f052:	f002 fff7 	bl	8012044 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	2200      	movs	r2, #0
 800f05a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800f05c:	6938      	ldr	r0, [r7, #16]
 800f05e:	f7ff ff53 	bl	800ef08 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3314      	adds	r3, #20
 800f066:	f107 020c 	add.w	r2, r7, #12
 800f06a:	4611      	mov	r1, r2
 800f06c:	4618      	mov	r0, r3
 800f06e:	f00a fde1 	bl	8019c34 <sys_arch_mbox_tryfetch>
 800f072:	4603      	mov	r3, r0
 800f074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f078:	d1db      	bne.n	800f032 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	3314      	adds	r3, #20
 800f07e:	4618      	mov	r0, r3
 800f080:	f00a fd58 	bl	8019b34 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3314      	adds	r3, #20
 800f088:	4618      	mov	r0, r3
 800f08a:	f00a fe00 	bl	8019c8e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f08e:	bf00      	nop
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20007640 	.word	0x20007640

0800f09c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b088      	sub	sp, #32
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d106      	bne.n	800f0c0 <lwip_netconn_do_close_internal+0x24>
 800f0b2:	4baa      	ldr	r3, [pc, #680]	; (800f35c <lwip_netconn_do_close_internal+0x2c0>)
 800f0b4:	f240 3243 	movw	r2, #835	; 0x343
 800f0b8:	49a9      	ldr	r1, [pc, #676]	; (800f360 <lwip_netconn_do_close_internal+0x2c4>)
 800f0ba:	48aa      	ldr	r0, [pc, #680]	; (800f364 <lwip_netconn_do_close_internal+0x2c8>)
 800f0bc:	f00b fce8 	bl	801aa90 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0c8:	2b10      	cmp	r3, #16
 800f0ca:	d006      	beq.n	800f0da <lwip_netconn_do_close_internal+0x3e>
 800f0cc:	4ba3      	ldr	r3, [pc, #652]	; (800f35c <lwip_netconn_do_close_internal+0x2c0>)
 800f0ce:	f44f 7251 	mov.w	r2, #836	; 0x344
 800f0d2:	49a5      	ldr	r1, [pc, #660]	; (800f368 <lwip_netconn_do_close_internal+0x2cc>)
 800f0d4:	48a3      	ldr	r0, [pc, #652]	; (800f364 <lwip_netconn_do_close_internal+0x2c8>)
 800f0d6:	f00b fcdb 	bl	801aa90 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	785b      	ldrb	r3, [r3, #1]
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d006      	beq.n	800f0f0 <lwip_netconn_do_close_internal+0x54>
 800f0e2:	4b9e      	ldr	r3, [pc, #632]	; (800f35c <lwip_netconn_do_close_internal+0x2c0>)
 800f0e4:	f240 3245 	movw	r2, #837	; 0x345
 800f0e8:	49a0      	ldr	r1, [pc, #640]	; (800f36c <lwip_netconn_do_close_internal+0x2d0>)
 800f0ea:	489e      	ldr	r0, [pc, #632]	; (800f364 <lwip_netconn_do_close_internal+0x2c8>)
 800f0ec:	f00b fcd0 	bl	801aa90 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d106      	bne.n	800f106 <lwip_netconn_do_close_internal+0x6a>
 800f0f8:	4b98      	ldr	r3, [pc, #608]	; (800f35c <lwip_netconn_do_close_internal+0x2c0>)
 800f0fa:	f240 3246 	movw	r2, #838	; 0x346
 800f0fe:	499c      	ldr	r1, [pc, #624]	; (800f370 <lwip_netconn_do_close_internal+0x2d4>)
 800f100:	4898      	ldr	r0, [pc, #608]	; (800f364 <lwip_netconn_do_close_internal+0x2c8>)
 800f102:	f00b fcc5 	bl	801aa90 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d106      	bne.n	800f11c <lwip_netconn_do_close_internal+0x80>
 800f10e:	4b93      	ldr	r3, [pc, #588]	; (800f35c <lwip_netconn_do_close_internal+0x2c0>)
 800f110:	f240 3247 	movw	r2, #839	; 0x347
 800f114:	4997      	ldr	r1, [pc, #604]	; (800f374 <lwip_netconn_do_close_internal+0x2d8>)
 800f116:	4893      	ldr	r0, [pc, #588]	; (800f364 <lwip_netconn_do_close_internal+0x2c8>)
 800f118:	f00b fcba 	bl	801aa90 <iprintf>

  tpcb = conn->pcb.tcp;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f126:	7a1b      	ldrb	r3, [r3, #8]
 800f128:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f132:	7dfb      	ldrb	r3, [r7, #23]
 800f134:	f003 0302 	and.w	r3, r3, #2
 800f138:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f13a:	7dfb      	ldrb	r3, [r7, #23]
 800f13c:	2b03      	cmp	r3, #3
 800f13e:	d102      	bne.n	800f146 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800f140:	2301      	movs	r3, #1
 800f142:	77bb      	strb	r3, [r7, #30]
 800f144:	e01f      	b.n	800f186 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f146:	7dbb      	ldrb	r3, [r7, #22]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00e      	beq.n	800f16a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f150:	2b05      	cmp	r3, #5
 800f152:	d007      	beq.n	800f164 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f158:	2b06      	cmp	r3, #6
 800f15a:	d003      	beq.n	800f164 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f160:	2b08      	cmp	r3, #8
 800f162:	d102      	bne.n	800f16a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800f164:	2301      	movs	r3, #1
 800f166:	77bb      	strb	r3, [r7, #30]
 800f168:	e00d      	b.n	800f186 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f16a:	7d7b      	ldrb	r3, [r7, #21]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d008      	beq.n	800f182 <lwip_netconn_do_close_internal+0xe6>
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	7e9b      	ldrb	r3, [r3, #26]
 800f174:	f003 0310 	and.w	r3, r3, #16
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d002      	beq.n	800f182 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800f17c:	2301      	movs	r3, #1
 800f17e:	77bb      	strb	r3, [r7, #30]
 800f180:	e001      	b.n	800f186 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800f186:	7fbb      	ldrb	r3, [r7, #30]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d003      	beq.n	800f194 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f18c:	2100      	movs	r1, #0
 800f18e:	69b8      	ldr	r0, [r7, #24]
 800f190:	f003 fece 	bl	8012f30 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	7d1b      	ldrb	r3, [r3, #20]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d104      	bne.n	800f1a6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f19c:	2100      	movs	r1, #0
 800f19e:	69b8      	ldr	r0, [r7, #24]
 800f1a0:	f003 ff3c 	bl	801301c <tcp_accept>
 800f1a4:	e01d      	b.n	800f1e2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f1a6:	7dbb      	ldrb	r3, [r7, #22]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d007      	beq.n	800f1bc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	69b8      	ldr	r0, [r7, #24]
 800f1b0:	f003 fed0 	bl	8012f54 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	69b8      	ldr	r0, [r7, #24]
 800f1b8:	f003 ff30 	bl	801301c <tcp_accept>
    }
    if (shut_tx) {
 800f1bc:	7d7b      	ldrb	r3, [r7, #21]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d003      	beq.n	800f1ca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	69b8      	ldr	r0, [r7, #24]
 800f1c6:	f003 fee7 	bl	8012f98 <tcp_sent>
    }
    if (close) {
 800f1ca:	7fbb      	ldrb	r3, [r7, #30]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d008      	beq.n	800f1e2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	69b8      	ldr	r0, [r7, #24]
 800f1d6:	f003 ff39 	bl	801304c <tcp_poll>
      tcp_err(tpcb, NULL);
 800f1da:	2100      	movs	r1, #0
 800f1dc:	69b8      	ldr	r0, [r7, #24]
 800f1de:	f003 fefb 	bl	8012fd8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800f1e2:	7fbb      	ldrb	r3, [r7, #30]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d005      	beq.n	800f1f4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f1e8:	69b8      	ldr	r0, [r7, #24]
 800f1ea:	f002 fe19 	bl	8011e20 <tcp_close>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	77fb      	strb	r3, [r7, #31]
 800f1f2:	e007      	b.n	800f204 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f1f4:	7dbb      	ldrb	r3, [r7, #22]
 800f1f6:	7d7a      	ldrb	r2, [r7, #21]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	69b8      	ldr	r0, [r7, #24]
 800f1fc:	f002 fe28 	bl	8011e50 <tcp_shutdown>
 800f200:	4603      	mov	r3, r0
 800f202:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800f204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d102      	bne.n	800f212 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f20c:	2301      	movs	r3, #1
 800f20e:	777b      	strb	r3, [r7, #29]
 800f210:	e016      	b.n	800f240 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f212:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f21a:	d10f      	bne.n	800f23c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f220:	7a5b      	ldrb	r3, [r3, #9]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10c      	bne.n	800f240 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f226:	2301      	movs	r3, #1
 800f228:	777b      	strb	r3, [r7, #29]
        if (close) {
 800f22a:	7fbb      	ldrb	r3, [r7, #30]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d007      	beq.n	800f240 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f230:	69b8      	ldr	r0, [r7, #24]
 800f232:	f002 ff07 	bl	8012044 <tcp_abort>
          err = ERR_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	77fb      	strb	r3, [r7, #31]
 800f23a:	e001      	b.n	800f240 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f23c:	2301      	movs	r3, #1
 800f23e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800f240:	7f7b      	ldrb	r3, [r7, #29]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d056      	beq.n	800f2f4 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	330c      	adds	r3, #12
 800f24e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f254:	7ffa      	ldrb	r2, [r7, #31]
 800f256:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f264:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d129      	bne.n	800f2c0 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800f26c:	7fbb      	ldrb	r3, [r7, #30]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00c      	beq.n	800f28c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d005      	beq.n	800f28c <lwip_netconn_do_close_internal+0x1f0>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f284:	2200      	movs	r2, #0
 800f286:	2104      	movs	r1, #4
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	4798      	blx	r3
      }
      if (shut_rx) {
 800f28c:	7dbb      	ldrb	r3, [r7, #22]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d009      	beq.n	800f2a6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f296:	2b00      	cmp	r3, #0
 800f298:	d005      	beq.n	800f2a6 <lwip_netconn_do_close_internal+0x20a>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29e:	2200      	movs	r2, #0
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	4798      	blx	r3
      }
      if (shut_tx) {
 800f2a6:	7d7b      	ldrb	r3, [r7, #21]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d009      	beq.n	800f2c0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d005      	beq.n	800f2c0 <lwip_netconn_do_close_internal+0x224>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	2102      	movs	r1, #2
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00e      	beq.n	800f2e4 <lwip_netconn_do_close_internal+0x248>
 800f2c6:	f00a fded 	bl	8019ea4 <sys_arch_protect>
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f2d2:	f113 0f0c 	cmn.w	r3, #12
 800f2d6:	db02      	blt.n	800f2de <lwip_netconn_do_close_internal+0x242>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	7ffa      	ldrb	r2, [r7, #31]
 800f2dc:	721a      	strb	r2, [r3, #8]
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f00a fdee 	bl	8019ec0 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f2e4:	78fb      	ldrb	r3, [r7, #3]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f2ea:	6938      	ldr	r0, [r7, #16]
 800f2ec:	f00a fd35 	bl	8019d5a <sys_sem_signal>
    }
    return ERR_OK;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	e02e      	b.n	800f352 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800f2f4:	7f7b      	ldrb	r3, [r7, #29]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d11e      	bne.n	800f338 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	7d1b      	ldrb	r3, [r3, #20]
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d106      	bne.n	800f310 <lwip_netconn_do_close_internal+0x274>
 800f302:	4b16      	ldr	r3, [pc, #88]	; (800f35c <lwip_netconn_do_close_internal+0x2c0>)
 800f304:	f240 32e3 	movw	r2, #995	; 0x3e3
 800f308:	491b      	ldr	r1, [pc, #108]	; (800f378 <lwip_netconn_do_close_internal+0x2dc>)
 800f30a:	4816      	ldr	r0, [pc, #88]	; (800f364 <lwip_netconn_do_close_internal+0x2c8>)
 800f30c:	f00b fbc0 	bl	801aa90 <iprintf>
    if (shut_tx) {
 800f310:	7d7b      	ldrb	r3, [r7, #21]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800f316:	4919      	ldr	r1, [pc, #100]	; (800f37c <lwip_netconn_do_close_internal+0x2e0>)
 800f318:	69b8      	ldr	r0, [r7, #24]
 800f31a:	f003 fe3d 	bl	8012f98 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f31e:	2201      	movs	r2, #1
 800f320:	4917      	ldr	r1, [pc, #92]	; (800f380 <lwip_netconn_do_close_internal+0x2e4>)
 800f322:	69b8      	ldr	r0, [r7, #24]
 800f324:	f003 fe92 	bl	801304c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f328:	4916      	ldr	r1, [pc, #88]	; (800f384 <lwip_netconn_do_close_internal+0x2e8>)
 800f32a:	69b8      	ldr	r0, [r7, #24]
 800f32c:	f003 fe54 	bl	8012fd8 <tcp_err>
    tcp_arg(tpcb, conn);
 800f330:	6879      	ldr	r1, [r7, #4]
 800f332:	69b8      	ldr	r0, [r7, #24]
 800f334:	f003 fdfc 	bl	8012f30 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f338:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d106      	bne.n	800f34e <lwip_netconn_do_close_internal+0x2b2>
 800f340:	4b06      	ldr	r3, [pc, #24]	; (800f35c <lwip_netconn_do_close_internal+0x2c0>)
 800f342:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f346:	4910      	ldr	r1, [pc, #64]	; (800f388 <lwip_netconn_do_close_internal+0x2ec>)
 800f348:	4806      	ldr	r0, [pc, #24]	; (800f364 <lwip_netconn_do_close_internal+0x2c8>)
 800f34a:	f00b fba1 	bl	801aa90 <iprintf>
  return err;
 800f34e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3720      	adds	r7, #32
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	0801bba4 	.word	0x0801bba4
 800f360:	0801be1c 	.word	0x0801be1c
 800f364:	0801bbfc 	.word	0x0801bbfc
 800f368:	0801be2c 	.word	0x0801be2c
 800f36c:	0801be4c 	.word	0x0801be4c
 800f370:	0801be70 	.word	0x0801be70
 800f374:	0801bcd8 	.word	0x0801bcd8
 800f378:	0801be84 	.word	0x0801be84
 800f37c:	0800e8dd 	.word	0x0800e8dd
 800f380:	0800e815 	.word	0x0800e815
 800f384:	0800e985 	.word	0x0800e985
 800f388:	0801bea8 	.word	0x0801bea8

0800f38c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	785b      	ldrb	r3, [r3, #1]
 800f39e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f3a0:	7cfb      	ldrb	r3, [r7, #19]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00d      	beq.n	800f3c2 <lwip_netconn_do_delconn+0x36>
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3b0:	2b10      	cmp	r3, #16
 800f3b2:	d006      	beq.n	800f3c2 <lwip_netconn_do_delconn+0x36>
 800f3b4:	4b6f      	ldr	r3, [pc, #444]	; (800f574 <lwip_netconn_do_delconn+0x1e8>)
 800f3b6:	f240 4201 	movw	r2, #1025	; 0x401
 800f3ba:	496f      	ldr	r1, [pc, #444]	; (800f578 <lwip_netconn_do_delconn+0x1ec>)
 800f3bc:	486f      	ldr	r0, [pc, #444]	; (800f57c <lwip_netconn_do_delconn+0x1f0>)
 800f3be:	f00b fb67 	bl	801aa90 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f3c2:	7cfb      	ldrb	r3, [r7, #19]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d005      	beq.n	800f3d4 <lwip_netconn_do_delconn+0x48>
 800f3c8:	7cfb      	ldrb	r3, [r7, #19]
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	d002      	beq.n	800f3d4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f3ce:	7cfb      	ldrb	r3, [r7, #19]
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d109      	bne.n	800f3e8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f3d4:	7cfb      	ldrb	r3, [r7, #19]
 800f3d6:	2b03      	cmp	r3, #3
 800f3d8:	d10a      	bne.n	800f3f0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	7f1b      	ldrb	r3, [r3, #28]
 800f3e0:	f003 0304 	and.w	r3, r3, #4
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d103      	bne.n	800f3f0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	22fb      	movs	r2, #251	; 0xfb
 800f3ec:	711a      	strb	r2, [r3, #4]
 800f3ee:	e09c      	b.n	800f52a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f3f0:	7cfb      	ldrb	r3, [r7, #19]
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d10d      	bne.n	800f412 <lwip_netconn_do_delconn+0x86>
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	7f1b      	ldrb	r3, [r3, #28]
 800f3fc:	f003 0304 	and.w	r3, r3, #4
 800f400:	2b00      	cmp	r3, #0
 800f402:	d106      	bne.n	800f412 <lwip_netconn_do_delconn+0x86>
 800f404:	4b5b      	ldr	r3, [pc, #364]	; (800f574 <lwip_netconn_do_delconn+0x1e8>)
 800f406:	f240 421f 	movw	r2, #1055	; 0x41f
 800f40a:	495d      	ldr	r1, [pc, #372]	; (800f580 <lwip_netconn_do_delconn+0x1f4>)
 800f40c:	485b      	ldr	r0, [pc, #364]	; (800f57c <lwip_netconn_do_delconn+0x1f0>)
 800f40e:	f00b fb3f 	bl	801aa90 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2200      	movs	r2, #0
 800f416:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff fdbd 	bl	800ef9c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d064      	beq.n	800f4f6 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f436:	2b10      	cmp	r3, #16
 800f438:	d00e      	beq.n	800f458 <lwip_netconn_do_delconn+0xcc>
 800f43a:	2b20      	cmp	r3, #32
 800f43c:	d000      	beq.n	800f440 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800f43e:	e056      	b.n	800f4ee <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	4618      	mov	r0, r3
 800f452:	f008 f8bf 	bl	80175d4 <udp_remove>
        break;
 800f456:	e04a      	b.n	800f4ee <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d104      	bne.n	800f46c <lwip_netconn_do_delconn+0xe0>
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	6a1b      	ldr	r3, [r3, #32]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d006      	beq.n	800f47a <lwip_netconn_do_delconn+0xee>
 800f46c:	4b41      	ldr	r3, [pc, #260]	; (800f574 <lwip_netconn_do_delconn+0x1e8>)
 800f46e:	f240 4235 	movw	r2, #1077	; 0x435
 800f472:	4944      	ldr	r1, [pc, #272]	; (800f584 <lwip_netconn_do_delconn+0x1f8>)
 800f474:	4841      	ldr	r0, [pc, #260]	; (800f57c <lwip_netconn_do_delconn+0x1f0>)
 800f476:	f00b fb0b 	bl	801aa90 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2204      	movs	r2, #4
 800f480:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2203      	movs	r2, #3
 800f486:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	697a      	ldr	r2, [r7, #20]
 800f48e:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2100      	movs	r1, #0
 800f496:	4618      	mov	r0, r3
 800f498:	f7ff fe00 	bl	800f09c <lwip_netconn_do_close_internal>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d064      	beq.n	800f56c <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	785b      	ldrb	r3, [r3, #1]
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	d006      	beq.n	800f4ba <lwip_netconn_do_delconn+0x12e>
 800f4ac:	4b31      	ldr	r3, [pc, #196]	; (800f574 <lwip_netconn_do_delconn+0x1e8>)
 800f4ae:	f240 423b 	movw	r2, #1083	; 0x43b
 800f4b2:	4935      	ldr	r1, [pc, #212]	; (800f588 <lwip_netconn_do_delconn+0x1fc>)
 800f4b4:	4831      	ldr	r0, [pc, #196]	; (800f57c <lwip_netconn_do_delconn+0x1f0>)
 800f4b6:	f00b faeb 	bl	801aa90 <iprintf>
          UNLOCK_TCPIP_CORE();
 800f4ba:	4834      	ldr	r0, [pc, #208]	; (800f58c <lwip_netconn_do_delconn+0x200>)
 800f4bc:	f00a fcbf 	bl	8019e3e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	330c      	adds	r3, #12
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f00a fc15 	bl	8019cf8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800f4ce:	482f      	ldr	r0, [pc, #188]	; (800f58c <lwip_netconn_do_delconn+0x200>)
 800f4d0:	f00a fca6 	bl	8019e20 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	785b      	ldrb	r3, [r3, #1]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d046      	beq.n	800f56c <lwip_netconn_do_delconn+0x1e0>
 800f4de:	4b25      	ldr	r3, [pc, #148]	; (800f574 <lwip_netconn_do_delconn+0x1e8>)
 800f4e0:	f240 423f 	movw	r2, #1087	; 0x43f
 800f4e4:	4928      	ldr	r1, [pc, #160]	; (800f588 <lwip_netconn_do_delconn+0x1fc>)
 800f4e6:	4825      	ldr	r0, [pc, #148]	; (800f57c <lwip_netconn_do_delconn+0x1f0>)
 800f4e8:	f00b fad2 	bl	801aa90 <iprintf>
        return;
 800f4ec:	e03e      	b.n	800f56c <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d007      	beq.n	800f510 <lwip_netconn_do_delconn+0x184>
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f506:	697a      	ldr	r2, [r7, #20]
 800f508:	6810      	ldr	r0, [r2, #0]
 800f50a:	2200      	movs	r2, #0
 800f50c:	2100      	movs	r1, #0
 800f50e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f516:	2b00      	cmp	r3, #0
 800f518:	d007      	beq.n	800f52a <lwip_netconn_do_delconn+0x19e>
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f520:	697a      	ldr	r2, [r7, #20]
 800f522:	6810      	ldr	r0, [r2, #0]
 800f524:	2200      	movs	r2, #0
 800f526:	2102      	movs	r1, #2
 800f528:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	330c      	adds	r3, #12
 800f530:	4618      	mov	r0, r3
 800f532:	f00a fc2c 	bl	8019d8e <sys_sem_valid>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d018      	beq.n	800f56e <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d014      	beq.n	800f56e <lwip_netconn_do_delconn+0x1e2>
 800f544:	f00a fcae 	bl	8019ea4 <sys_arch_protect>
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f552:	f113 0f0c 	cmn.w	r3, #12
 800f556:	db05      	blt.n	800f564 <lwip_netconn_do_delconn+0x1d8>
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	697a      	ldr	r2, [r7, #20]
 800f55e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f562:	721a      	strb	r2, [r3, #8]
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f00a fcab 	bl	8019ec0 <sys_arch_unprotect>
 800f56a:	e000      	b.n	800f56e <lwip_netconn_do_delconn+0x1e2>
        return;
 800f56c:	bf00      	nop
  }
}
 800f56e:	3718      	adds	r7, #24
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	0801bba4 	.word	0x0801bba4
 800f578:	0801beb8 	.word	0x0801beb8
 800f57c:	0801bbfc 	.word	0x0801bbfc
 800f580:	0801becc 	.word	0x0801becc
 800f584:	0801beec 	.word	0x0801beec
 800f588:	0801bf08 	.word	0x0801bf08
 800f58c:	20007644 	.word	0x20007644

0800f590 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f5a4:	f113 0f0c 	cmn.w	r3, #12
 800f5a8:	da06      	bge.n	800f5b8 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	711a      	strb	r2, [r3, #4]
 800f5b6:	e030      	b.n	800f61a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	22fa      	movs	r2, #250	; 0xfa
 800f5bc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d027      	beq.n	800f618 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5d2:	2b10      	cmp	r3, #16
 800f5d4:	d011      	beq.n	800f5fa <lwip_netconn_do_bind+0x6a>
 800f5d6:	2b20      	cmp	r3, #32
 800f5d8:	d000      	beq.n	800f5dc <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800f5da:	e01e      	b.n	800f61a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	6858      	ldr	r0, [r3, #4]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6899      	ldr	r1, [r3, #8]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	899b      	ldrh	r3, [r3, #12]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	f007 ff70 	bl	80174d0 <udp_bind>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	711a      	strb	r2, [r3, #4]
        break;
 800f5f8:	e00f      	b.n	800f61a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	6858      	ldr	r0, [r3, #4]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6899      	ldr	r1, [r3, #8]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	899b      	ldrh	r3, [r3, #12]
 800f608:	461a      	mov	r2, r3
 800f60a:	f002 fd27 	bl	801205c <tcp_bind>
 800f60e:	4603      	mov	r3, r0
 800f610:	461a      	mov	r2, r3
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	711a      	strb	r2, [r3, #4]
        break;
 800f616:	e000      	b.n	800f61a <lwip_netconn_do_bind+0x8a>
      }
    }
 800f618:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d012      	beq.n	800f648 <lwip_netconn_do_bind+0xb8>
 800f622:	f00a fc3f 	bl	8019ea4 <sys_arch_protect>
 800f626:	60b8      	str	r0, [r7, #8]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f630:	f113 0f0c 	cmn.w	r3, #12
 800f634:	db05      	blt.n	800f642 <lwip_netconn_do_bind+0xb2>
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f640:	721a      	strb	r2, [r3, #8]
 800f642:	68b8      	ldr	r0, [r7, #8]
 800f644:	f00a fc3c 	bl	8019ec0 <sys_arch_unprotect>
}
 800f648:	bf00      	nop
 800f64a:	3710      	adds	r7, #16
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b088      	sub	sp, #32
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f664:	f113 0f0c 	cmn.w	r3, #12
 800f668:	da06      	bge.n	800f678 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	711a      	strb	r2, [r3, #4]
 800f676:	e090      	b.n	800f79a <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	22f5      	movs	r2, #245	; 0xf5
 800f67c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	f000 8088 	beq.w	800f79a <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f694:	2b10      	cmp	r3, #16
 800f696:	d17d      	bne.n	800f794 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	785b      	ldrb	r3, [r3, #1]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d16f      	bne.n	800f782 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	7d1b      	ldrb	r3, [r3, #20]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d003      	beq.n	800f6b6 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	22fa      	movs	r2, #250	; 0xfa
 800f6b2:	711a      	strb	r2, [r3, #4]
 800f6b4:	e071      	b.n	800f79a <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800f6b6:	23ff      	movs	r3, #255	; 0xff
 800f6b8:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	f107 020f 	add.w	r2, r7, #15
 800f6c4:	7ef9      	ldrb	r1, [r7, #27]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f002 fd6a 	bl	80121a0 <tcp_listen_with_backlog_and_err>
 800f6cc:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d104      	bne.n	800f6de <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800f6d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	711a      	strb	r2, [r3, #4]
 800f6dc:	e05d      	b.n	800f79a <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3310      	adds	r3, #16
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f00a fac1 	bl	8019c6c <sys_mbox_valid>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00b      	beq.n	800f708 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	3310      	adds	r3, #16
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f00a fa1c 	bl	8019b34 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	3310      	adds	r3, #16
 800f702:	4618      	mov	r0, r3
 800f704:	f00a fac3 	bl	8019c8e <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	2200      	movs	r2, #0
 800f70c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	3314      	adds	r3, #20
 800f714:	4618      	mov	r0, r3
 800f716:	f00a faa9 	bl	8019c6c <sys_mbox_valid>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d10a      	bne.n	800f736 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3314      	adds	r3, #20
 800f726:	2106      	movs	r1, #6
 800f728:	4618      	mov	r0, r3
 800f72a:	f00a f9e1 	bl	8019af0 <sys_mbox_new>
 800f72e:	4603      	mov	r3, r0
 800f730:	461a      	mov	r2, r3
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d118      	bne.n	800f772 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2202      	movs	r2, #2
 800f746:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4619      	mov	r1, r3
 800f75c:	4610      	mov	r0, r2
 800f75e:	f003 fbe7 	bl	8012f30 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	4919      	ldr	r1, [pc, #100]	; (800f7d0 <lwip_netconn_do_listen+0x180>)
 800f76a:	4618      	mov	r0, r3
 800f76c:	f003 fc56 	bl	801301c <tcp_accept>
 800f770:	e013      	b.n	800f79a <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800f772:	6978      	ldr	r0, [r7, #20]
 800f774:	f002 fb54 	bl	8011e20 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2200      	movs	r2, #0
 800f77e:	605a      	str	r2, [r3, #4]
 800f780:	e00b      	b.n	800f79a <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	2b02      	cmp	r3, #2
 800f78a:	d106      	bne.n	800f79a <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	2200      	movs	r2, #0
 800f790:	711a      	strb	r2, [r3, #4]
 800f792:	e002      	b.n	800f79a <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	22f0      	movs	r2, #240	; 0xf0
 800f798:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d012      	beq.n	800f7c8 <lwip_netconn_do_listen+0x178>
 800f7a2:	f00a fb7f 	bl	8019ea4 <sys_arch_protect>
 800f7a6:	6138      	str	r0, [r7, #16]
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f7b0:	f113 0f0c 	cmn.w	r3, #12
 800f7b4:	db05      	blt.n	800f7c2 <lwip_netconn_do_listen+0x172>
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	69fa      	ldr	r2, [r7, #28]
 800f7bc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f7c0:	721a      	strb	r2, [r3, #8]
 800f7c2:	6938      	ldr	r0, [r7, #16]
 800f7c4:	f00a fb7c 	bl	8019ec0 <sys_arch_unprotect>
}
 800f7c8:	bf00      	nop
 800f7ca:	3720      	adds	r7, #32
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	0800ebb5 	.word	0x0800ebb5

0800f7d4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d022      	beq.n	800f836 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7fa:	2b10      	cmp	r3, #16
 800f7fc:	d11b      	bne.n	800f836 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f80a:	d202      	bcs.n	800f812 <lwip_netconn_do_recv+0x3e>
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	e001      	b.n	800f816 <lwip_netconn_do_recv+0x42>
 800f812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f816:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	89fa      	ldrh	r2, [r7, #14]
 800f820:	4611      	mov	r1, r2
 800f822:	4618      	mov	r0, r3
 800f824:	f002 fda2 	bl	801236c <tcp_recved>
        remaining -= recved;
 800f828:	89fb      	ldrh	r3, [r7, #14]
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1e6      	bne.n	800f804 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d012      	beq.n	800f864 <lwip_netconn_do_recv+0x90>
 800f83e:	f00a fb31 	bl	8019ea4 <sys_arch_protect>
 800f842:	60b8      	str	r0, [r7, #8]
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f84c:	f113 0f0c 	cmn.w	r3, #12
 800f850:	db05      	blt.n	800f85e <lwip_netconn_do_recv+0x8a>
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	693a      	ldr	r2, [r7, #16]
 800f858:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f85c:	721a      	strb	r2, [r3, #8]
 800f85e:	68b8      	ldr	r0, [r7, #8]
 800f860:	f00a fb2e 	bl	8019ec0 <sys_arch_unprotect>
}
 800f864:	bf00      	nop
 800f866:	3718      	adds	r7, #24
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08a      	sub	sp, #40	; 0x28
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	460b      	mov	r3, r1
 800f876:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d106      	bne.n	800f892 <lwip_netconn_do_writemore+0x26>
 800f884:	4ba3      	ldr	r3, [pc, #652]	; (800fb14 <lwip_netconn_do_writemore+0x2a8>)
 800f886:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800f88a:	49a3      	ldr	r1, [pc, #652]	; (800fb18 <lwip_netconn_do_writemore+0x2ac>)
 800f88c:	48a3      	ldr	r0, [pc, #652]	; (800fb1c <lwip_netconn_do_writemore+0x2b0>)
 800f88e:	f00b f8ff 	bl	801aa90 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	785b      	ldrb	r3, [r3, #1]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d006      	beq.n	800f8a8 <lwip_netconn_do_writemore+0x3c>
 800f89a:	4b9e      	ldr	r3, [pc, #632]	; (800fb14 <lwip_netconn_do_writemore+0x2a8>)
 800f89c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800f8a0:	499f      	ldr	r1, [pc, #636]	; (800fb20 <lwip_netconn_do_writemore+0x2b4>)
 800f8a2:	489e      	ldr	r0, [pc, #632]	; (800fb1c <lwip_netconn_do_writemore+0x2b0>)
 800f8a4:	f00b f8f4 	bl	801aa90 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d106      	bne.n	800f8be <lwip_netconn_do_writemore+0x52>
 800f8b0:	4b98      	ldr	r3, [pc, #608]	; (800fb14 <lwip_netconn_do_writemore+0x2a8>)
 800f8b2:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800f8b6:	499b      	ldr	r1, [pc, #620]	; (800fb24 <lwip_netconn_do_writemore+0x2b8>)
 800f8b8:	4898      	ldr	r0, [pc, #608]	; (800fb1c <lwip_netconn_do_writemore+0x2b0>)
 800f8ba:	f00b f8e9 	bl	801aa90 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d106      	bne.n	800f8d4 <lwip_netconn_do_writemore+0x68>
 800f8c6:	4b93      	ldr	r3, [pc, #588]	; (800fb14 <lwip_netconn_do_writemore+0x2a8>)
 800f8c8:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800f8cc:	4996      	ldr	r1, [pc, #600]	; (800fb28 <lwip_netconn_do_writemore+0x2bc>)
 800f8ce:	4893      	ldr	r0, [pc, #588]	; (800fb1c <lwip_netconn_do_writemore+0x2b0>)
 800f8d0:	f00b f8de 	bl	801aa90 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6a1a      	ldr	r2, [r3, #32]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d306      	bcc.n	800f8f0 <lwip_netconn_do_writemore+0x84>
 800f8e2:	4b8c      	ldr	r3, [pc, #560]	; (800fb14 <lwip_netconn_do_writemore+0x2a8>)
 800f8e4:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800f8e8:	4990      	ldr	r1, [pc, #576]	; (800fb2c <lwip_netconn_do_writemore+0x2c0>)
 800f8ea:	488c      	ldr	r0, [pc, #560]	; (800fb1c <lwip_netconn_do_writemore+0x2b0>)
 800f8ec:	f00b f8d0 	bl	801aa90 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f4:	7c1b      	ldrb	r3, [r3, #16]
 800f8f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	7f1b      	ldrb	r3, [r3, #28]
 800f8fe:	f003 0302 	and.w	r3, r3, #2
 800f902:	2b00      	cmp	r3, #0
 800f904:	d105      	bne.n	800f912 <lwip_netconn_do_writemore+0xa6>
 800f906:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f90a:	f003 0304 	and.w	r3, r3, #4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <lwip_netconn_do_writemore+0xaa>
 800f912:	2301      	movs	r3, #1
 800f914:	e000      	b.n	800f918 <lwip_netconn_do_writemore+0xac>
 800f916:	2300      	movs	r3, #0
 800f918:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f920:	689a      	ldr	r2, [r3, #8]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a1b      	ldr	r3, [r3, #32]
 800f926:	4413      	add	r3, r2
 800f928:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92e:	68da      	ldr	r2, [r3, #12]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6a1b      	ldr	r3, [r3, #32]
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f93e:	d309      	bcc.n	800f954 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800f940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f944:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800f946:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f94a:	f043 0302 	orr.w	r3, r3, #2
 800f94e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f952:	e001      	b.n	800f958 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f960:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800f962:	8afa      	ldrh	r2, [r7, #22]
 800f964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f966:	429a      	cmp	r2, r3
 800f968:	d212      	bcs.n	800f990 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800f96a:	8afb      	ldrh	r3, [r7, #22]
 800f96c:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800f96e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f972:	2b00      	cmp	r3, #0
 800f974:	d006      	beq.n	800f984 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800f976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d109      	bne.n	800f990 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800f97c:	23f9      	movs	r3, #249	; 0xf9
 800f97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800f982:	e02a      	b.n	800f9da <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f988:	f043 0302 	orr.w	r3, r3, #2
 800f98c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a1a      	ldr	r2, [r3, #32]
 800f994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f996:	441a      	add	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d906      	bls.n	800f9b0 <lwip_netconn_do_writemore+0x144>
 800f9a2:	4b5c      	ldr	r3, [pc, #368]	; (800fb14 <lwip_netconn_do_writemore+0x2a8>)
 800f9a4:	f240 6213 	movw	r2, #1555	; 0x613
 800f9a8:	4961      	ldr	r1, [pc, #388]	; (800fb30 <lwip_netconn_do_writemore+0x2c4>)
 800f9aa:	485c      	ldr	r0, [pc, #368]	; (800fb1c <lwip_netconn_do_writemore+0x2b0>)
 800f9ac:	f00b f870 	bl	801aa90 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6858      	ldr	r0, [r3, #4]
 800f9b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f9b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f9ba:	69f9      	ldr	r1, [r7, #28]
 800f9bc:	f006 f8fa 	bl	8015bb4 <tcp_write>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800f9c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d004      	beq.n	800f9d8 <lwip_netconn_do_writemore+0x16c>
 800f9ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f9d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9d6:	d133      	bne.n	800fa40 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800f9d8:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800f9da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d017      	beq.n	800fa12 <lwip_netconn_do_writemore+0x1a6>
 800f9e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d211      	bcs.n	800fa12 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d005      	beq.n	800fa02 <lwip_netconn_do_writemore+0x196>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f9fc:	2103      	movs	r1, #3
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	7f1b      	ldrb	r3, [r3, #28]
 800fa06:	f043 0310 	orr.w	r3, r3, #16
 800fa0a:	b2da      	uxtb	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	771a      	strb	r2, [r3, #28]
 800fa10:	e016      	b.n	800fa40 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa1a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fa1e:	d305      	bcc.n	800fa2c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fa28:	2b04      	cmp	r3, #4
 800fa2a:	d909      	bls.n	800fa40 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d005      	beq.n	800fa40 <lwip_netconn_do_writemore+0x1d4>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa3a:	2103      	movs	r1, #3
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800fa40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d134      	bne.n	800fab2 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6a1a      	ldr	r2, [r3, #32]
 800fa4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa4e:	441a      	add	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6a1a      	ldr	r2, [r3, #32]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d003      	beq.n	800fa6a <lwip_netconn_do_writemore+0x1fe>
 800fa62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d007      	beq.n	800fa7a <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	6a12      	ldr	r2, [r2, #32]
 800fa72:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800fa74:	2301      	movs	r3, #1
 800fa76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f006 fd4a 	bl	8016518 <tcp_output>
 800fa84:	4603      	mov	r3, r0
 800fa86:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800fa88:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800fa8c:	f113 0f0c 	cmn.w	r3, #12
 800fa90:	db04      	blt.n	800fa9c <lwip_netconn_do_writemore+0x230>
 800fa92:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800fa96:	f113 0f04 	cmn.w	r3, #4
 800fa9a:	d152      	bne.n	800fb42 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fa9c:	7d3b      	ldrb	r3, [r7, #20]
 800fa9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800faa2:	2301      	movs	r3, #1
 800faa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faac:	2200      	movs	r2, #0
 800faae:	60da      	str	r2, [r3, #12]
 800fab0:	e047      	b.n	800fb42 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800fab2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800faba:	d13b      	bne.n	800fb34 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f006 fd29 	bl	8016518 <tcp_output>
 800fac6:	4603      	mov	r3, r0
 800fac8:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800faca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800face:	f113 0f0c 	cmn.w	r3, #12
 800fad2:	db04      	blt.n	800fade <lwip_netconn_do_writemore+0x272>
 800fad4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800fad8:	f113 0f04 	cmn.w	r3, #4
 800fadc:	d10a      	bne.n	800faf4 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fade:	7d7b      	ldrb	r3, [r7, #21]
 800fae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800fae4:	2301      	movs	r3, #1
 800fae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faee:	2200      	movs	r2, #0
 800faf0:	60da      	str	r2, [r3, #12]
 800faf2:	e026      	b.n	800fb42 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800faf4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d022      	beq.n	800fb42 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800fafc:	23f9      	movs	r3, #249	; 0xf9
 800fafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800fb02:	2301      	movs	r3, #1
 800fb04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	60da      	str	r2, [r3, #12]
 800fb10:	e017      	b.n	800fb42 <lwip_netconn_do_writemore+0x2d6>
 800fb12:	bf00      	nop
 800fb14:	0801bba4 	.word	0x0801bba4
 800fb18:	0801bcc8 	.word	0x0801bcc8
 800fb1c:	0801bbfc 	.word	0x0801bbfc
 800fb20:	0801bfa8 	.word	0x0801bfa8
 800fb24:	0801bcd8 	.word	0x0801bcd8
 800fb28:	0801bfc8 	.word	0x0801bfc8
 800fb2c:	0801bfe0 	.word	0x0801bfe0
 800fb30:	0801c014 	.word	0x0801c014
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800fb34:	2301      	movs	r3, #1
 800fb36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb3e:	2200      	movs	r2, #0
 800fb40:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800fb42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d02c      	beq.n	800fba4 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	330c      	adds	r3, #12
 800fb52:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fb5c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00f      	beq.n	800fb96 <lwip_netconn_do_writemore+0x32a>
 800fb76:	f00a f995 	bl	8019ea4 <sys_arch_protect>
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fb82:	f113 0f0c 	cmn.w	r3, #12
 800fb86:	db03      	blt.n	800fb90 <lwip_netconn_do_writemore+0x324>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fb8e:	721a      	strb	r2, [r3, #8]
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f00a f995 	bl	8019ec0 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fb96:	78fb      	ldrb	r3, [r7, #3]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d006      	beq.n	800fbaa <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800fb9c:	6938      	ldr	r0, [r7, #16]
 800fb9e:	f00a f8dc 	bl	8019d5a <sys_sem_signal>
 800fba2:	e002      	b.n	800fbaa <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800fba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fba8:	e000      	b.n	800fbac <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800fbaa:	2300      	movs	r3, #0
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3728      	adds	r7, #40	; 0x28
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fbc8:	f113 0f0c 	cmn.w	r3, #12
 800fbcc:	da06      	bge.n	800fbdc <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	711a      	strb	r2, [r3, #4]
 800fbda:	e072      	b.n	800fcc2 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbe6:	2b10      	cmp	r3, #16
 800fbe8:	d168      	bne.n	800fcbc <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	785b      	ldrb	r3, [r3, #1]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d003      	beq.n	800fbfc <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	22fb      	movs	r2, #251	; 0xfb
 800fbf8:	711a      	strb	r2, [r3, #4]
 800fbfa:	e062      	b.n	800fcc2 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d056      	beq.n	800fcb4 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d104      	bne.n	800fc22 <lwip_netconn_do_write+0x6e>
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6a1b      	ldr	r3, [r3, #32]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d006      	beq.n	800fc30 <lwip_netconn_do_write+0x7c>
 800fc22:	4b36      	ldr	r3, [pc, #216]	; (800fcfc <lwip_netconn_do_write+0x148>)
 800fc24:	f240 6283 	movw	r2, #1667	; 0x683
 800fc28:	4935      	ldr	r1, [pc, #212]	; (800fd00 <lwip_netconn_do_write+0x14c>)
 800fc2a:	4836      	ldr	r0, [pc, #216]	; (800fd04 <lwip_netconn_do_write+0x150>)
 800fc2c:	f00a ff30 	bl	801aa90 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d106      	bne.n	800fc46 <lwip_netconn_do_write+0x92>
 800fc38:	4b30      	ldr	r3, [pc, #192]	; (800fcfc <lwip_netconn_do_write+0x148>)
 800fc3a:	f240 6284 	movw	r2, #1668	; 0x684
 800fc3e:	4932      	ldr	r1, [pc, #200]	; (800fd08 <lwip_netconn_do_write+0x154>)
 800fc40:	4830      	ldr	r0, [pc, #192]	; (800fd04 <lwip_netconn_do_write+0x150>)
 800fc42:	f00a ff25 	bl	801aa90 <iprintf>
        msg->conn->current_msg = msg;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2200      	movs	r2, #0
 800fc54:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff fe05 	bl	800f86c <lwip_netconn_do_writemore>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d044      	beq.n	800fcf2 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	785b      	ldrb	r3, [r3, #1]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d006      	beq.n	800fc80 <lwip_netconn_do_write+0xcc>
 800fc72:	4b22      	ldr	r3, [pc, #136]	; (800fcfc <lwip_netconn_do_write+0x148>)
 800fc74:	f240 6289 	movw	r2, #1673	; 0x689
 800fc78:	4924      	ldr	r1, [pc, #144]	; (800fd0c <lwip_netconn_do_write+0x158>)
 800fc7a:	4822      	ldr	r0, [pc, #136]	; (800fd04 <lwip_netconn_do_write+0x150>)
 800fc7c:	f00a ff08 	bl	801aa90 <iprintf>
          UNLOCK_TCPIP_CORE();
 800fc80:	4823      	ldr	r0, [pc, #140]	; (800fd10 <lwip_netconn_do_write+0x15c>)
 800fc82:	f00a f8dc 	bl	8019e3e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	330c      	adds	r3, #12
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f00a f832 	bl	8019cf8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800fc94:	481e      	ldr	r0, [pc, #120]	; (800fd10 <lwip_netconn_do_write+0x15c>)
 800fc96:	f00a f8c3 	bl	8019e20 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	785b      	ldrb	r3, [r3, #1]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d126      	bne.n	800fcf2 <lwip_netconn_do_write+0x13e>
 800fca4:	4b15      	ldr	r3, [pc, #84]	; (800fcfc <lwip_netconn_do_write+0x148>)
 800fca6:	f240 628d 	movw	r2, #1677	; 0x68d
 800fcaa:	4918      	ldr	r1, [pc, #96]	; (800fd0c <lwip_netconn_do_write+0x158>)
 800fcac:	4815      	ldr	r0, [pc, #84]	; (800fd04 <lwip_netconn_do_write+0x150>)
 800fcae:	f00a feef 	bl	801aa90 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800fcb2:	e01e      	b.n	800fcf2 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	22f5      	movs	r2, #245	; 0xf5
 800fcb8:	711a      	strb	r2, [r3, #4]
 800fcba:	e002      	b.n	800fcc2 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	22fa      	movs	r2, #250	; 0xfa
 800fcc0:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d014      	beq.n	800fcf4 <lwip_netconn_do_write+0x140>
 800fcca:	f00a f8eb 	bl	8019ea4 <sys_arch_protect>
 800fcce:	60b8      	str	r0, [r7, #8]
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fcd8:	f113 0f0c 	cmn.w	r3, #12
 800fcdc:	db05      	blt.n	800fcea <lwip_netconn_do_write+0x136>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	68fa      	ldr	r2, [r7, #12]
 800fce4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800fce8:	721a      	strb	r2, [r3, #8]
 800fcea:	68b8      	ldr	r0, [r7, #8]
 800fcec:	f00a f8e8 	bl	8019ec0 <sys_arch_unprotect>
 800fcf0:	e000      	b.n	800fcf4 <lwip_netconn_do_write+0x140>
        return;
 800fcf2:	bf00      	nop
}
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	0801bba4 	.word	0x0801bba4
 800fd00:	0801beec 	.word	0x0801beec
 800fd04:	0801bbfc 	.word	0x0801bbfc
 800fd08:	0801c040 	.word	0x0801c040
 800fd0c:	0801bf08 	.word	0x0801bf08
 800fd10:	20007644 	.word	0x20007644

0800fd14 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	785b      	ldrb	r3, [r3, #1]
 800fd26:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d06e      	beq.n	800fe10 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800fd3c:	2b10      	cmp	r3, #16
 800fd3e:	d167      	bne.n	800fe10 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fd44:	2b03      	cmp	r3, #3
 800fd46:	d002      	beq.n	800fd4e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fd48:	7cfb      	ldrb	r3, [r7, #19]
 800fd4a:	2b02      	cmp	r3, #2
 800fd4c:	d060      	beq.n	800fe10 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800fd4e:	7cfb      	ldrb	r3, [r7, #19]
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d103      	bne.n	800fd5c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	22f5      	movs	r2, #245	; 0xf5
 800fd58:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fd5a:	e05c      	b.n	800fe16 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800fd5c:	7cfb      	ldrb	r3, [r7, #19]
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d103      	bne.n	800fd6a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	22fb      	movs	r2, #251	; 0xfb
 800fd66:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fd68:	e055      	b.n	800fe16 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	7a1b      	ldrb	r3, [r3, #8]
 800fd6e:	f003 0301 	and.w	r3, r3, #1
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d004      	beq.n	800fd80 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7ff f90e 	bl	800ef9c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d104      	bne.n	800fd94 <lwip_netconn_do_close+0x80>
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	6a1b      	ldr	r3, [r3, #32]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d006      	beq.n	800fda2 <lwip_netconn_do_close+0x8e>
 800fd94:	4b2e      	ldr	r3, [pc, #184]	; (800fe50 <lwip_netconn_do_close+0x13c>)
 800fd96:	f240 721c 	movw	r2, #1820	; 0x71c
 800fd9a:	492e      	ldr	r1, [pc, #184]	; (800fe54 <lwip_netconn_do_close+0x140>)
 800fd9c:	482e      	ldr	r0, [pc, #184]	; (800fe58 <lwip_netconn_do_close+0x144>)
 800fd9e:	f00a fe77 	bl	801aa90 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2204      	movs	r2, #4
 800fda8:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	697a      	ldr	r2, [r7, #20]
 800fdb0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff f96f 	bl	800f09c <lwip_netconn_do_close_internal>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d040      	beq.n	800fe46 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	785b      	ldrb	r3, [r3, #1]
 800fdca:	2b04      	cmp	r3, #4
 800fdcc:	d006      	beq.n	800fddc <lwip_netconn_do_close+0xc8>
 800fdce:	4b20      	ldr	r3, [pc, #128]	; (800fe50 <lwip_netconn_do_close+0x13c>)
 800fdd0:	f240 7221 	movw	r2, #1825	; 0x721
 800fdd4:	4921      	ldr	r1, [pc, #132]	; (800fe5c <lwip_netconn_do_close+0x148>)
 800fdd6:	4820      	ldr	r0, [pc, #128]	; (800fe58 <lwip_netconn_do_close+0x144>)
 800fdd8:	f00a fe5a 	bl	801aa90 <iprintf>
        UNLOCK_TCPIP_CORE();
 800fddc:	4820      	ldr	r0, [pc, #128]	; (800fe60 <lwip_netconn_do_close+0x14c>)
 800fdde:	f00a f82e 	bl	8019e3e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	330c      	adds	r3, #12
 800fde8:	2100      	movs	r1, #0
 800fdea:	4618      	mov	r0, r3
 800fdec:	f009 ff84 	bl	8019cf8 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800fdf0:	481b      	ldr	r0, [pc, #108]	; (800fe60 <lwip_netconn_do_close+0x14c>)
 800fdf2:	f00a f815 	bl	8019e20 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	785b      	ldrb	r3, [r3, #1]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d022      	beq.n	800fe46 <lwip_netconn_do_close+0x132>
 800fe00:	4b13      	ldr	r3, [pc, #76]	; (800fe50 <lwip_netconn_do_close+0x13c>)
 800fe02:	f240 7225 	movw	r2, #1829	; 0x725
 800fe06:	4915      	ldr	r1, [pc, #84]	; (800fe5c <lwip_netconn_do_close+0x148>)
 800fe08:	4813      	ldr	r0, [pc, #76]	; (800fe58 <lwip_netconn_do_close+0x144>)
 800fe0a:	f00a fe41 	bl	801aa90 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800fe0e:	e01a      	b.n	800fe46 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	22f5      	movs	r2, #245	; 0xf5
 800fe14:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d014      	beq.n	800fe48 <lwip_netconn_do_close+0x134>
 800fe1e:	f00a f841 	bl	8019ea4 <sys_arch_protect>
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fe2c:	f113 0f0c 	cmn.w	r3, #12
 800fe30:	db05      	blt.n	800fe3e <lwip_netconn_do_close+0x12a>
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800fe3c:	721a      	strb	r2, [r3, #8]
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f00a f83e 	bl	8019ec0 <sys_arch_unprotect>
 800fe44:	e000      	b.n	800fe48 <lwip_netconn_do_close+0x134>
      return;
 800fe46:	bf00      	nop
}
 800fe48:	3718      	adds	r7, #24
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	0801bba4 	.word	0x0801bba4
 800fe54:	0801beec 	.word	0x0801beec
 800fe58:	0801bbfc 	.word	0x0801bbfc
 800fe5c:	0801bf08 	.word	0x0801bf08
 800fe60:	20007644 	.word	0x20007644

0800fe64 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d013      	beq.n	800fe9a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00b      	beq.n	800fe92 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f001 fb9a 	bl	80115b8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	605a      	str	r2, [r3, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685a      	ldr	r2, [r3, #4]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800fe92:	6879      	ldr	r1, [r7, #4]
 800fe94:	2006      	movs	r0, #6
 800fe96:	f000 fe35 	bl	8010b04 <memp_free>
  }
}
 800fe9a:	bf00      	nop
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
	...

0800fea4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d108      	bne.n	800fec8 <netbuf_data+0x24>
 800feb6:	4b1b      	ldr	r3, [pc, #108]	; (800ff24 <netbuf_data+0x80>)
 800feb8:	22c2      	movs	r2, #194	; 0xc2
 800feba:	491b      	ldr	r1, [pc, #108]	; (800ff28 <netbuf_data+0x84>)
 800febc:	481b      	ldr	r0, [pc, #108]	; (800ff2c <netbuf_data+0x88>)
 800febe:	f00a fde7 	bl	801aa90 <iprintf>
 800fec2:	f06f 030f 	mvn.w	r3, #15
 800fec6:	e029      	b.n	800ff1c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d108      	bne.n	800fee0 <netbuf_data+0x3c>
 800fece:	4b15      	ldr	r3, [pc, #84]	; (800ff24 <netbuf_data+0x80>)
 800fed0:	22c3      	movs	r2, #195	; 0xc3
 800fed2:	4917      	ldr	r1, [pc, #92]	; (800ff30 <netbuf_data+0x8c>)
 800fed4:	4815      	ldr	r0, [pc, #84]	; (800ff2c <netbuf_data+0x88>)
 800fed6:	f00a fddb 	bl	801aa90 <iprintf>
 800feda:	f06f 030f 	mvn.w	r3, #15
 800fede:	e01d      	b.n	800ff1c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d108      	bne.n	800fef8 <netbuf_data+0x54>
 800fee6:	4b0f      	ldr	r3, [pc, #60]	; (800ff24 <netbuf_data+0x80>)
 800fee8:	22c4      	movs	r2, #196	; 0xc4
 800feea:	4912      	ldr	r1, [pc, #72]	; (800ff34 <netbuf_data+0x90>)
 800feec:	480f      	ldr	r0, [pc, #60]	; (800ff2c <netbuf_data+0x88>)
 800feee:	f00a fdcf 	bl	801aa90 <iprintf>
 800fef2:	f06f 030f 	mvn.w	r3, #15
 800fef6:	e011      	b.n	800ff1c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d102      	bne.n	800ff06 <netbuf_data+0x62>
    return ERR_BUF;
 800ff00:	f06f 0301 	mvn.w	r3, #1
 800ff04:	e00a      	b.n	800ff1c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	895a      	ldrh	r2, [r3, #10]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ff1a:	2300      	movs	r3, #0
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	0801c06c 	.word	0x0801c06c
 800ff28:	0801c174 	.word	0x0801c174
 800ff2c:	0801c0bc 	.word	0x0801c0bc
 800ff30:	0801c190 	.word	0x0801c190
 800ff34:	0801c1b0 	.word	0x0801c1b0

0800ff38 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d108      	bne.n	800ff58 <netbuf_next+0x20>
 800ff46:	4b11      	ldr	r3, [pc, #68]	; (800ff8c <netbuf_next+0x54>)
 800ff48:	22dc      	movs	r2, #220	; 0xdc
 800ff4a:	4911      	ldr	r1, [pc, #68]	; (800ff90 <netbuf_next+0x58>)
 800ff4c:	4811      	ldr	r0, [pc, #68]	; (800ff94 <netbuf_next+0x5c>)
 800ff4e:	f00a fd9f 	bl	801aa90 <iprintf>
 800ff52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff56:	e014      	b.n	800ff82 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d102      	bne.n	800ff68 <netbuf_next+0x30>
    return -1;
 800ff62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff66:	e00c      	b.n	800ff82 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <netbuf_next+0x48>
    return 1;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e000      	b.n	800ff82 <netbuf_next+0x4a>
  }
  return 0;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	0801c06c 	.word	0x0801c06c
 800ff90:	0801c1cc 	.word	0x0801c1cc
 800ff94:	0801c0bc 	.word	0x0801c0bc

0800ff98 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800ffa0:	4b29      	ldr	r3, [pc, #164]	; (8010048 <tcpip_thread+0xb0>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d005      	beq.n	800ffb4 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800ffa8:	4b27      	ldr	r3, [pc, #156]	; (8010048 <tcpip_thread+0xb0>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a27      	ldr	r2, [pc, #156]	; (801004c <tcpip_thread+0xb4>)
 800ffae:	6812      	ldr	r2, [r2, #0]
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800ffb4:	4826      	ldr	r0, [pc, #152]	; (8010050 <tcpip_thread+0xb8>)
 800ffb6:	f009 ff33 	bl	8019e20 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800ffba:	4825      	ldr	r0, [pc, #148]	; (8010050 <tcpip_thread+0xb8>)
 800ffbc:	f009 ff3f 	bl	8019e3e <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800ffc0:	f107 030c 	add.w	r3, r7, #12
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4823      	ldr	r0, [pc, #140]	; (8010054 <tcpip_thread+0xbc>)
 800ffc8:	f007 f8fa 	bl	80171c0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ffcc:	4820      	ldr	r0, [pc, #128]	; (8010050 <tcpip_thread+0xb8>)
 800ffce:	f009 ff27 	bl	8019e20 <sys_mutex_lock>
    if (msg == NULL) {
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d106      	bne.n	800ffe6 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ffd8:	4b1f      	ldr	r3, [pc, #124]	; (8010058 <tcpip_thread+0xc0>)
 800ffda:	2269      	movs	r2, #105	; 0x69
 800ffdc:	491f      	ldr	r1, [pc, #124]	; (801005c <tcpip_thread+0xc4>)
 800ffde:	4820      	ldr	r0, [pc, #128]	; (8010060 <tcpip_thread+0xc8>)
 800ffe0:	f00a fd56 	bl	801aa90 <iprintf>
      continue;
 800ffe4:	e02f      	b.n	8010046 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	2b03      	cmp	r3, #3
 800ffec:	d011      	beq.n	8010012 <tcpip_thread+0x7a>
 800ffee:	2b04      	cmp	r3, #4
 800fff0:	d01b      	beq.n	801002a <tcpip_thread+0x92>
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	d120      	bne.n	8010038 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	6850      	ldr	r0, [r2, #4]
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	6892      	ldr	r2, [r2, #8]
 8010002:	4611      	mov	r1, r2
 8010004:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	4619      	mov	r1, r3
 801000a:	2009      	movs	r0, #9
 801000c:	f000 fd7a 	bl	8010b04 <memp_free>
      break;
 8010010:	e019      	b.n	8010046 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	6892      	ldr	r2, [r2, #8]
 801001a:	4610      	mov	r0, r2
 801001c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	4619      	mov	r1, r3
 8010022:	2008      	movs	r0, #8
 8010024:	f000 fd6e 	bl	8010b04 <memp_free>
      break;
 8010028:	e00d      	b.n	8010046 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	6892      	ldr	r2, [r2, #8]
 8010032:	4610      	mov	r0, r2
 8010034:	4798      	blx	r3
      break;
 8010036:	e006      	b.n	8010046 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010038:	4b07      	ldr	r3, [pc, #28]	; (8010058 <tcpip_thread+0xc0>)
 801003a:	229b      	movs	r2, #155	; 0x9b
 801003c:	4907      	ldr	r1, [pc, #28]	; (801005c <tcpip_thread+0xc4>)
 801003e:	4808      	ldr	r0, [pc, #32]	; (8010060 <tcpip_thread+0xc8>)
 8010040:	f00a fd26 	bl	801aa90 <iprintf>
      break;
 8010044:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8010046:	e7b8      	b.n	800ffba <tcpip_thread+0x22>
 8010048:	200041b4 	.word	0x200041b4
 801004c:	200041b8 	.word	0x200041b8
 8010050:	20007644 	.word	0x20007644
 8010054:	200041bc 	.word	0x200041bc
 8010058:	0801c204 	.word	0x0801c204
 801005c:	0801c234 	.word	0x0801c234
 8010060:	0801c254 	.word	0x0801c254

08010064 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8010070:	481a      	ldr	r0, [pc, #104]	; (80100dc <tcpip_inpkt+0x78>)
 8010072:	f009 fdfb 	bl	8019c6c <sys_mbox_valid>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d105      	bne.n	8010088 <tcpip_inpkt+0x24>
 801007c:	4b18      	ldr	r3, [pc, #96]	; (80100e0 <tcpip_inpkt+0x7c>)
 801007e:	22b5      	movs	r2, #181	; 0xb5
 8010080:	4918      	ldr	r1, [pc, #96]	; (80100e4 <tcpip_inpkt+0x80>)
 8010082:	4819      	ldr	r0, [pc, #100]	; (80100e8 <tcpip_inpkt+0x84>)
 8010084:	f00a fd04 	bl	801aa90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010088:	2009      	movs	r0, #9
 801008a:	f000 fce9 	bl	8010a60 <memp_malloc>
 801008e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d102      	bne.n	801009c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801009a:	e01a      	b.n	80100d2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	2202      	movs	r2, #2
 80100a0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	68fa      	ldr	r2, [r7, #12]
 80100a6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80100b4:	6979      	ldr	r1, [r7, #20]
 80100b6:	4809      	ldr	r0, [pc, #36]	; (80100dc <tcpip_inpkt+0x78>)
 80100b8:	f009 fd63 	bl	8019b82 <sys_mbox_trypost>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d006      	beq.n	80100d0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80100c2:	6979      	ldr	r1, [r7, #20]
 80100c4:	2009      	movs	r0, #9
 80100c6:	f000 fd1d 	bl	8010b04 <memp_free>
    return ERR_MEM;
 80100ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100ce:	e000      	b.n	80100d2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80100d0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3718      	adds	r7, #24
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	200041bc 	.word	0x200041bc
 80100e0:	0801c204 	.word	0x0801c204
 80100e4:	0801c27c 	.word	0x0801c27c
 80100e8:	0801c254 	.word	0x0801c254

080100ec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100fc:	f003 0318 	and.w	r3, r3, #24
 8010100:	2b00      	cmp	r3, #0
 8010102:	d006      	beq.n	8010112 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010104:	4a08      	ldr	r2, [pc, #32]	; (8010128 <tcpip_input+0x3c>)
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff ffab 	bl	8010064 <tcpip_inpkt>
 801010e:	4603      	mov	r3, r0
 8010110:	e005      	b.n	801011e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8010112:	4a06      	ldr	r2, [pc, #24]	; (801012c <tcpip_input+0x40>)
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f7ff ffa4 	bl	8010064 <tcpip_inpkt>
 801011c:	4603      	mov	r3, r0
}
 801011e:	4618      	mov	r0, r3
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	08019939 	.word	0x08019939
 801012c:	080188fd 	.word	0x080188fd

08010130 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	4613      	mov	r3, r2
 801013c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 801013e:	481d      	ldr	r0, [pc, #116]	; (80101b4 <tcpip_callback_with_block+0x84>)
 8010140:	f009 fd94 	bl	8019c6c <sys_mbox_valid>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d105      	bne.n	8010156 <tcpip_callback_with_block+0x26>
 801014a:	4b1b      	ldr	r3, [pc, #108]	; (80101b8 <tcpip_callback_with_block+0x88>)
 801014c:	22ee      	movs	r2, #238	; 0xee
 801014e:	491b      	ldr	r1, [pc, #108]	; (80101bc <tcpip_callback_with_block+0x8c>)
 8010150:	481b      	ldr	r0, [pc, #108]	; (80101c0 <tcpip_callback_with_block+0x90>)
 8010152:	f00a fc9d 	bl	801aa90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010156:	2008      	movs	r0, #8
 8010158:	f000 fc82 	bl	8010a60 <memp_malloc>
 801015c:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d102      	bne.n	801016a <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8010164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010168:	e01f      	b.n	80101aa <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2203      	movs	r2, #3
 801016e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	609a      	str	r2, [r3, #8]
  if (block) {
 801017c:	79fb      	ldrb	r3, [r7, #7]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d004      	beq.n	801018c <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8010182:	6979      	ldr	r1, [r7, #20]
 8010184:	480b      	ldr	r0, [pc, #44]	; (80101b4 <tcpip_callback_with_block+0x84>)
 8010186:	f009 fce7 	bl	8019b58 <sys_mbox_post>
 801018a:	e00d      	b.n	80101a8 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 801018c:	6979      	ldr	r1, [r7, #20]
 801018e:	4809      	ldr	r0, [pc, #36]	; (80101b4 <tcpip_callback_with_block+0x84>)
 8010190:	f009 fcf7 	bl	8019b82 <sys_mbox_trypost>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d006      	beq.n	80101a8 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801019a:	6979      	ldr	r1, [r7, #20]
 801019c:	2008      	movs	r0, #8
 801019e:	f000 fcb1 	bl	8010b04 <memp_free>
      return ERR_MEM;
 80101a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101a6:	e000      	b.n	80101aa <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3718      	adds	r7, #24
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	200041bc 	.word	0x200041bc
 80101b8:	0801c204 	.word	0x0801c204
 80101bc:	0801c27c 	.word	0x0801c27c
 80101c0:	0801c254 	.word	0x0801c254

080101c4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80101d0:	4806      	ldr	r0, [pc, #24]	; (80101ec <tcpip_send_msg_wait_sem+0x28>)
 80101d2:	f009 fe25 	bl	8019e20 <sys_mutex_lock>
  fn(apimsg);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	68b8      	ldr	r0, [r7, #8]
 80101da:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80101dc:	4803      	ldr	r0, [pc, #12]	; (80101ec <tcpip_send_msg_wait_sem+0x28>)
 80101de:	f009 fe2e 	bl	8019e3e <sys_mutex_unlock>
  return ERR_OK;
 80101e2:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	20007644 	.word	0x20007644

080101f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af02      	add	r7, sp, #8
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80101fa:	f000 f86a 	bl	80102d2 <lwip_init>

  tcpip_init_done = initfunc;
 80101fe:	4a17      	ldr	r2, [pc, #92]	; (801025c <tcpip_init+0x6c>)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010204:	4a16      	ldr	r2, [pc, #88]	; (8010260 <tcpip_init+0x70>)
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801020a:	2106      	movs	r1, #6
 801020c:	4815      	ldr	r0, [pc, #84]	; (8010264 <tcpip_init+0x74>)
 801020e:	f009 fc6f 	bl	8019af0 <sys_mbox_new>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d006      	beq.n	8010226 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010218:	4b13      	ldr	r3, [pc, #76]	; (8010268 <tcpip_init+0x78>)
 801021a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801021e:	4913      	ldr	r1, [pc, #76]	; (801026c <tcpip_init+0x7c>)
 8010220:	4813      	ldr	r0, [pc, #76]	; (8010270 <tcpip_init+0x80>)
 8010222:	f00a fc35 	bl	801aa90 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010226:	4813      	ldr	r0, [pc, #76]	; (8010274 <tcpip_init+0x84>)
 8010228:	f009 fdde 	bl	8019de8 <sys_mutex_new>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d006      	beq.n	8010240 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010232:	4b0d      	ldr	r3, [pc, #52]	; (8010268 <tcpip_init+0x78>)
 8010234:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010238:	490f      	ldr	r1, [pc, #60]	; (8010278 <tcpip_init+0x88>)
 801023a:	480d      	ldr	r0, [pc, #52]	; (8010270 <tcpip_init+0x80>)
 801023c:	f00a fc28 	bl	801aa90 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010240:	2303      	movs	r3, #3
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010248:	2200      	movs	r2, #0
 801024a:	490c      	ldr	r1, [pc, #48]	; (801027c <tcpip_init+0x8c>)
 801024c:	480c      	ldr	r0, [pc, #48]	; (8010280 <tcpip_init+0x90>)
 801024e:	f009 fe03 	bl	8019e58 <sys_thread_new>
}
 8010252:	bf00      	nop
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	200041b4 	.word	0x200041b4
 8010260:	200041b8 	.word	0x200041b8
 8010264:	200041bc 	.word	0x200041bc
 8010268:	0801c204 	.word	0x0801c204
 801026c:	0801c28c 	.word	0x0801c28c
 8010270:	0801c254 	.word	0x0801c254
 8010274:	20007644 	.word	0x20007644
 8010278:	0801c2b0 	.word	0x0801c2b0
 801027c:	0800ff99 	.word	0x0800ff99
 8010280:	0801c2d4 	.word	0x0801c2d4

08010284 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 801028e:	88fb      	ldrh	r3, [r7, #6]
 8010290:	ba5b      	rev16	r3, r3
 8010292:	b29b      	uxth	r3, r3
}
 8010294:	4618      	mov	r0, r3
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	061a      	lsls	r2, r3, #24
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	021b      	lsls	r3, r3, #8
 80102b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80102b4:	431a      	orrs	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	0a1b      	lsrs	r3, r3, #8
 80102ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80102be:	431a      	orrs	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	0e1b      	lsrs	r3, r3, #24
 80102c4:	4313      	orrs	r3, r2
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80102d8:	2300      	movs	r3, #0
 80102da:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80102dc:	f009 fd76 	bl	8019dcc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80102e0:	f000 f8a6 	bl	8010430 <mem_init>
  memp_init();
 80102e4:	f000 fb70 	bl	80109c8 <memp_init>
  pbuf_init();
  netif_init();
 80102e8:	f000 fc36 	bl	8010b58 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80102ec:	f006 ff8e 	bl	801720c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80102f0:	f001 fbd8 	bl	8011aa4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80102f4:	f006 fe20 	bl	8016f38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80102f8:	bf00      	nop
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010308:	4b40      	ldr	r3, [pc, #256]	; (801040c <plug_holes+0x10c>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	429a      	cmp	r2, r3
 8010310:	d206      	bcs.n	8010320 <plug_holes+0x20>
 8010312:	4b3f      	ldr	r3, [pc, #252]	; (8010410 <plug_holes+0x110>)
 8010314:	f240 125d 	movw	r2, #349	; 0x15d
 8010318:	493e      	ldr	r1, [pc, #248]	; (8010414 <plug_holes+0x114>)
 801031a:	483f      	ldr	r0, [pc, #252]	; (8010418 <plug_holes+0x118>)
 801031c:	f00a fbb8 	bl	801aa90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010320:	4b3e      	ldr	r3, [pc, #248]	; (801041c <plug_holes+0x11c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	429a      	cmp	r2, r3
 8010328:	d306      	bcc.n	8010338 <plug_holes+0x38>
 801032a:	4b39      	ldr	r3, [pc, #228]	; (8010410 <plug_holes+0x110>)
 801032c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010330:	493b      	ldr	r1, [pc, #236]	; (8010420 <plug_holes+0x120>)
 8010332:	4839      	ldr	r0, [pc, #228]	; (8010418 <plug_holes+0x118>)
 8010334:	f00a fbac 	bl	801aa90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	791b      	ldrb	r3, [r3, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d006      	beq.n	801034e <plug_holes+0x4e>
 8010340:	4b33      	ldr	r3, [pc, #204]	; (8010410 <plug_holes+0x110>)
 8010342:	f240 125f 	movw	r2, #351	; 0x15f
 8010346:	4937      	ldr	r1, [pc, #220]	; (8010424 <plug_holes+0x124>)
 8010348:	4833      	ldr	r0, [pc, #204]	; (8010418 <plug_holes+0x118>)
 801034a:	f00a fba1 	bl	801aa90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010356:	d906      	bls.n	8010366 <plug_holes+0x66>
 8010358:	4b2d      	ldr	r3, [pc, #180]	; (8010410 <plug_holes+0x110>)
 801035a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801035e:	4932      	ldr	r1, [pc, #200]	; (8010428 <plug_holes+0x128>)
 8010360:	482d      	ldr	r0, [pc, #180]	; (8010418 <plug_holes+0x118>)
 8010362:	f00a fb95 	bl	801aa90 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8010366:	4b29      	ldr	r3, [pc, #164]	; (801040c <plug_holes+0x10c>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	8812      	ldrh	r2, [r2, #0]
 801036e:	4413      	add	r3, r2
 8010370:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	429a      	cmp	r2, r3
 8010378:	d01f      	beq.n	80103ba <plug_holes+0xba>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	791b      	ldrb	r3, [r3, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d11b      	bne.n	80103ba <plug_holes+0xba>
 8010382:	4b26      	ldr	r3, [pc, #152]	; (801041c <plug_holes+0x11c>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	429a      	cmp	r2, r3
 801038a:	d016      	beq.n	80103ba <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801038c:	4b27      	ldr	r3, [pc, #156]	; (801042c <plug_holes+0x12c>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	429a      	cmp	r2, r3
 8010394:	d102      	bne.n	801039c <plug_holes+0x9c>
      lfree = mem;
 8010396:	4a25      	ldr	r2, [pc, #148]	; (801042c <plug_holes+0x12c>)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	881a      	ldrh	r2, [r3, #0]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a19      	ldr	r2, [pc, #100]	; (801040c <plug_holes+0x10c>)
 80103a8:	6812      	ldr	r2, [r2, #0]
 80103aa:	1a99      	subs	r1, r3, r2
 80103ac:	4b17      	ldr	r3, [pc, #92]	; (801040c <plug_holes+0x10c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	68fa      	ldr	r2, [r7, #12]
 80103b2:	8812      	ldrh	r2, [r2, #0]
 80103b4:	4413      	add	r3, r2
 80103b6:	b28a      	uxth	r2, r1
 80103b8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80103ba:	4b14      	ldr	r3, [pc, #80]	; (801040c <plug_holes+0x10c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	8852      	ldrh	r2, [r2, #2]
 80103c2:	4413      	add	r3, r2
 80103c4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80103c6:	68ba      	ldr	r2, [r7, #8]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d01a      	beq.n	8010404 <plug_holes+0x104>
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	791b      	ldrb	r3, [r3, #4]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d116      	bne.n	8010404 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80103d6:	4b15      	ldr	r3, [pc, #84]	; (801042c <plug_holes+0x12c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d102      	bne.n	80103e6 <plug_holes+0xe6>
      lfree = pmem;
 80103e0:	4a12      	ldr	r2, [pc, #72]	; (801042c <plug_holes+0x12c>)
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	881a      	ldrh	r2, [r3, #0]
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	4a06      	ldr	r2, [pc, #24]	; (801040c <plug_holes+0x10c>)
 80103f2:	6812      	ldr	r2, [r2, #0]
 80103f4:	1a99      	subs	r1, r3, r2
 80103f6:	4b05      	ldr	r3, [pc, #20]	; (801040c <plug_holes+0x10c>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	8812      	ldrh	r2, [r2, #0]
 80103fe:	4413      	add	r3, r2
 8010400:	b28a      	uxth	r2, r1
 8010402:	805a      	strh	r2, [r3, #2]
  }
}
 8010404:	bf00      	nop
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	200041c0 	.word	0x200041c0
 8010410:	0801c2e4 	.word	0x0801c2e4
 8010414:	0801c314 	.word	0x0801c314
 8010418:	0801c32c 	.word	0x0801c32c
 801041c:	200041c4 	.word	0x200041c4
 8010420:	0801c354 	.word	0x0801c354
 8010424:	0801c370 	.word	0x0801c370
 8010428:	0801c38c 	.word	0x0801c38c
 801042c:	200041c8 	.word	0x200041c8

08010430 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010436:	4b1e      	ldr	r3, [pc, #120]	; (80104b0 <mem_init+0x80>)
 8010438:	3303      	adds	r3, #3
 801043a:	f023 0303 	bic.w	r3, r3, #3
 801043e:	461a      	mov	r2, r3
 8010440:	4b1c      	ldr	r3, [pc, #112]	; (80104b4 <mem_init+0x84>)
 8010442:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010444:	4b1b      	ldr	r3, [pc, #108]	; (80104b4 <mem_init+0x84>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010450:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2200      	movs	r2, #0
 8010456:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 801045e:	4b15      	ldr	r3, [pc, #84]	; (80104b4 <mem_init+0x84>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8010466:	4a14      	ldr	r2, [pc, #80]	; (80104b8 <mem_init+0x88>)
 8010468:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801046a:	4b13      	ldr	r3, [pc, #76]	; (80104b8 <mem_init+0x88>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2201      	movs	r2, #1
 8010470:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010472:	4b11      	ldr	r3, [pc, #68]	; (80104b8 <mem_init+0x88>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801047a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801047c:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <mem_init+0x88>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010484:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010486:	4b0b      	ldr	r3, [pc, #44]	; (80104b4 <mem_init+0x84>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a0c      	ldr	r2, [pc, #48]	; (80104bc <mem_init+0x8c>)
 801048c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801048e:	480c      	ldr	r0, [pc, #48]	; (80104c0 <mem_init+0x90>)
 8010490:	f009 fcaa 	bl	8019de8 <sys_mutex_new>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d006      	beq.n	80104a8 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801049a:	4b0a      	ldr	r3, [pc, #40]	; (80104c4 <mem_init+0x94>)
 801049c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80104a0:	4909      	ldr	r1, [pc, #36]	; (80104c8 <mem_init+0x98>)
 80104a2:	480a      	ldr	r0, [pc, #40]	; (80104cc <mem_init+0x9c>)
 80104a4:	f00a faf4 	bl	801aa90 <iprintf>
  }
}
 80104a8:	bf00      	nop
 80104aa:	3708      	adds	r7, #8
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	20007660 	.word	0x20007660
 80104b4:	200041c0 	.word	0x200041c0
 80104b8:	200041c4 	.word	0x200041c4
 80104bc:	200041c8 	.word	0x200041c8
 80104c0:	200041cc 	.word	0x200041cc
 80104c4:	0801c2e4 	.word	0x0801c2e4
 80104c8:	0801c3b8 	.word	0x0801c3b8
 80104cc:	0801c32c 	.word	0x0801c32c

080104d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d050      	beq.n	8010580 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f003 0303 	and.w	r3, r3, #3
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d006      	beq.n	80104f6 <mem_free+0x26>
 80104e8:	4b27      	ldr	r3, [pc, #156]	; (8010588 <mem_free+0xb8>)
 80104ea:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80104ee:	4927      	ldr	r1, [pc, #156]	; (801058c <mem_free+0xbc>)
 80104f0:	4827      	ldr	r0, [pc, #156]	; (8010590 <mem_free+0xc0>)
 80104f2:	f00a facd 	bl	801aa90 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80104f6:	4b27      	ldr	r3, [pc, #156]	; (8010594 <mem_free+0xc4>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d304      	bcc.n	801050a <mem_free+0x3a>
 8010500:	4b25      	ldr	r3, [pc, #148]	; (8010598 <mem_free+0xc8>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	429a      	cmp	r2, r3
 8010508:	d306      	bcc.n	8010518 <mem_free+0x48>
 801050a:	4b1f      	ldr	r3, [pc, #124]	; (8010588 <mem_free+0xb8>)
 801050c:	f240 12af 	movw	r2, #431	; 0x1af
 8010510:	4922      	ldr	r1, [pc, #136]	; (801059c <mem_free+0xcc>)
 8010512:	481f      	ldr	r0, [pc, #124]	; (8010590 <mem_free+0xc0>)
 8010514:	f00a fabc 	bl	801aa90 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010518:	4b1e      	ldr	r3, [pc, #120]	; (8010594 <mem_free+0xc4>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	429a      	cmp	r2, r3
 8010520:	d304      	bcc.n	801052c <mem_free+0x5c>
 8010522:	4b1d      	ldr	r3, [pc, #116]	; (8010598 <mem_free+0xc8>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	429a      	cmp	r2, r3
 801052a:	d306      	bcc.n	801053a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801052c:	f009 fcba 	bl	8019ea4 <sys_arch_protect>
 8010530:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8010532:	68b8      	ldr	r0, [r7, #8]
 8010534:	f009 fcc4 	bl	8019ec0 <sys_arch_unprotect>
    return;
 8010538:	e023      	b.n	8010582 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801053a:	4819      	ldr	r0, [pc, #100]	; (80105a0 <mem_free+0xd0>)
 801053c:	f009 fc70 	bl	8019e20 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	3b08      	subs	r3, #8
 8010544:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	791b      	ldrb	r3, [r3, #4]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d106      	bne.n	801055c <mem_free+0x8c>
 801054e:	4b0e      	ldr	r3, [pc, #56]	; (8010588 <mem_free+0xb8>)
 8010550:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8010554:	4913      	ldr	r1, [pc, #76]	; (80105a4 <mem_free+0xd4>)
 8010556:	480e      	ldr	r0, [pc, #56]	; (8010590 <mem_free+0xc0>)
 8010558:	f00a fa9a 	bl	801aa90 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2200      	movs	r2, #0
 8010560:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010562:	4b11      	ldr	r3, [pc, #68]	; (80105a8 <mem_free+0xd8>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	429a      	cmp	r2, r3
 801056a:	d202      	bcs.n	8010572 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801056c:	4a0e      	ldr	r2, [pc, #56]	; (80105a8 <mem_free+0xd8>)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f7ff fec4 	bl	8010300 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010578:	4809      	ldr	r0, [pc, #36]	; (80105a0 <mem_free+0xd0>)
 801057a:	f009 fc60 	bl	8019e3e <sys_mutex_unlock>
 801057e:	e000      	b.n	8010582 <mem_free+0xb2>
    return;
 8010580:	bf00      	nop
}
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	0801c2e4 	.word	0x0801c2e4
 801058c:	0801c3d4 	.word	0x0801c3d4
 8010590:	0801c32c 	.word	0x0801c32c
 8010594:	200041c0 	.word	0x200041c0
 8010598:	200041c4 	.word	0x200041c4
 801059c:	0801c3f8 	.word	0x0801c3f8
 80105a0:	200041cc 	.word	0x200041cc
 80105a4:	0801c410 	.word	0x0801c410
 80105a8:	200041c8 	.word	0x200041c8

080105ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b088      	sub	sp, #32
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	460b      	mov	r3, r1
 80105b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80105b8:	887b      	ldrh	r3, [r7, #2]
 80105ba:	3303      	adds	r3, #3
 80105bc:	b29b      	uxth	r3, r3
 80105be:	f023 0303 	bic.w	r3, r3, #3
 80105c2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80105c4:	887b      	ldrh	r3, [r7, #2]
 80105c6:	2b0b      	cmp	r3, #11
 80105c8:	d801      	bhi.n	80105ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80105ca:	230c      	movs	r3, #12
 80105cc:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80105ce:	887b      	ldrh	r3, [r7, #2]
 80105d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80105d4:	d901      	bls.n	80105da <mem_trim+0x2e>
    return NULL;
 80105d6:	2300      	movs	r3, #0
 80105d8:	e0bd      	b.n	8010756 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80105da:	4b61      	ldr	r3, [pc, #388]	; (8010760 <mem_trim+0x1b4>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d304      	bcc.n	80105ee <mem_trim+0x42>
 80105e4:	4b5f      	ldr	r3, [pc, #380]	; (8010764 <mem_trim+0x1b8>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	687a      	ldr	r2, [r7, #4]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d306      	bcc.n	80105fc <mem_trim+0x50>
 80105ee:	4b5e      	ldr	r3, [pc, #376]	; (8010768 <mem_trim+0x1bc>)
 80105f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80105f4:	495d      	ldr	r1, [pc, #372]	; (801076c <mem_trim+0x1c0>)
 80105f6:	485e      	ldr	r0, [pc, #376]	; (8010770 <mem_trim+0x1c4>)
 80105f8:	f00a fa4a 	bl	801aa90 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80105fc:	4b58      	ldr	r3, [pc, #352]	; (8010760 <mem_trim+0x1b4>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	429a      	cmp	r2, r3
 8010604:	d304      	bcc.n	8010610 <mem_trim+0x64>
 8010606:	4b57      	ldr	r3, [pc, #348]	; (8010764 <mem_trim+0x1b8>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d307      	bcc.n	8010620 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8010610:	f009 fc48 	bl	8019ea4 <sys_arch_protect>
 8010614:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f009 fc52 	bl	8019ec0 <sys_arch_unprotect>
    return rmem;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	e09a      	b.n	8010756 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3b08      	subs	r3, #8
 8010624:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	4a4d      	ldr	r2, [pc, #308]	; (8010760 <mem_trim+0x1b4>)
 801062a:	6812      	ldr	r2, [r2, #0]
 801062c:	1a9b      	subs	r3, r3, r2
 801062e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	881a      	ldrh	r2, [r3, #0]
 8010634:	8b7b      	ldrh	r3, [r7, #26]
 8010636:	1ad3      	subs	r3, r2, r3
 8010638:	b29b      	uxth	r3, r3
 801063a:	3b08      	subs	r3, #8
 801063c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801063e:	887a      	ldrh	r2, [r7, #2]
 8010640:	8b3b      	ldrh	r3, [r7, #24]
 8010642:	429a      	cmp	r2, r3
 8010644:	d906      	bls.n	8010654 <mem_trim+0xa8>
 8010646:	4b48      	ldr	r3, [pc, #288]	; (8010768 <mem_trim+0x1bc>)
 8010648:	f240 2206 	movw	r2, #518	; 0x206
 801064c:	4949      	ldr	r1, [pc, #292]	; (8010774 <mem_trim+0x1c8>)
 801064e:	4848      	ldr	r0, [pc, #288]	; (8010770 <mem_trim+0x1c4>)
 8010650:	f00a fa1e 	bl	801aa90 <iprintf>
  if (newsize > size) {
 8010654:	887a      	ldrh	r2, [r7, #2]
 8010656:	8b3b      	ldrh	r3, [r7, #24]
 8010658:	429a      	cmp	r2, r3
 801065a:	d901      	bls.n	8010660 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 801065c:	2300      	movs	r3, #0
 801065e:	e07a      	b.n	8010756 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 8010660:	887a      	ldrh	r2, [r7, #2]
 8010662:	8b3b      	ldrh	r3, [r7, #24]
 8010664:	429a      	cmp	r2, r3
 8010666:	d101      	bne.n	801066c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	e074      	b.n	8010756 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801066c:	4842      	ldr	r0, [pc, #264]	; (8010778 <mem_trim+0x1cc>)
 801066e:	f009 fbd7 	bl	8019e20 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8010672:	4b3b      	ldr	r3, [pc, #236]	; (8010760 <mem_trim+0x1b4>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	69fa      	ldr	r2, [r7, #28]
 8010678:	8812      	ldrh	r2, [r2, #0]
 801067a:	4413      	add	r3, r2
 801067c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	791b      	ldrb	r3, [r3, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d131      	bne.n	80106ea <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801068c:	8b7a      	ldrh	r2, [r7, #26]
 801068e:	887b      	ldrh	r3, [r7, #2]
 8010690:	4413      	add	r3, r2
 8010692:	b29b      	uxth	r3, r3
 8010694:	3308      	adds	r3, #8
 8010696:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 8010698:	4b38      	ldr	r3, [pc, #224]	; (801077c <mem_trim+0x1d0>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d105      	bne.n	80106ae <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80106a2:	4b2f      	ldr	r3, [pc, #188]	; (8010760 <mem_trim+0x1b4>)
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	8a7b      	ldrh	r3, [r7, #18]
 80106a8:	4413      	add	r3, r2
 80106aa:	4a34      	ldr	r2, [pc, #208]	; (801077c <mem_trim+0x1d0>)
 80106ac:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80106ae:	4b2c      	ldr	r3, [pc, #176]	; (8010760 <mem_trim+0x1b4>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	8a7b      	ldrh	r3, [r7, #18]
 80106b4:	4413      	add	r3, r2
 80106b6:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2200      	movs	r2, #0
 80106bc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	8a3a      	ldrh	r2, [r7, #16]
 80106c2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	8b7a      	ldrh	r2, [r7, #26]
 80106c8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	8a7a      	ldrh	r2, [r7, #18]
 80106ce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80106d8:	d039      	beq.n	801074e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80106da:	4b21      	ldr	r3, [pc, #132]	; (8010760 <mem_trim+0x1b4>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	697a      	ldr	r2, [r7, #20]
 80106e0:	8812      	ldrh	r2, [r2, #0]
 80106e2:	4413      	add	r3, r2
 80106e4:	8a7a      	ldrh	r2, [r7, #18]
 80106e6:	805a      	strh	r2, [r3, #2]
 80106e8:	e031      	b.n	801074e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80106ea:	887b      	ldrh	r3, [r7, #2]
 80106ec:	f103 0214 	add.w	r2, r3, #20
 80106f0:	8b3b      	ldrh	r3, [r7, #24]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d82b      	bhi.n	801074e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80106f6:	8b7a      	ldrh	r2, [r7, #26]
 80106f8:	887b      	ldrh	r3, [r7, #2]
 80106fa:	4413      	add	r3, r2
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	3308      	adds	r3, #8
 8010700:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8010702:	4b17      	ldr	r3, [pc, #92]	; (8010760 <mem_trim+0x1b4>)
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	8a7b      	ldrh	r3, [r7, #18]
 8010708:	4413      	add	r3, r2
 801070a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 801070c:	4b1b      	ldr	r3, [pc, #108]	; (801077c <mem_trim+0x1d0>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	429a      	cmp	r2, r3
 8010714:	d202      	bcs.n	801071c <mem_trim+0x170>
      lfree = mem2;
 8010716:	4a19      	ldr	r2, [pc, #100]	; (801077c <mem_trim+0x1d0>)
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2200      	movs	r2, #0
 8010720:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	881a      	ldrh	r2, [r3, #0]
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	8b7a      	ldrh	r2, [r7, #26]
 801072e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	8a7a      	ldrh	r2, [r7, #18]
 8010734:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	881b      	ldrh	r3, [r3, #0]
 801073a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801073e:	d006      	beq.n	801074e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8010740:	4b07      	ldr	r3, [pc, #28]	; (8010760 <mem_trim+0x1b4>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	697a      	ldr	r2, [r7, #20]
 8010746:	8812      	ldrh	r2, [r2, #0]
 8010748:	4413      	add	r3, r2
 801074a:	8a7a      	ldrh	r2, [r7, #18]
 801074c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801074e:	480a      	ldr	r0, [pc, #40]	; (8010778 <mem_trim+0x1cc>)
 8010750:	f009 fb75 	bl	8019e3e <sys_mutex_unlock>
  return rmem;
 8010754:	687b      	ldr	r3, [r7, #4]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3720      	adds	r7, #32
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	200041c0 	.word	0x200041c0
 8010764:	200041c4 	.word	0x200041c4
 8010768:	0801c2e4 	.word	0x0801c2e4
 801076c:	0801c424 	.word	0x0801c424
 8010770:	0801c32c 	.word	0x0801c32c
 8010774:	0801c43c 	.word	0x0801c43c
 8010778:	200041cc 	.word	0x200041cc
 801077c:	200041c8 	.word	0x200041c8

08010780 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af00      	add	r7, sp, #0
 8010786:	4603      	mov	r3, r0
 8010788:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 801078a:	88fb      	ldrh	r3, [r7, #6]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <mem_malloc+0x14>
    return NULL;
 8010790:	2300      	movs	r3, #0
 8010792:	e0d1      	b.n	8010938 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8010794:	88fb      	ldrh	r3, [r7, #6]
 8010796:	3303      	adds	r3, #3
 8010798:	b29b      	uxth	r3, r3
 801079a:	f023 0303 	bic.w	r3, r3, #3
 801079e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80107a0:	88fb      	ldrh	r3, [r7, #6]
 80107a2:	2b0b      	cmp	r3, #11
 80107a4:	d801      	bhi.n	80107aa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80107a6:	230c      	movs	r3, #12
 80107a8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80107aa:	88fb      	ldrh	r3, [r7, #6]
 80107ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80107b0:	d901      	bls.n	80107b6 <mem_malloc+0x36>
    return NULL;
 80107b2:	2300      	movs	r3, #0
 80107b4:	e0c0      	b.n	8010938 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80107b6:	4862      	ldr	r0, [pc, #392]	; (8010940 <mem_malloc+0x1c0>)
 80107b8:	f009 fb32 	bl	8019e20 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80107bc:	4b61      	ldr	r3, [pc, #388]	; (8010944 <mem_malloc+0x1c4>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	461a      	mov	r2, r3
 80107c2:	4b61      	ldr	r3, [pc, #388]	; (8010948 <mem_malloc+0x1c8>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	83fb      	strh	r3, [r7, #30]
 80107ca:	e0aa      	b.n	8010922 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80107cc:	4b5e      	ldr	r3, [pc, #376]	; (8010948 <mem_malloc+0x1c8>)
 80107ce:	681a      	ldr	r2, [r3, #0]
 80107d0:	8bfb      	ldrh	r3, [r7, #30]
 80107d2:	4413      	add	r3, r2
 80107d4:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	791b      	ldrb	r3, [r3, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f040 809b 	bne.w	8010916 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	881b      	ldrh	r3, [r3, #0]
 80107e4:	461a      	mov	r2, r3
 80107e6:	8bfb      	ldrh	r3, [r7, #30]
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	f1a3 0208 	sub.w	r2, r3, #8
 80107ee:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80107f0:	429a      	cmp	r2, r3
 80107f2:	f0c0 8090 	bcc.w	8010916 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	461a      	mov	r2, r3
 80107fc:	8bfb      	ldrh	r3, [r7, #30]
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	f1a3 0208 	sub.w	r2, r3, #8
 8010804:	88fb      	ldrh	r3, [r7, #6]
 8010806:	3314      	adds	r3, #20
 8010808:	429a      	cmp	r2, r3
 801080a:	d327      	bcc.n	801085c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801080c:	8bfa      	ldrh	r2, [r7, #30]
 801080e:	88fb      	ldrh	r3, [r7, #6]
 8010810:	4413      	add	r3, r2
 8010812:	b29b      	uxth	r3, r3
 8010814:	3308      	adds	r3, #8
 8010816:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8010818:	4b4b      	ldr	r3, [pc, #300]	; (8010948 <mem_malloc+0x1c8>)
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	8a7b      	ldrh	r3, [r7, #18]
 801081e:	4413      	add	r3, r2
 8010820:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2200      	movs	r2, #0
 8010826:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	881a      	ldrh	r2, [r3, #0]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	8bfa      	ldrh	r2, [r7, #30]
 8010834:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	8a7a      	ldrh	r2, [r7, #18]
 801083a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	2201      	movs	r2, #1
 8010840:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801084a:	d00a      	beq.n	8010862 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801084c:	4b3e      	ldr	r3, [pc, #248]	; (8010948 <mem_malloc+0x1c8>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	8812      	ldrh	r2, [r2, #0]
 8010854:	4413      	add	r3, r2
 8010856:	8a7a      	ldrh	r2, [r7, #18]
 8010858:	805a      	strh	r2, [r3, #2]
 801085a:	e002      	b.n	8010862 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	2201      	movs	r2, #1
 8010860:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010862:	4b38      	ldr	r3, [pc, #224]	; (8010944 <mem_malloc+0x1c4>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	697a      	ldr	r2, [r7, #20]
 8010868:	429a      	cmp	r2, r3
 801086a:	d127      	bne.n	80108bc <mem_malloc+0x13c>
          struct mem *cur = lfree;
 801086c:	4b35      	ldr	r3, [pc, #212]	; (8010944 <mem_malloc+0x1c4>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010872:	e005      	b.n	8010880 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8010874:	4b34      	ldr	r3, [pc, #208]	; (8010948 <mem_malloc+0x1c8>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	69ba      	ldr	r2, [r7, #24]
 801087a:	8812      	ldrh	r2, [r2, #0]
 801087c:	4413      	add	r3, r2
 801087e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010880:	69bb      	ldr	r3, [r7, #24]
 8010882:	791b      	ldrb	r3, [r3, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <mem_malloc+0x112>
 8010888:	4b30      	ldr	r3, [pc, #192]	; (801094c <mem_malloc+0x1cc>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	69ba      	ldr	r2, [r7, #24]
 801088e:	429a      	cmp	r2, r3
 8010890:	d1f0      	bne.n	8010874 <mem_malloc+0xf4>
          }
          lfree = cur;
 8010892:	4a2c      	ldr	r2, [pc, #176]	; (8010944 <mem_malloc+0x1c4>)
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010898:	4b2a      	ldr	r3, [pc, #168]	; (8010944 <mem_malloc+0x1c4>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	4b2b      	ldr	r3, [pc, #172]	; (801094c <mem_malloc+0x1cc>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d00b      	beq.n	80108bc <mem_malloc+0x13c>
 80108a4:	4b27      	ldr	r3, [pc, #156]	; (8010944 <mem_malloc+0x1c4>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	791b      	ldrb	r3, [r3, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d006      	beq.n	80108bc <mem_malloc+0x13c>
 80108ae:	4b28      	ldr	r3, [pc, #160]	; (8010950 <mem_malloc+0x1d0>)
 80108b0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80108b4:	4927      	ldr	r1, [pc, #156]	; (8010954 <mem_malloc+0x1d4>)
 80108b6:	4828      	ldr	r0, [pc, #160]	; (8010958 <mem_malloc+0x1d8>)
 80108b8:	f00a f8ea 	bl	801aa90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80108bc:	4820      	ldr	r0, [pc, #128]	; (8010940 <mem_malloc+0x1c0>)
 80108be:	f009 fabe 	bl	8019e3e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80108c2:	88fa      	ldrh	r2, [r7, #6]
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	4413      	add	r3, r2
 80108c8:	3308      	adds	r3, #8
 80108ca:	4a20      	ldr	r2, [pc, #128]	; (801094c <mem_malloc+0x1cc>)
 80108cc:	6812      	ldr	r2, [r2, #0]
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d906      	bls.n	80108e0 <mem_malloc+0x160>
 80108d2:	4b1f      	ldr	r3, [pc, #124]	; (8010950 <mem_malloc+0x1d0>)
 80108d4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80108d8:	4920      	ldr	r1, [pc, #128]	; (801095c <mem_malloc+0x1dc>)
 80108da:	481f      	ldr	r0, [pc, #124]	; (8010958 <mem_malloc+0x1d8>)
 80108dc:	f00a f8d8 	bl	801aa90 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	f003 0303 	and.w	r3, r3, #3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d006      	beq.n	80108f8 <mem_malloc+0x178>
 80108ea:	4b19      	ldr	r3, [pc, #100]	; (8010950 <mem_malloc+0x1d0>)
 80108ec:	f240 22d6 	movw	r2, #726	; 0x2d6
 80108f0:	491b      	ldr	r1, [pc, #108]	; (8010960 <mem_malloc+0x1e0>)
 80108f2:	4819      	ldr	r0, [pc, #100]	; (8010958 <mem_malloc+0x1d8>)
 80108f4:	f00a f8cc 	bl	801aa90 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	f003 0303 	and.w	r3, r3, #3
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d006      	beq.n	8010910 <mem_malloc+0x190>
 8010902:	4b13      	ldr	r3, [pc, #76]	; (8010950 <mem_malloc+0x1d0>)
 8010904:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8010908:	4916      	ldr	r1, [pc, #88]	; (8010964 <mem_malloc+0x1e4>)
 801090a:	4813      	ldr	r0, [pc, #76]	; (8010958 <mem_malloc+0x1d8>)
 801090c:	f00a f8c0 	bl	801aa90 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	3308      	adds	r3, #8
 8010914:	e010      	b.n	8010938 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8010916:	4b0c      	ldr	r3, [pc, #48]	; (8010948 <mem_malloc+0x1c8>)
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	8bfb      	ldrh	r3, [r7, #30]
 801091c:	4413      	add	r3, r2
 801091e:	881b      	ldrh	r3, [r3, #0]
 8010920:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8010922:	8bfa      	ldrh	r2, [r7, #30]
 8010924:	88fb      	ldrh	r3, [r7, #6]
 8010926:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801092a:	429a      	cmp	r2, r3
 801092c:	f4ff af4e 	bcc.w	80107cc <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010930:	4803      	ldr	r0, [pc, #12]	; (8010940 <mem_malloc+0x1c0>)
 8010932:	f009 fa84 	bl	8019e3e <sys_mutex_unlock>
  return NULL;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3720      	adds	r7, #32
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	200041cc 	.word	0x200041cc
 8010944:	200041c8 	.word	0x200041c8
 8010948:	200041c0 	.word	0x200041c0
 801094c:	200041c4 	.word	0x200041c4
 8010950:	0801c2e4 	.word	0x0801c2e4
 8010954:	0801c45c 	.word	0x0801c45c
 8010958:	0801c32c 	.word	0x0801c32c
 801095c:	0801c478 	.word	0x0801c478
 8010960:	0801c4a8 	.word	0x0801c4a8
 8010964:	0801c4d8 	.word	0x0801c4d8

08010968 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	2200      	movs	r2, #0
 8010976:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	3303      	adds	r3, #3
 801097e:	f023 0303 	bic.w	r3, r3, #3
 8010982:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010984:	2300      	movs	r3, #0
 8010986:	60fb      	str	r3, [r7, #12]
 8010988:	e011      	b.n	80109ae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	68ba      	ldr	r2, [r7, #8]
 801099a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	461a      	mov	r2, r3
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	4413      	add	r3, r2
 80109a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	3301      	adds	r3, #1
 80109ac:	60fb      	str	r3, [r7, #12]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	885b      	ldrh	r3, [r3, #2]
 80109b2:	461a      	mov	r2, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	4293      	cmp	r3, r2
 80109b8:	dbe7      	blt.n	801098a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80109ba:	bf00      	nop
 80109bc:	3714      	adds	r7, #20
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr
	...

080109c8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80109ce:	2300      	movs	r3, #0
 80109d0:	80fb      	strh	r3, [r7, #6]
 80109d2:	e009      	b.n	80109e8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80109d4:	88fb      	ldrh	r3, [r7, #6]
 80109d6:	4a08      	ldr	r2, [pc, #32]	; (80109f8 <memp_init+0x30>)
 80109d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109dc:	4618      	mov	r0, r3
 80109de:	f7ff ffc3 	bl	8010968 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80109e2:	88fb      	ldrh	r3, [r7, #6]
 80109e4:	3301      	adds	r3, #1
 80109e6:	80fb      	strh	r3, [r7, #6]
 80109e8:	88fb      	ldrh	r3, [r7, #6]
 80109ea:	2b0c      	cmp	r3, #12
 80109ec:	d9f2      	bls.n	80109d4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80109ee:	bf00      	nop
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	0801e060 	.word	0x0801e060

080109fc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010a04:	f009 fa4e 	bl	8019ea4 <sys_arch_protect>
 8010a08:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d015      	beq.n	8010a44 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	68ba      	ldr	r2, [r7, #8]
 8010a1e:	6812      	ldr	r2, [r2, #0]
 8010a20:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	f003 0303 	and.w	r3, r3, #3
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d006      	beq.n	8010a3a <do_memp_malloc_pool+0x3e>
 8010a2c:	4b09      	ldr	r3, [pc, #36]	; (8010a54 <do_memp_malloc_pool+0x58>)
 8010a2e:	f240 1249 	movw	r2, #329	; 0x149
 8010a32:	4909      	ldr	r1, [pc, #36]	; (8010a58 <do_memp_malloc_pool+0x5c>)
 8010a34:	4809      	ldr	r0, [pc, #36]	; (8010a5c <do_memp_malloc_pool+0x60>)
 8010a36:	f00a f82b 	bl	801aa90 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010a3a:	68f8      	ldr	r0, [r7, #12]
 8010a3c:	f009 fa40 	bl	8019ec0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	e003      	b.n	8010a4c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f009 fa3b 	bl	8019ec0 <sys_arch_unprotect>
  return NULL;
 8010a4a:	2300      	movs	r3, #0
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	0801c4fc 	.word	0x0801c4fc
 8010a58:	0801c52c 	.word	0x0801c52c
 8010a5c:	0801c550 	.word	0x0801c550

08010a60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	4603      	mov	r3, r0
 8010a68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010a6a:	79fb      	ldrb	r3, [r7, #7]
 8010a6c:	2b0c      	cmp	r3, #12
 8010a6e:	d908      	bls.n	8010a82 <memp_malloc+0x22>
 8010a70:	4b0a      	ldr	r3, [pc, #40]	; (8010a9c <memp_malloc+0x3c>)
 8010a72:	f240 1287 	movw	r2, #391	; 0x187
 8010a76:	490a      	ldr	r1, [pc, #40]	; (8010aa0 <memp_malloc+0x40>)
 8010a78:	480a      	ldr	r0, [pc, #40]	; (8010aa4 <memp_malloc+0x44>)
 8010a7a:	f00a f809 	bl	801aa90 <iprintf>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	e008      	b.n	8010a94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010a82:	79fb      	ldrb	r3, [r7, #7]
 8010a84:	4a08      	ldr	r2, [pc, #32]	; (8010aa8 <memp_malloc+0x48>)
 8010a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff ffb6 	bl	80109fc <do_memp_malloc_pool>
 8010a90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010a92:	68fb      	ldr	r3, [r7, #12]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	0801c4fc 	.word	0x0801c4fc
 8010aa0:	0801c58c 	.word	0x0801c58c
 8010aa4:	0801c550 	.word	0x0801c550
 8010aa8:	0801e060 	.word	0x0801e060

08010aac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	f003 0303 	and.w	r3, r3, #3
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d006      	beq.n	8010ace <do_memp_free_pool+0x22>
 8010ac0:	4b0d      	ldr	r3, [pc, #52]	; (8010af8 <do_memp_free_pool+0x4c>)
 8010ac2:	f240 129d 	movw	r2, #413	; 0x19d
 8010ac6:	490d      	ldr	r1, [pc, #52]	; (8010afc <do_memp_free_pool+0x50>)
 8010ac8:	480d      	ldr	r0, [pc, #52]	; (8010b00 <do_memp_free_pool+0x54>)
 8010aca:	f009 ffe1 	bl	801aa90 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010ad2:	f009 f9e7 	bl	8019ea4 <sys_arch_protect>
 8010ad6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010aea:	68b8      	ldr	r0, [r7, #8]
 8010aec:	f009 f9e8 	bl	8019ec0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010af0:	bf00      	nop
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	0801c4fc 	.word	0x0801c4fc
 8010afc:	0801c5ac 	.word	0x0801c5ac
 8010b00:	0801c550 	.word	0x0801c550

08010b04 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	6039      	str	r1, [r7, #0]
 8010b0e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010b10:	79fb      	ldrb	r3, [r7, #7]
 8010b12:	2b0c      	cmp	r3, #12
 8010b14:	d907      	bls.n	8010b26 <memp_free+0x22>
 8010b16:	4b0c      	ldr	r3, [pc, #48]	; (8010b48 <memp_free+0x44>)
 8010b18:	f240 12db 	movw	r2, #475	; 0x1db
 8010b1c:	490b      	ldr	r1, [pc, #44]	; (8010b4c <memp_free+0x48>)
 8010b1e:	480c      	ldr	r0, [pc, #48]	; (8010b50 <memp_free+0x4c>)
 8010b20:	f009 ffb6 	bl	801aa90 <iprintf>
 8010b24:	e00c      	b.n	8010b40 <memp_free+0x3c>

  if (mem == NULL) {
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d008      	beq.n	8010b3e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010b2c:	79fb      	ldrb	r3, [r7, #7]
 8010b2e:	4a09      	ldr	r2, [pc, #36]	; (8010b54 <memp_free+0x50>)
 8010b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7ff ffb8 	bl	8010aac <do_memp_free_pool>
 8010b3c:	e000      	b.n	8010b40 <memp_free+0x3c>
    return;
 8010b3e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	0801c4fc 	.word	0x0801c4fc
 8010b4c:	0801c5cc 	.word	0x0801c5cc
 8010b50:	0801c550 	.word	0x0801c550
 8010b54:	0801e060 	.word	0x0801e060

08010b58 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010b5c:	bf00      	nop
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
	...

08010b68 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
 8010b74:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d105      	bne.n	8010b88 <netif_add+0x20>
 8010b7c:	4b1f      	ldr	r3, [pc, #124]	; (8010bfc <netif_add+0x94>)
 8010b7e:	22fb      	movs	r2, #251	; 0xfb
 8010b80:	491f      	ldr	r1, [pc, #124]	; (8010c00 <netif_add+0x98>)
 8010b82:	4820      	ldr	r0, [pc, #128]	; (8010c04 <netif_add+0x9c>)
 8010b84:	f009 ff84 	bl	801aa90 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2200      	movs	r2, #0
 8010b98:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2203      	movs	r2, #3
 8010ba6:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	69ba      	ldr	r2, [r7, #24]
 8010bae:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8010bb0:	4b15      	ldr	r3, [pc, #84]	; (8010c08 <netif_add+0xa0>)
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	b2d1      	uxtb	r1, r2
 8010bb8:	4a13      	ldr	r2, [pc, #76]	; (8010c08 <netif_add+0xa0>)
 8010bba:	7011      	strb	r1, [r2, #0]
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  netif->input = input;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	6a3a      	ldr	r2, [r7, #32]
 8010bc6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	68b9      	ldr	r1, [r7, #8]
 8010bce:	68f8      	ldr	r0, [r7, #12]
 8010bd0:	f000 f81e 	bl	8010c10 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	68f8      	ldr	r0, [r7, #12]
 8010bd8:	4798      	blx	r3
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d001      	beq.n	8010be4 <netif_add+0x7c>
    return NULL;
 8010be0:	2300      	movs	r3, #0
 8010be2:	e007      	b.n	8010bf4 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010be4:	4b09      	ldr	r3, [pc, #36]	; (8010c0c <netif_add+0xa4>)
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010bec:	4a07      	ldr	r2, [pc, #28]	; (8010c0c <netif_add+0xa4>)
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	0801c5e8 	.word	0x0801c5e8
 8010c00:	0801c61c 	.word	0x0801c61c
 8010c04:	0801c634 	.word	0x0801c634
 8010c08:	20004204 	.word	0x20004204
 8010c0c:	2000ab40 	.word	0x2000ab40

08010c10 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	607a      	str	r2, [r7, #4]
 8010c1c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d003      	beq.n	8010c2c <netif_set_addr+0x1c>
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d10c      	bne.n	8010c46 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8010c2c:	68b9      	ldr	r1, [r7, #8]
 8010c2e:	68f8      	ldr	r0, [r7, #12]
 8010c30:	f000 f81a 	bl	8010c68 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8010c34:	6879      	ldr	r1, [r7, #4]
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f000 f862 	bl	8010d00 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f000 f84a 	bl	8010cd8 <netif_set_gw>
 8010c44:	e00b      	b.n	8010c5e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8010c46:	6879      	ldr	r1, [r7, #4]
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f000 f859 	bl	8010d00 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010c4e:	6839      	ldr	r1, [r7, #0]
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f000 f841 	bl	8010cd8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8010c56:	68b9      	ldr	r1, [r7, #8]
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f000 f805 	bl	8010c68 <netif_set_ipaddr>
  }
}
 8010c5e:	bf00      	nop
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
	...

08010c68 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d003      	beq.n	8010c80 <netif_set_ipaddr+0x18>
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	60fb      	str	r3, [r7, #12]
 8010c7e:	e002      	b.n	8010c86 <netif_set_ipaddr+0x1e>
 8010c80:	4b14      	ldr	r3, [pc, #80]	; (8010cd4 <netif_set_ipaddr+0x6c>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	3304      	adds	r3, #4
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d01c      	beq.n	8010ccc <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	3304      	adds	r3, #4
 8010c96:	f107 020c 	add.w	r2, r7, #12
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f002 fb15 	bl	80132cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	f107 020c 	add.w	r2, r7, #12
 8010caa:	4611      	mov	r1, r2
 8010cac:	4618      	mov	r0, r3
 8010cae:	f006 fce7 	bl	8017680 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <netif_set_ipaddr+0x56>
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	e000      	b.n	8010cc0 <netif_set_ipaddr+0x58>
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 f861 	bl	8010d8e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8010ccc:	bf00      	nop
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	0801e0d4 	.word	0x0801e0d4

08010cd8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <netif_set_gw+0x16>
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	e000      	b.n	8010cf0 <netif_set_gw+0x18>
 8010cee:	2300      	movs	r3, #0
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8010cf4:	bf00      	nop
 8010cf6:	370c      	adds	r7, #12
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <netif_set_netmask+0x16>
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	e000      	b.n	8010d18 <netif_set_netmask+0x18>
 8010d16:	2300      	movs	r3, #0
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010d30:	4a04      	ldr	r2, [pc, #16]	; (8010d44 <netif_set_default+0x1c>)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010d36:	bf00      	nop
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	2000ab44 	.word	0x2000ab44

08010d48 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010d56:	f003 0301 	and.w	r3, r3, #1
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d113      	bne.n	8010d86 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010d64:	f043 0301 	orr.w	r3, r3, #1
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010d76:	f003 0304 	and.w	r3, r3, #4
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d003      	beq.n	8010d86 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8010d7e:	2103      	movs	r1, #3
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f000 f804 	bl	8010d8e <netif_issue_reports>
    }
  }
}
 8010d86:	bf00      	nop
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b082      	sub	sp, #8
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	460b      	mov	r3, r1
 8010d98:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d9a:	78fb      	ldrb	r3, [r7, #3]
 8010d9c:	f003 0301 	and.w	r3, r3, #1
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d011      	beq.n	8010dc8 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	3304      	adds	r3, #4
 8010da8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d00c      	beq.n	8010dc8 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010db4:	f003 0308 	and.w	r3, r3, #8
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d005      	beq.n	8010dc8 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	3304      	adds	r3, #4
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f007 fb90 	bl	80184e8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8010dc8:	bf00      	nop
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010dde:	f003 0301 	and.w	r3, r3, #1
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d012      	beq.n	8010e0c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010dec:	f023 0301 	bic.w	r3, r3, #1
 8010df0:	b2da      	uxtb	r2, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010dfe:	f003 0308 	and.w	r3, r3, #8
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d002      	beq.n	8010e0c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f006 ff34 	bl	8017c74 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010e0c:	bf00      	nop
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010e1a:	f009 f843 	bl	8019ea4 <sys_arch_protect>
 8010e1e:	6038      	str	r0, [r7, #0]
 8010e20:	4b0f      	ldr	r3, [pc, #60]	; (8010e60 <pbuf_free_ooseq+0x4c>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	701a      	strb	r2, [r3, #0]
 8010e26:	6838      	ldr	r0, [r7, #0]
 8010e28:	f009 f84a 	bl	8019ec0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010e2c:	4b0d      	ldr	r3, [pc, #52]	; (8010e64 <pbuf_free_ooseq+0x50>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	607b      	str	r3, [r7, #4]
 8010e32:	e00f      	b.n	8010e54 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d008      	beq.n	8010e4e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e40:	4618      	mov	r0, r3
 8010e42:	f001 febe 	bl	8012bc2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8010e4c:	e005      	b.n	8010e5a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	607b      	str	r3, [r7, #4]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d1ec      	bne.n	8010e34 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	2000ab48 	.word	0x2000ab48
 8010e64:	2000ab50 	.word	0x2000ab50

08010e68 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010e70:	f7ff ffd0 	bl	8010e14 <pbuf_free_ooseq>
}
 8010e74:	bf00      	nop
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010e82:	f009 f80f 	bl	8019ea4 <sys_arch_protect>
 8010e86:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010e88:	4b10      	ldr	r3, [pc, #64]	; (8010ecc <pbuf_pool_is_empty+0x50>)
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010e8e:	4b0f      	ldr	r3, [pc, #60]	; (8010ecc <pbuf_pool_is_empty+0x50>)
 8010e90:	2201      	movs	r2, #1
 8010e92:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f009 f813 	bl	8019ec0 <sys_arch_unprotect>

  if (!queued) {
 8010e9a:	78fb      	ldrb	r3, [r7, #3]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d110      	bne.n	8010ec2 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	2100      	movs	r1, #0
 8010ea4:	480a      	ldr	r0, [pc, #40]	; (8010ed0 <pbuf_pool_is_empty+0x54>)
 8010ea6:	f7ff f943 	bl	8010130 <tcpip_callback_with_block>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d008      	beq.n	8010ec2 <pbuf_pool_is_empty+0x46>
 8010eb0:	f008 fff8 	bl	8019ea4 <sys_arch_protect>
 8010eb4:	6078      	str	r0, [r7, #4]
 8010eb6:	4b05      	ldr	r3, [pc, #20]	; (8010ecc <pbuf_pool_is_empty+0x50>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	701a      	strb	r2, [r3, #0]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f008 ffff 	bl	8019ec0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	2000ab48 	.word	0x2000ab48
 8010ed0:	08010e69 	.word	0x08010e69

08010ed4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b088      	sub	sp, #32
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	4603      	mov	r3, r0
 8010edc:	71fb      	strb	r3, [r7, #7]
 8010ede:	460b      	mov	r3, r1
 8010ee0:	80bb      	strh	r3, [r7, #4]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	2b04      	cmp	r3, #4
 8010eea:	d81c      	bhi.n	8010f26 <pbuf_alloc+0x52>
 8010eec:	a201      	add	r2, pc, #4	; (adr r2, 8010ef4 <pbuf_alloc+0x20>)
 8010eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef2:	bf00      	nop
 8010ef4:	08010f09 	.word	0x08010f09
 8010ef8:	08010f0f 	.word	0x08010f0f
 8010efc:	08010f15 	.word	0x08010f15
 8010f00:	08010f1b 	.word	0x08010f1b
 8010f04:	08010f21 	.word	0x08010f21
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010f08:	2336      	movs	r3, #54	; 0x36
 8010f0a:	82fb      	strh	r3, [r7, #22]
    break;
 8010f0c:	e014      	b.n	8010f38 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010f0e:	2322      	movs	r3, #34	; 0x22
 8010f10:	82fb      	strh	r3, [r7, #22]
    break;
 8010f12:	e011      	b.n	8010f38 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8010f14:	230e      	movs	r3, #14
 8010f16:	82fb      	strh	r3, [r7, #22]
    break;
 8010f18:	e00e      	b.n	8010f38 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	82fb      	strh	r3, [r7, #22]
    break;
 8010f1e:	e00b      	b.n	8010f38 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8010f20:	2300      	movs	r3, #0
 8010f22:	82fb      	strh	r3, [r7, #22]
    break;
 8010f24:	e008      	b.n	8010f38 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8010f26:	4ba5      	ldr	r3, [pc, #660]	; (80111bc <pbuf_alloc+0x2e8>)
 8010f28:	f44f 728b 	mov.w	r2, #278	; 0x116
 8010f2c:	49a4      	ldr	r1, [pc, #656]	; (80111c0 <pbuf_alloc+0x2ec>)
 8010f2e:	48a5      	ldr	r0, [pc, #660]	; (80111c4 <pbuf_alloc+0x2f0>)
 8010f30:	f009 fdae 	bl	801aa90 <iprintf>
    return NULL;
 8010f34:	2300      	movs	r3, #0
 8010f36:	e15d      	b.n	80111f4 <pbuf_alloc+0x320>
  }

  switch (type) {
 8010f38:	79bb      	ldrb	r3, [r7, #6]
 8010f3a:	2b03      	cmp	r3, #3
 8010f3c:	f200 8134 	bhi.w	80111a8 <pbuf_alloc+0x2d4>
 8010f40:	a201      	add	r2, pc, #4	; (adr r2, 8010f48 <pbuf_alloc+0x74>)
 8010f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f46:	bf00      	nop
 8010f48:	080110e9 	.word	0x080110e9
 8010f4c:	08011175 	.word	0x08011175
 8010f50:	08011175 	.word	0x08011175
 8010f54:	08010f59 	.word	0x08010f59
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010f58:	200c      	movs	r0, #12
 8010f5a:	f7ff fd81 	bl	8010a60 <memp_malloc>
 8010f5e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d103      	bne.n	8010f6e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8010f66:	f7ff ff89 	bl	8010e7c <pbuf_pool_is_empty>
      return NULL;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	e142      	b.n	80111f4 <pbuf_alloc+0x320>
    }
    p->type = type;
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	79ba      	ldrb	r2, [r7, #6]
 8010f72:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	2200      	movs	r2, #0
 8010f78:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8010f7a:	8afb      	ldrh	r3, [r7, #22]
 8010f7c:	3310      	adds	r3, #16
 8010f7e:	69fa      	ldr	r2, [r7, #28]
 8010f80:	4413      	add	r3, r2
 8010f82:	3303      	adds	r3, #3
 8010f84:	f023 0303 	bic.w	r3, r3, #3
 8010f88:	461a      	mov	r2, r3
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	f003 0303 	and.w	r3, r3, #3
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d006      	beq.n	8010fa8 <pbuf_alloc+0xd4>
 8010f9a:	4b88      	ldr	r3, [pc, #544]	; (80111bc <pbuf_alloc+0x2e8>)
 8010f9c:	f240 1229 	movw	r2, #297	; 0x129
 8010fa0:	4989      	ldr	r1, [pc, #548]	; (80111c8 <pbuf_alloc+0x2f4>)
 8010fa2:	4888      	ldr	r0, [pc, #544]	; (80111c4 <pbuf_alloc+0x2f0>)
 8010fa4:	f009 fd74 	bl	801aa90 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	88ba      	ldrh	r2, [r7, #4]
 8010fac:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8010fae:	8afb      	ldrh	r3, [r7, #22]
 8010fb0:	3303      	adds	r3, #3
 8010fb2:	f023 0303 	bic.w	r3, r3, #3
 8010fb6:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8010fba:	88bb      	ldrh	r3, [r7, #4]
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	bf28      	it	cs
 8010fc0:	4613      	movcs	r3, r2
 8010fc2:	b29a      	uxth	r2, r3
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	69fa      	ldr	r2, [r7, #28]
 8010fce:	8952      	ldrh	r2, [r2, #10]
 8010fd0:	441a      	add	r2, r3
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d906      	bls.n	8010fea <pbuf_alloc+0x116>
 8010fdc:	4b77      	ldr	r3, [pc, #476]	; (80111bc <pbuf_alloc+0x2e8>)
 8010fde:	f44f 7298 	mov.w	r2, #304	; 0x130
 8010fe2:	497a      	ldr	r1, [pc, #488]	; (80111cc <pbuf_alloc+0x2f8>)
 8010fe4:	4877      	ldr	r0, [pc, #476]	; (80111c4 <pbuf_alloc+0x2f0>)
 8010fe6:	f009 fd53 	bl	801aa90 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010fea:	8afb      	ldrh	r3, [r7, #22]
 8010fec:	3303      	adds	r3, #3
 8010fee:	f023 0303 	bic.w	r3, r3, #3
 8010ff2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010ff6:	d106      	bne.n	8011006 <pbuf_alloc+0x132>
 8010ff8:	4b70      	ldr	r3, [pc, #448]	; (80111bc <pbuf_alloc+0x2e8>)
 8010ffa:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010ffe:	4974      	ldr	r1, [pc, #464]	; (80111d0 <pbuf_alloc+0x2fc>)
 8011000:	4870      	ldr	r0, [pc, #448]	; (80111c4 <pbuf_alloc+0x2f0>)
 8011002:	f009 fd45 	bl	801aa90 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	2201      	movs	r2, #1
 801100a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8011010:	88bb      	ldrh	r3, [r7, #4]
 8011012:	69fa      	ldr	r2, [r7, #28]
 8011014:	8952      	ldrh	r2, [r2, #10]
 8011016:	1a9b      	subs	r3, r3, r2
 8011018:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801101a:	e061      	b.n	80110e0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801101c:	200c      	movs	r0, #12
 801101e:	f7ff fd1f 	bl	8010a60 <memp_malloc>
 8011022:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801102a:	f7ff ff27 	bl	8010e7c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801102e:	69f8      	ldr	r0, [r7, #28]
 8011030:	f000 fac2 	bl	80115b8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8011034:	2300      	movs	r3, #0
 8011036:	e0dd      	b.n	80111f4 <pbuf_alloc+0x320>
      }
      q->type = type;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	79ba      	ldrb	r2, [r7, #6]
 801103c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2200      	movs	r2, #0
 8011042:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2200      	movs	r2, #0
 8011048:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011056:	4293      	cmp	r3, r2
 8011058:	dd06      	ble.n	8011068 <pbuf_alloc+0x194>
 801105a:	4b58      	ldr	r3, [pc, #352]	; (80111bc <pbuf_alloc+0x2e8>)
 801105c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8011060:	495c      	ldr	r1, [pc, #368]	; (80111d4 <pbuf_alloc+0x300>)
 8011062:	4858      	ldr	r0, [pc, #352]	; (80111c4 <pbuf_alloc+0x2f0>)
 8011064:	f009 fd14 	bl	801aa90 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	b29a      	uxth	r2, r3
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	b29b      	uxth	r3, r3
 8011074:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011078:	bf28      	it	cs
 801107a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 801107e:	b29a      	uxth	r2, r3
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f103 0210 	add.w	r2, r3, #16
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	f003 0303 	and.w	r3, r3, #3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d006      	beq.n	80110a8 <pbuf_alloc+0x1d4>
 801109a:	4b48      	ldr	r3, [pc, #288]	; (80111bc <pbuf_alloc+0x2e8>)
 801109c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80110a0:	494d      	ldr	r1, [pc, #308]	; (80111d8 <pbuf_alloc+0x304>)
 80110a2:	4848      	ldr	r0, [pc, #288]	; (80111c4 <pbuf_alloc+0x2f0>)
 80110a4:	f009 fcf4 	bl	801aa90 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	69fa      	ldr	r2, [r7, #28]
 80110ae:	8952      	ldrh	r2, [r2, #10]
 80110b0:	441a      	add	r2, r3
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d906      	bls.n	80110ca <pbuf_alloc+0x1f6>
 80110bc:	4b3f      	ldr	r3, [pc, #252]	; (80111bc <pbuf_alloc+0x2e8>)
 80110be:	f240 1255 	movw	r2, #341	; 0x155
 80110c2:	4942      	ldr	r1, [pc, #264]	; (80111cc <pbuf_alloc+0x2f8>)
 80110c4:	483f      	ldr	r0, [pc, #252]	; (80111c4 <pbuf_alloc+0x2f0>)
 80110c6:	f009 fce3 	bl	801aa90 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2201      	movs	r2, #1
 80110ce:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	895b      	ldrh	r3, [r3, #10]
 80110d4:	461a      	mov	r2, r3
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	1a9b      	subs	r3, r3, r2
 80110da:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	dc9a      	bgt.n	801101c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80110e6:	e07e      	b.n	80111e6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80110e8:	8afb      	ldrh	r3, [r7, #22]
 80110ea:	3313      	adds	r3, #19
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	f023 0303 	bic.w	r3, r3, #3
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	88bb      	ldrh	r3, [r7, #4]
 80110f6:	3303      	adds	r3, #3
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	f023 0303 	bic.w	r3, r3, #3
 80110fe:	b29b      	uxth	r3, r3
 8011100:	4413      	add	r3, r2
 8011102:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8011104:	897a      	ldrh	r2, [r7, #10]
 8011106:	88bb      	ldrh	r3, [r7, #4]
 8011108:	3303      	adds	r3, #3
 801110a:	f023 0303 	bic.w	r3, r3, #3
 801110e:	429a      	cmp	r2, r3
 8011110:	d201      	bcs.n	8011116 <pbuf_alloc+0x242>
        return NULL;
 8011112:	2300      	movs	r3, #0
 8011114:	e06e      	b.n	80111f4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8011116:	897b      	ldrh	r3, [r7, #10]
 8011118:	4618      	mov	r0, r3
 801111a:	f7ff fb31 	bl	8010780 <mem_malloc>
 801111e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d101      	bne.n	801112a <pbuf_alloc+0x256>
      return NULL;
 8011126:	2300      	movs	r3, #0
 8011128:	e064      	b.n	80111f4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801112a:	8afb      	ldrh	r3, [r7, #22]
 801112c:	3310      	adds	r3, #16
 801112e:	69fa      	ldr	r2, [r7, #28]
 8011130:	4413      	add	r3, r2
 8011132:	3303      	adds	r3, #3
 8011134:	f023 0303 	bic.w	r3, r3, #3
 8011138:	461a      	mov	r2, r3
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	88ba      	ldrh	r2, [r7, #4]
 8011142:	811a      	strh	r2, [r3, #8]
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	891a      	ldrh	r2, [r3, #8]
 8011148:	69fb      	ldr	r3, [r7, #28]
 801114a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	2200      	movs	r2, #0
 8011150:	601a      	str	r2, [r3, #0]
    p->type = type;
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	79ba      	ldrb	r2, [r7, #6]
 8011156:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	f003 0303 	and.w	r3, r3, #3
 8011160:	2b00      	cmp	r3, #0
 8011162:	d03f      	beq.n	80111e4 <pbuf_alloc+0x310>
 8011164:	4b15      	ldr	r3, [pc, #84]	; (80111bc <pbuf_alloc+0x2e8>)
 8011166:	f240 1277 	movw	r2, #375	; 0x177
 801116a:	491c      	ldr	r1, [pc, #112]	; (80111dc <pbuf_alloc+0x308>)
 801116c:	4815      	ldr	r0, [pc, #84]	; (80111c4 <pbuf_alloc+0x2f0>)
 801116e:	f009 fc8f 	bl	801aa90 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8011172:	e037      	b.n	80111e4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011174:	200b      	movs	r0, #11
 8011176:	f7ff fc73 	bl	8010a60 <memp_malloc>
 801117a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d101      	bne.n	8011186 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8011182:	2300      	movs	r3, #0
 8011184:	e036      	b.n	80111f4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	2200      	movs	r2, #0
 801118a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	88ba      	ldrh	r2, [r7, #4]
 8011190:	811a      	strh	r2, [r3, #8]
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	891a      	ldrh	r2, [r3, #8]
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	2200      	movs	r2, #0
 801119e:	601a      	str	r2, [r3, #0]
    p->type = type;
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	79ba      	ldrb	r2, [r7, #6]
 80111a4:	731a      	strb	r2, [r3, #12]
    break;
 80111a6:	e01e      	b.n	80111e6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80111a8:	4b04      	ldr	r3, [pc, #16]	; (80111bc <pbuf_alloc+0x2e8>)
 80111aa:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80111ae:	490c      	ldr	r1, [pc, #48]	; (80111e0 <pbuf_alloc+0x30c>)
 80111b0:	4804      	ldr	r0, [pc, #16]	; (80111c4 <pbuf_alloc+0x2f0>)
 80111b2:	f009 fc6d 	bl	801aa90 <iprintf>
    return NULL;
 80111b6:	2300      	movs	r3, #0
 80111b8:	e01c      	b.n	80111f4 <pbuf_alloc+0x320>
 80111ba:	bf00      	nop
 80111bc:	0801c65c 	.word	0x0801c65c
 80111c0:	0801c68c 	.word	0x0801c68c
 80111c4:	0801c6a8 	.word	0x0801c6a8
 80111c8:	0801c6d0 	.word	0x0801c6d0
 80111cc:	0801c700 	.word	0x0801c700
 80111d0:	0801c734 	.word	0x0801c734
 80111d4:	0801c768 	.word	0x0801c768
 80111d8:	0801c77c 	.word	0x0801c77c
 80111dc:	0801c7ac 	.word	0x0801c7ac
 80111e0:	0801c7d8 	.word	0x0801c7d8
    break;
 80111e4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	2201      	movs	r2, #1
 80111ea:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	2200      	movs	r2, #0
 80111f0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80111f2:	69fb      	ldr	r3, [r7, #28]
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3720      	adds	r7, #32
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	603b      	str	r3, [r7, #0]
 8011204:	4603      	mov	r3, r0
 8011206:	71fb      	strb	r3, [r7, #7]
 8011208:	460b      	mov	r3, r1
 801120a:	80bb      	strh	r3, [r7, #4]
 801120c:	4613      	mov	r3, r2
 801120e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8011210:	79fb      	ldrb	r3, [r7, #7]
 8011212:	2b04      	cmp	r3, #4
 8011214:	d81b      	bhi.n	801124e <pbuf_alloced_custom+0x52>
 8011216:	a201      	add	r2, pc, #4	; (adr r2, 801121c <pbuf_alloced_custom+0x20>)
 8011218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801121c:	08011231 	.word	0x08011231
 8011220:	08011237 	.word	0x08011237
 8011224:	0801123d 	.word	0x0801123d
 8011228:	08011243 	.word	0x08011243
 801122c:	08011249 	.word	0x08011249
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8011230:	2336      	movs	r3, #54	; 0x36
 8011232:	81fb      	strh	r3, [r7, #14]
    break;
 8011234:	e014      	b.n	8011260 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8011236:	2322      	movs	r3, #34	; 0x22
 8011238:	81fb      	strh	r3, [r7, #14]
    break;
 801123a:	e011      	b.n	8011260 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801123c:	230e      	movs	r3, #14
 801123e:	81fb      	strh	r3, [r7, #14]
    break;
 8011240:	e00e      	b.n	8011260 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8011242:	2300      	movs	r3, #0
 8011244:	81fb      	strh	r3, [r7, #14]
    break;
 8011246:	e00b      	b.n	8011260 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8011248:	2300      	movs	r3, #0
 801124a:	81fb      	strh	r3, [r7, #14]
    break;
 801124c:	e008      	b.n	8011260 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801124e:	4b1d      	ldr	r3, [pc, #116]	; (80112c4 <pbuf_alloced_custom+0xc8>)
 8011250:	f240 12c5 	movw	r2, #453	; 0x1c5
 8011254:	491c      	ldr	r1, [pc, #112]	; (80112c8 <pbuf_alloced_custom+0xcc>)
 8011256:	481d      	ldr	r0, [pc, #116]	; (80112cc <pbuf_alloced_custom+0xd0>)
 8011258:	f009 fc1a 	bl	801aa90 <iprintf>
    return NULL;
 801125c:	2300      	movs	r3, #0
 801125e:	e02d      	b.n	80112bc <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011260:	89fb      	ldrh	r3, [r7, #14]
 8011262:	3303      	adds	r3, #3
 8011264:	f023 0203 	bic.w	r2, r3, #3
 8011268:	88bb      	ldrh	r3, [r7, #4]
 801126a:	441a      	add	r2, r3
 801126c:	8bbb      	ldrh	r3, [r7, #28]
 801126e:	429a      	cmp	r2, r3
 8011270:	d901      	bls.n	8011276 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011272:	2300      	movs	r3, #0
 8011274:	e022      	b.n	80112bc <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	2200      	movs	r2, #0
 801127a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d008      	beq.n	8011294 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011282:	89fb      	ldrh	r3, [r7, #14]
 8011284:	3303      	adds	r3, #3
 8011286:	f023 0303 	bic.w	r3, r3, #3
 801128a:	69ba      	ldr	r2, [r7, #24]
 801128c:	441a      	add	r2, r3
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	605a      	str	r2, [r3, #4]
 8011292:	e002      	b.n	801129a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2200      	movs	r2, #0
 8011298:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	2202      	movs	r2, #2
 801129e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	88ba      	ldrh	r2, [r7, #4]
 80112a4:	811a      	strh	r2, [r3, #8]
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	891a      	ldrh	r2, [r3, #8]
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	79ba      	ldrb	r2, [r7, #6]
 80112b2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	2201      	movs	r2, #1
 80112b8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80112ba:	683b      	ldr	r3, [r7, #0]
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	0801c65c 	.word	0x0801c65c
 80112c8:	0801c7f4 	.word	0x0801c7f4
 80112cc:	0801c6a8 	.word	0x0801c6a8

080112d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	460b      	mov	r3, r1
 80112da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d106      	bne.n	80112f0 <pbuf_realloc+0x20>
 80112e2:	4b4b      	ldr	r3, [pc, #300]	; (8011410 <pbuf_realloc+0x140>)
 80112e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80112e8:	494a      	ldr	r1, [pc, #296]	; (8011414 <pbuf_realloc+0x144>)
 80112ea:	484b      	ldr	r0, [pc, #300]	; (8011418 <pbuf_realloc+0x148>)
 80112ec:	f009 fbd0 	bl	801aa90 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	7b1b      	ldrb	r3, [r3, #12]
 80112f4:	2b03      	cmp	r3, #3
 80112f6:	d012      	beq.n	801131e <pbuf_realloc+0x4e>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	7b1b      	ldrb	r3, [r3, #12]
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	d00e      	beq.n	801131e <pbuf_realloc+0x4e>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7b1b      	ldrb	r3, [r3, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d00a      	beq.n	801131e <pbuf_realloc+0x4e>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	7b1b      	ldrb	r3, [r3, #12]
 801130c:	2b02      	cmp	r3, #2
 801130e:	d006      	beq.n	801131e <pbuf_realloc+0x4e>
 8011310:	4b3f      	ldr	r3, [pc, #252]	; (8011410 <pbuf_realloc+0x140>)
 8011312:	f240 12f7 	movw	r2, #503	; 0x1f7
 8011316:	4941      	ldr	r1, [pc, #260]	; (801141c <pbuf_realloc+0x14c>)
 8011318:	483f      	ldr	r0, [pc, #252]	; (8011418 <pbuf_realloc+0x148>)
 801131a:	f009 fbb9 	bl	801aa90 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	891b      	ldrh	r3, [r3, #8]
 8011322:	887a      	ldrh	r2, [r7, #2]
 8011324:	429a      	cmp	r2, r3
 8011326:	d26f      	bcs.n	8011408 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8011328:	887b      	ldrh	r3, [r7, #2]
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	8912      	ldrh	r2, [r2, #8]
 801132e:	1a9b      	subs	r3, r3, r2
 8011330:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011332:	887b      	ldrh	r3, [r7, #2]
 8011334:	827b      	strh	r3, [r7, #18]
  q = p;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801133a:	e025      	b.n	8011388 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	895b      	ldrh	r3, [r3, #10]
 8011340:	8a7a      	ldrh	r2, [r7, #18]
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801134c:	4293      	cmp	r3, r2
 801134e:	dd06      	ble.n	801135e <pbuf_realloc+0x8e>
 8011350:	4b2f      	ldr	r3, [pc, #188]	; (8011410 <pbuf_realloc+0x140>)
 8011352:	f240 220b 	movw	r2, #523	; 0x20b
 8011356:	4932      	ldr	r1, [pc, #200]	; (8011420 <pbuf_realloc+0x150>)
 8011358:	482f      	ldr	r0, [pc, #188]	; (8011418 <pbuf_realloc+0x148>)
 801135a:	f009 fb99 	bl	801aa90 <iprintf>
    q->tot_len += (u16_t)grow;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	891a      	ldrh	r2, [r3, #8]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	b29b      	uxth	r3, r3
 8011366:	4413      	add	r3, r2
 8011368:	b29a      	uxth	r2, r3
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d106      	bne.n	8011388 <pbuf_realloc+0xb8>
 801137a:	4b25      	ldr	r3, [pc, #148]	; (8011410 <pbuf_realloc+0x140>)
 801137c:	f240 220f 	movw	r2, #527	; 0x20f
 8011380:	4928      	ldr	r1, [pc, #160]	; (8011424 <pbuf_realloc+0x154>)
 8011382:	4825      	ldr	r0, [pc, #148]	; (8011418 <pbuf_realloc+0x148>)
 8011384:	f009 fb84 	bl	801aa90 <iprintf>
  while (rem_len > q->len) {
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	895b      	ldrh	r3, [r3, #10]
 801138c:	8a7a      	ldrh	r2, [r7, #18]
 801138e:	429a      	cmp	r2, r3
 8011390:	d8d4      	bhi.n	801133c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	7b1b      	ldrb	r3, [r3, #12]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d122      	bne.n	80113e0 <pbuf_realloc+0x110>
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	895b      	ldrh	r3, [r3, #10]
 801139e:	8a7a      	ldrh	r2, [r7, #18]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d01d      	beq.n	80113e0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	7b5b      	ldrb	r3, [r3, #13]
 80113a8:	f003 0302 	and.w	r3, r3, #2
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d117      	bne.n	80113e0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	461a      	mov	r2, r3
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	1ad3      	subs	r3, r2, r3
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	8a7b      	ldrh	r3, [r7, #18]
 80113be:	4413      	add	r3, r2
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	4619      	mov	r1, r3
 80113c4:	6978      	ldr	r0, [r7, #20]
 80113c6:	f7ff f8f1 	bl	80105ac <mem_trim>
 80113ca:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d106      	bne.n	80113e0 <pbuf_realloc+0x110>
 80113d2:	4b0f      	ldr	r3, [pc, #60]	; (8011410 <pbuf_realloc+0x140>)
 80113d4:	f240 221d 	movw	r2, #541	; 0x21d
 80113d8:	4913      	ldr	r1, [pc, #76]	; (8011428 <pbuf_realloc+0x158>)
 80113da:	480f      	ldr	r0, [pc, #60]	; (8011418 <pbuf_realloc+0x148>)
 80113dc:	f009 fb58 	bl	801aa90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	8a7a      	ldrh	r2, [r7, #18]
 80113e4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	895a      	ldrh	r2, [r3, #10]
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d004      	beq.n	8011400 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f000 f8dc 	bl	80115b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	2200      	movs	r2, #0
 8011404:	601a      	str	r2, [r3, #0]
 8011406:	e000      	b.n	801140a <pbuf_realloc+0x13a>
    return;
 8011408:	bf00      	nop

}
 801140a:	3718      	adds	r7, #24
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	0801c65c 	.word	0x0801c65c
 8011414:	0801c818 	.word	0x0801c818
 8011418:	0801c6a8 	.word	0x0801c6a8
 801141c:	0801c830 	.word	0x0801c830
 8011420:	0801c84c 	.word	0x0801c84c
 8011424:	0801c860 	.word	0x0801c860
 8011428:	0801c878 	.word	0x0801c878

0801142c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	460b      	mov	r3, r1
 8011436:	807b      	strh	r3, [r7, #2]
 8011438:	4613      	mov	r3, r2
 801143a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d106      	bne.n	8011450 <pbuf_header_impl+0x24>
 8011442:	4b46      	ldr	r3, [pc, #280]	; (801155c <pbuf_header_impl+0x130>)
 8011444:	f240 223f 	movw	r2, #575	; 0x23f
 8011448:	4945      	ldr	r1, [pc, #276]	; (8011560 <pbuf_header_impl+0x134>)
 801144a:	4846      	ldr	r0, [pc, #280]	; (8011564 <pbuf_header_impl+0x138>)
 801144c:	f009 fb20 	bl	801aa90 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8011450:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <pbuf_header_impl+0x32>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d101      	bne.n	8011462 <pbuf_header_impl+0x36>
    return 0;
 801145e:	2300      	movs	r3, #0
 8011460:	e078      	b.n	8011554 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8011462:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011466:	2b00      	cmp	r3, #0
 8011468:	da10      	bge.n	801148c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 801146a:	887b      	ldrh	r3, [r7, #2]
 801146c:	425b      	negs	r3, r3
 801146e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	895b      	ldrh	r3, [r3, #10]
 8011474:	89fa      	ldrh	r2, [r7, #14]
 8011476:	429a      	cmp	r2, r3
 8011478:	d90a      	bls.n	8011490 <pbuf_header_impl+0x64>
 801147a:	4b38      	ldr	r3, [pc, #224]	; (801155c <pbuf_header_impl+0x130>)
 801147c:	f240 2247 	movw	r2, #583	; 0x247
 8011480:	4939      	ldr	r1, [pc, #228]	; (8011568 <pbuf_header_impl+0x13c>)
 8011482:	4838      	ldr	r0, [pc, #224]	; (8011564 <pbuf_header_impl+0x138>)
 8011484:	f009 fb04 	bl	801aa90 <iprintf>
 8011488:	2301      	movs	r3, #1
 801148a:	e063      	b.n	8011554 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801148c:	887b      	ldrh	r3, [r7, #2]
 801148e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7b1b      	ldrb	r3, [r3, #12]
 8011494:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 801149c:	89bb      	ldrh	r3, [r7, #12]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d002      	beq.n	80114a8 <pbuf_header_impl+0x7c>
 80114a2:	89bb      	ldrh	r3, [r7, #12]
 80114a4:	2b03      	cmp	r3, #3
 80114a6:	d112      	bne.n	80114ce <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	685a      	ldr	r2, [r3, #4]
 80114ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114b0:	425b      	negs	r3, r3
 80114b2:	441a      	add	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	3310      	adds	r3, #16
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d238      	bcs.n	8011536 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80114ca:	2301      	movs	r3, #1
 80114cc:	e042      	b.n	8011554 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80114ce:	89bb      	ldrh	r3, [r7, #12]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d002      	beq.n	80114da <pbuf_header_impl+0xae>
 80114d4:	89bb      	ldrh	r3, [r7, #12]
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d124      	bne.n	8011524 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80114da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	da0d      	bge.n	80114fe <pbuf_header_impl+0xd2>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	895b      	ldrh	r3, [r3, #10]
 80114e6:	89fa      	ldrh	r2, [r7, #14]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d808      	bhi.n	80114fe <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	685a      	ldr	r2, [r3, #4]
 80114f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114f4:	425b      	negs	r3, r3
 80114f6:	441a      	add	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	605a      	str	r2, [r3, #4]
 80114fc:	e011      	b.n	8011522 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80114fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011502:	2b00      	cmp	r3, #0
 8011504:	dd0b      	ble.n	801151e <pbuf_header_impl+0xf2>
 8011506:	787b      	ldrb	r3, [r7, #1]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d008      	beq.n	801151e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	685a      	ldr	r2, [r3, #4]
 8011510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011514:	425b      	negs	r3, r3
 8011516:	441a      	add	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	605a      	str	r2, [r3, #4]
 801151c:	e001      	b.n	8011522 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801151e:	2301      	movs	r3, #1
 8011520:	e018      	b.n	8011554 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8011522:	e008      	b.n	8011536 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8011524:	4b0d      	ldr	r3, [pc, #52]	; (801155c <pbuf_header_impl+0x130>)
 8011526:	f240 2277 	movw	r2, #631	; 0x277
 801152a:	4910      	ldr	r1, [pc, #64]	; (801156c <pbuf_header_impl+0x140>)
 801152c:	480d      	ldr	r0, [pc, #52]	; (8011564 <pbuf_header_impl+0x138>)
 801152e:	f009 faaf 	bl	801aa90 <iprintf>
    return 1;
 8011532:	2301      	movs	r3, #1
 8011534:	e00e      	b.n	8011554 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	895a      	ldrh	r2, [r3, #10]
 801153a:	887b      	ldrh	r3, [r7, #2]
 801153c:	4413      	add	r3, r2
 801153e:	b29a      	uxth	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	891a      	ldrh	r2, [r3, #8]
 8011548:	887b      	ldrh	r3, [r7, #2]
 801154a:	4413      	add	r3, r2
 801154c:	b29a      	uxth	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	0801c65c 	.word	0x0801c65c
 8011560:	0801c894 	.word	0x0801c894
 8011564:	0801c6a8 	.word	0x0801c6a8
 8011568:	0801c8a0 	.word	0x0801c8a0
 801156c:	0801c8c0 	.word	0x0801c8c0

08011570 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	460b      	mov	r3, r1
 801157a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 801157c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011580:	2200      	movs	r2, #0
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7ff ff51 	bl	801142c <pbuf_header_impl>
 801158a:	4603      	mov	r3, r0
}
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80115a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80115a4:	2201      	movs	r2, #1
 80115a6:	4619      	mov	r1, r3
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7ff ff3f 	bl	801142c <pbuf_header_impl>
 80115ae:	4603      	mov	r3, r0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b088      	sub	sp, #32
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d10b      	bne.n	80115de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d106      	bne.n	80115da <pbuf_free+0x22>
 80115cc:	4b41      	ldr	r3, [pc, #260]	; (80116d4 <pbuf_free+0x11c>)
 80115ce:	f240 22d2 	movw	r2, #722	; 0x2d2
 80115d2:	4941      	ldr	r1, [pc, #260]	; (80116d8 <pbuf_free+0x120>)
 80115d4:	4841      	ldr	r0, [pc, #260]	; (80116dc <pbuf_free+0x124>)
 80115d6:	f009 fa5b 	bl	801aa90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80115da:	2300      	movs	r3, #0
 80115dc:	e076      	b.n	80116cc <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	7b1b      	ldrb	r3, [r3, #12]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d012      	beq.n	801160c <pbuf_free+0x54>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	7b1b      	ldrb	r3, [r3, #12]
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d00e      	beq.n	801160c <pbuf_free+0x54>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	7b1b      	ldrb	r3, [r3, #12]
 80115f2:	2b02      	cmp	r3, #2
 80115f4:	d00a      	beq.n	801160c <pbuf_free+0x54>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	7b1b      	ldrb	r3, [r3, #12]
 80115fa:	2b03      	cmp	r3, #3
 80115fc:	d006      	beq.n	801160c <pbuf_free+0x54>
 80115fe:	4b35      	ldr	r3, [pc, #212]	; (80116d4 <pbuf_free+0x11c>)
 8011600:	f240 22de 	movw	r2, #734	; 0x2de
 8011604:	4936      	ldr	r1, [pc, #216]	; (80116e0 <pbuf_free+0x128>)
 8011606:	4835      	ldr	r0, [pc, #212]	; (80116dc <pbuf_free+0x124>)
 8011608:	f009 fa42 	bl	801aa90 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801160c:	2300      	movs	r3, #0
 801160e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011610:	e058      	b.n	80116c4 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011612:	f008 fc47 	bl	8019ea4 <sys_arch_protect>
 8011616:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	89db      	ldrh	r3, [r3, #14]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d106      	bne.n	801162e <pbuf_free+0x76>
 8011620:	4b2c      	ldr	r3, [pc, #176]	; (80116d4 <pbuf_free+0x11c>)
 8011622:	f240 22eb 	movw	r2, #747	; 0x2eb
 8011626:	492f      	ldr	r1, [pc, #188]	; (80116e4 <pbuf_free+0x12c>)
 8011628:	482c      	ldr	r0, [pc, #176]	; (80116dc <pbuf_free+0x124>)
 801162a:	f009 fa31 	bl	801aa90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	89db      	ldrh	r3, [r3, #14]
 8011632:	3b01      	subs	r3, #1
 8011634:	b29a      	uxth	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	81da      	strh	r2, [r3, #14]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	89db      	ldrh	r3, [r3, #14]
 801163e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8011640:	69b8      	ldr	r0, [r7, #24]
 8011642:	f008 fc3d 	bl	8019ec0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011646:	8afb      	ldrh	r3, [r7, #22]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d139      	bne.n	80116c0 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	7b1b      	ldrb	r3, [r3, #12]
 8011656:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	7b5b      	ldrb	r3, [r3, #13]
 801165c:	f003 0302 	and.w	r3, r3, #2
 8011660:	2b00      	cmp	r3, #0
 8011662:	d011      	beq.n	8011688 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d106      	bne.n	801167e <pbuf_free+0xc6>
 8011670:	4b18      	ldr	r3, [pc, #96]	; (80116d4 <pbuf_free+0x11c>)
 8011672:	f240 22f9 	movw	r2, #761	; 0x2f9
 8011676:	491c      	ldr	r1, [pc, #112]	; (80116e8 <pbuf_free+0x130>)
 8011678:	4818      	ldr	r0, [pc, #96]	; (80116dc <pbuf_free+0x124>)
 801167a:	f009 fa09 	bl	801aa90 <iprintf>
        pc->custom_free_function(p);
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	4798      	blx	r3
 8011686:	e015      	b.n	80116b4 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8011688:	89fb      	ldrh	r3, [r7, #14]
 801168a:	2b03      	cmp	r3, #3
 801168c:	d104      	bne.n	8011698 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 801168e:	6879      	ldr	r1, [r7, #4]
 8011690:	200c      	movs	r0, #12
 8011692:	f7ff fa37 	bl	8010b04 <memp_free>
 8011696:	e00d      	b.n	80116b4 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8011698:	89fb      	ldrh	r3, [r7, #14]
 801169a:	2b01      	cmp	r3, #1
 801169c:	d002      	beq.n	80116a4 <pbuf_free+0xec>
 801169e:	89fb      	ldrh	r3, [r7, #14]
 80116a0:	2b02      	cmp	r3, #2
 80116a2:	d104      	bne.n	80116ae <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 80116a4:	6879      	ldr	r1, [r7, #4]
 80116a6:	200b      	movs	r0, #11
 80116a8:	f7ff fa2c 	bl	8010b04 <memp_free>
 80116ac:	e002      	b.n	80116b4 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7fe ff0e 	bl	80104d0 <mem_free>
        }
      }
      count++;
 80116b4:	7ffb      	ldrb	r3, [r7, #31]
 80116b6:	3301      	adds	r3, #1
 80116b8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	607b      	str	r3, [r7, #4]
 80116be:	e001      	b.n	80116c4 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80116c0:	2300      	movs	r3, #0
 80116c2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d1a3      	bne.n	8011612 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80116ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3720      	adds	r7, #32
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	0801c65c 	.word	0x0801c65c
 80116d8:	0801c894 	.word	0x0801c894
 80116dc:	0801c6a8 	.word	0x0801c6a8
 80116e0:	0801c8d0 	.word	0x0801c8d0
 80116e4:	0801c8e8 	.word	0x0801c8e8
 80116e8:	0801c900 	.word	0x0801c900

080116ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b085      	sub	sp, #20
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80116f4:	2300      	movs	r3, #0
 80116f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80116f8:	e005      	b.n	8011706 <pbuf_clen+0x1a>
    ++len;
 80116fa:	89fb      	ldrh	r3, [r7, #14]
 80116fc:	3301      	adds	r3, #1
 80116fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1f6      	bne.n	80116fa <pbuf_clen+0xe>
  }
  return len;
 801170c:	89fb      	ldrh	r3, [r7, #14]
}
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
	...

0801171c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d016      	beq.n	8011758 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801172a:	f008 fbbb 	bl	8019ea4 <sys_arch_protect>
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	89db      	ldrh	r3, [r3, #14]
 8011734:	3301      	adds	r3, #1
 8011736:	b29a      	uxth	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	81da      	strh	r2, [r3, #14]
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f008 fbbf 	bl	8019ec0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	89db      	ldrh	r3, [r3, #14]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d106      	bne.n	8011758 <pbuf_ref+0x3c>
 801174a:	4b05      	ldr	r3, [pc, #20]	; (8011760 <pbuf_ref+0x44>)
 801174c:	f240 3239 	movw	r2, #825	; 0x339
 8011750:	4904      	ldr	r1, [pc, #16]	; (8011764 <pbuf_ref+0x48>)
 8011752:	4805      	ldr	r0, [pc, #20]	; (8011768 <pbuf_ref+0x4c>)
 8011754:	f009 f99c 	bl	801aa90 <iprintf>
  }
}
 8011758:	bf00      	nop
 801175a:	3710      	adds	r7, #16
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	0801c65c 	.word	0x0801c65c
 8011764:	0801c924 	.word	0x0801c924
 8011768:	0801c6a8 	.word	0x0801c6a8

0801176c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b084      	sub	sp, #16
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d002      	beq.n	8011782 <pbuf_cat+0x16>
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d107      	bne.n	8011792 <pbuf_cat+0x26>
 8011782:	4b20      	ldr	r3, [pc, #128]	; (8011804 <pbuf_cat+0x98>)
 8011784:	f240 324d 	movw	r2, #845	; 0x34d
 8011788:	491f      	ldr	r1, [pc, #124]	; (8011808 <pbuf_cat+0x9c>)
 801178a:	4820      	ldr	r0, [pc, #128]	; (801180c <pbuf_cat+0xa0>)
 801178c:	f009 f980 	bl	801aa90 <iprintf>
 8011790:	e034      	b.n	80117fc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	60fb      	str	r3, [r7, #12]
 8011796:	e00a      	b.n	80117ae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	891a      	ldrh	r2, [r3, #8]
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	891b      	ldrh	r3, [r3, #8]
 80117a0:	4413      	add	r3, r2
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	60fb      	str	r3, [r7, #12]
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1f0      	bne.n	8011798 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	891a      	ldrh	r2, [r3, #8]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	895b      	ldrh	r3, [r3, #10]
 80117be:	429a      	cmp	r2, r3
 80117c0:	d006      	beq.n	80117d0 <pbuf_cat+0x64>
 80117c2:	4b10      	ldr	r3, [pc, #64]	; (8011804 <pbuf_cat+0x98>)
 80117c4:	f240 3255 	movw	r2, #853	; 0x355
 80117c8:	4911      	ldr	r1, [pc, #68]	; (8011810 <pbuf_cat+0xa4>)
 80117ca:	4810      	ldr	r0, [pc, #64]	; (801180c <pbuf_cat+0xa0>)
 80117cc:	f009 f960 	bl	801aa90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d006      	beq.n	80117e6 <pbuf_cat+0x7a>
 80117d8:	4b0a      	ldr	r3, [pc, #40]	; (8011804 <pbuf_cat+0x98>)
 80117da:	f240 3256 	movw	r2, #854	; 0x356
 80117de:	490d      	ldr	r1, [pc, #52]	; (8011814 <pbuf_cat+0xa8>)
 80117e0:	480a      	ldr	r0, [pc, #40]	; (801180c <pbuf_cat+0xa0>)
 80117e2:	f009 f955 	bl	801aa90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	891a      	ldrh	r2, [r3, #8]
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	891b      	ldrh	r3, [r3, #8]
 80117ee:	4413      	add	r3, r2
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	683a      	ldr	r2, [r7, #0]
 80117fa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	0801c65c 	.word	0x0801c65c
 8011808:	0801c938 	.word	0x0801c938
 801180c:	0801c6a8 	.word	0x0801c6a8
 8011810:	0801c970 	.word	0x0801c970
 8011814:	0801c9a0 	.word	0x0801c9a0

08011818 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8011822:	2300      	movs	r3, #0
 8011824:	81fb      	strh	r3, [r7, #14]
 8011826:	2300      	movs	r3, #0
 8011828:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d008      	beq.n	8011842 <pbuf_copy+0x2a>
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d005      	beq.n	8011842 <pbuf_copy+0x2a>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	891a      	ldrh	r2, [r3, #8]
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	891b      	ldrh	r3, [r3, #8]
 801183e:	429a      	cmp	r2, r3
 8011840:	d209      	bcs.n	8011856 <pbuf_copy+0x3e>
 8011842:	4b54      	ldr	r3, [pc, #336]	; (8011994 <pbuf_copy+0x17c>)
 8011844:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011848:	4953      	ldr	r1, [pc, #332]	; (8011998 <pbuf_copy+0x180>)
 801184a:	4854      	ldr	r0, [pc, #336]	; (801199c <pbuf_copy+0x184>)
 801184c:	f009 f920 	bl	801aa90 <iprintf>
 8011850:	f06f 030f 	mvn.w	r3, #15
 8011854:	e099      	b.n	801198a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	895b      	ldrh	r3, [r3, #10]
 801185a:	461a      	mov	r2, r3
 801185c:	89fb      	ldrh	r3, [r7, #14]
 801185e:	1ad2      	subs	r2, r2, r3
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	895b      	ldrh	r3, [r3, #10]
 8011864:	4619      	mov	r1, r3
 8011866:	89bb      	ldrh	r3, [r7, #12]
 8011868:	1acb      	subs	r3, r1, r3
 801186a:	429a      	cmp	r2, r3
 801186c:	db05      	blt.n	801187a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	895a      	ldrh	r2, [r3, #10]
 8011872:	89bb      	ldrh	r3, [r7, #12]
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	817b      	strh	r3, [r7, #10]
 8011878:	e004      	b.n	8011884 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	895a      	ldrh	r2, [r3, #10]
 801187e:	89fb      	ldrh	r3, [r7, #14]
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	685a      	ldr	r2, [r3, #4]
 8011888:	89fb      	ldrh	r3, [r7, #14]
 801188a:	18d0      	adds	r0, r2, r3
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	685a      	ldr	r2, [r3, #4]
 8011890:	89bb      	ldrh	r3, [r7, #12]
 8011892:	4413      	add	r3, r2
 8011894:	897a      	ldrh	r2, [r7, #10]
 8011896:	4619      	mov	r1, r3
 8011898:	f009 f83f 	bl	801a91a <memcpy>
    offset_to += len;
 801189c:	89fa      	ldrh	r2, [r7, #14]
 801189e:	897b      	ldrh	r3, [r7, #10]
 80118a0:	4413      	add	r3, r2
 80118a2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80118a4:	89ba      	ldrh	r2, [r7, #12]
 80118a6:	897b      	ldrh	r3, [r7, #10]
 80118a8:	4413      	add	r3, r2
 80118aa:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	895b      	ldrh	r3, [r3, #10]
 80118b0:	89fa      	ldrh	r2, [r7, #14]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d906      	bls.n	80118c4 <pbuf_copy+0xac>
 80118b6:	4b37      	ldr	r3, [pc, #220]	; (8011994 <pbuf_copy+0x17c>)
 80118b8:	f240 32cd 	movw	r2, #973	; 0x3cd
 80118bc:	4938      	ldr	r1, [pc, #224]	; (80119a0 <pbuf_copy+0x188>)
 80118be:	4837      	ldr	r0, [pc, #220]	; (801199c <pbuf_copy+0x184>)
 80118c0:	f009 f8e6 	bl	801aa90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	895b      	ldrh	r3, [r3, #10]
 80118c8:	89ba      	ldrh	r2, [r7, #12]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d906      	bls.n	80118dc <pbuf_copy+0xc4>
 80118ce:	4b31      	ldr	r3, [pc, #196]	; (8011994 <pbuf_copy+0x17c>)
 80118d0:	f240 32ce 	movw	r2, #974	; 0x3ce
 80118d4:	4933      	ldr	r1, [pc, #204]	; (80119a4 <pbuf_copy+0x18c>)
 80118d6:	4831      	ldr	r0, [pc, #196]	; (801199c <pbuf_copy+0x184>)
 80118d8:	f009 f8da 	bl	801aa90 <iprintf>
    if (offset_from >= p_from->len) {
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	895b      	ldrh	r3, [r3, #10]
 80118e0:	89ba      	ldrh	r2, [r7, #12]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d304      	bcc.n	80118f0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	895b      	ldrh	r3, [r3, #10]
 80118f4:	89fa      	ldrh	r2, [r7, #14]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d114      	bne.n	8011924 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80118fa:	2300      	movs	r3, #0
 80118fc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10c      	bne.n	8011924 <pbuf_copy+0x10c>
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d009      	beq.n	8011924 <pbuf_copy+0x10c>
 8011910:	4b20      	ldr	r3, [pc, #128]	; (8011994 <pbuf_copy+0x17c>)
 8011912:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011916:	4924      	ldr	r1, [pc, #144]	; (80119a8 <pbuf_copy+0x190>)
 8011918:	4820      	ldr	r0, [pc, #128]	; (801199c <pbuf_copy+0x184>)
 801191a:	f009 f8b9 	bl	801aa90 <iprintf>
 801191e:	f06f 030f 	mvn.w	r3, #15
 8011922:	e032      	b.n	801198a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d013      	beq.n	8011952 <pbuf_copy+0x13a>
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	895a      	ldrh	r2, [r3, #10]
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	891b      	ldrh	r3, [r3, #8]
 8011932:	429a      	cmp	r2, r3
 8011934:	d10d      	bne.n	8011952 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d009      	beq.n	8011952 <pbuf_copy+0x13a>
 801193e:	4b15      	ldr	r3, [pc, #84]	; (8011994 <pbuf_copy+0x17c>)
 8011940:	f240 32de 	movw	r2, #990	; 0x3de
 8011944:	4919      	ldr	r1, [pc, #100]	; (80119ac <pbuf_copy+0x194>)
 8011946:	4815      	ldr	r0, [pc, #84]	; (801199c <pbuf_copy+0x184>)
 8011948:	f009 f8a2 	bl	801aa90 <iprintf>
 801194c:	f06f 0305 	mvn.w	r3, #5
 8011950:	e01b      	b.n	801198a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d013      	beq.n	8011980 <pbuf_copy+0x168>
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	895a      	ldrh	r2, [r3, #10]
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	891b      	ldrh	r3, [r3, #8]
 8011960:	429a      	cmp	r2, r3
 8011962:	d10d      	bne.n	8011980 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d009      	beq.n	8011980 <pbuf_copy+0x168>
 801196c:	4b09      	ldr	r3, [pc, #36]	; (8011994 <pbuf_copy+0x17c>)
 801196e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8011972:	490e      	ldr	r1, [pc, #56]	; (80119ac <pbuf_copy+0x194>)
 8011974:	4809      	ldr	r0, [pc, #36]	; (801199c <pbuf_copy+0x184>)
 8011976:	f009 f88b 	bl	801aa90 <iprintf>
 801197a:	f06f 0305 	mvn.w	r3, #5
 801197e:	e004      	b.n	801198a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	f47f af67 	bne.w	8011856 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011988:	2300      	movs	r3, #0
}
 801198a:	4618      	mov	r0, r3
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	0801c65c 	.word	0x0801c65c
 8011998:	0801c9ec 	.word	0x0801c9ec
 801199c:	0801c6a8 	.word	0x0801c6a8
 80119a0:	0801ca1c 	.word	0x0801ca1c
 80119a4:	0801ca34 	.word	0x0801ca34
 80119a8:	0801ca50 	.word	0x0801ca50
 80119ac:	0801ca60 	.word	0x0801ca60

080119b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b088      	sub	sp, #32
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	4611      	mov	r1, r2
 80119bc:	461a      	mov	r2, r3
 80119be:	460b      	mov	r3, r1
 80119c0:	80fb      	strh	r3, [r7, #6]
 80119c2:	4613      	mov	r3, r2
 80119c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d108      	bne.n	80119e2 <pbuf_copy_partial+0x32>
 80119d0:	4b30      	ldr	r3, [pc, #192]	; (8011a94 <pbuf_copy_partial+0xe4>)
 80119d2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80119d6:	4930      	ldr	r1, [pc, #192]	; (8011a98 <pbuf_copy_partial+0xe8>)
 80119d8:	4830      	ldr	r0, [pc, #192]	; (8011a9c <pbuf_copy_partial+0xec>)
 80119da:	f009 f859 	bl	801aa90 <iprintf>
 80119de:	2300      	movs	r3, #0
 80119e0:	e054      	b.n	8011a8c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d108      	bne.n	80119fa <pbuf_copy_partial+0x4a>
 80119e8:	4b2a      	ldr	r3, [pc, #168]	; (8011a94 <pbuf_copy_partial+0xe4>)
 80119ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80119ee:	492c      	ldr	r1, [pc, #176]	; (8011aa0 <pbuf_copy_partial+0xf0>)
 80119f0:	482a      	ldr	r0, [pc, #168]	; (8011a9c <pbuf_copy_partial+0xec>)
 80119f2:	f009 f84d 	bl	801aa90 <iprintf>
 80119f6:	2300      	movs	r3, #0
 80119f8:	e048      	b.n	8011a8c <pbuf_copy_partial+0xdc>

  left = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <pbuf_copy_partial+0x5a>
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d101      	bne.n	8011a0e <pbuf_copy_partial+0x5e>
    return 0;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e03e      	b.n	8011a8c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	61fb      	str	r3, [r7, #28]
 8011a12:	e034      	b.n	8011a7e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8011a14:	88bb      	ldrh	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00a      	beq.n	8011a30 <pbuf_copy_partial+0x80>
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	895b      	ldrh	r3, [r3, #10]
 8011a1e:	88ba      	ldrh	r2, [r7, #4]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d305      	bcc.n	8011a30 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	895b      	ldrh	r3, [r3, #10]
 8011a28:	88ba      	ldrh	r2, [r7, #4]
 8011a2a:	1ad3      	subs	r3, r2, r3
 8011a2c:	80bb      	strh	r3, [r7, #4]
 8011a2e:	e023      	b.n	8011a78 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	895a      	ldrh	r2, [r3, #10]
 8011a34:	88bb      	ldrh	r3, [r7, #4]
 8011a36:	1ad3      	subs	r3, r2, r3
 8011a38:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011a3a:	8b3a      	ldrh	r2, [r7, #24]
 8011a3c:	88fb      	ldrh	r3, [r7, #6]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d901      	bls.n	8011a46 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8011a42:	88fb      	ldrh	r3, [r7, #6]
 8011a44:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8011a46:	8b7b      	ldrh	r3, [r7, #26]
 8011a48:	68ba      	ldr	r2, [r7, #8]
 8011a4a:	18d0      	adds	r0, r2, r3
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	685a      	ldr	r2, [r3, #4]
 8011a50:	88bb      	ldrh	r3, [r7, #4]
 8011a52:	4413      	add	r3, r2
 8011a54:	8b3a      	ldrh	r2, [r7, #24]
 8011a56:	4619      	mov	r1, r3
 8011a58:	f008 ff5f 	bl	801a91a <memcpy>
      copied_total += buf_copy_len;
 8011a5c:	8afa      	ldrh	r2, [r7, #22]
 8011a5e:	8b3b      	ldrh	r3, [r7, #24]
 8011a60:	4413      	add	r3, r2
 8011a62:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8011a64:	8b7a      	ldrh	r2, [r7, #26]
 8011a66:	8b3b      	ldrh	r3, [r7, #24]
 8011a68:	4413      	add	r3, r2
 8011a6a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8011a6c:	88fa      	ldrh	r2, [r7, #6]
 8011a6e:	8b3b      	ldrh	r3, [r7, #24]
 8011a70:	1ad3      	subs	r3, r2, r3
 8011a72:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011a74:	2300      	movs	r3, #0
 8011a76:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	61fb      	str	r3, [r7, #28]
 8011a7e:	88fb      	ldrh	r3, [r7, #6]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d002      	beq.n	8011a8a <pbuf_copy_partial+0xda>
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d1c4      	bne.n	8011a14 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8011a8a:	8afb      	ldrh	r3, [r7, #22]
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3720      	adds	r7, #32
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	0801c65c 	.word	0x0801c65c
 8011a98:	0801ca8c 	.word	0x0801ca8c
 8011a9c:	0801c6a8 	.word	0x0801c6a8
 8011aa0:	0801caac 	.word	0x0801caac

08011aa4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011aa8:	bf00      	nop
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
	...

08011ab4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011ab8:	f000 ffb6 	bl	8012a28 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011abc:	4b07      	ldr	r3, [pc, #28]	; (8011adc <tcp_tmr+0x28>)
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	4b05      	ldr	r3, [pc, #20]	; (8011adc <tcp_tmr+0x28>)
 8011ac6:	701a      	strb	r2, [r3, #0]
 8011ac8:	4b04      	ldr	r3, [pc, #16]	; (8011adc <tcp_tmr+0x28>)
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	f003 0301 	and.w	r3, r3, #1
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011ad4:	f000 fce8 	bl	80124a8 <tcp_slowtmr>
  }
}
 8011ad8:	bf00      	nop
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	20004205 	.word	0x20004205

08011ae0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	60fb      	str	r3, [r7, #12]
 8011aee:	e00a      	b.n	8011b06 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d102      	bne.n	8011b00 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	2200      	movs	r2, #0
 8011afe:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	60fb      	str	r3, [r7, #12]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1f1      	bne.n	8011af0 <tcp_remove_listener+0x10>
      }
   }
}
 8011b0c:	bf00      	nop
 8011b0e:	3714      	adds	r7, #20
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr

08011b18 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d105      	bne.n	8011b32 <tcp_listen_closed+0x1a>
 8011b26:	4b13      	ldr	r3, [pc, #76]	; (8011b74 <tcp_listen_closed+0x5c>)
 8011b28:	22c0      	movs	r2, #192	; 0xc0
 8011b2a:	4913      	ldr	r1, [pc, #76]	; (8011b78 <tcp_listen_closed+0x60>)
 8011b2c:	4813      	ldr	r0, [pc, #76]	; (8011b7c <tcp_listen_closed+0x64>)
 8011b2e:	f008 ffaf 	bl	801aa90 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	7d1b      	ldrb	r3, [r3, #20]
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d005      	beq.n	8011b46 <tcp_listen_closed+0x2e>
 8011b3a:	4b0e      	ldr	r3, [pc, #56]	; (8011b74 <tcp_listen_closed+0x5c>)
 8011b3c:	22c1      	movs	r2, #193	; 0xc1
 8011b3e:	4910      	ldr	r1, [pc, #64]	; (8011b80 <tcp_listen_closed+0x68>)
 8011b40:	480e      	ldr	r0, [pc, #56]	; (8011b7c <tcp_listen_closed+0x64>)
 8011b42:	f008 ffa5 	bl	801aa90 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b46:	2301      	movs	r3, #1
 8011b48:	60fb      	str	r3, [r7, #12]
 8011b4a:	e00b      	b.n	8011b64 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8011b4c:	4a0d      	ldr	r2, [pc, #52]	; (8011b84 <tcp_listen_closed+0x6c>)
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	6879      	ldr	r1, [r7, #4]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7ff ffc1 	bl	8011ae0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	3301      	adds	r3, #1
 8011b62:	60fb      	str	r3, [r7, #12]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2b03      	cmp	r3, #3
 8011b68:	d9f0      	bls.n	8011b4c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011b6a:	bf00      	nop
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	0801cbe0 	.word	0x0801cbe0
 8011b78:	0801cc10 	.word	0x0801cc10
 8011b7c:	0801cc1c 	.word	0x0801cc1c
 8011b80:	0801cc44 	.word	0x0801cc44
 8011b84:	0801e0ac 	.word	0x0801e0ac

08011b88 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011b88:	b5b0      	push	{r4, r5, r7, lr}
 8011b8a:	b086      	sub	sp, #24
 8011b8c:	af02      	add	r7, sp, #8
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	460b      	mov	r3, r1
 8011b92:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011b94:	78fb      	ldrb	r3, [r7, #3]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d075      	beq.n	8011c86 <tcp_close_shutdown+0xfe>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	7d1b      	ldrb	r3, [r3, #20]
 8011b9e:	2b04      	cmp	r3, #4
 8011ba0:	d003      	beq.n	8011baa <tcp_close_shutdown+0x22>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	7d1b      	ldrb	r3, [r3, #20]
 8011ba6:	2b07      	cmp	r3, #7
 8011ba8:	d16d      	bne.n	8011c86 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d104      	bne.n	8011bbc <tcp_close_shutdown+0x34>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011bb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011bba:	d064      	beq.n	8011c86 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	7e9b      	ldrb	r3, [r3, #26]
 8011bc0:	f003 0310 	and.w	r3, r3, #16
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d106      	bne.n	8011bd6 <tcp_close_shutdown+0x4e>
 8011bc8:	4b59      	ldr	r3, [pc, #356]	; (8011d30 <tcp_close_shutdown+0x1a8>)
 8011bca:	f240 120f 	movw	r2, #271	; 0x10f
 8011bce:	4959      	ldr	r1, [pc, #356]	; (8011d34 <tcp_close_shutdown+0x1ac>)
 8011bd0:	4859      	ldr	r0, [pc, #356]	; (8011d38 <tcp_close_shutdown+0x1b0>)
 8011bd2:	f008 ff5d 	bl	801aa90 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011bde:	687c      	ldr	r4, [r7, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	1d1d      	adds	r5, r3, #4
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	8adb      	ldrh	r3, [r3, #22]
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	8b12      	ldrh	r2, [r2, #24]
 8011bec:	9201      	str	r2, [sp, #4]
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	462b      	mov	r3, r5
 8011bf2:	4622      	mov	r2, r4
 8011bf4:	f004 ff1a 	bl	8016a2c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f001 fa4b 	bl	8013094 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011bfe:	4b4f      	ldr	r3, [pc, #316]	; (8011d3c <tcp_close_shutdown+0x1b4>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d105      	bne.n	8011c14 <tcp_close_shutdown+0x8c>
 8011c08:	4b4c      	ldr	r3, [pc, #304]	; (8011d3c <tcp_close_shutdown+0x1b4>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	4a4b      	ldr	r2, [pc, #300]	; (8011d3c <tcp_close_shutdown+0x1b4>)
 8011c10:	6013      	str	r3, [r2, #0]
 8011c12:	e013      	b.n	8011c3c <tcp_close_shutdown+0xb4>
 8011c14:	4b49      	ldr	r3, [pc, #292]	; (8011d3c <tcp_close_shutdown+0x1b4>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	60fb      	str	r3, [r7, #12]
 8011c1a:	e00c      	b.n	8011c36 <tcp_close_shutdown+0xae>
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d104      	bne.n	8011c30 <tcp_close_shutdown+0xa8>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68da      	ldr	r2, [r3, #12]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	60da      	str	r2, [r3, #12]
 8011c2e:	e005      	b.n	8011c3c <tcp_close_shutdown+0xb4>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	60fb      	str	r3, [r7, #12]
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d1ef      	bne.n	8011c1c <tcp_close_shutdown+0x94>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	60da      	str	r2, [r3, #12]
 8011c42:	4b3f      	ldr	r3, [pc, #252]	; (8011d40 <tcp_close_shutdown+0x1b8>)
 8011c44:	2201      	movs	r2, #1
 8011c46:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	7d1b      	ldrb	r3, [r3, #20]
 8011c4c:	2b04      	cmp	r3, #4
 8011c4e:	d10c      	bne.n	8011c6a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	220a      	movs	r2, #10
 8011c54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011c56:	4b3b      	ldr	r3, [pc, #236]	; (8011d44 <tcp_close_shutdown+0x1bc>)
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	60da      	str	r2, [r3, #12]
 8011c5e:	4a39      	ldr	r2, [pc, #228]	; (8011d44 <tcp_close_shutdown+0x1bc>)
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6013      	str	r3, [r2, #0]
 8011c64:	f005 f932 	bl	8016ecc <tcp_timer_needed>
 8011c68:	e00b      	b.n	8011c82 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8011c6a:	4b37      	ldr	r3, [pc, #220]	; (8011d48 <tcp_close_shutdown+0x1c0>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d102      	bne.n	8011c7a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8011c74:	f003 fd72 	bl	801575c <tcp_trigger_input_pcb_close>
 8011c78:	e003      	b.n	8011c82 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8011c7a:	6879      	ldr	r1, [r7, #4]
 8011c7c:	2001      	movs	r0, #1
 8011c7e:	f7fe ff41 	bl	8010b04 <memp_free>
        }
      }
      return ERR_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	e050      	b.n	8011d28 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	7d1b      	ldrb	r3, [r3, #20]
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d02e      	beq.n	8011cec <tcp_close_shutdown+0x164>
 8011c8e:	2b02      	cmp	r3, #2
 8011c90:	d038      	beq.n	8011d04 <tcp_close_shutdown+0x17c>
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d142      	bne.n	8011d1c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	8adb      	ldrh	r3, [r3, #22]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d021      	beq.n	8011ce2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8011c9e:	4b2b      	ldr	r3, [pc, #172]	; (8011d4c <tcp_close_shutdown+0x1c4>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d105      	bne.n	8011cb4 <tcp_close_shutdown+0x12c>
 8011ca8:	4b28      	ldr	r3, [pc, #160]	; (8011d4c <tcp_close_shutdown+0x1c4>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	4a27      	ldr	r2, [pc, #156]	; (8011d4c <tcp_close_shutdown+0x1c4>)
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	e013      	b.n	8011cdc <tcp_close_shutdown+0x154>
 8011cb4:	4b25      	ldr	r3, [pc, #148]	; (8011d4c <tcp_close_shutdown+0x1c4>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	60bb      	str	r3, [r7, #8]
 8011cba:	e00c      	b.n	8011cd6 <tcp_close_shutdown+0x14e>
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d104      	bne.n	8011cd0 <tcp_close_shutdown+0x148>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68da      	ldr	r2, [r3, #12]
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	60da      	str	r2, [r3, #12]
 8011cce:	e005      	b.n	8011cdc <tcp_close_shutdown+0x154>
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	60bb      	str	r3, [r7, #8]
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1ef      	bne.n	8011cbc <tcp_close_shutdown+0x134>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8011ce2:	6879      	ldr	r1, [r7, #4]
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	f7fe ff0d 	bl	8010b04 <memp_free>
    break;
 8011cea:	e01c      	b.n	8011d26 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f7ff ff13 	bl	8011b18 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011cf2:	6879      	ldr	r1, [r7, #4]
 8011cf4:	4816      	ldr	r0, [pc, #88]	; (8011d50 <tcp_close_shutdown+0x1c8>)
 8011cf6:	f001 fa0f 	bl	8013118 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	2002      	movs	r0, #2
 8011cfe:	f7fe ff01 	bl	8010b04 <memp_free>
    break;
 8011d02:	e010      	b.n	8011d26 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8011d04:	6879      	ldr	r1, [r7, #4]
 8011d06:	480d      	ldr	r0, [pc, #52]	; (8011d3c <tcp_close_shutdown+0x1b4>)
 8011d08:	f001 fa06 	bl	8013118 <tcp_pcb_remove>
 8011d0c:	4b0c      	ldr	r3, [pc, #48]	; (8011d40 <tcp_close_shutdown+0x1b8>)
 8011d0e:	2201      	movs	r2, #1
 8011d10:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8011d12:	6879      	ldr	r1, [r7, #4]
 8011d14:	2001      	movs	r0, #1
 8011d16:	f7fe fef5 	bl	8010b04 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8011d1a:	e004      	b.n	8011d26 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 f819 	bl	8011d54 <tcp_close_shutdown_fin>
 8011d22:	4603      	mov	r3, r0
 8011d24:	e000      	b.n	8011d28 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8011d26:	2300      	movs	r3, #0
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3710      	adds	r7, #16
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8011d30:	0801cbe0 	.word	0x0801cbe0
 8011d34:	0801cc5c 	.word	0x0801cc5c
 8011d38:	0801cc1c 	.word	0x0801cc1c
 8011d3c:	2000ab50 	.word	0x2000ab50
 8011d40:	2000ab4c 	.word	0x2000ab4c
 8011d44:	2000ab60 	.word	0x2000ab60
 8011d48:	2000ab64 	.word	0x2000ab64
 8011d4c:	2000ab5c 	.word	0x2000ab5c
 8011d50:	2000ab58 	.word	0x2000ab58

08011d54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d106      	bne.n	8011d70 <tcp_close_shutdown_fin+0x1c>
 8011d62:	4b2c      	ldr	r3, [pc, #176]	; (8011e14 <tcp_close_shutdown_fin+0xc0>)
 8011d64:	f240 124d 	movw	r2, #333	; 0x14d
 8011d68:	492b      	ldr	r1, [pc, #172]	; (8011e18 <tcp_close_shutdown_fin+0xc4>)
 8011d6a:	482c      	ldr	r0, [pc, #176]	; (8011e1c <tcp_close_shutdown_fin+0xc8>)
 8011d6c:	f008 fe90 	bl	801aa90 <iprintf>

  switch (pcb->state) {
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	7d1b      	ldrb	r3, [r3, #20]
 8011d74:	2b04      	cmp	r3, #4
 8011d76:	d010      	beq.n	8011d9a <tcp_close_shutdown_fin+0x46>
 8011d78:	2b07      	cmp	r3, #7
 8011d7a:	d01b      	beq.n	8011db4 <tcp_close_shutdown_fin+0x60>
 8011d7c:	2b03      	cmp	r3, #3
 8011d7e:	d126      	bne.n	8011dce <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f003 fd77 	bl	8015874 <tcp_send_fin>
 8011d86:	4603      	mov	r3, r0
 8011d88:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d11f      	bne.n	8011dd2 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2205      	movs	r2, #5
 8011d96:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011d98:	e01b      	b.n	8011dd2 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f003 fd6a 	bl	8015874 <tcp_send_fin>
 8011da0:	4603      	mov	r3, r0
 8011da2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d114      	bne.n	8011dd6 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2205      	movs	r2, #5
 8011db0:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011db2:	e010      	b.n	8011dd6 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f003 fd5d 	bl	8015874 <tcp_send_fin>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d109      	bne.n	8011dda <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2209      	movs	r2, #9
 8011dca:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011dcc:	e005      	b.n	8011dda <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	e01c      	b.n	8011e0c <tcp_close_shutdown_fin+0xb8>
    break;
 8011dd2:	bf00      	nop
 8011dd4:	e002      	b.n	8011ddc <tcp_close_shutdown_fin+0x88>
    break;
 8011dd6:	bf00      	nop
 8011dd8:	e000      	b.n	8011ddc <tcp_close_shutdown_fin+0x88>
    break;
 8011dda:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d103      	bne.n	8011dec <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f004 fb97 	bl	8016518 <tcp_output>
 8011dea:	e00d      	b.n	8011e08 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8011dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011df4:	d108      	bne.n	8011e08 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	7e9b      	ldrb	r3, [r3, #26]
 8011dfa:	f043 0308 	orr.w	r3, r3, #8
 8011dfe:	b2da      	uxtb	r2, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011e04:	2300      	movs	r3, #0
 8011e06:	e001      	b.n	8011e0c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8011e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3710      	adds	r7, #16
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	0801cbe0 	.word	0x0801cbe0
 8011e18:	0801cc10 	.word	0x0801cc10
 8011e1c:	0801cc1c 	.word	0x0801cc1c

08011e20 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	7d1b      	ldrb	r3, [r3, #20]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d006      	beq.n	8011e3e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	7e9b      	ldrb	r3, [r3, #26]
 8011e34:	f043 0310 	orr.w	r3, r3, #16
 8011e38:	b2da      	uxtb	r2, r3
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011e3e:	2101      	movs	r1, #1
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f7ff fea1 	bl	8011b88 <tcp_close_shutdown>
 8011e46:	4603      	mov	r3, r0
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3708      	adds	r7, #8
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	7d1b      	ldrb	r3, [r3, #20]
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d102      	bne.n	8011e6a <tcp_shutdown+0x1a>
    return ERR_CONN;
 8011e64:	f06f 030a 	mvn.w	r3, #10
 8011e68:	e035      	b.n	8011ed6 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d01b      	beq.n	8011ea8 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	7e9b      	ldrb	r3, [r3, #26]
 8011e74:	f043 0310 	orr.w	r3, r3, #16
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d005      	beq.n	8011e90 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011e84:	2101      	movs	r1, #1
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	f7ff fe7e 	bl	8011b88 <tcp_close_shutdown>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	e022      	b.n	8011ed6 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d007      	beq.n	8011ea8 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7ff fb8b 	bl	80115b8 <pbuf_free>
      pcb->refused_data = NULL;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d012      	beq.n	8011ed4 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	7d1b      	ldrb	r3, [r3, #20]
 8011eb2:	2b03      	cmp	r3, #3
 8011eb4:	db0b      	blt.n	8011ece <tcp_shutdown+0x7e>
 8011eb6:	2b04      	cmp	r3, #4
 8011eb8:	dd01      	ble.n	8011ebe <tcp_shutdown+0x6e>
 8011eba:	2b07      	cmp	r3, #7
 8011ebc:	d107      	bne.n	8011ece <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f7ff fe5f 	bl	8011b88 <tcp_close_shutdown>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	e003      	b.n	8011ed6 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 8011ece:	f06f 030a 	mvn.w	r3, #10
 8011ed2:	e000      	b.n	8011ed6 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
	...

08011ee0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08c      	sub	sp, #48	; 0x30
 8011ee4:	af02      	add	r7, sp, #8
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	7d1b      	ldrb	r3, [r3, #20]
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d106      	bne.n	8011f00 <tcp_abandon+0x20>
 8011ef2:	4b4d      	ldr	r3, [pc, #308]	; (8012028 <tcp_abandon+0x148>)
 8011ef4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011ef8:	494c      	ldr	r1, [pc, #304]	; (801202c <tcp_abandon+0x14c>)
 8011efa:	484d      	ldr	r0, [pc, #308]	; (8012030 <tcp_abandon+0x150>)
 8011efc:	f008 fdc8 	bl	801aa90 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	7d1b      	ldrb	r3, [r3, #20]
 8011f04:	2b0a      	cmp	r3, #10
 8011f06:	d108      	bne.n	8011f1a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011f08:	6879      	ldr	r1, [r7, #4]
 8011f0a:	484a      	ldr	r0, [pc, #296]	; (8012034 <tcp_abandon+0x154>)
 8011f0c:	f001 f904 	bl	8013118 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011f10:	6879      	ldr	r1, [r7, #4]
 8011f12:	2001      	movs	r0, #1
 8011f14:	f7fe fdf6 	bl	8010b04 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8011f18:	e081      	b.n	801201e <tcp_abandon+0x13e>
    int send_rst = 0;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f26:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f2c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f34:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	7d1b      	ldrb	r3, [r3, #20]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d126      	bne.n	8011f92 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	8adb      	ldrh	r3, [r3, #22]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d02e      	beq.n	8011faa <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011f4c:	4b3a      	ldr	r3, [pc, #232]	; (8012038 <tcp_abandon+0x158>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d105      	bne.n	8011f62 <tcp_abandon+0x82>
 8011f56:	4b38      	ldr	r3, [pc, #224]	; (8012038 <tcp_abandon+0x158>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	4a36      	ldr	r2, [pc, #216]	; (8012038 <tcp_abandon+0x158>)
 8011f5e:	6013      	str	r3, [r2, #0]
 8011f60:	e013      	b.n	8011f8a <tcp_abandon+0xaa>
 8011f62:	4b35      	ldr	r3, [pc, #212]	; (8012038 <tcp_abandon+0x158>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	61fb      	str	r3, [r7, #28]
 8011f68:	e00c      	b.n	8011f84 <tcp_abandon+0xa4>
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d104      	bne.n	8011f7e <tcp_abandon+0x9e>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	68da      	ldr	r2, [r3, #12]
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	60da      	str	r2, [r3, #12]
 8011f7c:	e005      	b.n	8011f8a <tcp_abandon+0xaa>
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	68db      	ldr	r3, [r3, #12]
 8011f82:	61fb      	str	r3, [r7, #28]
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d1ef      	bne.n	8011f6a <tcp_abandon+0x8a>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	60da      	str	r2, [r3, #12]
 8011f90:	e00b      	b.n	8011faa <tcp_abandon+0xca>
      send_rst = reset;
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	8adb      	ldrh	r3, [r3, #22]
 8011f9a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	4827      	ldr	r0, [pc, #156]	; (801203c <tcp_abandon+0x15c>)
 8011fa0:	f001 f8ba 	bl	8013118 <tcp_pcb_remove>
 8011fa4:	4b26      	ldr	r3, [pc, #152]	; (8012040 <tcp_abandon+0x160>)
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d004      	beq.n	8011fbc <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f000 fe03 	bl	8012bc2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d004      	beq.n	8011fce <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f000 fdfa 	bl	8012bc2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d004      	beq.n	8011fe0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f000 fdf1 	bl	8012bc2 <tcp_segs_free>
    if (send_rst) {
 8011fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00c      	beq.n	8012000 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	1d19      	adds	r1, r3, #4
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	8b1b      	ldrh	r3, [r3, #24]
 8011ff0:	9301      	str	r3, [sp, #4]
 8011ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	6979      	ldr	r1, [r7, #20]
 8011ffa:	69b8      	ldr	r0, [r7, #24]
 8011ffc:	f004 fd16 	bl	8016a2c <tcp_rst>
    last_state = pcb->state;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	7d1b      	ldrb	r3, [r3, #20]
 8012004:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8012006:	6879      	ldr	r1, [r7, #4]
 8012008:	2001      	movs	r0, #1
 801200a:	f7fe fd7b 	bl	8010b04 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801200e:	693b      	ldr	r3, [r7, #16]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d004      	beq.n	801201e <tcp_abandon+0x13e>
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	f06f 010c 	mvn.w	r1, #12
 801201a:	68f8      	ldr	r0, [r7, #12]
 801201c:	4798      	blx	r3
}
 801201e:	bf00      	nop
 8012020:	3728      	adds	r7, #40	; 0x28
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	0801cbe0 	.word	0x0801cbe0
 801202c:	0801cc78 	.word	0x0801cc78
 8012030:	0801cc1c 	.word	0x0801cc1c
 8012034:	2000ab60 	.word	0x2000ab60
 8012038:	2000ab5c 	.word	0x2000ab5c
 801203c:	2000ab50 	.word	0x2000ab50
 8012040:	2000ab4c 	.word	0x2000ab4c

08012044 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801204c:	2101      	movs	r1, #1
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f7ff ff46 	bl	8011ee0 <tcp_abandon>
}
 8012054:	bf00      	nop
 8012056:	3708      	adds	r7, #8
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b088      	sub	sp, #32
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	4613      	mov	r3, r2
 8012068:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801206a:	2304      	movs	r3, #4
 801206c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d101      	bne.n	8012078 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012074:	4b3c      	ldr	r3, [pc, #240]	; (8012168 <tcp_bind+0x10c>)
 8012076:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d002      	beq.n	8012084 <tcp_bind+0x28>
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d102      	bne.n	801208a <tcp_bind+0x2e>
    return ERR_VAL;
 8012084:	f06f 0305 	mvn.w	r3, #5
 8012088:	e06a      	b.n	8012160 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	7d1b      	ldrb	r3, [r3, #20]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d009      	beq.n	80120a6 <tcp_bind+0x4a>
 8012092:	4b36      	ldr	r3, [pc, #216]	; (801216c <tcp_bind+0x110>)
 8012094:	f44f 7211 	mov.w	r2, #580	; 0x244
 8012098:	4935      	ldr	r1, [pc, #212]	; (8012170 <tcp_bind+0x114>)
 801209a:	4836      	ldr	r0, [pc, #216]	; (8012174 <tcp_bind+0x118>)
 801209c:	f008 fcf8 	bl	801aa90 <iprintf>
 80120a0:	f06f 0305 	mvn.w	r3, #5
 80120a4:	e05c      	b.n	8012160 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80120a6:	88fb      	ldrh	r3, [r7, #6]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d109      	bne.n	80120c0 <tcp_bind+0x64>
    port = tcp_new_port();
 80120ac:	f000 f9b8 	bl	8012420 <tcp_new_port>
 80120b0:	4603      	mov	r3, r0
 80120b2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80120b4:	88fb      	ldrh	r3, [r7, #6]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d135      	bne.n	8012126 <tcp_bind+0xca>
      return ERR_BUF;
 80120ba:	f06f 0301 	mvn.w	r3, #1
 80120be:	e04f      	b.n	8012160 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80120c0:	2300      	movs	r3, #0
 80120c2:	61fb      	str	r3, [r7, #28]
 80120c4:	e02b      	b.n	801211e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80120c6:	4a2c      	ldr	r2, [pc, #176]	; (8012178 <tcp_bind+0x11c>)
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	61bb      	str	r3, [r7, #24]
 80120d2:	e01e      	b.n	8012112 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	8adb      	ldrh	r3, [r3, #22]
 80120d8:	88fa      	ldrh	r2, [r7, #6]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d116      	bne.n	801210c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80120de:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d010      	beq.n	8012106 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00c      	beq.n	8012106 <tcp_bind+0xaa>
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d009      	beq.n	8012106 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d005      	beq.n	8012106 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012102:	429a      	cmp	r2, r3
 8012104:	d102      	bne.n	801210c <tcp_bind+0xb0>
              return ERR_USE;
 8012106:	f06f 0307 	mvn.w	r3, #7
 801210a:	e029      	b.n	8012160 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	61bb      	str	r3, [r7, #24]
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1dd      	bne.n	80120d4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	3301      	adds	r3, #1
 801211c:	61fb      	str	r3, [r7, #28]
 801211e:	69fa      	ldr	r2, [r7, #28]
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	429a      	cmp	r2, r3
 8012124:	dbcf      	blt.n	80120c6 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d00c      	beq.n	8012146 <tcp_bind+0xea>
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d008      	beq.n	8012146 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d002      	beq.n	8012140 <tcp_bind+0xe4>
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	e000      	b.n	8012142 <tcp_bind+0xe6>
 8012140:	2300      	movs	r3, #0
 8012142:	68fa      	ldr	r2, [r7, #12]
 8012144:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	88fa      	ldrh	r2, [r7, #6]
 801214a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801214c:	4b0b      	ldr	r3, [pc, #44]	; (801217c <tcp_bind+0x120>)
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	60da      	str	r2, [r3, #12]
 8012154:	4a09      	ldr	r2, [pc, #36]	; (801217c <tcp_bind+0x120>)
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	6013      	str	r3, [r2, #0]
 801215a:	f004 feb7 	bl	8016ecc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	3720      	adds	r7, #32
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	0801e0d4 	.word	0x0801e0d4
 801216c:	0801cbe0 	.word	0x0801cbe0
 8012170:	0801ccac 	.word	0x0801ccac
 8012174:	0801cc1c 	.word	0x0801cc1c
 8012178:	0801e0ac 	.word	0x0801e0ac
 801217c:	2000ab5c 	.word	0x2000ab5c

08012180 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	4613      	mov	r3, r2
 801218c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 801218e:	68b8      	ldr	r0, [r7, #8]
 8012190:	f7ff ff58 	bl	8012044 <tcp_abort>

  return ERR_ABRT;
 8012194:	f06f 030c 	mvn.w	r3, #12
}
 8012198:	4618      	mov	r0, r3
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b088      	sub	sp, #32
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	60f8      	str	r0, [r7, #12]
 80121a8:	460b      	mov	r3, r1
 80121aa:	607a      	str	r2, [r7, #4]
 80121ac:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80121ae:	2300      	movs	r3, #0
 80121b0:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	7d1b      	ldrb	r3, [r3, #20]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d009      	beq.n	80121ce <tcp_listen_with_backlog_and_err+0x2e>
 80121ba:	4b3f      	ldr	r3, [pc, #252]	; (80122b8 <tcp_listen_with_backlog_and_err+0x118>)
 80121bc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80121c0:	493e      	ldr	r1, [pc, #248]	; (80122bc <tcp_listen_with_backlog_and_err+0x11c>)
 80121c2:	483f      	ldr	r0, [pc, #252]	; (80122c0 <tcp_listen_with_backlog_and_err+0x120>)
 80121c4:	f008 fc64 	bl	801aa90 <iprintf>
 80121c8:	23f1      	movs	r3, #241	; 0xf1
 80121ca:	76fb      	strb	r3, [r7, #27]
 80121cc:	e069      	b.n	80122a2 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	7d1b      	ldrb	r3, [r3, #20]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d104      	bne.n	80121e0 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80121da:	23f7      	movs	r3, #247	; 0xf7
 80121dc:	76fb      	strb	r3, [r7, #27]
    goto done;
 80121de:	e060      	b.n	80122a2 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80121e0:	2002      	movs	r0, #2
 80121e2:	f7fe fc3d 	bl	8010a60 <memp_malloc>
 80121e6:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d102      	bne.n	80121f4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80121ee:	23ff      	movs	r3, #255	; 0xff
 80121f0:	76fb      	strb	r3, [r7, #27]
    goto done;
 80121f2:	e056      	b.n	80122a2 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	691a      	ldr	r2, [r3, #16]
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	8ada      	ldrh	r2, [r3, #22]
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	2201      	movs	r2, #1
 8012208:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	7d5a      	ldrb	r2, [r3, #21]
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	7a1a      	ldrb	r2, [r3, #8]
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	7a9a      	ldrb	r2, [r3, #10]
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	7a5a      	ldrb	r2, [r3, #9]
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	69fb      	ldr	r3, [r7, #28]
 8012230:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	8adb      	ldrh	r3, [r3, #22]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d021      	beq.n	801227e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801223a:	4b22      	ldr	r3, [pc, #136]	; (80122c4 <tcp_listen_with_backlog_and_err+0x124>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	68fa      	ldr	r2, [r7, #12]
 8012240:	429a      	cmp	r2, r3
 8012242:	d105      	bne.n	8012250 <tcp_listen_with_backlog_and_err+0xb0>
 8012244:	4b1f      	ldr	r3, [pc, #124]	; (80122c4 <tcp_listen_with_backlog_and_err+0x124>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	4a1e      	ldr	r2, [pc, #120]	; (80122c4 <tcp_listen_with_backlog_and_err+0x124>)
 801224c:	6013      	str	r3, [r2, #0]
 801224e:	e013      	b.n	8012278 <tcp_listen_with_backlog_and_err+0xd8>
 8012250:	4b1c      	ldr	r3, [pc, #112]	; (80122c4 <tcp_listen_with_backlog_and_err+0x124>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	617b      	str	r3, [r7, #20]
 8012256:	e00c      	b.n	8012272 <tcp_listen_with_backlog_and_err+0xd2>
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	68fa      	ldr	r2, [r7, #12]
 801225e:	429a      	cmp	r2, r3
 8012260:	d104      	bne.n	801226c <tcp_listen_with_backlog_and_err+0xcc>
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	68da      	ldr	r2, [r3, #12]
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	60da      	str	r2, [r3, #12]
 801226a:	e005      	b.n	8012278 <tcp_listen_with_backlog_and_err+0xd8>
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	617b      	str	r3, [r7, #20]
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1ef      	bne.n	8012258 <tcp_listen_with_backlog_and_err+0xb8>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2200      	movs	r2, #0
 801227c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 801227e:	68f9      	ldr	r1, [r7, #12]
 8012280:	2001      	movs	r0, #1
 8012282:	f7fe fc3f 	bl	8010b04 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	4a0f      	ldr	r2, [pc, #60]	; (80122c8 <tcp_listen_with_backlog_and_err+0x128>)
 801228a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801228c:	4b0f      	ldr	r3, [pc, #60]	; (80122cc <tcp_listen_with_backlog_and_err+0x12c>)
 801228e:	681a      	ldr	r2, [r3, #0]
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	60da      	str	r2, [r3, #12]
 8012294:	4a0d      	ldr	r2, [pc, #52]	; (80122cc <tcp_listen_with_backlog_and_err+0x12c>)
 8012296:	69fb      	ldr	r3, [r7, #28]
 8012298:	6013      	str	r3, [r2, #0]
 801229a:	f004 fe17 	bl	8016ecc <tcp_timer_needed>
  res = ERR_OK;
 801229e:	2300      	movs	r3, #0
 80122a0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	7efa      	ldrb	r2, [r7, #27]
 80122ac:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80122ae:	69fb      	ldr	r3, [r7, #28]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3720      	adds	r7, #32
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	0801cbe0 	.word	0x0801cbe0
 80122bc:	0801ccd4 	.word	0x0801ccd4
 80122c0:	0801cc1c 	.word	0x0801cc1c
 80122c4:	2000ab5c 	.word	0x2000ab5c
 80122c8:	08012181 	.word	0x08012181
 80122cc:	2000ab58 	.word	0x2000ab58

080122d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122dc:	687a      	ldr	r2, [r7, #4]
 80122de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80122e0:	4413      	add	r3, r2
 80122e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e8:	687a      	ldr	r2, [r7, #4]
 80122ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80122ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80122f0:	bf28      	it	cs
 80122f2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80122f6:	b292      	uxth	r2, r2
 80122f8:	4413      	add	r3, r2
 80122fa:	68fa      	ldr	r2, [r7, #12]
 80122fc:	1ad3      	subs	r3, r2, r3
 80122fe:	2b00      	cmp	r3, #0
 8012300:	db08      	blt.n	8012314 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230e:	68fa      	ldr	r2, [r7, #12]
 8012310:	1ad3      	subs	r3, r2, r3
 8012312:	e020      	b.n	8012356 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231c:	1ad3      	subs	r3, r2, r3
 801231e:	2b00      	cmp	r3, #0
 8012320:	dd03      	ble.n	801232a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012328:	e014      	b.n	8012354 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012332:	1ad3      	subs	r3, r2, r3
 8012334:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801233c:	d306      	bcc.n	801234c <tcp_update_rcv_ann_wnd+0x7c>
 801233e:	4b08      	ldr	r3, [pc, #32]	; (8012360 <tcp_update_rcv_ann_wnd+0x90>)
 8012340:	f44f 7242 	mov.w	r2, #776	; 0x308
 8012344:	4907      	ldr	r1, [pc, #28]	; (8012364 <tcp_update_rcv_ann_wnd+0x94>)
 8012346:	4808      	ldr	r0, [pc, #32]	; (8012368 <tcp_update_rcv_ann_wnd+0x98>)
 8012348:	f008 fba2 	bl	801aa90 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	b29a      	uxth	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012354:	2300      	movs	r3, #0
  }
}
 8012356:	4618      	mov	r0, r3
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	0801cbe0 	.word	0x0801cbe0
 8012364:	0801ccf8 	.word	0x0801ccf8
 8012368:	0801cc1c 	.word	0x0801cc1c

0801236c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	460b      	mov	r3, r1
 8012376:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	7d1b      	ldrb	r3, [r3, #20]
 801237c:	2b01      	cmp	r3, #1
 801237e:	d106      	bne.n	801238e <tcp_recved+0x22>
 8012380:	4b23      	ldr	r3, [pc, #140]	; (8012410 <tcp_recved+0xa4>)
 8012382:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012386:	4923      	ldr	r1, [pc, #140]	; (8012414 <tcp_recved+0xa8>)
 8012388:	4823      	ldr	r0, [pc, #140]	; (8012418 <tcp_recved+0xac>)
 801238a:	f008 fb81 	bl	801aa90 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012392:	887b      	ldrh	r3, [r7, #2]
 8012394:	4413      	add	r3, r2
 8012396:	b29a      	uxth	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80123a4:	d904      	bls.n	80123b0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80123ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80123ae:	e017      	b.n	80123e0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d113      	bne.n	80123e0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	7d1b      	ldrb	r3, [r3, #20]
 80123bc:	2b07      	cmp	r3, #7
 80123be:	d003      	beq.n	80123c8 <tcp_recved+0x5c>
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	7d1b      	ldrb	r3, [r3, #20]
 80123c4:	2b09      	cmp	r3, #9
 80123c6:	d104      	bne.n	80123d2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80123ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80123d0:	e006      	b.n	80123e0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80123d2:	4b0f      	ldr	r3, [pc, #60]	; (8012410 <tcp_recved+0xa4>)
 80123d4:	f240 322d 	movw	r2, #813	; 0x32d
 80123d8:	4910      	ldr	r1, [pc, #64]	; (801241c <tcp_recved+0xb0>)
 80123da:	480f      	ldr	r0, [pc, #60]	; (8012418 <tcp_recved+0xac>)
 80123dc:	f008 fb58 	bl	801aa90 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff ff75 	bl	80122d0 <tcp_update_rcv_ann_wnd>
 80123e6:	4603      	mov	r3, r0
 80123e8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80123f0:	db09      	blt.n	8012406 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	7e9b      	ldrb	r3, [r3, #26]
 80123f6:	f043 0302 	orr.w	r3, r3, #2
 80123fa:	b2da      	uxtb	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f004 f889 	bl	8016518 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012406:	bf00      	nop
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	0801cbe0 	.word	0x0801cbe0
 8012414:	0801cd14 	.word	0x0801cd14
 8012418:	0801cc1c 	.word	0x0801cc1c
 801241c:	0801cd3c 	.word	0x0801cd3c

08012420 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012420:	b480      	push	{r7}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801242a:	4b1d      	ldr	r3, [pc, #116]	; (80124a0 <tcp_new_port+0x80>)
 801242c:	881b      	ldrh	r3, [r3, #0]
 801242e:	1c5a      	adds	r2, r3, #1
 8012430:	b291      	uxth	r1, r2
 8012432:	4a1b      	ldr	r2, [pc, #108]	; (80124a0 <tcp_new_port+0x80>)
 8012434:	8011      	strh	r1, [r2, #0]
 8012436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801243a:	4293      	cmp	r3, r2
 801243c:	d103      	bne.n	8012446 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801243e:	4b18      	ldr	r3, [pc, #96]	; (80124a0 <tcp_new_port+0x80>)
 8012440:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012444:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012446:	2300      	movs	r3, #0
 8012448:	71fb      	strb	r3, [r7, #7]
 801244a:	e01e      	b.n	801248a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801244c:	79fb      	ldrb	r3, [r7, #7]
 801244e:	4a15      	ldr	r2, [pc, #84]	; (80124a4 <tcp_new_port+0x84>)
 8012450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	603b      	str	r3, [r7, #0]
 8012458:	e011      	b.n	801247e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	8ada      	ldrh	r2, [r3, #22]
 801245e:	4b10      	ldr	r3, [pc, #64]	; (80124a0 <tcp_new_port+0x80>)
 8012460:	881b      	ldrh	r3, [r3, #0]
 8012462:	429a      	cmp	r2, r3
 8012464:	d108      	bne.n	8012478 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012466:	88bb      	ldrh	r3, [r7, #4]
 8012468:	3301      	adds	r3, #1
 801246a:	80bb      	strh	r3, [r7, #4]
 801246c:	88bb      	ldrh	r3, [r7, #4]
 801246e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012472:	d3da      	bcc.n	801242a <tcp_new_port+0xa>
          return 0;
 8012474:	2300      	movs	r3, #0
 8012476:	e00d      	b.n	8012494 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	603b      	str	r3, [r7, #0]
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1ea      	bne.n	801245a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012484:	79fb      	ldrb	r3, [r7, #7]
 8012486:	3301      	adds	r3, #1
 8012488:	71fb      	strb	r3, [r7, #7]
 801248a:	79fb      	ldrb	r3, [r7, #7]
 801248c:	2b03      	cmp	r3, #3
 801248e:	d9dd      	bls.n	801244c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012490:	4b03      	ldr	r3, [pc, #12]	; (80124a0 <tcp_new_port+0x80>)
 8012492:	881b      	ldrh	r3, [r3, #0]
}
 8012494:	4618      	mov	r0, r3
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr
 80124a0:	2000011c 	.word	0x2000011c
 80124a4:	0801e0ac 	.word	0x0801e0ac

080124a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80124a8:	b5b0      	push	{r4, r5, r7, lr}
 80124aa:	b08c      	sub	sp, #48	; 0x30
 80124ac:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80124ae:	2300      	movs	r3, #0
 80124b0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80124b2:	4b97      	ldr	r3, [pc, #604]	; (8012710 <tcp_slowtmr+0x268>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	3301      	adds	r3, #1
 80124b8:	4a95      	ldr	r2, [pc, #596]	; (8012710 <tcp_slowtmr+0x268>)
 80124ba:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80124bc:	4b95      	ldr	r3, [pc, #596]	; (8012714 <tcp_slowtmr+0x26c>)
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	3301      	adds	r3, #1
 80124c2:	b2da      	uxtb	r2, r3
 80124c4:	4b93      	ldr	r3, [pc, #588]	; (8012714 <tcp_slowtmr+0x26c>)
 80124c6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80124c8:	2300      	movs	r3, #0
 80124ca:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80124cc:	4b92      	ldr	r3, [pc, #584]	; (8012718 <tcp_slowtmr+0x270>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80124d2:	e227      	b.n	8012924 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80124d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d6:	7d1b      	ldrb	r3, [r3, #20]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d106      	bne.n	80124ea <tcp_slowtmr+0x42>
 80124dc:	4b8f      	ldr	r3, [pc, #572]	; (801271c <tcp_slowtmr+0x274>)
 80124de:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80124e2:	498f      	ldr	r1, [pc, #572]	; (8012720 <tcp_slowtmr+0x278>)
 80124e4:	488f      	ldr	r0, [pc, #572]	; (8012724 <tcp_slowtmr+0x27c>)
 80124e6:	f008 fad3 	bl	801aa90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	7d1b      	ldrb	r3, [r3, #20]
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d106      	bne.n	8012500 <tcp_slowtmr+0x58>
 80124f2:	4b8a      	ldr	r3, [pc, #552]	; (801271c <tcp_slowtmr+0x274>)
 80124f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80124f8:	498b      	ldr	r1, [pc, #556]	; (8012728 <tcp_slowtmr+0x280>)
 80124fa:	488a      	ldr	r0, [pc, #552]	; (8012724 <tcp_slowtmr+0x27c>)
 80124fc:	f008 fac8 	bl	801aa90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012502:	7d1b      	ldrb	r3, [r3, #20]
 8012504:	2b0a      	cmp	r3, #10
 8012506:	d106      	bne.n	8012516 <tcp_slowtmr+0x6e>
 8012508:	4b84      	ldr	r3, [pc, #528]	; (801271c <tcp_slowtmr+0x274>)
 801250a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801250e:	4987      	ldr	r1, [pc, #540]	; (801272c <tcp_slowtmr+0x284>)
 8012510:	4884      	ldr	r0, [pc, #528]	; (8012724 <tcp_slowtmr+0x27c>)
 8012512:	f008 fabd 	bl	801aa90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012518:	7f5a      	ldrb	r2, [r3, #29]
 801251a:	4b7e      	ldr	r3, [pc, #504]	; (8012714 <tcp_slowtmr+0x26c>)
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	429a      	cmp	r2, r3
 8012520:	d103      	bne.n	801252a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8012522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8012528:	e1fc      	b.n	8012924 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801252a:	4b7a      	ldr	r3, [pc, #488]	; (8012714 <tcp_slowtmr+0x26c>)
 801252c:	781a      	ldrb	r2, [r3, #0]
 801252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012530:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8012532:	2300      	movs	r3, #0
 8012534:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253c:	7d1b      	ldrb	r3, [r3, #20]
 801253e:	2b02      	cmp	r3, #2
 8012540:	d108      	bne.n	8012554 <tcp_slowtmr+0xac>
 8012542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012548:	2b05      	cmp	r3, #5
 801254a:	d903      	bls.n	8012554 <tcp_slowtmr+0xac>
      ++pcb_remove;
 801254c:	7ffb      	ldrb	r3, [r7, #31]
 801254e:	3301      	adds	r3, #1
 8012550:	77fb      	strb	r3, [r7, #31]
 8012552:	e0a2      	b.n	801269a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8012554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801255a:	2b0b      	cmp	r3, #11
 801255c:	d903      	bls.n	8012566 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801255e:	7ffb      	ldrb	r3, [r7, #31]
 8012560:	3301      	adds	r3, #1
 8012562:	77fb      	strb	r3, [r7, #31]
 8012564:	e099      	b.n	801269a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012568:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801256c:	2b00      	cmp	r3, #0
 801256e:	d032      	beq.n	80125d6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8012570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012572:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012576:	3b01      	subs	r3, #1
 8012578:	4a6d      	ldr	r2, [pc, #436]	; (8012730 <tcp_slowtmr+0x288>)
 801257a:	5cd3      	ldrb	r3, [r2, r3]
 801257c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 801257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012580:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012584:	7cfa      	ldrb	r2, [r7, #19]
 8012586:	429a      	cmp	r2, r3
 8012588:	d907      	bls.n	801259a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012590:	3301      	adds	r3, #1
 8012592:	b2da      	uxtb	r2, r3
 8012594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012596:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80125a0:	7cfa      	ldrb	r2, [r7, #19]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d879      	bhi.n	801269a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80125a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125a8:	f004 fbd0 	bl	8016d4c <tcp_zero_window_probe>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d173      	bne.n	801269a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80125b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b4:	2200      	movs	r2, #0
 80125b6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80125ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125bc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80125c0:	2b06      	cmp	r3, #6
 80125c2:	d86a      	bhi.n	801269a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80125c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80125ca:	3301      	adds	r3, #1
 80125cc:	b2da      	uxtb	r2, r3
 80125ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80125d4:	e061      	b.n	801269a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80125d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80125dc:	2b00      	cmp	r3, #0
 80125de:	db08      	blt.n	80125f2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80125e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	3301      	adds	r3, #1
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	b21a      	sxth	r2, r3
 80125ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80125f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d04f      	beq.n	801269a <tcp_slowtmr+0x1f2>
 80125fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012602:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012606:	429a      	cmp	r2, r3
 8012608:	db47      	blt.n	801269a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260c:	7d1b      	ldrb	r3, [r3, #20]
 801260e:	2b02      	cmp	r3, #2
 8012610:	d018      	beq.n	8012644 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8012612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012618:	2b0c      	cmp	r3, #12
 801261a:	bf28      	it	cs
 801261c:	230c      	movcs	r3, #12
 801261e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012622:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012626:	10db      	asrs	r3, r3, #3
 8012628:	b21b      	sxth	r3, r3
 801262a:	461a      	mov	r2, r3
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012632:	4413      	add	r3, r2
 8012634:	7dfa      	ldrb	r2, [r7, #23]
 8012636:	493f      	ldr	r1, [pc, #252]	; (8012734 <tcp_slowtmr+0x28c>)
 8012638:	5c8a      	ldrb	r2, [r1, r2]
 801263a:	4093      	lsls	r3, r2
 801263c:	b21a      	sxth	r2, r3
 801263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	2200      	movs	r2, #0
 8012648:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012656:	4293      	cmp	r3, r2
 8012658:	bf28      	it	cs
 801265a:	4613      	movcs	r3, r2
 801265c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 801265e:	8abb      	ldrh	r3, [r7, #20]
 8012660:	085b      	lsrs	r3, r3, #1
 8012662:	b29a      	uxth	r2, r3
 8012664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012666:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012674:	005b      	lsls	r3, r3, #1
 8012676:	b29b      	uxth	r3, r3
 8012678:	429a      	cmp	r2, r3
 801267a:	d206      	bcs.n	801268a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 801267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012680:	005b      	lsls	r3, r3, #1
 8012682:	b29a      	uxth	r2, r3
 8012684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012686:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012690:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8012694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012696:	f004 fa3f 	bl	8016b18 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269c:	7d1b      	ldrb	r3, [r3, #20]
 801269e:	2b06      	cmp	r3, #6
 80126a0:	d10f      	bne.n	80126c2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80126a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a4:	7e9b      	ldrb	r3, [r3, #26]
 80126a6:	f003 0310 	and.w	r3, r3, #16
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d009      	beq.n	80126c2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126ae:	4b18      	ldr	r3, [pc, #96]	; (8012710 <tcp_slowtmr+0x268>)
 80126b0:	681a      	ldr	r2, [r3, #0]
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b4:	6a1b      	ldr	r3, [r3, #32]
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	2b28      	cmp	r3, #40	; 0x28
 80126ba:	d902      	bls.n	80126c2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80126bc:	7ffb      	ldrb	r3, [r7, #31]
 80126be:	3301      	adds	r3, #1
 80126c0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80126c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c4:	7a1b      	ldrb	r3, [r3, #8]
 80126c6:	f003 0308 	and.w	r3, r3, #8
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d05d      	beq.n	801278a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80126d2:	2b04      	cmp	r3, #4
 80126d4:	d003      	beq.n	80126de <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80126d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80126da:	2b07      	cmp	r3, #7
 80126dc:	d155      	bne.n	801278a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126de:	4b0c      	ldr	r3, [pc, #48]	; (8012710 <tcp_slowtmr+0x268>)
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126ee:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80126f2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80126f6:	4910      	ldr	r1, [pc, #64]	; (8012738 <tcp_slowtmr+0x290>)
 80126f8:	fba1 1303 	umull	r1, r3, r1, r3
 80126fc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126fe:	429a      	cmp	r2, r3
 8012700:	d91c      	bls.n	801273c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012702:	7ffb      	ldrb	r3, [r7, #31]
 8012704:	3301      	adds	r3, #1
 8012706:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8012708:	7fbb      	ldrb	r3, [r7, #30]
 801270a:	3301      	adds	r3, #1
 801270c:	77bb      	strb	r3, [r7, #30]
 801270e:	e03c      	b.n	801278a <tcp_slowtmr+0x2e2>
 8012710:	2000ab54 	.word	0x2000ab54
 8012714:	20004206 	.word	0x20004206
 8012718:	2000ab50 	.word	0x2000ab50
 801271c:	0801cbe0 	.word	0x0801cbe0
 8012720:	0801cd90 	.word	0x0801cd90
 8012724:	0801cc1c 	.word	0x0801cc1c
 8012728:	0801cdbc 	.word	0x0801cdbc
 801272c:	0801cde8 	.word	0x0801cde8
 8012730:	0801e0a4 	.word	0x0801e0a4
 8012734:	0801e094 	.word	0x0801e094
 8012738:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801273c:	4b97      	ldr	r3, [pc, #604]	; (801299c <tcp_slowtmr+0x4f4>)
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012742:	6a1b      	ldr	r3, [r3, #32]
 8012744:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012748:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012752:	4618      	mov	r0, r3
 8012754:	4b92      	ldr	r3, [pc, #584]	; (80129a0 <tcp_slowtmr+0x4f8>)
 8012756:	fb03 f300 	mul.w	r3, r3, r0
 801275a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 801275c:	4991      	ldr	r1, [pc, #580]	; (80129a4 <tcp_slowtmr+0x4fc>)
 801275e:	fba1 1303 	umull	r1, r3, r1, r3
 8012762:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012764:	429a      	cmp	r2, r3
 8012766:	d910      	bls.n	801278a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8012768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801276a:	f004 fab2 	bl	8016cd2 <tcp_keepalive>
 801276e:	4603      	mov	r3, r0
 8012770:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8012772:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d107      	bne.n	801278a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012780:	3301      	adds	r3, #1
 8012782:	b2da      	uxtb	r2, r3
 8012784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012786:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801278e:	2b00      	cmp	r3, #0
 8012790:	d016      	beq.n	80127c0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8012792:	4b82      	ldr	r3, [pc, #520]	; (801299c <tcp_slowtmr+0x4f4>)
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012798:	6a1b      	ldr	r3, [r3, #32]
 801279a:	1ad2      	subs	r2, r2, r3
 801279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80127a2:	4619      	mov	r1, r3
 80127a4:	460b      	mov	r3, r1
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	440b      	add	r3, r1
 80127aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d307      	bcc.n	80127c0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80127b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127b4:	4618      	mov	r0, r3
 80127b6:	f000 fa04 	bl	8012bc2 <tcp_segs_free>
      pcb->ooseq = NULL;
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	2200      	movs	r2, #0
 80127be:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c2:	7d1b      	ldrb	r3, [r3, #20]
 80127c4:	2b03      	cmp	r3, #3
 80127c6:	d109      	bne.n	80127dc <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127c8:	4b74      	ldr	r3, [pc, #464]	; (801299c <tcp_slowtmr+0x4f4>)
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ce:	6a1b      	ldr	r3, [r3, #32]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	2b28      	cmp	r3, #40	; 0x28
 80127d4:	d902      	bls.n	80127dc <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80127d6:	7ffb      	ldrb	r3, [r7, #31]
 80127d8:	3301      	adds	r3, #1
 80127da:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	7d1b      	ldrb	r3, [r3, #20]
 80127e0:	2b09      	cmp	r3, #9
 80127e2:	d109      	bne.n	80127f8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80127e4:	4b6d      	ldr	r3, [pc, #436]	; (801299c <tcp_slowtmr+0x4f4>)
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ea:	6a1b      	ldr	r3, [r3, #32]
 80127ec:	1ad3      	subs	r3, r2, r3
 80127ee:	2bf0      	cmp	r3, #240	; 0xf0
 80127f0:	d902      	bls.n	80127f8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 80127f2:	7ffb      	ldrb	r3, [r7, #31]
 80127f4:	3301      	adds	r3, #1
 80127f6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80127f8:	7ffb      	ldrb	r3, [r7, #31]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d05d      	beq.n	80128ba <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80127fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012804:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012808:	f000 fc44 	bl	8013094 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801280c:	6a3b      	ldr	r3, [r7, #32]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d010      	beq.n	8012834 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012812:	4b65      	ldr	r3, [pc, #404]	; (80129a8 <tcp_slowtmr+0x500>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012818:	429a      	cmp	r2, r3
 801281a:	d106      	bne.n	801282a <tcp_slowtmr+0x382>
 801281c:	4b63      	ldr	r3, [pc, #396]	; (80129ac <tcp_slowtmr+0x504>)
 801281e:	f240 4289 	movw	r2, #1161	; 0x489
 8012822:	4963      	ldr	r1, [pc, #396]	; (80129b0 <tcp_slowtmr+0x508>)
 8012824:	4863      	ldr	r0, [pc, #396]	; (80129b4 <tcp_slowtmr+0x50c>)
 8012826:	f008 f933 	bl	801aa90 <iprintf>
        prev->next = pcb->next;
 801282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282c:	68da      	ldr	r2, [r3, #12]
 801282e:	6a3b      	ldr	r3, [r7, #32]
 8012830:	60da      	str	r2, [r3, #12]
 8012832:	e00f      	b.n	8012854 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012834:	4b5c      	ldr	r3, [pc, #368]	; (80129a8 <tcp_slowtmr+0x500>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801283a:	429a      	cmp	r2, r3
 801283c:	d006      	beq.n	801284c <tcp_slowtmr+0x3a4>
 801283e:	4b5b      	ldr	r3, [pc, #364]	; (80129ac <tcp_slowtmr+0x504>)
 8012840:	f240 428d 	movw	r2, #1165	; 0x48d
 8012844:	495c      	ldr	r1, [pc, #368]	; (80129b8 <tcp_slowtmr+0x510>)
 8012846:	485b      	ldr	r0, [pc, #364]	; (80129b4 <tcp_slowtmr+0x50c>)
 8012848:	f008 f922 	bl	801aa90 <iprintf>
        tcp_active_pcbs = pcb->next;
 801284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	4a55      	ldr	r2, [pc, #340]	; (80129a8 <tcp_slowtmr+0x500>)
 8012852:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012854:	7fbb      	ldrb	r3, [r7, #30]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d010      	beq.n	801287c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012860:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012862:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8012864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012866:	1d1d      	adds	r5, r3, #4
 8012868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286a:	8adb      	ldrh	r3, [r3, #22]
 801286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801286e:	8b12      	ldrh	r2, [r2, #24]
 8012870:	9201      	str	r2, [sp, #4]
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	462b      	mov	r3, r5
 8012876:	4622      	mov	r2, r4
 8012878:	f004 f8d8 	bl	8016a2c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287e:	691b      	ldr	r3, [r3, #16]
 8012880:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012884:	7d1b      	ldrb	r3, [r3, #20]
 8012886:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8012892:	6839      	ldr	r1, [r7, #0]
 8012894:	2001      	movs	r0, #1
 8012896:	f7fe f935 	bl	8010b04 <memp_free>

      tcp_active_pcbs_changed = 0;
 801289a:	4b48      	ldr	r3, [pc, #288]	; (80129bc <tcp_slowtmr+0x514>)
 801289c:	2200      	movs	r2, #0
 801289e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d004      	beq.n	80128b0 <tcp_slowtmr+0x408>
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	f06f 010c 	mvn.w	r1, #12
 80128ac:	68b8      	ldr	r0, [r7, #8]
 80128ae:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80128b0:	4b42      	ldr	r3, [pc, #264]	; (80129bc <tcp_slowtmr+0x514>)
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d035      	beq.n	8012924 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80128b8:	e606      	b.n	80124c8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80128ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128bc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80128be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80128c4:	6a3b      	ldr	r3, [r7, #32]
 80128c6:	7edb      	ldrb	r3, [r3, #27]
 80128c8:	3301      	adds	r3, #1
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	6a3b      	ldr	r3, [r7, #32]
 80128ce:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80128d0:	6a3b      	ldr	r3, [r7, #32]
 80128d2:	7eda      	ldrb	r2, [r3, #27]
 80128d4:	6a3b      	ldr	r3, [r7, #32]
 80128d6:	7f1b      	ldrb	r3, [r3, #28]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d323      	bcc.n	8012924 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80128dc:	6a3b      	ldr	r3, [r7, #32]
 80128de:	2200      	movs	r2, #0
 80128e0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80128e2:	4b36      	ldr	r3, [pc, #216]	; (80129bc <tcp_slowtmr+0x514>)
 80128e4:	2200      	movs	r2, #0
 80128e6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80128e8:	6a3b      	ldr	r3, [r7, #32]
 80128ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00a      	beq.n	8012908 <tcp_slowtmr+0x460>
 80128f2:	6a3b      	ldr	r3, [r7, #32]
 80128f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80128f8:	6a3a      	ldr	r2, [r7, #32]
 80128fa:	6912      	ldr	r2, [r2, #16]
 80128fc:	6a39      	ldr	r1, [r7, #32]
 80128fe:	4610      	mov	r0, r2
 8012900:	4798      	blx	r3
 8012902:	4603      	mov	r3, r0
 8012904:	777b      	strb	r3, [r7, #29]
 8012906:	e001      	b.n	801290c <tcp_slowtmr+0x464>
 8012908:	2300      	movs	r3, #0
 801290a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 801290c:	4b2b      	ldr	r3, [pc, #172]	; (80129bc <tcp_slowtmr+0x514>)
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d000      	beq.n	8012916 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8012914:	e5d8      	b.n	80124c8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012916:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d102      	bne.n	8012924 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 801291e:	6a38      	ldr	r0, [r7, #32]
 8012920:	f003 fdfa 	bl	8016518 <tcp_output>
  while (pcb != NULL) {
 8012924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012926:	2b00      	cmp	r3, #0
 8012928:	f47f add4 	bne.w	80124d4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8012930:	4b23      	ldr	r3, [pc, #140]	; (80129c0 <tcp_slowtmr+0x518>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8012936:	e068      	b.n	8012a0a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	7d1b      	ldrb	r3, [r3, #20]
 801293c:	2b0a      	cmp	r3, #10
 801293e:	d006      	beq.n	801294e <tcp_slowtmr+0x4a6>
 8012940:	4b1a      	ldr	r3, [pc, #104]	; (80129ac <tcp_slowtmr+0x504>)
 8012942:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8012946:	491f      	ldr	r1, [pc, #124]	; (80129c4 <tcp_slowtmr+0x51c>)
 8012948:	481a      	ldr	r0, [pc, #104]	; (80129b4 <tcp_slowtmr+0x50c>)
 801294a:	f008 f8a1 	bl	801aa90 <iprintf>
    pcb_remove = 0;
 801294e:	2300      	movs	r3, #0
 8012950:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012952:	4b12      	ldr	r3, [pc, #72]	; (801299c <tcp_slowtmr+0x4f4>)
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012958:	6a1b      	ldr	r3, [r3, #32]
 801295a:	1ad3      	subs	r3, r2, r3
 801295c:	2bf0      	cmp	r3, #240	; 0xf0
 801295e:	d902      	bls.n	8012966 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8012960:	7ffb      	ldrb	r3, [r7, #31]
 8012962:	3301      	adds	r3, #1
 8012964:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012966:	7ffb      	ldrb	r3, [r7, #31]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d049      	beq.n	8012a00 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801296c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801296e:	f000 fb91 	bl	8013094 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012972:	6a3b      	ldr	r3, [r7, #32]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d029      	beq.n	80129cc <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012978:	4b11      	ldr	r3, [pc, #68]	; (80129c0 <tcp_slowtmr+0x518>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801297e:	429a      	cmp	r2, r3
 8012980:	d106      	bne.n	8012990 <tcp_slowtmr+0x4e8>
 8012982:	4b0a      	ldr	r3, [pc, #40]	; (80129ac <tcp_slowtmr+0x504>)
 8012984:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8012988:	490f      	ldr	r1, [pc, #60]	; (80129c8 <tcp_slowtmr+0x520>)
 801298a:	480a      	ldr	r0, [pc, #40]	; (80129b4 <tcp_slowtmr+0x50c>)
 801298c:	f008 f880 	bl	801aa90 <iprintf>
        prev->next = pcb->next;
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	68da      	ldr	r2, [r3, #12]
 8012994:	6a3b      	ldr	r3, [r7, #32]
 8012996:	60da      	str	r2, [r3, #12]
 8012998:	e028      	b.n	80129ec <tcp_slowtmr+0x544>
 801299a:	bf00      	nop
 801299c:	2000ab54 	.word	0x2000ab54
 80129a0:	000124f8 	.word	0x000124f8
 80129a4:	10624dd3 	.word	0x10624dd3
 80129a8:	2000ab50 	.word	0x2000ab50
 80129ac:	0801cbe0 	.word	0x0801cbe0
 80129b0:	0801ce18 	.word	0x0801ce18
 80129b4:	0801cc1c 	.word	0x0801cc1c
 80129b8:	0801ce44 	.word	0x0801ce44
 80129bc:	2000ab4c 	.word	0x2000ab4c
 80129c0:	2000ab60 	.word	0x2000ab60
 80129c4:	0801ce70 	.word	0x0801ce70
 80129c8:	0801cea0 	.word	0x0801cea0
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80129cc:	4b12      	ldr	r3, [pc, #72]	; (8012a18 <tcp_slowtmr+0x570>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d006      	beq.n	80129e4 <tcp_slowtmr+0x53c>
 80129d6:	4b11      	ldr	r3, [pc, #68]	; (8012a1c <tcp_slowtmr+0x574>)
 80129d8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80129dc:	4910      	ldr	r1, [pc, #64]	; (8012a20 <tcp_slowtmr+0x578>)
 80129de:	4811      	ldr	r0, [pc, #68]	; (8012a24 <tcp_slowtmr+0x57c>)
 80129e0:	f008 f856 	bl	801aa90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	4a0b      	ldr	r2, [pc, #44]	; (8012a18 <tcp_slowtmr+0x570>)
 80129ea:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80129ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ee:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80129f6:	69b9      	ldr	r1, [r7, #24]
 80129f8:	2001      	movs	r0, #1
 80129fa:	f7fe f883 	bl	8010b04 <memp_free>
 80129fe:	e004      	b.n	8012a0a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8012a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a02:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8012a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d193      	bne.n	8012938 <tcp_slowtmr+0x490>
    }
  }
}
 8012a10:	bf00      	nop
 8012a12:	3728      	adds	r7, #40	; 0x28
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bdb0      	pop	{r4, r5, r7, pc}
 8012a18:	2000ab60 	.word	0x2000ab60
 8012a1c:	0801cbe0 	.word	0x0801cbe0
 8012a20:	0801cec8 	.word	0x0801cec8
 8012a24:	0801cc1c 	.word	0x0801cc1c

08012a28 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012a2e:	4b2d      	ldr	r3, [pc, #180]	; (8012ae4 <tcp_fasttmr+0xbc>)
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	3301      	adds	r3, #1
 8012a34:	b2da      	uxtb	r2, r3
 8012a36:	4b2b      	ldr	r3, [pc, #172]	; (8012ae4 <tcp_fasttmr+0xbc>)
 8012a38:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012a3a:	4b2b      	ldr	r3, [pc, #172]	; (8012ae8 <tcp_fasttmr+0xc0>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012a40:	e048      	b.n	8012ad4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	7f5a      	ldrb	r2, [r3, #29]
 8012a46:	4b27      	ldr	r3, [pc, #156]	; (8012ae4 <tcp_fasttmr+0xbc>)
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d03f      	beq.n	8012ace <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012a4e:	4b25      	ldr	r3, [pc, #148]	; (8012ae4 <tcp_fasttmr+0xbc>)
 8012a50:	781a      	ldrb	r2, [r3, #0]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	7e9b      	ldrb	r3, [r3, #26]
 8012a5a:	f003 0301 	and.w	r3, r3, #1
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d010      	beq.n	8012a84 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	7e9b      	ldrb	r3, [r3, #26]
 8012a66:	f043 0302 	orr.w	r3, r3, #2
 8012a6a:	b2da      	uxtb	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f003 fd51 	bl	8016518 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	7e9b      	ldrb	r3, [r3, #26]
 8012a7a:	f023 0303 	bic.w	r3, r3, #3
 8012a7e:	b2da      	uxtb	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	7e9b      	ldrb	r3, [r3, #26]
 8012a88:	f003 0308 	and.w	r3, r3, #8
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d009      	beq.n	8012aa4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	7e9b      	ldrb	r3, [r3, #26]
 8012a94:	f023 0308 	bic.w	r3, r3, #8
 8012a98:	b2da      	uxtb	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7ff f958 	bl	8011d54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00a      	beq.n	8012ac8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012ab2:	4b0e      	ldr	r3, [pc, #56]	; (8012aec <tcp_fasttmr+0xc4>)
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 f819 	bl	8012af0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012abe:	4b0b      	ldr	r3, [pc, #44]	; (8012aec <tcp_fasttmr+0xc4>)
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d000      	beq.n	8012ac8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012ac6:	e7b8      	b.n	8012a3a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	607b      	str	r3, [r7, #4]
 8012acc:	e002      	b.n	8012ad4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1b3      	bne.n	8012a42 <tcp_fasttmr+0x1a>
    }
  }
}
 8012ada:	bf00      	nop
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	20004206 	.word	0x20004206
 8012ae8:	2000ab50 	.word	0x2000ab50
 8012aec:	2000ab4c 	.word	0x2000ab4c

08012af0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012af0:	b590      	push	{r4, r7, lr}
 8012af2:	b085      	sub	sp, #20
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012afc:	7b5b      	ldrb	r3, [r3, #13]
 8012afe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b04:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d00b      	beq.n	8012b2e <tcp_process_refused_data+0x3e>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6918      	ldr	r0, [r3, #16]
 8012b20:	2300      	movs	r3, #0
 8012b22:	68ba      	ldr	r2, [r7, #8]
 8012b24:	6879      	ldr	r1, [r7, #4]
 8012b26:	47a0      	blx	r4
 8012b28:	4603      	mov	r3, r0
 8012b2a:	73fb      	strb	r3, [r7, #15]
 8012b2c:	e007      	b.n	8012b3e <tcp_process_refused_data+0x4e>
 8012b2e:	2300      	movs	r3, #0
 8012b30:	68ba      	ldr	r2, [r7, #8]
 8012b32:	6879      	ldr	r1, [r7, #4]
 8012b34:	2000      	movs	r0, #0
 8012b36:	f000 f88c 	bl	8012c52 <tcp_recv_null>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d12a      	bne.n	8012b9c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8012b46:	7bbb      	ldrb	r3, [r7, #14]
 8012b48:	f003 0320 	and.w	r3, r3, #32
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d033      	beq.n	8012bb8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b54:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012b58:	d005      	beq.n	8012b66 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b5e:	3301      	adds	r3, #1
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d00b      	beq.n	8012b88 <tcp_process_refused_data+0x98>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6918      	ldr	r0, [r3, #16]
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	6879      	ldr	r1, [r7, #4]
 8012b80:	47a0      	blx	r4
 8012b82:	4603      	mov	r3, r0
 8012b84:	73fb      	strb	r3, [r7, #15]
 8012b86:	e001      	b.n	8012b8c <tcp_process_refused_data+0x9c>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b90:	f113 0f0d 	cmn.w	r3, #13
 8012b94:	d110      	bne.n	8012bb8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8012b96:	f06f 030c 	mvn.w	r3, #12
 8012b9a:	e00e      	b.n	8012bba <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8012b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ba0:	f113 0f0d 	cmn.w	r3, #13
 8012ba4:	d102      	bne.n	8012bac <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012ba6:	f06f 030c 	mvn.w	r3, #12
 8012baa:	e006      	b.n	8012bba <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	68ba      	ldr	r2, [r7, #8]
 8012bb0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8012bb2:	f06f 0304 	mvn.w	r3, #4
 8012bb6:	e000      	b.n	8012bba <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8012bb8:	2300      	movs	r3, #0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3714      	adds	r7, #20
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd90      	pop	{r4, r7, pc}

08012bc2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b084      	sub	sp, #16
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012bca:	e007      	b.n	8012bdc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 f809 	bl	8012bea <tcp_seg_free>
    seg = next;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d1f4      	bne.n	8012bcc <tcp_segs_free+0xa>
  }
}
 8012be2:	bf00      	nop
 8012be4:	3710      	adds	r7, #16
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b082      	sub	sp, #8
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d00c      	beq.n	8012c12 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d004      	beq.n	8012c0a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7fe fcd7 	bl	80115b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012c0a:	6879      	ldr	r1, [r7, #4]
 8012c0c:	2003      	movs	r0, #3
 8012c0e:	f7fd ff79 	bl	8010b04 <memp_free>
  }
}
 8012c12:	bf00      	nop
 8012c14:	3708      	adds	r7, #8
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}

08012c1a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012c1a:	b580      	push	{r7, lr}
 8012c1c:	b084      	sub	sp, #16
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012c22:	2003      	movs	r0, #3
 8012c24:	f7fd ff1c 	bl	8010a60 <memp_malloc>
 8012c28:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d101      	bne.n	8012c34 <tcp_seg_copy+0x1a>
    return NULL;
 8012c30:	2300      	movs	r3, #0
 8012c32:	e00a      	b.n	8012c4a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012c34:	2210      	movs	r2, #16
 8012c36:	6879      	ldr	r1, [r7, #4]
 8012c38:	68f8      	ldr	r0, [r7, #12]
 8012c3a:	f007 fe6e 	bl	801a91a <memcpy>
  pbuf_ref(cseg->p);
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fe fd6a 	bl	801171c <pbuf_ref>
  return cseg;
 8012c48:	68fb      	ldr	r3, [r7, #12]
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3710      	adds	r7, #16
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}

08012c52 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b084      	sub	sp, #16
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	60f8      	str	r0, [r7, #12]
 8012c5a:	60b9      	str	r1, [r7, #8]
 8012c5c:	607a      	str	r2, [r7, #4]
 8012c5e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d009      	beq.n	8012c7a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	891b      	ldrh	r3, [r3, #8]
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	68b8      	ldr	r0, [r7, #8]
 8012c6e:	f7ff fb7d 	bl	801236c <tcp_recved>
    pbuf_free(p);
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7fe fca0 	bl	80115b8 <pbuf_free>
 8012c78:	e008      	b.n	8012c8c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8012c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d104      	bne.n	8012c8c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8012c82:	68b8      	ldr	r0, [r7, #8]
 8012c84:	f7ff f8cc 	bl	8011e20 <tcp_close>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	e000      	b.n	8012c8e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8012c8c:	2300      	movs	r3, #0
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3710      	adds	r7, #16
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
	...

08012c98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	db01      	blt.n	8012cae <tcp_kill_prio+0x16>
 8012caa:	79fb      	ldrb	r3, [r7, #7]
 8012cac:	e000      	b.n	8012cb0 <tcp_kill_prio+0x18>
 8012cae:	237f      	movs	r3, #127	; 0x7f
 8012cb0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cba:	4b16      	ldr	r3, [pc, #88]	; (8012d14 <tcp_kill_prio+0x7c>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	617b      	str	r3, [r7, #20]
 8012cc0:	e01a      	b.n	8012cf8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	7d5b      	ldrb	r3, [r3, #21]
 8012cc6:	7afa      	ldrb	r2, [r7, #11]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d312      	bcc.n	8012cf2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012ccc:	4b12      	ldr	r3, [pc, #72]	; (8012d18 <tcp_kill_prio+0x80>)
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	6a1b      	ldr	r3, [r3, #32]
 8012cd4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d80a      	bhi.n	8012cf2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8012cdc:	4b0e      	ldr	r3, [pc, #56]	; (8012d18 <tcp_kill_prio+0x80>)
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	6a1b      	ldr	r3, [r3, #32]
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	7d5b      	ldrb	r3, [r3, #21]
 8012cf0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	617b      	str	r3, [r7, #20]
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1e1      	bne.n	8012cc2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d002      	beq.n	8012d0a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012d04:	6938      	ldr	r0, [r7, #16]
 8012d06:	f7ff f99d 	bl	8012044 <tcp_abort>
  }
}
 8012d0a:	bf00      	nop
 8012d0c:	3718      	adds	r7, #24
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	2000ab50 	.word	0x2000ab50
 8012d18:	2000ab54 	.word	0x2000ab54

08012d1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b086      	sub	sp, #24
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	4603      	mov	r3, r0
 8012d24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012d26:	79fb      	ldrb	r3, [r7, #7]
 8012d28:	2b08      	cmp	r3, #8
 8012d2a:	d009      	beq.n	8012d40 <tcp_kill_state+0x24>
 8012d2c:	79fb      	ldrb	r3, [r7, #7]
 8012d2e:	2b09      	cmp	r3, #9
 8012d30:	d006      	beq.n	8012d40 <tcp_kill_state+0x24>
 8012d32:	4b1a      	ldr	r3, [pc, #104]	; (8012d9c <tcp_kill_state+0x80>)
 8012d34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012d38:	4919      	ldr	r1, [pc, #100]	; (8012da0 <tcp_kill_state+0x84>)
 8012d3a:	481a      	ldr	r0, [pc, #104]	; (8012da4 <tcp_kill_state+0x88>)
 8012d3c:	f007 fea8 	bl	801aa90 <iprintf>

  inactivity = 0;
 8012d40:	2300      	movs	r3, #0
 8012d42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012d44:	2300      	movs	r3, #0
 8012d46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d48:	4b17      	ldr	r3, [pc, #92]	; (8012da8 <tcp_kill_state+0x8c>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	617b      	str	r3, [r7, #20]
 8012d4e:	e017      	b.n	8012d80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	7d1b      	ldrb	r3, [r3, #20]
 8012d54:	79fa      	ldrb	r2, [r7, #7]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d10f      	bne.n	8012d7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012d5a:	4b14      	ldr	r3, [pc, #80]	; (8012dac <tcp_kill_state+0x90>)
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	6a1b      	ldr	r3, [r3, #32]
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	68fa      	ldr	r2, [r7, #12]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d807      	bhi.n	8012d7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012d6a:	4b10      	ldr	r3, [pc, #64]	; (8012dac <tcp_kill_state+0x90>)
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	6a1b      	ldr	r3, [r3, #32]
 8012d72:	1ad3      	subs	r3, r2, r3
 8012d74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	617b      	str	r3, [r7, #20]
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d1e4      	bne.n	8012d50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d003      	beq.n	8012d94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	6938      	ldr	r0, [r7, #16]
 8012d90:	f7ff f8a6 	bl	8011ee0 <tcp_abandon>
  }
}
 8012d94:	bf00      	nop
 8012d96:	3718      	adds	r7, #24
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	0801cbe0 	.word	0x0801cbe0
 8012da0:	0801cef0 	.word	0x0801cef0
 8012da4:	0801cc1c 	.word	0x0801cc1c
 8012da8:	2000ab50 	.word	0x2000ab50
 8012dac:	2000ab54 	.word	0x2000ab54

08012db0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012db6:	2300      	movs	r3, #0
 8012db8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dbe:	4b12      	ldr	r3, [pc, #72]	; (8012e08 <tcp_kill_timewait+0x58>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	60fb      	str	r3, [r7, #12]
 8012dc4:	e012      	b.n	8012dec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012dc6:	4b11      	ldr	r3, [pc, #68]	; (8012e0c <tcp_kill_timewait+0x5c>)
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	6a1b      	ldr	r3, [r3, #32]
 8012dce:	1ad3      	subs	r3, r2, r3
 8012dd0:	687a      	ldr	r2, [r7, #4]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d807      	bhi.n	8012de6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012dd6:	4b0d      	ldr	r3, [pc, #52]	; (8012e0c <tcp_kill_timewait+0x5c>)
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	6a1b      	ldr	r3, [r3, #32]
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	60fb      	str	r3, [r7, #12]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d1e9      	bne.n	8012dc6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d002      	beq.n	8012dfe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012df8:	68b8      	ldr	r0, [r7, #8]
 8012dfa:	f7ff f923 	bl	8012044 <tcp_abort>
  }
}
 8012dfe:	bf00      	nop
 8012e00:	3710      	adds	r7, #16
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	2000ab60 	.word	0x2000ab60
 8012e0c:	2000ab54 	.word	0x2000ab54

08012e10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b084      	sub	sp, #16
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	4603      	mov	r3, r0
 8012e18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e1a:	2001      	movs	r0, #1
 8012e1c:	f7fd fe20 	bl	8010a60 <memp_malloc>
 8012e20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d124      	bne.n	8012e72 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012e28:	f7ff ffc2 	bl	8012db0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e2c:	2001      	movs	r0, #1
 8012e2e:	f7fd fe17 	bl	8010a60 <memp_malloc>
 8012e32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d11b      	bne.n	8012e72 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012e3a:	2009      	movs	r0, #9
 8012e3c:	f7ff ff6e 	bl	8012d1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e40:	2001      	movs	r0, #1
 8012e42:	f7fd fe0d 	bl	8010a60 <memp_malloc>
 8012e46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d111      	bne.n	8012e72 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012e4e:	2008      	movs	r0, #8
 8012e50:	f7ff ff64 	bl	8012d1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e54:	2001      	movs	r0, #1
 8012e56:	f7fd fe03 	bl	8010a60 <memp_malloc>
 8012e5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d107      	bne.n	8012e72 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012e62:	79fb      	ldrb	r3, [r7, #7]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7ff ff17 	bl	8012c98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e6a:	2001      	movs	r0, #1
 8012e6c:	f7fd fdf8 	bl	8010a60 <memp_malloc>
 8012e70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d03f      	beq.n	8012ef8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012e78:	2298      	movs	r2, #152	; 0x98
 8012e7a:	2100      	movs	r1, #0
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f007 fd57 	bl	801a930 <memset>
    pcb->prio = prio;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	79fa      	ldrb	r2, [r7, #7]
 8012e86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012e98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	22ff      	movs	r2, #255	; 0xff
 8012ea6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012eae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2206      	movs	r2, #6
 8012eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2206      	movs	r2, #6
 8012ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ec4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2201      	movs	r2, #1
 8012eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012ece:	4b0d      	ldr	r3, [pc, #52]	; (8012f04 <tcp_alloc+0xf4>)
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012ed6:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <tcp_alloc+0xf8>)
 8012ed8:	781a      	ldrb	r2, [r3, #0]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012ee4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4a08      	ldr	r2, [pc, #32]	; (8012f0c <tcp_alloc+0xfc>)
 8012eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	4a07      	ldr	r2, [pc, #28]	; (8012f10 <tcp_alloc+0x100>)
 8012ef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3710      	adds	r7, #16
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	2000ab54 	.word	0x2000ab54
 8012f08:	20004206 	.word	0x20004206
 8012f0c:	08012c53 	.word	0x08012c53
 8012f10:	006ddd00 	.word	0x006ddd00

08012f14 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012f1e:	2040      	movs	r0, #64	; 0x40
 8012f20:	f7ff ff76 	bl	8012e10 <tcp_alloc>
 8012f24:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012f26:	68fb      	ldr	r3, [r7, #12]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b083      	sub	sp, #12
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d002      	beq.n	8012f46 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	683a      	ldr	r2, [r7, #0]
 8012f44:	611a      	str	r2, [r3, #16]
  }
}
 8012f46:	bf00      	nop
 8012f48:	370c      	adds	r7, #12
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr
	...

08012f54 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00e      	beq.n	8012f82 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	7d1b      	ldrb	r3, [r3, #20]
 8012f68:	2b01      	cmp	r3, #1
 8012f6a:	d106      	bne.n	8012f7a <tcp_recv+0x26>
 8012f6c:	4b07      	ldr	r3, [pc, #28]	; (8012f8c <tcp_recv+0x38>)
 8012f6e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8012f72:	4907      	ldr	r1, [pc, #28]	; (8012f90 <tcp_recv+0x3c>)
 8012f74:	4807      	ldr	r0, [pc, #28]	; (8012f94 <tcp_recv+0x40>)
 8012f76:	f007 fd8b 	bl	801aa90 <iprintf>
    pcb->recv = recv;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	683a      	ldr	r2, [r7, #0]
 8012f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012f82:	bf00      	nop
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	0801cbe0 	.word	0x0801cbe0
 8012f90:	0801cf00 	.word	0x0801cf00
 8012f94:	0801cc1c 	.word	0x0801cc1c

08012f98 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d00d      	beq.n	8012fc4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	7d1b      	ldrb	r3, [r3, #20]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d106      	bne.n	8012fbe <tcp_sent+0x26>
 8012fb0:	4b06      	ldr	r3, [pc, #24]	; (8012fcc <tcp_sent+0x34>)
 8012fb2:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8012fb6:	4906      	ldr	r1, [pc, #24]	; (8012fd0 <tcp_sent+0x38>)
 8012fb8:	4806      	ldr	r0, [pc, #24]	; (8012fd4 <tcp_sent+0x3c>)
 8012fba:	f007 fd69 	bl	801aa90 <iprintf>
    pcb->sent = sent;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	683a      	ldr	r2, [r7, #0]
 8012fc2:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8012fc4:	bf00      	nop
 8012fc6:	3708      	adds	r7, #8
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	0801cbe0 	.word	0x0801cbe0
 8012fd0:	0801cf28 	.word	0x0801cf28
 8012fd4:	0801cc1c 	.word	0x0801cc1c

08012fd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d00e      	beq.n	8013006 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	7d1b      	ldrb	r3, [r3, #20]
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d106      	bne.n	8012ffe <tcp_err+0x26>
 8012ff0:	4b07      	ldr	r3, [pc, #28]	; (8013010 <tcp_err+0x38>)
 8012ff2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8012ff6:	4907      	ldr	r1, [pc, #28]	; (8013014 <tcp_err+0x3c>)
 8012ff8:	4807      	ldr	r0, [pc, #28]	; (8013018 <tcp_err+0x40>)
 8012ffa:	f007 fd49 	bl	801aa90 <iprintf>
    pcb->errf = err;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8013006:	bf00      	nop
 8013008:	3708      	adds	r7, #8
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	0801cbe0 	.word	0x0801cbe0
 8013014:	0801cf50 	.word	0x0801cf50
 8013018:	0801cc1c 	.word	0x0801cc1c

0801301c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801301c:	b480      	push	{r7}
 801301e:	b085      	sub	sp, #20
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d008      	beq.n	801303e <tcp_accept+0x22>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	7d1b      	ldrb	r3, [r3, #20]
 8013030:	2b01      	cmp	r3, #1
 8013032:	d104      	bne.n	801303e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	683a      	ldr	r2, [r7, #0]
 801303c:	619a      	str	r2, [r3, #24]
  }
}
 801303e:	bf00      	nop
 8013040:	3714      	adds	r7, #20
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
	...

0801304c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	4613      	mov	r3, r2
 8013058:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	7d1b      	ldrb	r3, [r3, #20]
 801305e:	2b01      	cmp	r3, #1
 8013060:	d106      	bne.n	8013070 <tcp_poll+0x24>
 8013062:	4b09      	ldr	r3, [pc, #36]	; (8013088 <tcp_poll+0x3c>)
 8013064:	f240 7203 	movw	r2, #1795	; 0x703
 8013068:	4908      	ldr	r1, [pc, #32]	; (801308c <tcp_poll+0x40>)
 801306a:	4809      	ldr	r0, [pc, #36]	; (8013090 <tcp_poll+0x44>)
 801306c:	f007 fd10 	bl	801aa90 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	68ba      	ldr	r2, [r7, #8]
 8013074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	79fa      	ldrb	r2, [r7, #7]
 801307c:	771a      	strb	r2, [r3, #28]
}
 801307e:	bf00      	nop
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	0801cbe0 	.word	0x0801cbe0
 801308c:	0801cf78 	.word	0x0801cf78
 8013090:	0801cc1c 	.word	0x0801cc1c

08013094 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	7d1b      	ldrb	r3, [r3, #20]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d034      	beq.n	801310e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80130a8:	2b0a      	cmp	r3, #10
 80130aa:	d030      	beq.n	801310e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d02c      	beq.n	801310e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d007      	beq.n	80130cc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7fe fa79 	bl	80115b8 <pbuf_free>
      pcb->refused_data = NULL;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff fd76 	bl	8012bc2 <tcp_segs_free>
    pcb->ooseq = NULL;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2200      	movs	r2, #0
 80130da:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7ff fd6a 	bl	8012bc2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff fd65 	bl	8012bc2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2200      	movs	r2, #0
 80130fc:	669a      	str	r2, [r3, #104]	; 0x68
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2200      	movs	r2, #0
 801310a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801310e:	bf00      	nop
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
	...

08013118 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b084      	sub	sp, #16
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	683a      	ldr	r2, [r7, #0]
 8013128:	429a      	cmp	r2, r3
 801312a:	d105      	bne.n	8013138 <tcp_pcb_remove+0x20>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	68da      	ldr	r2, [r3, #12]
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	601a      	str	r2, [r3, #0]
 8013136:	e013      	b.n	8013160 <tcp_pcb_remove+0x48>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	60fb      	str	r3, [r7, #12]
 801313e:	e00c      	b.n	801315a <tcp_pcb_remove+0x42>
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	683a      	ldr	r2, [r7, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d104      	bne.n	8013154 <tcp_pcb_remove+0x3c>
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	68da      	ldr	r2, [r3, #12]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	60da      	str	r2, [r3, #12]
 8013152:	e005      	b.n	8013160 <tcp_pcb_remove+0x48>
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	60fb      	str	r3, [r7, #12]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d1ef      	bne.n	8013140 <tcp_pcb_remove+0x28>
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	2200      	movs	r2, #0
 8013164:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013166:	6838      	ldr	r0, [r7, #0]
 8013168:	f7ff ff94 	bl	8013094 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	7d1b      	ldrb	r3, [r3, #20]
 8013170:	2b0a      	cmp	r3, #10
 8013172:	d013      	beq.n	801319c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8013178:	2b01      	cmp	r3, #1
 801317a:	d00f      	beq.n	801319c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	7e9b      	ldrb	r3, [r3, #26]
 8013180:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8013184:	2b00      	cmp	r3, #0
 8013186:	d009      	beq.n	801319c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	7e9b      	ldrb	r3, [r3, #26]
 801318c:	f043 0302 	orr.w	r3, r3, #2
 8013190:	b2da      	uxtb	r2, r3
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013196:	6838      	ldr	r0, [r7, #0]
 8013198:	f003 f9be 	bl	8016518 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	7d1b      	ldrb	r3, [r3, #20]
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d020      	beq.n	80131e6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d006      	beq.n	80131ba <tcp_pcb_remove+0xa2>
 80131ac:	4b13      	ldr	r3, [pc, #76]	; (80131fc <tcp_pcb_remove+0xe4>)
 80131ae:	f240 7253 	movw	r2, #1875	; 0x753
 80131b2:	4913      	ldr	r1, [pc, #76]	; (8013200 <tcp_pcb_remove+0xe8>)
 80131b4:	4813      	ldr	r0, [pc, #76]	; (8013204 <tcp_pcb_remove+0xec>)
 80131b6:	f007 fc6b 	bl	801aa90 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d006      	beq.n	80131d0 <tcp_pcb_remove+0xb8>
 80131c2:	4b0e      	ldr	r3, [pc, #56]	; (80131fc <tcp_pcb_remove+0xe4>)
 80131c4:	f240 7254 	movw	r2, #1876	; 0x754
 80131c8:	490f      	ldr	r1, [pc, #60]	; (8013208 <tcp_pcb_remove+0xf0>)
 80131ca:	480e      	ldr	r0, [pc, #56]	; (8013204 <tcp_pcb_remove+0xec>)
 80131cc:	f007 fc60 	bl	801aa90 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d006      	beq.n	80131e6 <tcp_pcb_remove+0xce>
 80131d8:	4b08      	ldr	r3, [pc, #32]	; (80131fc <tcp_pcb_remove+0xe4>)
 80131da:	f240 7256 	movw	r2, #1878	; 0x756
 80131de:	490b      	ldr	r1, [pc, #44]	; (801320c <tcp_pcb_remove+0xf4>)
 80131e0:	4808      	ldr	r0, [pc, #32]	; (8013204 <tcp_pcb_remove+0xec>)
 80131e2:	f007 fc55 	bl	801aa90 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	2200      	movs	r2, #0
 80131ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	2200      	movs	r2, #0
 80131f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80131f2:	bf00      	nop
 80131f4:	3710      	adds	r7, #16
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	0801cbe0 	.word	0x0801cbe0
 8013200:	0801cf98 	.word	0x0801cf98
 8013204:	0801cc1c 	.word	0x0801cc1c
 8013208:	0801cfb0 	.word	0x0801cfb0
 801320c:	0801cfcc 	.word	0x0801cfcc

08013210 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013218:	4b07      	ldr	r3, [pc, #28]	; (8013238 <tcp_next_iss+0x28>)
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	4b07      	ldr	r3, [pc, #28]	; (801323c <tcp_next_iss+0x2c>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	4413      	add	r3, r2
 8013222:	4a05      	ldr	r2, [pc, #20]	; (8013238 <tcp_next_iss+0x28>)
 8013224:	6013      	str	r3, [r2, #0]
  return iss;
 8013226:	4b04      	ldr	r3, [pc, #16]	; (8013238 <tcp_next_iss+0x28>)
 8013228:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801322a:	4618      	mov	r0, r3
 801322c:	370c      	adds	r7, #12
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop
 8013238:	20000120 	.word	0x20000120
 801323c:	2000ab54 	.word	0x2000ab54

08013240 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	4603      	mov	r3, r0
 8013248:	6039      	str	r1, [r7, #0]
 801324a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801324c:	6838      	ldr	r0, [r7, #0]
 801324e:	f005 faeb 	bl	8018828 <ip4_route>
 8013252:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d101      	bne.n	801325e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801325a:	88fb      	ldrh	r3, [r7, #6]
 801325c:	e010      	b.n	8013280 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013262:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013264:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d008      	beq.n	801327e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801326c:	897b      	ldrh	r3, [r7, #10]
 801326e:	3b28      	subs	r3, #40	; 0x28
 8013270:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013272:	893a      	ldrh	r2, [r7, #8]
 8013274:	88fb      	ldrh	r3, [r7, #6]
 8013276:	4293      	cmp	r3, r2
 8013278:	bf28      	it	cs
 801327a:	4613      	movcs	r3, r2
 801327c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801327e:	88fb      	ldrh	r3, [r7, #6]
}
 8013280:	4618      	mov	r0, r3
 8013282:	3710      	adds	r7, #16
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b084      	sub	sp, #16
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013296:	e011      	b.n	80132bc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d108      	bne.n	80132b6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	f7fe feca 	bl	8012044 <tcp_abort>
      pcb = next;
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	60fb      	str	r3, [r7, #12]
 80132b4:	e002      	b.n	80132bc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1ea      	bne.n	8013298 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80132c2:	bf00      	nop
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
	...

080132cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b084      	sub	sp, #16
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d02c      	beq.n	8013336 <tcp_netif_ip_addr_changed+0x6a>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d028      	beq.n	8013336 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80132e4:	4b16      	ldr	r3, [pc, #88]	; (8013340 <tcp_netif_ip_addr_changed+0x74>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4619      	mov	r1, r3
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f7ff ffcc 	bl	8013288 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80132f0:	4b14      	ldr	r3, [pc, #80]	; (8013344 <tcp_netif_ip_addr_changed+0x78>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	4619      	mov	r1, r3
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f7ff ffc6 	bl	8013288 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d019      	beq.n	8013336 <tcp_netif_ip_addr_changed+0x6a>
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d015      	beq.n	8013336 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801330a:	4b0f      	ldr	r3, [pc, #60]	; (8013348 <tcp_netif_ip_addr_changed+0x7c>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	60fb      	str	r3, [r7, #12]
 8013310:	e00e      	b.n	8013330 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	68db      	ldr	r3, [r3, #12]
 8013316:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	429a      	cmp	r2, r3
 8013322:	d103      	bne.n	801332c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	681a      	ldr	r2, [r3, #0]
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	60fb      	str	r3, [r7, #12]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d1ed      	bne.n	8013312 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013336:	bf00      	nop
 8013338:	3710      	adds	r7, #16
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	2000ab50 	.word	0x2000ab50
 8013344:	2000ab5c 	.word	0x2000ab5c
 8013348:	2000ab58 	.word	0x2000ab58

0801334c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801334c:	b590      	push	{r4, r7, lr}
 801334e:	b08b      	sub	sp, #44	; 0x2c
 8013350:	af02      	add	r7, sp, #8
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	4a82      	ldr	r2, [pc, #520]	; (8013564 <tcp_input+0x218>)
 801335c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	895b      	ldrh	r3, [r3, #10]
 8013362:	2b13      	cmp	r3, #19
 8013364:	f240 838a 	bls.w	8013a7c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013368:	4b7f      	ldr	r3, [pc, #508]	; (8013568 <tcp_input+0x21c>)
 801336a:	695a      	ldr	r2, [r3, #20]
 801336c:	4b7e      	ldr	r3, [pc, #504]	; (8013568 <tcp_input+0x21c>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4619      	mov	r1, r3
 8013372:	4610      	mov	r0, r2
 8013374:	f005 fcd2 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 8013378:	4603      	mov	r3, r0
 801337a:	2b00      	cmp	r3, #0
 801337c:	f040 8380 	bne.w	8013a80 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013380:	4b79      	ldr	r3, [pc, #484]	; (8013568 <tcp_input+0x21c>)
 8013382:	695b      	ldr	r3, [r3, #20]
 8013384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013388:	2be0      	cmp	r3, #224	; 0xe0
 801338a:	f000 8379 	beq.w	8013a80 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801338e:	4b75      	ldr	r3, [pc, #468]	; (8013564 <tcp_input+0x218>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	899b      	ldrh	r3, [r3, #12]
 8013394:	b29b      	uxth	r3, r3
 8013396:	4618      	mov	r0, r3
 8013398:	f7fc ff74 	bl	8010284 <lwip_htons>
 801339c:	4603      	mov	r3, r0
 801339e:	0b1b      	lsrs	r3, r3, #12
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	009b      	lsls	r3, r3, #2
 80133a6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80133a8:	7cbb      	ldrb	r3, [r7, #18]
 80133aa:	2b13      	cmp	r3, #19
 80133ac:	f240 8368 	bls.w	8013a80 <tcp_input+0x734>
 80133b0:	7cbb      	ldrb	r3, [r7, #18]
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	891b      	ldrh	r3, [r3, #8]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	f200 8361 	bhi.w	8013a80 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80133be:	7cbb      	ldrb	r3, [r7, #18]
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	3b14      	subs	r3, #20
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	4b69      	ldr	r3, [pc, #420]	; (801356c <tcp_input+0x220>)
 80133c8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80133ca:	4b69      	ldr	r3, [pc, #420]	; (8013570 <tcp_input+0x224>)
 80133cc:	2200      	movs	r2, #0
 80133ce:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	895a      	ldrh	r2, [r3, #10]
 80133d4:	7cbb      	ldrb	r3, [r7, #18]
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	429a      	cmp	r2, r3
 80133da:	d30d      	bcc.n	80133f8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80133dc:	4b63      	ldr	r3, [pc, #396]	; (801356c <tcp_input+0x220>)
 80133de:	881a      	ldrh	r2, [r3, #0]
 80133e0:	4b64      	ldr	r3, [pc, #400]	; (8013574 <tcp_input+0x228>)
 80133e2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80133e4:	7cbb      	ldrb	r3, [r7, #18]
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	425b      	negs	r3, r3
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	b21b      	sxth	r3, r3
 80133ee:	4619      	mov	r1, r3
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f7fe f8bd 	bl	8011570 <pbuf_header>
 80133f6:	e055      	b.n	80134a4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d105      	bne.n	801340c <tcp_input+0xc0>
 8013400:	4b5d      	ldr	r3, [pc, #372]	; (8013578 <tcp_input+0x22c>)
 8013402:	22b2      	movs	r2, #178	; 0xb2
 8013404:	495d      	ldr	r1, [pc, #372]	; (801357c <tcp_input+0x230>)
 8013406:	485e      	ldr	r0, [pc, #376]	; (8013580 <tcp_input+0x234>)
 8013408:	f007 fb42 	bl	801aa90 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801340c:	f06f 0113 	mvn.w	r1, #19
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7fe f8ad 	bl	8011570 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	895a      	ldrh	r2, [r3, #10]
 801341a:	4b56      	ldr	r3, [pc, #344]	; (8013574 <tcp_input+0x228>)
 801341c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801341e:	4b53      	ldr	r3, [pc, #332]	; (801356c <tcp_input+0x220>)
 8013420:	881a      	ldrh	r2, [r3, #0]
 8013422:	4b54      	ldr	r3, [pc, #336]	; (8013574 <tcp_input+0x228>)
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	1ad3      	subs	r3, r2, r3
 8013428:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801342a:	4b52      	ldr	r3, [pc, #328]	; (8013574 <tcp_input+0x228>)
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	425b      	negs	r3, r3
 8013430:	b29b      	uxth	r3, r3
 8013432:	b21b      	sxth	r3, r3
 8013434:	4619      	mov	r1, r3
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f7fe f89a 	bl	8011570 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	895b      	ldrh	r3, [r3, #10]
 8013442:	8a3a      	ldrh	r2, [r7, #16]
 8013444:	429a      	cmp	r2, r3
 8013446:	f200 831d 	bhi.w	8013a84 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	4a47      	ldr	r2, [pc, #284]	; (8013570 <tcp_input+0x224>)
 8013452:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681a      	ldr	r2, [r3, #0]
 8013458:	8a3b      	ldrh	r3, [r7, #16]
 801345a:	425b      	negs	r3, r3
 801345c:	b29b      	uxth	r3, r3
 801345e:	b21b      	sxth	r3, r3
 8013460:	4619      	mov	r1, r3
 8013462:	4610      	mov	r0, r2
 8013464:	f7fe f884 	bl	8011570 <pbuf_header>
    p->tot_len -= opt2len;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	891a      	ldrh	r2, [r3, #8]
 801346c:	8a3b      	ldrh	r3, [r7, #16]
 801346e:	1ad3      	subs	r3, r2, r3
 8013470:	b29a      	uxth	r2, r3
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	895b      	ldrh	r3, [r3, #10]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d005      	beq.n	801348a <tcp_input+0x13e>
 801347e:	4b3e      	ldr	r3, [pc, #248]	; (8013578 <tcp_input+0x22c>)
 8013480:	22cf      	movs	r2, #207	; 0xcf
 8013482:	4940      	ldr	r1, [pc, #256]	; (8013584 <tcp_input+0x238>)
 8013484:	483e      	ldr	r0, [pc, #248]	; (8013580 <tcp_input+0x234>)
 8013486:	f007 fb03 	bl	801aa90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	891a      	ldrh	r2, [r3, #8]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	891b      	ldrh	r3, [r3, #8]
 8013494:	429a      	cmp	r2, r3
 8013496:	d005      	beq.n	80134a4 <tcp_input+0x158>
 8013498:	4b37      	ldr	r3, [pc, #220]	; (8013578 <tcp_input+0x22c>)
 801349a:	22d0      	movs	r2, #208	; 0xd0
 801349c:	493a      	ldr	r1, [pc, #232]	; (8013588 <tcp_input+0x23c>)
 801349e:	4838      	ldr	r0, [pc, #224]	; (8013580 <tcp_input+0x234>)
 80134a0:	f007 faf6 	bl	801aa90 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80134a4:	4b2f      	ldr	r3, [pc, #188]	; (8013564 <tcp_input+0x218>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	881b      	ldrh	r3, [r3, #0]
 80134aa:	b29a      	uxth	r2, r3
 80134ac:	4b2d      	ldr	r3, [pc, #180]	; (8013564 <tcp_input+0x218>)
 80134ae:	681c      	ldr	r4, [r3, #0]
 80134b0:	4610      	mov	r0, r2
 80134b2:	f7fc fee7 	bl	8010284 <lwip_htons>
 80134b6:	4603      	mov	r3, r0
 80134b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80134ba:	4b2a      	ldr	r3, [pc, #168]	; (8013564 <tcp_input+0x218>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	885b      	ldrh	r3, [r3, #2]
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	4b28      	ldr	r3, [pc, #160]	; (8013564 <tcp_input+0x218>)
 80134c4:	681c      	ldr	r4, [r3, #0]
 80134c6:	4610      	mov	r0, r2
 80134c8:	f7fc fedc 	bl	8010284 <lwip_htons>
 80134cc:	4603      	mov	r3, r0
 80134ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80134d0:	4b24      	ldr	r3, [pc, #144]	; (8013564 <tcp_input+0x218>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	685a      	ldr	r2, [r3, #4]
 80134d6:	4b23      	ldr	r3, [pc, #140]	; (8013564 <tcp_input+0x218>)
 80134d8:	681c      	ldr	r4, [r3, #0]
 80134da:	4610      	mov	r0, r2
 80134dc:	f7fc fee0 	bl	80102a0 <lwip_htonl>
 80134e0:	4603      	mov	r3, r0
 80134e2:	6063      	str	r3, [r4, #4]
 80134e4:	6863      	ldr	r3, [r4, #4]
 80134e6:	4a29      	ldr	r2, [pc, #164]	; (801358c <tcp_input+0x240>)
 80134e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80134ea:	4b1e      	ldr	r3, [pc, #120]	; (8013564 <tcp_input+0x218>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	689a      	ldr	r2, [r3, #8]
 80134f0:	4b1c      	ldr	r3, [pc, #112]	; (8013564 <tcp_input+0x218>)
 80134f2:	681c      	ldr	r4, [r3, #0]
 80134f4:	4610      	mov	r0, r2
 80134f6:	f7fc fed3 	bl	80102a0 <lwip_htonl>
 80134fa:	4603      	mov	r3, r0
 80134fc:	60a3      	str	r3, [r4, #8]
 80134fe:	68a3      	ldr	r3, [r4, #8]
 8013500:	4a23      	ldr	r2, [pc, #140]	; (8013590 <tcp_input+0x244>)
 8013502:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013504:	4b17      	ldr	r3, [pc, #92]	; (8013564 <tcp_input+0x218>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	89db      	ldrh	r3, [r3, #14]
 801350a:	b29a      	uxth	r2, r3
 801350c:	4b15      	ldr	r3, [pc, #84]	; (8013564 <tcp_input+0x218>)
 801350e:	681c      	ldr	r4, [r3, #0]
 8013510:	4610      	mov	r0, r2
 8013512:	f7fc feb7 	bl	8010284 <lwip_htons>
 8013516:	4603      	mov	r3, r0
 8013518:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801351a:	4b12      	ldr	r3, [pc, #72]	; (8013564 <tcp_input+0x218>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	899b      	ldrh	r3, [r3, #12]
 8013520:	b29b      	uxth	r3, r3
 8013522:	4618      	mov	r0, r3
 8013524:	f7fc feae 	bl	8010284 <lwip_htons>
 8013528:	4603      	mov	r3, r0
 801352a:	b2db      	uxtb	r3, r3
 801352c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013530:	b2da      	uxtb	r2, r3
 8013532:	4b18      	ldr	r3, [pc, #96]	; (8013594 <tcp_input+0x248>)
 8013534:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	891a      	ldrh	r2, [r3, #8]
 801353a:	4b16      	ldr	r3, [pc, #88]	; (8013594 <tcp_input+0x248>)
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	f003 0303 	and.w	r3, r3, #3
 8013542:	2b00      	cmp	r3, #0
 8013544:	bf14      	ite	ne
 8013546:	2301      	movne	r3, #1
 8013548:	2300      	moveq	r3, #0
 801354a:	b2db      	uxtb	r3, r3
 801354c:	b29b      	uxth	r3, r3
 801354e:	4413      	add	r3, r2
 8013550:	b29a      	uxth	r2, r3
 8013552:	4b11      	ldr	r3, [pc, #68]	; (8013598 <tcp_input+0x24c>)
 8013554:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013556:	2300      	movs	r3, #0
 8013558:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801355a:	4b10      	ldr	r3, [pc, #64]	; (801359c <tcp_input+0x250>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	61fb      	str	r3, [r7, #28]
 8013560:	e082      	b.n	8013668 <tcp_input+0x31c>
 8013562:	bf00      	nop
 8013564:	20004218 	.word	0x20004218
 8013568:	20007648 	.word	0x20007648
 801356c:	2000421c 	.word	0x2000421c
 8013570:	20004220 	.word	0x20004220
 8013574:	2000421e 	.word	0x2000421e
 8013578:	0801cfe4 	.word	0x0801cfe4
 801357c:	0801d018 	.word	0x0801d018
 8013580:	0801d028 	.word	0x0801d028
 8013584:	0801d050 	.word	0x0801d050
 8013588:	0801d05c 	.word	0x0801d05c
 801358c:	20004228 	.word	0x20004228
 8013590:	2000422c 	.word	0x2000422c
 8013594:	20004234 	.word	0x20004234
 8013598:	20004232 	.word	0x20004232
 801359c:	2000ab50 	.word	0x2000ab50
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	7d1b      	ldrb	r3, [r3, #20]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d105      	bne.n	80135b4 <tcp_input+0x268>
 80135a8:	4b8f      	ldr	r3, [pc, #572]	; (80137e8 <tcp_input+0x49c>)
 80135aa:	22e2      	movs	r2, #226	; 0xe2
 80135ac:	498f      	ldr	r1, [pc, #572]	; (80137ec <tcp_input+0x4a0>)
 80135ae:	4890      	ldr	r0, [pc, #576]	; (80137f0 <tcp_input+0x4a4>)
 80135b0:	f007 fa6e 	bl	801aa90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	7d1b      	ldrb	r3, [r3, #20]
 80135b8:	2b0a      	cmp	r3, #10
 80135ba:	d105      	bne.n	80135c8 <tcp_input+0x27c>
 80135bc:	4b8a      	ldr	r3, [pc, #552]	; (80137e8 <tcp_input+0x49c>)
 80135be:	22e3      	movs	r2, #227	; 0xe3
 80135c0:	498c      	ldr	r1, [pc, #560]	; (80137f4 <tcp_input+0x4a8>)
 80135c2:	488b      	ldr	r0, [pc, #556]	; (80137f0 <tcp_input+0x4a4>)
 80135c4:	f007 fa64 	bl	801aa90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	7d1b      	ldrb	r3, [r3, #20]
 80135cc:	2b01      	cmp	r3, #1
 80135ce:	d105      	bne.n	80135dc <tcp_input+0x290>
 80135d0:	4b85      	ldr	r3, [pc, #532]	; (80137e8 <tcp_input+0x49c>)
 80135d2:	22e4      	movs	r2, #228	; 0xe4
 80135d4:	4988      	ldr	r1, [pc, #544]	; (80137f8 <tcp_input+0x4ac>)
 80135d6:	4886      	ldr	r0, [pc, #536]	; (80137f0 <tcp_input+0x4a4>)
 80135d8:	f007 fa5a 	bl	801aa90 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	8b1a      	ldrh	r2, [r3, #24]
 80135e0:	4b86      	ldr	r3, [pc, #536]	; (80137fc <tcp_input+0x4b0>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	881b      	ldrh	r3, [r3, #0]
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d138      	bne.n	801365e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	8ada      	ldrh	r2, [r3, #22]
 80135f0:	4b82      	ldr	r3, [pc, #520]	; (80137fc <tcp_input+0x4b0>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	885b      	ldrh	r3, [r3, #2]
 80135f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d130      	bne.n	801365e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	685a      	ldr	r2, [r3, #4]
 8013600:	4b7f      	ldr	r3, [pc, #508]	; (8013800 <tcp_input+0x4b4>)
 8013602:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013604:	429a      	cmp	r2, r3
 8013606:	d12a      	bne.n	801365e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	681a      	ldr	r2, [r3, #0]
 801360c:	4b7c      	ldr	r3, [pc, #496]	; (8013800 <tcp_input+0x4b4>)
 801360e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013610:	429a      	cmp	r2, r3
 8013612:	d124      	bne.n	801365e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	68db      	ldr	r3, [r3, #12]
 8013618:	69fa      	ldr	r2, [r7, #28]
 801361a:	429a      	cmp	r2, r3
 801361c:	d105      	bne.n	801362a <tcp_input+0x2de>
 801361e:	4b72      	ldr	r3, [pc, #456]	; (80137e8 <tcp_input+0x49c>)
 8013620:	22ec      	movs	r2, #236	; 0xec
 8013622:	4978      	ldr	r1, [pc, #480]	; (8013804 <tcp_input+0x4b8>)
 8013624:	4872      	ldr	r0, [pc, #456]	; (80137f0 <tcp_input+0x4a4>)
 8013626:	f007 fa33 	bl	801aa90 <iprintf>
      if (prev != NULL) {
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00a      	beq.n	8013646 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	68da      	ldr	r2, [r3, #12]
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013638:	4b73      	ldr	r3, [pc, #460]	; (8013808 <tcp_input+0x4bc>)
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013640:	4a71      	ldr	r2, [pc, #452]	; (8013808 <tcp_input+0x4bc>)
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	68db      	ldr	r3, [r3, #12]
 801364a:	69fa      	ldr	r2, [r7, #28]
 801364c:	429a      	cmp	r2, r3
 801364e:	d10f      	bne.n	8013670 <tcp_input+0x324>
 8013650:	4b65      	ldr	r3, [pc, #404]	; (80137e8 <tcp_input+0x49c>)
 8013652:	22f4      	movs	r2, #244	; 0xf4
 8013654:	496d      	ldr	r1, [pc, #436]	; (801380c <tcp_input+0x4c0>)
 8013656:	4866      	ldr	r0, [pc, #408]	; (80137f0 <tcp_input+0x4a4>)
 8013658:	f007 fa1a 	bl	801aa90 <iprintf>
      break;
 801365c:	e008      	b.n	8013670 <tcp_input+0x324>
    }
    prev = pcb;
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013662:	69fb      	ldr	r3, [r7, #28]
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	61fb      	str	r3, [r7, #28]
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d198      	bne.n	80135a0 <tcp_input+0x254>
 801366e:	e000      	b.n	8013672 <tcp_input+0x326>
      break;
 8013670:	bf00      	nop
  }

  if (pcb == NULL) {
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d173      	bne.n	8013760 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013678:	4b65      	ldr	r3, [pc, #404]	; (8013810 <tcp_input+0x4c4>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	61fb      	str	r3, [r7, #28]
 801367e:	e02f      	b.n	80136e0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	7d1b      	ldrb	r3, [r3, #20]
 8013684:	2b0a      	cmp	r3, #10
 8013686:	d005      	beq.n	8013694 <tcp_input+0x348>
 8013688:	4b57      	ldr	r3, [pc, #348]	; (80137e8 <tcp_input+0x49c>)
 801368a:	22fe      	movs	r2, #254	; 0xfe
 801368c:	4961      	ldr	r1, [pc, #388]	; (8013814 <tcp_input+0x4c8>)
 801368e:	4858      	ldr	r0, [pc, #352]	; (80137f0 <tcp_input+0x4a4>)
 8013690:	f007 f9fe 	bl	801aa90 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	8b1a      	ldrh	r2, [r3, #24]
 8013698:	4b58      	ldr	r3, [pc, #352]	; (80137fc <tcp_input+0x4b0>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	881b      	ldrh	r3, [r3, #0]
 801369e:	b29b      	uxth	r3, r3
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d11a      	bne.n	80136da <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	8ada      	ldrh	r2, [r3, #22]
 80136a8:	4b54      	ldr	r3, [pc, #336]	; (80137fc <tcp_input+0x4b0>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	885b      	ldrh	r3, [r3, #2]
 80136ae:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d112      	bne.n	80136da <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	685a      	ldr	r2, [r3, #4]
 80136b8:	4b51      	ldr	r3, [pc, #324]	; (8013800 <tcp_input+0x4b4>)
 80136ba:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80136bc:	429a      	cmp	r2, r3
 80136be:	d10c      	bne.n	80136da <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	4b4e      	ldr	r3, [pc, #312]	; (8013800 <tcp_input+0x4b4>)
 80136c6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d106      	bne.n	80136da <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80136cc:	69f8      	ldr	r0, [r7, #28]
 80136ce:	f000 fb15 	bl	8013cfc <tcp_timewait_input>
        pbuf_free(p);
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f7fd ff70 	bl	80115b8 <pbuf_free>
        return;
 80136d8:	e1da      	b.n	8013a90 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	61fb      	str	r3, [r7, #28]
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d1cc      	bne.n	8013680 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80136e6:	2300      	movs	r3, #0
 80136e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80136ea:	4b4b      	ldr	r3, [pc, #300]	; (8013818 <tcp_input+0x4cc>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	617b      	str	r3, [r7, #20]
 80136f0:	e019      	b.n	8013726 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	8ada      	ldrh	r2, [r3, #22]
 80136f6:	4b41      	ldr	r3, [pc, #260]	; (80137fc <tcp_input+0x4b0>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	885b      	ldrh	r3, [r3, #2]
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	429a      	cmp	r2, r3
 8013700:	d10c      	bne.n	801371c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	4b3e      	ldr	r3, [pc, #248]	; (8013800 <tcp_input+0x4b4>)
 8013708:	695b      	ldr	r3, [r3, #20]
 801370a:	429a      	cmp	r2, r3
 801370c:	d00f      	beq.n	801372e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00d      	beq.n	8013730 <tcp_input+0x3e4>
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d009      	beq.n	8013730 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	68db      	ldr	r3, [r3, #12]
 8013724:	617b      	str	r3, [r7, #20]
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1e2      	bne.n	80136f2 <tcp_input+0x3a6>
 801372c:	e000      	b.n	8013730 <tcp_input+0x3e4>
            break;
 801372e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d014      	beq.n	8013760 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00a      	beq.n	8013752 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	68da      	ldr	r2, [r3, #12]
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013744:	4b34      	ldr	r3, [pc, #208]	; (8013818 <tcp_input+0x4cc>)
 8013746:	681a      	ldr	r2, [r3, #0]
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801374c:	4a32      	ldr	r2, [pc, #200]	; (8013818 <tcp_input+0x4cc>)
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8013752:	6978      	ldr	r0, [r7, #20]
 8013754:	f000 f9f0 	bl	8013b38 <tcp_listen_input>
      pbuf_free(p);
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7fd ff2d 	bl	80115b8 <pbuf_free>
      return;
 801375e:	e197      	b.n	8013a90 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	2b00      	cmp	r3, #0
 8013764:	f000 8164 	beq.w	8013a30 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013768:	4b2c      	ldr	r3, [pc, #176]	; (801381c <tcp_input+0x4d0>)
 801376a:	2200      	movs	r2, #0
 801376c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	891a      	ldrh	r2, [r3, #8]
 8013772:	4b2a      	ldr	r3, [pc, #168]	; (801381c <tcp_input+0x4d0>)
 8013774:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013776:	4a29      	ldr	r2, [pc, #164]	; (801381c <tcp_input+0x4d0>)
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801377c:	4b1f      	ldr	r3, [pc, #124]	; (80137fc <tcp_input+0x4b0>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4a26      	ldr	r2, [pc, #152]	; (801381c <tcp_input+0x4d0>)
 8013782:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013784:	4b26      	ldr	r3, [pc, #152]	; (8013820 <tcp_input+0x4d4>)
 8013786:	2200      	movs	r2, #0
 8013788:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801378a:	4b26      	ldr	r3, [pc, #152]	; (8013824 <tcp_input+0x4d8>)
 801378c:	2200      	movs	r2, #0
 801378e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013790:	4b25      	ldr	r3, [pc, #148]	; (8013828 <tcp_input+0x4dc>)
 8013792:	2200      	movs	r2, #0
 8013794:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013796:	4b25      	ldr	r3, [pc, #148]	; (801382c <tcp_input+0x4e0>)
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	f003 0308 	and.w	r3, r3, #8
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d006      	beq.n	80137b0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	7b5b      	ldrb	r3, [r3, #13]
 80137a6:	f043 0301 	orr.w	r3, r3, #1
 80137aa:	b2da      	uxtb	r2, r3
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d03d      	beq.n	8013834 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80137b8:	69f8      	ldr	r0, [r7, #28]
 80137ba:	f7ff f999 	bl	8012af0 <tcp_process_refused_data>
 80137be:	4603      	mov	r3, r0
 80137c0:	f113 0f0d 	cmn.w	r3, #13
 80137c4:	d007      	beq.n	80137d6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d032      	beq.n	8013834 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80137ce:	4b18      	ldr	r3, [pc, #96]	; (8013830 <tcp_input+0x4e4>)
 80137d0:	881b      	ldrh	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d02e      	beq.n	8013834 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f040 8108 	bne.w	80139f0 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80137e0:	69f8      	ldr	r0, [r7, #28]
 80137e2:	f002 fe3d 	bl	8016460 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80137e6:	e103      	b.n	80139f0 <tcp_input+0x6a4>
 80137e8:	0801cfe4 	.word	0x0801cfe4
 80137ec:	0801d07c 	.word	0x0801d07c
 80137f0:	0801d028 	.word	0x0801d028
 80137f4:	0801d0a4 	.word	0x0801d0a4
 80137f8:	0801d0d0 	.word	0x0801d0d0
 80137fc:	20004218 	.word	0x20004218
 8013800:	20007648 	.word	0x20007648
 8013804:	0801d0f8 	.word	0x0801d0f8
 8013808:	2000ab50 	.word	0x2000ab50
 801380c:	0801d124 	.word	0x0801d124
 8013810:	2000ab60 	.word	0x2000ab60
 8013814:	0801d150 	.word	0x0801d150
 8013818:	2000ab58 	.word	0x2000ab58
 801381c:	20004208 	.word	0x20004208
 8013820:	20004238 	.word	0x20004238
 8013824:	20004235 	.word	0x20004235
 8013828:	20004230 	.word	0x20004230
 801382c:	20004234 	.word	0x20004234
 8013830:	20004232 	.word	0x20004232
      }
    }
    tcp_input_pcb = pcb;
 8013834:	4a98      	ldr	r2, [pc, #608]	; (8013a98 <tcp_input+0x74c>)
 8013836:	69fb      	ldr	r3, [r7, #28]
 8013838:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801383a:	69f8      	ldr	r0, [r7, #28]
 801383c:	f000 fac6 	bl	8013dcc <tcp_process>
 8013840:	4603      	mov	r3, r0
 8013842:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013844:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013848:	f113 0f0d 	cmn.w	r3, #13
 801384c:	f000 80d2 	beq.w	80139f4 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8013850:	4b92      	ldr	r3, [pc, #584]	; (8013a9c <tcp_input+0x750>)
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	f003 0308 	and.w	r3, r3, #8
 8013858:	2b00      	cmp	r3, #0
 801385a:	d016      	beq.n	801388a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013862:	2b00      	cmp	r3, #0
 8013864:	d008      	beq.n	8013878 <tcp_input+0x52c>
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801386c:	69fa      	ldr	r2, [r7, #28]
 801386e:	6912      	ldr	r2, [r2, #16]
 8013870:	f06f 010d 	mvn.w	r1, #13
 8013874:	4610      	mov	r0, r2
 8013876:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013878:	69f9      	ldr	r1, [r7, #28]
 801387a:	4889      	ldr	r0, [pc, #548]	; (8013aa0 <tcp_input+0x754>)
 801387c:	f7ff fc4c 	bl	8013118 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8013880:	69f9      	ldr	r1, [r7, #28]
 8013882:	2001      	movs	r0, #1
 8013884:	f7fd f93e 	bl	8010b04 <memp_free>
 8013888:	e0bf      	b.n	8013a0a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 801388a:	2300      	movs	r3, #0
 801388c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801388e:	4b85      	ldr	r3, [pc, #532]	; (8013aa4 <tcp_input+0x758>)
 8013890:	881b      	ldrh	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d01b      	beq.n	80138ce <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013896:	4b83      	ldr	r3, [pc, #524]	; (8013aa4 <tcp_input+0x758>)
 8013898:	881b      	ldrh	r3, [r3, #0]
 801389a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d009      	beq.n	80138b8 <tcp_input+0x56c>
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138a8:	69fa      	ldr	r2, [r7, #28]
 80138aa:	6910      	ldr	r0, [r2, #16]
 80138ac:	89fa      	ldrh	r2, [r7, #14]
 80138ae:	69f9      	ldr	r1, [r7, #28]
 80138b0:	4798      	blx	r3
 80138b2:	4603      	mov	r3, r0
 80138b4:	74fb      	strb	r3, [r7, #19]
 80138b6:	e001      	b.n	80138bc <tcp_input+0x570>
 80138b8:	2300      	movs	r3, #0
 80138ba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80138bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138c0:	f113 0f0d 	cmn.w	r3, #13
 80138c4:	f000 8098 	beq.w	80139f8 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 80138c8:	4b76      	ldr	r3, [pc, #472]	; (8013aa4 <tcp_input+0x758>)
 80138ca:	2200      	movs	r2, #0
 80138cc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80138ce:	69f8      	ldr	r0, [r7, #28]
 80138d0:	f000 f900 	bl	8013ad4 <tcp_input_delayed_close>
 80138d4:	4603      	mov	r3, r0
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f040 8090 	bne.w	80139fc <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80138dc:	4b72      	ldr	r3, [pc, #456]	; (8013aa8 <tcp_input+0x75c>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d041      	beq.n	8013968 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d006      	beq.n	80138fa <tcp_input+0x5ae>
 80138ec:	4b6f      	ldr	r3, [pc, #444]	; (8013aac <tcp_input+0x760>)
 80138ee:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80138f2:	496f      	ldr	r1, [pc, #444]	; (8013ab0 <tcp_input+0x764>)
 80138f4:	486f      	ldr	r0, [pc, #444]	; (8013ab4 <tcp_input+0x768>)
 80138f6:	f007 f8cb 	bl	801aa90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	7e9b      	ldrb	r3, [r3, #26]
 80138fe:	f003 0310 	and.w	r3, r3, #16
 8013902:	2b00      	cmp	r3, #0
 8013904:	d008      	beq.n	8013918 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013906:	4b68      	ldr	r3, [pc, #416]	; (8013aa8 <tcp_input+0x75c>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4618      	mov	r0, r3
 801390c:	f7fd fe54 	bl	80115b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013910:	69f8      	ldr	r0, [r7, #28]
 8013912:	f7fe fb97 	bl	8012044 <tcp_abort>
            goto aborted;
 8013916:	e078      	b.n	8013a0a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00c      	beq.n	801393c <tcp_input+0x5f0>
 8013922:	69fb      	ldr	r3, [r7, #28]
 8013924:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	6918      	ldr	r0, [r3, #16]
 801392c:	4b5e      	ldr	r3, [pc, #376]	; (8013aa8 <tcp_input+0x75c>)
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	2300      	movs	r3, #0
 8013932:	69f9      	ldr	r1, [r7, #28]
 8013934:	47a0      	blx	r4
 8013936:	4603      	mov	r3, r0
 8013938:	74fb      	strb	r3, [r7, #19]
 801393a:	e008      	b.n	801394e <tcp_input+0x602>
 801393c:	4b5a      	ldr	r3, [pc, #360]	; (8013aa8 <tcp_input+0x75c>)
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	2300      	movs	r3, #0
 8013942:	69f9      	ldr	r1, [r7, #28]
 8013944:	2000      	movs	r0, #0
 8013946:	f7ff f984 	bl	8012c52 <tcp_recv_null>
 801394a:	4603      	mov	r3, r0
 801394c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801394e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013952:	f113 0f0d 	cmn.w	r3, #13
 8013956:	d053      	beq.n	8013a00 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013958:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d003      	beq.n	8013968 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013960:	4b51      	ldr	r3, [pc, #324]	; (8013aa8 <tcp_input+0x75c>)
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013968:	4b4c      	ldr	r3, [pc, #304]	; (8013a9c <tcp_input+0x750>)
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	f003 0320 	and.w	r3, r3, #32
 8013970:	2b00      	cmp	r3, #0
 8013972:	d030      	beq.n	80139d6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013978:	2b00      	cmp	r3, #0
 801397a:	d009      	beq.n	8013990 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013980:	7b5a      	ldrb	r2, [r3, #13]
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013986:	f042 0220 	orr.w	r2, r2, #32
 801398a:	b2d2      	uxtb	r2, r2
 801398c:	735a      	strb	r2, [r3, #13]
 801398e:	e022      	b.n	80139d6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013994:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013998:	d005      	beq.n	80139a6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801399e:	3301      	adds	r3, #1
 80139a0:	b29a      	uxth	r2, r3
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d00b      	beq.n	80139c8 <tcp_input+0x67c>
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	6918      	ldr	r0, [r3, #16]
 80139ba:	2300      	movs	r3, #0
 80139bc:	2200      	movs	r2, #0
 80139be:	69f9      	ldr	r1, [r7, #28]
 80139c0:	47a0      	blx	r4
 80139c2:	4603      	mov	r3, r0
 80139c4:	74fb      	strb	r3, [r7, #19]
 80139c6:	e001      	b.n	80139cc <tcp_input+0x680>
 80139c8:	2300      	movs	r3, #0
 80139ca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80139cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139d0:	f113 0f0d 	cmn.w	r3, #13
 80139d4:	d016      	beq.n	8013a04 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80139d6:	4b30      	ldr	r3, [pc, #192]	; (8013a98 <tcp_input+0x74c>)
 80139d8:	2200      	movs	r2, #0
 80139da:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80139dc:	69f8      	ldr	r0, [r7, #28]
 80139de:	f000 f879 	bl	8013ad4 <tcp_input_delayed_close>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d10f      	bne.n	8013a08 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80139e8:	69f8      	ldr	r0, [r7, #28]
 80139ea:	f002 fd95 	bl	8016518 <tcp_output>
 80139ee:	e00c      	b.n	8013a0a <tcp_input+0x6be>
        goto aborted;
 80139f0:	bf00      	nop
 80139f2:	e00a      	b.n	8013a0a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80139f4:	bf00      	nop
 80139f6:	e008      	b.n	8013a0a <tcp_input+0x6be>
              goto aborted;
 80139f8:	bf00      	nop
 80139fa:	e006      	b.n	8013a0a <tcp_input+0x6be>
          goto aborted;
 80139fc:	bf00      	nop
 80139fe:	e004      	b.n	8013a0a <tcp_input+0x6be>
            goto aborted;
 8013a00:	bf00      	nop
 8013a02:	e002      	b.n	8013a0a <tcp_input+0x6be>
              goto aborted;
 8013a04:	bf00      	nop
 8013a06:	e000      	b.n	8013a0a <tcp_input+0x6be>
          goto aborted;
 8013a08:	bf00      	nop
    tcp_input_pcb = NULL;
 8013a0a:	4b23      	ldr	r3, [pc, #140]	; (8013a98 <tcp_input+0x74c>)
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013a10:	4b25      	ldr	r3, [pc, #148]	; (8013aa8 <tcp_input+0x75c>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8013a16:	4b28      	ldr	r3, [pc, #160]	; (8013ab8 <tcp_input+0x76c>)
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d037      	beq.n	8013a8e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8013a1e:	4b26      	ldr	r3, [pc, #152]	; (8013ab8 <tcp_input+0x76c>)
 8013a20:	685b      	ldr	r3, [r3, #4]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7fd fdc8 	bl	80115b8 <pbuf_free>
      inseg.p = NULL;
 8013a28:	4b23      	ldr	r3, [pc, #140]	; (8013ab8 <tcp_input+0x76c>)
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013a2e:	e02e      	b.n	8013a8e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013a30:	4b22      	ldr	r3, [pc, #136]	; (8013abc <tcp_input+0x770>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	899b      	ldrh	r3, [r3, #12]
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7fc fc23 	bl	8010284 <lwip_htons>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d115      	bne.n	8013a74 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a48:	4b1d      	ldr	r3, [pc, #116]	; (8013ac0 <tcp_input+0x774>)
 8013a4a:	6818      	ldr	r0, [r3, #0]
 8013a4c:	4b1d      	ldr	r3, [pc, #116]	; (8013ac4 <tcp_input+0x778>)
 8013a4e:	881b      	ldrh	r3, [r3, #0]
 8013a50:	461a      	mov	r2, r3
 8013a52:	4b1d      	ldr	r3, [pc, #116]	; (8013ac8 <tcp_input+0x77c>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a58:	4b18      	ldr	r3, [pc, #96]	; (8013abc <tcp_input+0x770>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a5c:	885b      	ldrh	r3, [r3, #2]
 8013a5e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a60:	4a16      	ldr	r2, [pc, #88]	; (8013abc <tcp_input+0x770>)
 8013a62:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a64:	8812      	ldrh	r2, [r2, #0]
 8013a66:	b292      	uxth	r2, r2
 8013a68:	9201      	str	r2, [sp, #4]
 8013a6a:	9300      	str	r3, [sp, #0]
 8013a6c:	4b17      	ldr	r3, [pc, #92]	; (8013acc <tcp_input+0x780>)
 8013a6e:	4a18      	ldr	r2, [pc, #96]	; (8013ad0 <tcp_input+0x784>)
 8013a70:	f002 ffdc 	bl	8016a2c <tcp_rst>
    pbuf_free(p);
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7fd fd9f 	bl	80115b8 <pbuf_free>
  return;
 8013a7a:	e008      	b.n	8013a8e <tcp_input+0x742>
    goto dropped;
 8013a7c:	bf00      	nop
 8013a7e:	e002      	b.n	8013a86 <tcp_input+0x73a>
dropped:
 8013a80:	bf00      	nop
 8013a82:	e000      	b.n	8013a86 <tcp_input+0x73a>
      goto dropped;
 8013a84:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7fd fd96 	bl	80115b8 <pbuf_free>
 8013a8c:	e000      	b.n	8013a90 <tcp_input+0x744>
  return;
 8013a8e:	bf00      	nop
}
 8013a90:	3724      	adds	r7, #36	; 0x24
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd90      	pop	{r4, r7, pc}
 8013a96:	bf00      	nop
 8013a98:	2000ab64 	.word	0x2000ab64
 8013a9c:	20004235 	.word	0x20004235
 8013aa0:	2000ab50 	.word	0x2000ab50
 8013aa4:	20004230 	.word	0x20004230
 8013aa8:	20004238 	.word	0x20004238
 8013aac:	0801cfe4 	.word	0x0801cfe4
 8013ab0:	0801d180 	.word	0x0801d180
 8013ab4:	0801d028 	.word	0x0801d028
 8013ab8:	20004208 	.word	0x20004208
 8013abc:	20004218 	.word	0x20004218
 8013ac0:	2000422c 	.word	0x2000422c
 8013ac4:	20004232 	.word	0x20004232
 8013ac8:	20004228 	.word	0x20004228
 8013acc:	20007658 	.word	0x20007658
 8013ad0:	2000765c 	.word	0x2000765c

08013ad4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8013adc:	4b14      	ldr	r3, [pc, #80]	; (8013b30 <tcp_input_delayed_close+0x5c>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	f003 0310 	and.w	r3, r3, #16
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d01d      	beq.n	8013b24 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	7e9b      	ldrb	r3, [r3, #26]
 8013aec:	f003 0310 	and.w	r3, r3, #16
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10d      	bne.n	8013b10 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d008      	beq.n	8013b10 <tcp_input_delayed_close+0x3c>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	6912      	ldr	r2, [r2, #16]
 8013b08:	f06f 010e 	mvn.w	r1, #14
 8013b0c:	4610      	mov	r0, r2
 8013b0e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013b10:	6879      	ldr	r1, [r7, #4]
 8013b12:	4808      	ldr	r0, [pc, #32]	; (8013b34 <tcp_input_delayed_close+0x60>)
 8013b14:	f7ff fb00 	bl	8013118 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8013b18:	6879      	ldr	r1, [r7, #4]
 8013b1a:	2001      	movs	r0, #1
 8013b1c:	f7fc fff2 	bl	8010b04 <memp_free>
    return 1;
 8013b20:	2301      	movs	r3, #1
 8013b22:	e000      	b.n	8013b26 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8013b24:	2300      	movs	r3, #0
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	20004235 	.word	0x20004235
 8013b34:	2000ab50 	.word	0x2000ab50

08013b38 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b088      	sub	sp, #32
 8013b3c:	af02      	add	r7, sp, #8
 8013b3e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013b40:	4b64      	ldr	r3, [pc, #400]	; (8013cd4 <tcp_listen_input+0x19c>)
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	f003 0304 	and.w	r3, r3, #4
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f040 80bc 	bne.w	8013cc6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013b4e:	4b61      	ldr	r3, [pc, #388]	; (8013cd4 <tcp_listen_input+0x19c>)
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	f003 0310 	and.w	r3, r3, #16
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d016      	beq.n	8013b88 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b5a:	4b5f      	ldr	r3, [pc, #380]	; (8013cd8 <tcp_listen_input+0x1a0>)
 8013b5c:	6818      	ldr	r0, [r3, #0]
 8013b5e:	4b5f      	ldr	r3, [pc, #380]	; (8013cdc <tcp_listen_input+0x1a4>)
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	461a      	mov	r2, r3
 8013b64:	4b5e      	ldr	r3, [pc, #376]	; (8013ce0 <tcp_listen_input+0x1a8>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b6a:	4b5e      	ldr	r3, [pc, #376]	; (8013ce4 <tcp_listen_input+0x1ac>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b6e:	885b      	ldrh	r3, [r3, #2]
 8013b70:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b72:	4a5c      	ldr	r2, [pc, #368]	; (8013ce4 <tcp_listen_input+0x1ac>)
 8013b74:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b76:	8812      	ldrh	r2, [r2, #0]
 8013b78:	b292      	uxth	r2, r2
 8013b7a:	9201      	str	r2, [sp, #4]
 8013b7c:	9300      	str	r3, [sp, #0]
 8013b7e:	4b5a      	ldr	r3, [pc, #360]	; (8013ce8 <tcp_listen_input+0x1b0>)
 8013b80:	4a5a      	ldr	r2, [pc, #360]	; (8013cec <tcp_listen_input+0x1b4>)
 8013b82:	f002 ff53 	bl	8016a2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013b86:	e0a0      	b.n	8013cca <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8013b88:	4b52      	ldr	r3, [pc, #328]	; (8013cd4 <tcp_listen_input+0x19c>)
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	f003 0302 	and.w	r3, r3, #2
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	f000 809a 	beq.w	8013cca <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	7d5b      	ldrb	r3, [r3, #21]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7ff f938 	bl	8012e10 <tcp_alloc>
 8013ba0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d111      	bne.n	8013bcc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	699b      	ldr	r3, [r3, #24]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d00a      	beq.n	8013bc6 <tcp_listen_input+0x8e>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	699b      	ldr	r3, [r3, #24]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	6910      	ldr	r0, [r2, #16]
 8013bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	4798      	blx	r3
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	73bb      	strb	r3, [r7, #14]
      return;
 8013bc4:	e082      	b.n	8013ccc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013bc6:	23f0      	movs	r3, #240	; 0xf0
 8013bc8:	73bb      	strb	r3, [r7, #14]
      return;
 8013bca:	e07f      	b.n	8013ccc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013bcc:	4b48      	ldr	r3, [pc, #288]	; (8013cf0 <tcp_listen_input+0x1b8>)
 8013bce:	695a      	ldr	r2, [r3, #20]
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013bd4:	4b46      	ldr	r3, [pc, #280]	; (8013cf0 <tcp_listen_input+0x1b8>)
 8013bd6:	691a      	ldr	r2, [r3, #16]
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	8ada      	ldrh	r2, [r3, #22]
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013be4:	4b3f      	ldr	r3, [pc, #252]	; (8013ce4 <tcp_listen_input+0x1ac>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	881b      	ldrh	r3, [r3, #0]
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	2203      	movs	r2, #3
 8013bf4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013bf6:	4b3a      	ldr	r3, [pc, #232]	; (8013ce0 <tcp_listen_input+0x1a8>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	1c5a      	adds	r2, r3, #1
 8013bfc:	697b      	ldr	r3, [r7, #20]
 8013bfe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013c08:	6978      	ldr	r0, [r7, #20]
 8013c0a:	f7ff fb01 	bl	8013210 <tcp_next_iss>
 8013c0e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	693a      	ldr	r2, [r7, #16]
 8013c14:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	693a      	ldr	r2, [r7, #16]
 8013c1a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	693a      	ldr	r2, [r7, #16]
 8013c20:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	693a      	ldr	r2, [r7, #16]
 8013c26:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013c28:	4b2d      	ldr	r3, [pc, #180]	; (8013ce0 <tcp_listen_input+0x1a8>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	1e5a      	subs	r2, r3, #1
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	691a      	ldr	r2, [r3, #16]
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	7a1b      	ldrb	r3, [r3, #8]
 8013c44:	f003 030c 	and.w	r3, r3, #12
 8013c48:	b2da      	uxtb	r2, r3
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013c4e:	4b29      	ldr	r3, [pc, #164]	; (8013cf4 <tcp_listen_input+0x1bc>)
 8013c50:	681a      	ldr	r2, [r3, #0]
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	60da      	str	r2, [r3, #12]
 8013c56:	4a27      	ldr	r2, [pc, #156]	; (8013cf4 <tcp_listen_input+0x1bc>)
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	6013      	str	r3, [r2, #0]
 8013c5c:	f003 f936 	bl	8016ecc <tcp_timer_needed>
 8013c60:	4b25      	ldr	r3, [pc, #148]	; (8013cf8 <tcp_listen_input+0x1c0>)
 8013c62:	2201      	movs	r2, #1
 8013c64:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013c66:	6978      	ldr	r0, [r7, #20]
 8013c68:	f001 fd14 	bl	8015694 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013c6c:	4b1d      	ldr	r3, [pc, #116]	; (8013ce4 <tcp_listen_input+0x1ac>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	89db      	ldrh	r3, [r3, #14]
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	4619      	mov	r1, r3
 8013c90:	4610      	mov	r0, r2
 8013c92:	f7ff fad5 	bl	8013240 <tcp_eff_send_mss_impl>
 8013c96:	4603      	mov	r3, r0
 8013c98:	461a      	mov	r2, r3
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013c9e:	2112      	movs	r1, #18
 8013ca0:	6978      	ldr	r0, [r7, #20]
 8013ca2:	f002 fae1 	bl	8016268 <tcp_enqueue_flags>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d004      	beq.n	8013cbc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8013cb2:	2100      	movs	r1, #0
 8013cb4:	6978      	ldr	r0, [r7, #20]
 8013cb6:	f7fe f913 	bl	8011ee0 <tcp_abandon>
      return;
 8013cba:	e007      	b.n	8013ccc <tcp_listen_input+0x194>
    tcp_output(npcb);
 8013cbc:	6978      	ldr	r0, [r7, #20]
 8013cbe:	f002 fc2b 	bl	8016518 <tcp_output>
  return;
 8013cc2:	bf00      	nop
 8013cc4:	e001      	b.n	8013cca <tcp_listen_input+0x192>
    return;
 8013cc6:	bf00      	nop
 8013cc8:	e000      	b.n	8013ccc <tcp_listen_input+0x194>
  return;
 8013cca:	bf00      	nop
}
 8013ccc:	3718      	adds	r7, #24
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	20004234 	.word	0x20004234
 8013cd8:	2000422c 	.word	0x2000422c
 8013cdc:	20004232 	.word	0x20004232
 8013ce0:	20004228 	.word	0x20004228
 8013ce4:	20004218 	.word	0x20004218
 8013ce8:	20007658 	.word	0x20007658
 8013cec:	2000765c 	.word	0x2000765c
 8013cf0:	20007648 	.word	0x20007648
 8013cf4:	2000ab50 	.word	0x2000ab50
 8013cf8:	2000ab4c 	.word	0x2000ab4c

08013cfc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af02      	add	r7, sp, #8
 8013d02:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013d04:	4b29      	ldr	r3, [pc, #164]	; (8013dac <tcp_timewait_input+0xb0>)
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	f003 0304 	and.w	r3, r3, #4
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d147      	bne.n	8013da0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013d10:	4b26      	ldr	r3, [pc, #152]	; (8013dac <tcp_timewait_input+0xb0>)
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	f003 0302 	and.w	r3, r3, #2
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d027      	beq.n	8013d6c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013d1c:	4b24      	ldr	r3, [pc, #144]	; (8013db0 <tcp_timewait_input+0xb4>)
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d24:	1ad3      	subs	r3, r2, r3
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	db2a      	blt.n	8013d80 <tcp_timewait_input+0x84>
 8013d2a:	4b21      	ldr	r3, [pc, #132]	; (8013db0 <tcp_timewait_input+0xb4>)
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d32:	6879      	ldr	r1, [r7, #4]
 8013d34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d36:	440b      	add	r3, r1
 8013d38:	1ad3      	subs	r3, r2, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	dc20      	bgt.n	8013d80 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d3e:	4b1d      	ldr	r3, [pc, #116]	; (8013db4 <tcp_timewait_input+0xb8>)
 8013d40:	6818      	ldr	r0, [r3, #0]
 8013d42:	4b1d      	ldr	r3, [pc, #116]	; (8013db8 <tcp_timewait_input+0xbc>)
 8013d44:	881b      	ldrh	r3, [r3, #0]
 8013d46:	461a      	mov	r2, r3
 8013d48:	4b19      	ldr	r3, [pc, #100]	; (8013db0 <tcp_timewait_input+0xb4>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d4e:	4b1b      	ldr	r3, [pc, #108]	; (8013dbc <tcp_timewait_input+0xc0>)
 8013d50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d52:	885b      	ldrh	r3, [r3, #2]
 8013d54:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d56:	4a19      	ldr	r2, [pc, #100]	; (8013dbc <tcp_timewait_input+0xc0>)
 8013d58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d5a:	8812      	ldrh	r2, [r2, #0]
 8013d5c:	b292      	uxth	r2, r2
 8013d5e:	9201      	str	r2, [sp, #4]
 8013d60:	9300      	str	r3, [sp, #0]
 8013d62:	4b17      	ldr	r3, [pc, #92]	; (8013dc0 <tcp_timewait_input+0xc4>)
 8013d64:	4a17      	ldr	r2, [pc, #92]	; (8013dc4 <tcp_timewait_input+0xc8>)
 8013d66:	f002 fe61 	bl	8016a2c <tcp_rst>
      return;
 8013d6a:	e01c      	b.n	8013da6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8013d6c:	4b0f      	ldr	r3, [pc, #60]	; (8013dac <tcp_timewait_input+0xb0>)
 8013d6e:	781b      	ldrb	r3, [r3, #0]
 8013d70:	f003 0301 	and.w	r3, r3, #1
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d003      	beq.n	8013d80 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013d78:	4b13      	ldr	r3, [pc, #76]	; (8013dc8 <tcp_timewait_input+0xcc>)
 8013d7a:	681a      	ldr	r2, [r3, #0]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013d80:	4b0d      	ldr	r3, [pc, #52]	; (8013db8 <tcp_timewait_input+0xbc>)
 8013d82:	881b      	ldrh	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00d      	beq.n	8013da4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	7e9b      	ldrb	r3, [r3, #26]
 8013d8c:	f043 0302 	orr.w	r3, r3, #2
 8013d90:	b2da      	uxtb	r2, r3
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f002 fbbe 	bl	8016518 <tcp_output>
  }
  return;
 8013d9c:	bf00      	nop
 8013d9e:	e001      	b.n	8013da4 <tcp_timewait_input+0xa8>
    return;
 8013da0:	bf00      	nop
 8013da2:	e000      	b.n	8013da6 <tcp_timewait_input+0xaa>
  return;
 8013da4:	bf00      	nop
}
 8013da6:	3708      	adds	r7, #8
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	20004234 	.word	0x20004234
 8013db0:	20004228 	.word	0x20004228
 8013db4:	2000422c 	.word	0x2000422c
 8013db8:	20004232 	.word	0x20004232
 8013dbc:	20004218 	.word	0x20004218
 8013dc0:	20007658 	.word	0x20007658
 8013dc4:	2000765c 	.word	0x2000765c
 8013dc8:	2000ab54 	.word	0x2000ab54

08013dcc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b08a      	sub	sp, #40	; 0x28
 8013dd0:	af02      	add	r7, sp, #8
 8013dd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013ddc:	4ba4      	ldr	r3, [pc, #656]	; (8014070 <tcp_process+0x2a4>)
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	f003 0304 	and.w	r3, r3, #4
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d04e      	beq.n	8013e86 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	7d1b      	ldrb	r3, [r3, #20]
 8013dec:	2b02      	cmp	r3, #2
 8013dee:	d108      	bne.n	8013e02 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013df4:	4b9f      	ldr	r3, [pc, #636]	; (8014074 <tcp_process+0x2a8>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d123      	bne.n	8013e44 <tcp_process+0x78>
        acceptable = 1;
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	76fb      	strb	r3, [r7, #27]
 8013e00:	e020      	b.n	8013e44 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e06:	4b9c      	ldr	r3, [pc, #624]	; (8014078 <tcp_process+0x2ac>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d102      	bne.n	8013e14 <tcp_process+0x48>
        acceptable = 1;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	76fb      	strb	r3, [r7, #27]
 8013e12:	e017      	b.n	8013e44 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013e14:	4b98      	ldr	r3, [pc, #608]	; (8014078 <tcp_process+0x2ac>)
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e1c:	1ad3      	subs	r3, r2, r3
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	db10      	blt.n	8013e44 <tcp_process+0x78>
 8013e22:	4b95      	ldr	r3, [pc, #596]	; (8014078 <tcp_process+0x2ac>)
 8013e24:	681a      	ldr	r2, [r3, #0]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013e2e:	440b      	add	r3, r1
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	dc06      	bgt.n	8013e44 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	7e9b      	ldrb	r3, [r3, #26]
 8013e3a:	f043 0302 	orr.w	r3, r3, #2
 8013e3e:	b2da      	uxtb	r2, r3
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013e44:	7efb      	ldrb	r3, [r7, #27]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d01b      	beq.n	8013e82 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	7d1b      	ldrb	r3, [r3, #20]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d106      	bne.n	8013e60 <tcp_process+0x94>
 8013e52:	4b8a      	ldr	r3, [pc, #552]	; (801407c <tcp_process+0x2b0>)
 8013e54:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013e58:	4989      	ldr	r1, [pc, #548]	; (8014080 <tcp_process+0x2b4>)
 8013e5a:	488a      	ldr	r0, [pc, #552]	; (8014084 <tcp_process+0x2b8>)
 8013e5c:	f006 fe18 	bl	801aa90 <iprintf>
      recv_flags |= TF_RESET;
 8013e60:	4b89      	ldr	r3, [pc, #548]	; (8014088 <tcp_process+0x2bc>)
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	f043 0308 	orr.w	r3, r3, #8
 8013e68:	b2da      	uxtb	r2, r3
 8013e6a:	4b87      	ldr	r3, [pc, #540]	; (8014088 <tcp_process+0x2bc>)
 8013e6c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	7e9b      	ldrb	r3, [r3, #26]
 8013e72:	f023 0301 	bic.w	r3, r3, #1
 8013e76:	b2da      	uxtb	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8013e7c:	f06f 030d 	mvn.w	r3, #13
 8013e80:	e34d      	b.n	801451e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013e82:	2300      	movs	r3, #0
 8013e84:	e34b      	b.n	801451e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013e86:	4b7a      	ldr	r3, [pc, #488]	; (8014070 <tcp_process+0x2a4>)
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	f003 0302 	and.w	r3, r3, #2
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d010      	beq.n	8013eb4 <tcp_process+0xe8>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	7d1b      	ldrb	r3, [r3, #20]
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	d00c      	beq.n	8013eb4 <tcp_process+0xe8>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	7d1b      	ldrb	r3, [r3, #20]
 8013e9e:	2b03      	cmp	r3, #3
 8013ea0:	d008      	beq.n	8013eb4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	7e9b      	ldrb	r3, [r3, #26]
 8013ea6:	f043 0302 	orr.w	r3, r3, #2
 8013eaa:	b2da      	uxtb	r2, r3
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	e334      	b.n	801451e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	7e9b      	ldrb	r3, [r3, #26]
 8013eb8:	f003 0310 	and.w	r3, r3, #16
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d103      	bne.n	8013ec8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013ec0:	4b72      	ldr	r3, [pc, #456]	; (801408c <tcp_process+0x2c0>)
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f001 fbdf 	bl	8015694 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	7d1b      	ldrb	r3, [r3, #20]
 8013eda:	3b02      	subs	r3, #2
 8013edc:	2b07      	cmp	r3, #7
 8013ede:	f200 830e 	bhi.w	80144fe <tcp_process+0x732>
 8013ee2:	a201      	add	r2, pc, #4	; (adr r2, 8013ee8 <tcp_process+0x11c>)
 8013ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee8:	08013f09 	.word	0x08013f09
 8013eec:	08014101 	.word	0x08014101
 8013ef0:	08014259 	.word	0x08014259
 8013ef4:	08014283 	.word	0x08014283
 8013ef8:	080143ad 	.word	0x080143ad
 8013efc:	08014259 	.word	0x08014259
 8013f00:	08014439 	.word	0x08014439
 8013f04:	080144c9 	.word	0x080144c9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013f08:	4b59      	ldr	r3, [pc, #356]	; (8014070 <tcp_process+0x2a4>)
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	f003 0310 	and.w	r3, r3, #16
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	f000 80cb 	beq.w	80140ac <tcp_process+0x2e0>
 8013f16:	4b56      	ldr	r3, [pc, #344]	; (8014070 <tcp_process+0x2a4>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	f003 0302 	and.w	r3, r3, #2
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	f000 80c4 	beq.w	80140ac <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f28:	1c5a      	adds	r2, r3, #1
 8013f2a:	4b52      	ldr	r3, [pc, #328]	; (8014074 <tcp_process+0x2a8>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	f040 80bc 	bne.w	80140ac <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8013f34:	4b50      	ldr	r3, [pc, #320]	; (8014078 <tcp_process+0x2ac>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	1c5a      	adds	r2, r3, #1
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8013f46:	4b4b      	ldr	r3, [pc, #300]	; (8014074 <tcp_process+0x2a8>)
 8013f48:	681a      	ldr	r2, [r3, #0]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8013f4e:	4b50      	ldr	r3, [pc, #320]	; (8014090 <tcp_process+0x2c4>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	89db      	ldrh	r3, [r3, #14]
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013f68:	4b43      	ldr	r3, [pc, #268]	; (8014078 <tcp_process+0x2ac>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	1e5a      	subs	r2, r3, #1
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2204      	movs	r2, #4
 8013f76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3304      	adds	r3, #4
 8013f80:	4619      	mov	r1, r3
 8013f82:	4610      	mov	r0, r2
 8013f84:	f7ff f95c 	bl	8013240 <tcp_eff_send_mss_impl>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f94:	005b      	lsls	r3, r3, #1
 8013f96:	f241 121c 	movw	r2, #4380	; 0x111c
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	bf38      	it	cc
 8013f9e:	461a      	movcc	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	bf28      	it	cs
 8013faa:	4613      	movcs	r3, r2
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d106      	bne.n	8013fcc <tcp_process+0x200>
 8013fbe:	4b2f      	ldr	r3, [pc, #188]	; (801407c <tcp_process+0x2b0>)
 8013fc0:	f240 321a 	movw	r2, #794	; 0x31a
 8013fc4:	4933      	ldr	r1, [pc, #204]	; (8014094 <tcp_process+0x2c8>)
 8013fc6:	482f      	ldr	r0, [pc, #188]	; (8014084 <tcp_process+0x2b8>)
 8013fc8:	f006 fd62 	bl	801aa90 <iprintf>
      --pcb->snd_queuelen;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fe0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d111      	bne.n	801400c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013fec:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8013fee:	69fb      	ldr	r3, [r7, #28]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d106      	bne.n	8014002 <tcp_process+0x236>
 8013ff4:	4b21      	ldr	r3, [pc, #132]	; (801407c <tcp_process+0x2b0>)
 8013ff6:	f240 3222 	movw	r2, #802	; 0x322
 8013ffa:	4927      	ldr	r1, [pc, #156]	; (8014098 <tcp_process+0x2cc>)
 8013ffc:	4821      	ldr	r0, [pc, #132]	; (8014084 <tcp_process+0x2b8>)
 8013ffe:	f006 fd47 	bl	801aa90 <iprintf>
        pcb->unsent = rseg->next;
 8014002:	69fb      	ldr	r3, [r7, #28]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	669a      	str	r2, [r3, #104]	; 0x68
 801400a:	e003      	b.n	8014014 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8014014:	69f8      	ldr	r0, [r7, #28]
 8014016:	f7fe fde8 	bl	8012bea <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801401e:	2b00      	cmp	r3, #0
 8014020:	d104      	bne.n	801402c <tcp_process+0x260>
        pcb->rtime = -1;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014028:	861a      	strh	r2, [r3, #48]	; 0x30
 801402a:	e006      	b.n	801403a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2200      	movs	r2, #0
 8014030:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2200      	movs	r2, #0
 8014036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014040:	2b00      	cmp	r3, #0
 8014042:	d00a      	beq.n	801405a <tcp_process+0x28e>
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801404a:	687a      	ldr	r2, [r7, #4]
 801404c:	6910      	ldr	r0, [r2, #16]
 801404e:	2200      	movs	r2, #0
 8014050:	6879      	ldr	r1, [r7, #4]
 8014052:	4798      	blx	r3
 8014054:	4603      	mov	r3, r0
 8014056:	76bb      	strb	r3, [r7, #26]
 8014058:	e001      	b.n	801405e <tcp_process+0x292>
 801405a:	2300      	movs	r3, #0
 801405c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801405e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014062:	f113 0f0d 	cmn.w	r3, #13
 8014066:	d119      	bne.n	801409c <tcp_process+0x2d0>
        return ERR_ABRT;
 8014068:	f06f 030c 	mvn.w	r3, #12
 801406c:	e257      	b.n	801451e <tcp_process+0x752>
 801406e:	bf00      	nop
 8014070:	20004234 	.word	0x20004234
 8014074:	2000422c 	.word	0x2000422c
 8014078:	20004228 	.word	0x20004228
 801407c:	0801cfe4 	.word	0x0801cfe4
 8014080:	0801d19c 	.word	0x0801d19c
 8014084:	0801d028 	.word	0x0801d028
 8014088:	20004235 	.word	0x20004235
 801408c:	2000ab54 	.word	0x2000ab54
 8014090:	20004218 	.word	0x20004218
 8014094:	0801d1bc 	.word	0x0801d1bc
 8014098:	0801d1d4 	.word	0x0801d1d4
      }
      tcp_ack_now(pcb);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	7e9b      	ldrb	r3, [r3, #26]
 80140a0:	f043 0302 	orr.w	r3, r3, #2
 80140a4:	b2da      	uxtb	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80140aa:	e22a      	b.n	8014502 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80140ac:	4b9f      	ldr	r3, [pc, #636]	; (801432c <tcp_process+0x560>)
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	f003 0310 	and.w	r3, r3, #16
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f000 8224 	beq.w	8014502 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80140ba:	4b9d      	ldr	r3, [pc, #628]	; (8014330 <tcp_process+0x564>)
 80140bc:	6818      	ldr	r0, [r3, #0]
 80140be:	4b9d      	ldr	r3, [pc, #628]	; (8014334 <tcp_process+0x568>)
 80140c0:	881b      	ldrh	r3, [r3, #0]
 80140c2:	461a      	mov	r2, r3
 80140c4:	4b9c      	ldr	r3, [pc, #624]	; (8014338 <tcp_process+0x56c>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140ca:	4b9c      	ldr	r3, [pc, #624]	; (801433c <tcp_process+0x570>)
 80140cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80140ce:	885b      	ldrh	r3, [r3, #2]
 80140d0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140d2:	4a9a      	ldr	r2, [pc, #616]	; (801433c <tcp_process+0x570>)
 80140d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80140d6:	8812      	ldrh	r2, [r2, #0]
 80140d8:	b292      	uxth	r2, r2
 80140da:	9201      	str	r2, [sp, #4]
 80140dc:	9300      	str	r3, [sp, #0]
 80140de:	4b98      	ldr	r3, [pc, #608]	; (8014340 <tcp_process+0x574>)
 80140e0:	4a98      	ldr	r2, [pc, #608]	; (8014344 <tcp_process+0x578>)
 80140e2:	f002 fca3 	bl	8016a2c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140ec:	2b05      	cmp	r3, #5
 80140ee:	f200 8208 	bhi.w	8014502 <tcp_process+0x736>
        pcb->rtime = 0;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f002 fd0d 	bl	8016b18 <tcp_rexmit_rto>
    break;
 80140fe:	e200      	b.n	8014502 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8014100:	4b8a      	ldr	r3, [pc, #552]	; (801432c <tcp_process+0x560>)
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	f003 0310 	and.w	r3, r3, #16
 8014108:	2b00      	cmp	r3, #0
 801410a:	f000 8091 	beq.w	8014230 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801410e:	4b88      	ldr	r3, [pc, #544]	; (8014330 <tcp_process+0x564>)
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014116:	1ad3      	subs	r3, r2, r3
 8014118:	3b01      	subs	r3, #1
 801411a:	2b00      	cmp	r3, #0
 801411c:	db71      	blt.n	8014202 <tcp_process+0x436>
 801411e:	4b84      	ldr	r3, [pc, #528]	; (8014330 <tcp_process+0x564>)
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	2b00      	cmp	r3, #0
 801412a:	dc6a      	bgt.n	8014202 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2204      	movs	r2, #4
 8014130:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014136:	2b00      	cmp	r3, #0
 8014138:	d00b      	beq.n	8014152 <tcp_process+0x386>
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801413e:	699b      	ldr	r3, [r3, #24]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d106      	bne.n	8014152 <tcp_process+0x386>
 8014144:	4b80      	ldr	r3, [pc, #512]	; (8014348 <tcp_process+0x57c>)
 8014146:	f240 3251 	movw	r2, #849	; 0x351
 801414a:	4980      	ldr	r1, [pc, #512]	; (801434c <tcp_process+0x580>)
 801414c:	4880      	ldr	r0, [pc, #512]	; (8014350 <tcp_process+0x584>)
 801414e:	f006 fc9f 	bl	801aa90 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014156:	2b00      	cmp	r3, #0
 8014158:	d102      	bne.n	8014160 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 801415a:	23fa      	movs	r3, #250	; 0xfa
 801415c:	76bb      	strb	r3, [r7, #26]
 801415e:	e011      	b.n	8014184 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014164:	699b      	ldr	r3, [r3, #24]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00a      	beq.n	8014180 <tcp_process+0x3b4>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801416e:	699b      	ldr	r3, [r3, #24]
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	6910      	ldr	r0, [r2, #16]
 8014174:	2200      	movs	r2, #0
 8014176:	6879      	ldr	r1, [r7, #4]
 8014178:	4798      	blx	r3
 801417a:	4603      	mov	r3, r0
 801417c:	76bb      	strb	r3, [r7, #26]
 801417e:	e001      	b.n	8014184 <tcp_process+0x3b8>
 8014180:	23f0      	movs	r3, #240	; 0xf0
 8014182:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8014184:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d00a      	beq.n	80141a2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801418c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014190:	f113 0f0d 	cmn.w	r3, #13
 8014194:	d002      	beq.n	801419c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f7fd ff54 	bl	8012044 <tcp_abort>
          }
          return ERR_ABRT;
 801419c:	f06f 030c 	mvn.w	r3, #12
 80141a0:	e1bd      	b.n	801451e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f000 fa42 	bl	801462c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80141a8:	4b6a      	ldr	r3, [pc, #424]	; (8014354 <tcp_process+0x588>)
 80141aa:	881b      	ldrh	r3, [r3, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d005      	beq.n	80141bc <tcp_process+0x3f0>
          recv_acked--;
 80141b0:	4b68      	ldr	r3, [pc, #416]	; (8014354 <tcp_process+0x588>)
 80141b2:	881b      	ldrh	r3, [r3, #0]
 80141b4:	3b01      	subs	r3, #1
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	4b66      	ldr	r3, [pc, #408]	; (8014354 <tcp_process+0x588>)
 80141ba:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80141c6:	429a      	cmp	r2, r3
 80141c8:	bf38      	it	cc
 80141ca:	461a      	movcc	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	4293      	cmp	r3, r2
 80141d4:	bf28      	it	cs
 80141d6:	4613      	movcs	r3, r2
 80141d8:	b29a      	uxth	r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80141e0:	4b5d      	ldr	r3, [pc, #372]	; (8014358 <tcp_process+0x58c>)
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	f003 0320 	and.w	r3, r3, #32
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d034      	beq.n	8014256 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	7e9b      	ldrb	r3, [r3, #26]
 80141f0:	f043 0302 	orr.w	r3, r3, #2
 80141f4:	b2da      	uxtb	r2, r3
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2207      	movs	r2, #7
 80141fe:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8014200:	e029      	b.n	8014256 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8014202:	4b4b      	ldr	r3, [pc, #300]	; (8014330 <tcp_process+0x564>)
 8014204:	6818      	ldr	r0, [r3, #0]
 8014206:	4b4b      	ldr	r3, [pc, #300]	; (8014334 <tcp_process+0x568>)
 8014208:	881b      	ldrh	r3, [r3, #0]
 801420a:	461a      	mov	r2, r3
 801420c:	4b4a      	ldr	r3, [pc, #296]	; (8014338 <tcp_process+0x56c>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014212:	4b4a      	ldr	r3, [pc, #296]	; (801433c <tcp_process+0x570>)
 8014214:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8014216:	885b      	ldrh	r3, [r3, #2]
 8014218:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801421a:	4a48      	ldr	r2, [pc, #288]	; (801433c <tcp_process+0x570>)
 801421c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801421e:	8812      	ldrh	r2, [r2, #0]
 8014220:	b292      	uxth	r2, r2
 8014222:	9201      	str	r2, [sp, #4]
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	4b46      	ldr	r3, [pc, #280]	; (8014340 <tcp_process+0x574>)
 8014228:	4a46      	ldr	r2, [pc, #280]	; (8014344 <tcp_process+0x578>)
 801422a:	f002 fbff 	bl	8016a2c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801422e:	e16a      	b.n	8014506 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014230:	4b3e      	ldr	r3, [pc, #248]	; (801432c <tcp_process+0x560>)
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	f003 0302 	and.w	r3, r3, #2
 8014238:	2b00      	cmp	r3, #0
 801423a:	f000 8164 	beq.w	8014506 <tcp_process+0x73a>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014242:	1e5a      	subs	r2, r3, #1
 8014244:	4b3c      	ldr	r3, [pc, #240]	; (8014338 <tcp_process+0x56c>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	429a      	cmp	r2, r3
 801424a:	f040 815c 	bne.w	8014506 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f002 fc98 	bl	8016b84 <tcp_rexmit>
    break;
 8014254:	e157      	b.n	8014506 <tcp_process+0x73a>
 8014256:	e156      	b.n	8014506 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f000 f9e7 	bl	801462c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801425e:	4b3e      	ldr	r3, [pc, #248]	; (8014358 <tcp_process+0x58c>)
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	f003 0320 	and.w	r3, r3, #32
 8014266:	2b00      	cmp	r3, #0
 8014268:	f000 814f 	beq.w	801450a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	7e9b      	ldrb	r3, [r3, #26]
 8014270:	f043 0302 	orr.w	r3, r3, #2
 8014274:	b2da      	uxtb	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2207      	movs	r2, #7
 801427e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8014280:	e143      	b.n	801450a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 f9d2 	bl	801462c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8014288:	4b33      	ldr	r3, [pc, #204]	; (8014358 <tcp_process+0x58c>)
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	f003 0320 	and.w	r3, r3, #32
 8014290:	2b00      	cmp	r3, #0
 8014292:	d074      	beq.n	801437e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014294:	4b25      	ldr	r3, [pc, #148]	; (801432c <tcp_process+0x560>)
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	f003 0310 	and.w	r3, r3, #16
 801429c:	2b00      	cmp	r3, #0
 801429e:	d063      	beq.n	8014368 <tcp_process+0x59c>
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142a4:	4b22      	ldr	r3, [pc, #136]	; (8014330 <tcp_process+0x564>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d15d      	bne.n	8014368 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d159      	bne.n	8014368 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	7e9b      	ldrb	r3, [r3, #26]
 80142b8:	f043 0302 	orr.w	r3, r3, #2
 80142bc:	b2da      	uxtb	r2, r3
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f7fe fee6 	bl	8013094 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80142c8:	4b24      	ldr	r3, [pc, #144]	; (801435c <tcp_process+0x590>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d105      	bne.n	80142de <tcp_process+0x512>
 80142d2:	4b22      	ldr	r3, [pc, #136]	; (801435c <tcp_process+0x590>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	4a20      	ldr	r2, [pc, #128]	; (801435c <tcp_process+0x590>)
 80142da:	6013      	str	r3, [r2, #0]
 80142dc:	e013      	b.n	8014306 <tcp_process+0x53a>
 80142de:	4b1f      	ldr	r3, [pc, #124]	; (801435c <tcp_process+0x590>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	617b      	str	r3, [r7, #20]
 80142e4:	e00c      	b.n	8014300 <tcp_process+0x534>
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	687a      	ldr	r2, [r7, #4]
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d104      	bne.n	80142fa <tcp_process+0x52e>
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	68da      	ldr	r2, [r3, #12]
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	60da      	str	r2, [r3, #12]
 80142f8:	e005      	b.n	8014306 <tcp_process+0x53a>
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	68db      	ldr	r3, [r3, #12]
 80142fe:	617b      	str	r3, [r7, #20]
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1ef      	bne.n	80142e6 <tcp_process+0x51a>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2200      	movs	r2, #0
 801430a:	60da      	str	r2, [r3, #12]
 801430c:	4b14      	ldr	r3, [pc, #80]	; (8014360 <tcp_process+0x594>)
 801430e:	2201      	movs	r2, #1
 8014310:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	220a      	movs	r2, #10
 8014316:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014318:	4b12      	ldr	r3, [pc, #72]	; (8014364 <tcp_process+0x598>)
 801431a:	681a      	ldr	r2, [r3, #0]
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	60da      	str	r2, [r3, #12]
 8014320:	4a10      	ldr	r2, [pc, #64]	; (8014364 <tcp_process+0x598>)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	6013      	str	r3, [r2, #0]
 8014326:	f002 fdd1 	bl	8016ecc <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801432a:	e0f0      	b.n	801450e <tcp_process+0x742>
 801432c:	20004234 	.word	0x20004234
 8014330:	2000422c 	.word	0x2000422c
 8014334:	20004232 	.word	0x20004232
 8014338:	20004228 	.word	0x20004228
 801433c:	20004218 	.word	0x20004218
 8014340:	20007658 	.word	0x20007658
 8014344:	2000765c 	.word	0x2000765c
 8014348:	0801cfe4 	.word	0x0801cfe4
 801434c:	0801d1e8 	.word	0x0801d1e8
 8014350:	0801d028 	.word	0x0801d028
 8014354:	20004230 	.word	0x20004230
 8014358:	20004235 	.word	0x20004235
 801435c:	2000ab50 	.word	0x2000ab50
 8014360:	2000ab4c 	.word	0x2000ab4c
 8014364:	2000ab60 	.word	0x2000ab60
        tcp_ack_now(pcb);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	7e9b      	ldrb	r3, [r3, #26]
 801436c:	f043 0302 	orr.w	r3, r3, #2
 8014370:	b2da      	uxtb	r2, r3
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2208      	movs	r2, #8
 801437a:	751a      	strb	r2, [r3, #20]
    break;
 801437c:	e0c7      	b.n	801450e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801437e:	4b6a      	ldr	r3, [pc, #424]	; (8014528 <tcp_process+0x75c>)
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	f003 0310 	and.w	r3, r3, #16
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 80c1 	beq.w	801450e <tcp_process+0x742>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014390:	4b66      	ldr	r3, [pc, #408]	; (801452c <tcp_process+0x760>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	429a      	cmp	r2, r3
 8014396:	f040 80ba 	bne.w	801450e <tcp_process+0x742>
               pcb->unsent == NULL) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801439e:	2b00      	cmp	r3, #0
 80143a0:	f040 80b5 	bne.w	801450e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2206      	movs	r2, #6
 80143a8:	751a      	strb	r2, [r3, #20]
    break;
 80143aa:	e0b0      	b.n	801450e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 f93d 	bl	801462c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80143b2:	4b5f      	ldr	r3, [pc, #380]	; (8014530 <tcp_process+0x764>)
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	f003 0320 	and.w	r3, r3, #32
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	f000 80a9 	beq.w	8014512 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	7e9b      	ldrb	r3, [r3, #26]
 80143c4:	f043 0302 	orr.w	r3, r3, #2
 80143c8:	b2da      	uxtb	r2, r3
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f7fe fe60 	bl	8013094 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80143d4:	4b57      	ldr	r3, [pc, #348]	; (8014534 <tcp_process+0x768>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	687a      	ldr	r2, [r7, #4]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d105      	bne.n	80143ea <tcp_process+0x61e>
 80143de:	4b55      	ldr	r3, [pc, #340]	; (8014534 <tcp_process+0x768>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	68db      	ldr	r3, [r3, #12]
 80143e4:	4a53      	ldr	r2, [pc, #332]	; (8014534 <tcp_process+0x768>)
 80143e6:	6013      	str	r3, [r2, #0]
 80143e8:	e013      	b.n	8014412 <tcp_process+0x646>
 80143ea:	4b52      	ldr	r3, [pc, #328]	; (8014534 <tcp_process+0x768>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	613b      	str	r3, [r7, #16]
 80143f0:	e00c      	b.n	801440c <tcp_process+0x640>
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d104      	bne.n	8014406 <tcp_process+0x63a>
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	68da      	ldr	r2, [r3, #12]
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	60da      	str	r2, [r3, #12]
 8014404:	e005      	b.n	8014412 <tcp_process+0x646>
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	613b      	str	r3, [r7, #16]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d1ef      	bne.n	80143f2 <tcp_process+0x626>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2200      	movs	r2, #0
 8014416:	60da      	str	r2, [r3, #12]
 8014418:	4b47      	ldr	r3, [pc, #284]	; (8014538 <tcp_process+0x76c>)
 801441a:	2201      	movs	r2, #1
 801441c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	220a      	movs	r2, #10
 8014422:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8014424:	4b45      	ldr	r3, [pc, #276]	; (801453c <tcp_process+0x770>)
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	60da      	str	r2, [r3, #12]
 801442c:	4a43      	ldr	r2, [pc, #268]	; (801453c <tcp_process+0x770>)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6013      	str	r3, [r2, #0]
 8014432:	f002 fd4b 	bl	8016ecc <tcp_timer_needed>
    }
    break;
 8014436:	e06c      	b.n	8014512 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f000 f8f7 	bl	801462c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801443e:	4b3a      	ldr	r3, [pc, #232]	; (8014528 <tcp_process+0x75c>)
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	f003 0310 	and.w	r3, r3, #16
 8014446:	2b00      	cmp	r3, #0
 8014448:	d065      	beq.n	8014516 <tcp_process+0x74a>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801444e:	4b37      	ldr	r3, [pc, #220]	; (801452c <tcp_process+0x760>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	429a      	cmp	r2, r3
 8014454:	d15f      	bne.n	8014516 <tcp_process+0x74a>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801445a:	2b00      	cmp	r3, #0
 801445c:	d15b      	bne.n	8014516 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7fe fe18 	bl	8013094 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014464:	4b33      	ldr	r3, [pc, #204]	; (8014534 <tcp_process+0x768>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	429a      	cmp	r2, r3
 801446c:	d105      	bne.n	801447a <tcp_process+0x6ae>
 801446e:	4b31      	ldr	r3, [pc, #196]	; (8014534 <tcp_process+0x768>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	4a2f      	ldr	r2, [pc, #188]	; (8014534 <tcp_process+0x768>)
 8014476:	6013      	str	r3, [r2, #0]
 8014478:	e013      	b.n	80144a2 <tcp_process+0x6d6>
 801447a:	4b2e      	ldr	r3, [pc, #184]	; (8014534 <tcp_process+0x768>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	60fb      	str	r3, [r7, #12]
 8014480:	e00c      	b.n	801449c <tcp_process+0x6d0>
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	68db      	ldr	r3, [r3, #12]
 8014486:	687a      	ldr	r2, [r7, #4]
 8014488:	429a      	cmp	r2, r3
 801448a:	d104      	bne.n	8014496 <tcp_process+0x6ca>
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	68da      	ldr	r2, [r3, #12]
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	60da      	str	r2, [r3, #12]
 8014494:	e005      	b.n	80144a2 <tcp_process+0x6d6>
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	60fb      	str	r3, [r7, #12]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d1ef      	bne.n	8014482 <tcp_process+0x6b6>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	60da      	str	r2, [r3, #12]
 80144a8:	4b23      	ldr	r3, [pc, #140]	; (8014538 <tcp_process+0x76c>)
 80144aa:	2201      	movs	r2, #1
 80144ac:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	220a      	movs	r2, #10
 80144b2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80144b4:	4b21      	ldr	r3, [pc, #132]	; (801453c <tcp_process+0x770>)
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	60da      	str	r2, [r3, #12]
 80144bc:	4a1f      	ldr	r2, [pc, #124]	; (801453c <tcp_process+0x770>)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6013      	str	r3, [r2, #0]
 80144c2:	f002 fd03 	bl	8016ecc <tcp_timer_needed>
    }
    break;
 80144c6:	e026      	b.n	8014516 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f000 f8af 	bl	801462c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80144ce:	4b16      	ldr	r3, [pc, #88]	; (8014528 <tcp_process+0x75c>)
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	f003 0310 	and.w	r3, r3, #16
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d01f      	beq.n	801451a <tcp_process+0x74e>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144de:	4b13      	ldr	r3, [pc, #76]	; (801452c <tcp_process+0x760>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	429a      	cmp	r2, r3
 80144e4:	d119      	bne.n	801451a <tcp_process+0x74e>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d115      	bne.n	801451a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80144ee:	4b10      	ldr	r3, [pc, #64]	; (8014530 <tcp_process+0x764>)
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	f043 0310 	orr.w	r3, r3, #16
 80144f6:	b2da      	uxtb	r2, r3
 80144f8:	4b0d      	ldr	r3, [pc, #52]	; (8014530 <tcp_process+0x764>)
 80144fa:	701a      	strb	r2, [r3, #0]
    }
    break;
 80144fc:	e00d      	b.n	801451a <tcp_process+0x74e>
  default:
    break;
 80144fe:	bf00      	nop
 8014500:	e00c      	b.n	801451c <tcp_process+0x750>
    break;
 8014502:	bf00      	nop
 8014504:	e00a      	b.n	801451c <tcp_process+0x750>
    break;
 8014506:	bf00      	nop
 8014508:	e008      	b.n	801451c <tcp_process+0x750>
    break;
 801450a:	bf00      	nop
 801450c:	e006      	b.n	801451c <tcp_process+0x750>
    break;
 801450e:	bf00      	nop
 8014510:	e004      	b.n	801451c <tcp_process+0x750>
    break;
 8014512:	bf00      	nop
 8014514:	e002      	b.n	801451c <tcp_process+0x750>
    break;
 8014516:	bf00      	nop
 8014518:	e000      	b.n	801451c <tcp_process+0x750>
    break;
 801451a:	bf00      	nop
  }
  return ERR_OK;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3720      	adds	r7, #32
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	20004234 	.word	0x20004234
 801452c:	2000422c 	.word	0x2000422c
 8014530:	20004235 	.word	0x20004235
 8014534:	2000ab50 	.word	0x2000ab50
 8014538:	2000ab4c 	.word	0x2000ab4c
 801453c:	2000ab60 	.word	0x2000ab60

08014540 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014540:	b590      	push	{r4, r7, lr}
 8014542:	b085      	sub	sp, #20
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	899b      	ldrh	r3, [r3, #12]
 8014550:	b29b      	uxth	r3, r3
 8014552:	4618      	mov	r0, r3
 8014554:	f7fb fe96 	bl	8010284 <lwip_htons>
 8014558:	4603      	mov	r3, r0
 801455a:	f003 0301 	and.w	r3, r3, #1
 801455e:	2b00      	cmp	r3, #0
 8014560:	d027      	beq.n	80145b2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014562:	6838      	ldr	r0, [r7, #0]
 8014564:	f7fe fb2d 	bl	8012bc2 <tcp_segs_free>
    next = NULL;
 8014568:	2300      	movs	r3, #0
 801456a:	603b      	str	r3, [r7, #0]
 801456c:	e055      	b.n	801461a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	68db      	ldr	r3, [r3, #12]
 8014572:	899b      	ldrh	r3, [r3, #12]
 8014574:	b29b      	uxth	r3, r3
 8014576:	4618      	mov	r0, r3
 8014578:	f7fb fe84 	bl	8010284 <lwip_htons>
 801457c:	4603      	mov	r3, r0
 801457e:	f003 0301 	and.w	r3, r3, #1
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00d      	beq.n	80145a2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	68db      	ldr	r3, [r3, #12]
 801458a:	899b      	ldrh	r3, [r3, #12]
 801458c:	b29c      	uxth	r4, r3
 801458e:	2001      	movs	r0, #1
 8014590:	f7fb fe78 	bl	8010284 <lwip_htons>
 8014594:	4603      	mov	r3, r0
 8014596:	461a      	mov	r2, r3
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	68db      	ldr	r3, [r3, #12]
 801459c:	4322      	orrs	r2, r4
 801459e:	b292      	uxth	r2, r2
 80145a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80145ac:	68f8      	ldr	r0, [r7, #12]
 80145ae:	f7fe fb1c 	bl	8012bea <tcp_seg_free>
    while (next &&
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00e      	beq.n	80145d6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	891b      	ldrh	r3, [r3, #8]
 80145bc:	461a      	mov	r2, r3
 80145be:	4b1a      	ldr	r3, [pc, #104]	; (8014628 <tcp_oos_insert_segment+0xe8>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	441a      	add	r2, r3
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	6839      	ldr	r1, [r7, #0]
 80145cc:	8909      	ldrh	r1, [r1, #8]
 80145ce:	440b      	add	r3, r1
 80145d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	dacb      	bge.n	801456e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d01e      	beq.n	801461a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	891b      	ldrh	r3, [r3, #8]
 80145e0:	461a      	mov	r2, r3
 80145e2:	4b11      	ldr	r3, [pc, #68]	; (8014628 <tcp_oos_insert_segment+0xe8>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	441a      	add	r2, r3
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	dd12      	ble.n	801461a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	685b      	ldr	r3, [r3, #4]
 80145fa:	b29a      	uxth	r2, r3
 80145fc:	4b0a      	ldr	r3, [pc, #40]	; (8014628 <tcp_oos_insert_segment+0xe8>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	b29b      	uxth	r3, r3
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	b29a      	uxth	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	685a      	ldr	r2, [r3, #4]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	891b      	ldrh	r3, [r3, #8]
 8014612:	4619      	mov	r1, r3
 8014614:	4610      	mov	r0, r2
 8014616:	f7fc fe5b 	bl	80112d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	683a      	ldr	r2, [r7, #0]
 801461e:	601a      	str	r2, [r3, #0]
}
 8014620:	bf00      	nop
 8014622:	3714      	adds	r7, #20
 8014624:	46bd      	mov	sp, r7
 8014626:	bd90      	pop	{r4, r7, pc}
 8014628:	20004228 	.word	0x20004228

0801462c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801462e:	b08d      	sub	sp, #52	; 0x34
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8014634:	2300      	movs	r3, #0
 8014636:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	7d1b      	ldrb	r3, [r3, #20]
 801463c:	2b03      	cmp	r3, #3
 801463e:	d806      	bhi.n	801464e <tcp_receive+0x22>
 8014640:	4ba6      	ldr	r3, [pc, #664]	; (80148dc <tcp_receive+0x2b0>)
 8014642:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8014646:	49a6      	ldr	r1, [pc, #664]	; (80148e0 <tcp_receive+0x2b4>)
 8014648:	48a6      	ldr	r0, [pc, #664]	; (80148e4 <tcp_receive+0x2b8>)
 801464a:	f006 fa21 	bl	801aa90 <iprintf>

  if (flags & TCP_ACK) {
 801464e:	4ba6      	ldr	r3, [pc, #664]	; (80148e8 <tcp_receive+0x2bc>)
 8014650:	781b      	ldrb	r3, [r3, #0]
 8014652:	f003 0310 	and.w	r3, r3, #16
 8014656:	2b00      	cmp	r3, #0
 8014658:	f000 82bf 	beq.w	8014bda <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014662:	461a      	mov	r2, r3
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014668:	4413      	add	r3, r2
 801466a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014670:	4b9e      	ldr	r3, [pc, #632]	; (80148ec <tcp_receive+0x2c0>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	1ad3      	subs	r3, r2, r3
 8014676:	2b00      	cmp	r3, #0
 8014678:	db1b      	blt.n	80146b2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801467e:	4b9b      	ldr	r3, [pc, #620]	; (80148ec <tcp_receive+0x2c0>)
 8014680:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014682:	429a      	cmp	r2, r3
 8014684:	d106      	bne.n	8014694 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801468a:	4b99      	ldr	r3, [pc, #612]	; (80148f0 <tcp_receive+0x2c4>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	1ad3      	subs	r3, r2, r3
 8014690:	2b00      	cmp	r3, #0
 8014692:	db0e      	blt.n	80146b2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014698:	4b95      	ldr	r3, [pc, #596]	; (80148f0 <tcp_receive+0x2c4>)
 801469a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801469c:	429a      	cmp	r2, r3
 801469e:	d141      	bne.n	8014724 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80146a0:	4b94      	ldr	r3, [pc, #592]	; (80148f4 <tcp_receive+0x2c8>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	89db      	ldrh	r3, [r3, #14]
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d938      	bls.n	8014724 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80146b2:	4b90      	ldr	r3, [pc, #576]	; (80148f4 <tcp_receive+0x2c8>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	89db      	ldrh	r3, [r3, #14]
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d205      	bcs.n	80146dc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80146dc:	4b83      	ldr	r3, [pc, #524]	; (80148ec <tcp_receive+0x2c0>)
 80146de:	681a      	ldr	r2, [r3, #0]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80146e4:	4b82      	ldr	r3, [pc, #520]	; (80148f0 <tcp_receive+0x2c4>)
 80146e6:	681a      	ldr	r2, [r3, #0]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d10d      	bne.n	8014712 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d111      	bne.n	8014724 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2200      	movs	r2, #0
 8014704:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2201      	movs	r2, #1
 801470c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8014710:	e008      	b.n	8014724 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8014718:	2b00      	cmp	r3, #0
 801471a:	d003      	beq.n	8014724 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2200      	movs	r2, #0
 8014720:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014724:	4b72      	ldr	r3, [pc, #456]	; (80148f0 <tcp_receive+0x2c4>)
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801472c:	1ad3      	subs	r3, r2, r3
 801472e:	2b00      	cmp	r3, #0
 8014730:	dc53      	bgt.n	80147da <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8014732:	4b71      	ldr	r3, [pc, #452]	; (80148f8 <tcp_receive+0x2cc>)
 8014734:	881b      	ldrh	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d146      	bne.n	80147c8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801473e:	687a      	ldr	r2, [r7, #4]
 8014740:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8014744:	4413      	add	r3, r2
 8014746:	697a      	ldr	r2, [r7, #20]
 8014748:	429a      	cmp	r2, r3
 801474a:	d13d      	bne.n	80147c8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014752:	2b00      	cmp	r3, #0
 8014754:	db38      	blt.n	80147c8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801475a:	4b65      	ldr	r3, [pc, #404]	; (80148f0 <tcp_receive+0x2c4>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	429a      	cmp	r2, r3
 8014760:	d132      	bne.n	80147c8 <tcp_receive+0x19c>
              found_dupack = 1;
 8014762:	2301      	movs	r3, #1
 8014764:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801476c:	2bff      	cmp	r3, #255	; 0xff
 801476e:	d007      	beq.n	8014780 <tcp_receive+0x154>
                ++pcb->dupacks;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014776:	3301      	adds	r3, #1
 8014778:	b2da      	uxtb	r2, r3
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014786:	2b03      	cmp	r3, #3
 8014788:	d916      	bls.n	80147b8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014794:	4413      	add	r3, r2
 8014796:	b29a      	uxth	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801479e:	429a      	cmp	r2, r3
 80147a0:	d912      	bls.n	80147c8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147ac:	4413      	add	r3, r2
 80147ae:	b29a      	uxth	r2, r3
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80147b6:	e007      	b.n	80147c8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80147be:	2b03      	cmp	r3, #3
 80147c0:	d102      	bne.n	80147c8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f002 fa2e 	bl	8016c24 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80147c8:	69fb      	ldr	r3, [r7, #28]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	f040 8169 	bne.w	8014aa2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80147d8:	e163      	b.n	8014aa2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80147da:	4b45      	ldr	r3, [pc, #276]	; (80148f0 <tcp_receive+0x2c4>)
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147e2:	1ad3      	subs	r3, r2, r3
 80147e4:	3b01      	subs	r3, #1
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	f2c0 8107 	blt.w	80149fa <tcp_receive+0x3ce>
 80147ec:	4b40      	ldr	r3, [pc, #256]	; (80148f0 <tcp_receive+0x2c4>)
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147f4:	1ad3      	subs	r3, r2, r3
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	f300 80ff 	bgt.w	80149fa <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	7e9b      	ldrb	r3, [r3, #26]
 8014800:	f003 0304 	and.w	r3, r3, #4
 8014804:	2b00      	cmp	r3, #0
 8014806:	d00c      	beq.n	8014822 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	7e9b      	ldrb	r3, [r3, #26]
 801480c:	f023 0304 	bic.w	r3, r3, #4
 8014810:	b2da      	uxtb	r2, r3
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2200      	movs	r2, #0
 8014826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014830:	10db      	asrs	r3, r3, #3
 8014832:	b21b      	sxth	r3, r3
 8014834:	b29a      	uxth	r2, r3
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801483c:	b29b      	uxth	r3, r3
 801483e:	4413      	add	r3, r2
 8014840:	b29b      	uxth	r3, r3
 8014842:	b21a      	sxth	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2200      	movs	r2, #0
 801484e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014852:	4b27      	ldr	r3, [pc, #156]	; (80148f0 <tcp_receive+0x2c4>)
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	7d1b      	ldrb	r3, [r3, #20]
 801485e:	2b03      	cmp	r3, #3
 8014860:	f240 8094 	bls.w	801498c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014870:	429a      	cmp	r2, r3
 8014872:	d216      	bcs.n	80148a2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801487e:	4413      	add	r3, r2
 8014880:	b29a      	uxth	r2, r3
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014888:	429a      	cmp	r2, r3
 801488a:	d97f      	bls.n	801498c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014896:	4413      	add	r3, r2
 8014898:	b29a      	uxth	r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80148a0:	e074      	b.n	801498c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148ac:	4619      	mov	r1, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148b2:	fb03 f301 	mul.w	r3, r3, r1
 80148b6:	6879      	ldr	r1, [r7, #4]
 80148b8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80148bc:	fb93 f3f1 	sdiv	r3, r3, r1
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	4413      	add	r3, r2
 80148c4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80148cc:	8a7a      	ldrh	r2, [r7, #18]
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d95c      	bls.n	801498c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	8a7a      	ldrh	r2, [r7, #18]
 80148d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80148da:	e057      	b.n	801498c <tcp_receive+0x360>
 80148dc:	0801cfe4 	.word	0x0801cfe4
 80148e0:	0801d208 	.word	0x0801d208
 80148e4:	0801d028 	.word	0x0801d028
 80148e8:	20004234 	.word	0x20004234
 80148ec:	20004228 	.word	0x20004228
 80148f0:	2000422c 	.word	0x2000422c
 80148f4:	20004218 	.word	0x20004218
 80148f8:	20004232 	.word	0x20004232
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014900:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8014912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	4618      	mov	r0, r3
 8014918:	f7fc fee8 	bl	80116ec <pbuf_clen>
 801491c:	4603      	mov	r3, r0
 801491e:	429c      	cmp	r4, r3
 8014920:	d206      	bcs.n	8014930 <tcp_receive+0x304>
 8014922:	4b70      	ldr	r3, [pc, #448]	; (8014ae4 <tcp_receive+0x4b8>)
 8014924:	f240 429e 	movw	r2, #1182	; 0x49e
 8014928:	496f      	ldr	r1, [pc, #444]	; (8014ae8 <tcp_receive+0x4bc>)
 801492a:	4870      	ldr	r0, [pc, #448]	; (8014aec <tcp_receive+0x4c0>)
 801492c:	f006 f8b0 	bl	801aa90 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8014930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	f7fc fed9 	bl	80116ec <pbuf_clen>
 801493a:	4603      	mov	r3, r0
 801493c:	461a      	mov	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014944:	1a9b      	subs	r3, r3, r2
 8014946:	b29a      	uxth	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 801494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014950:	891a      	ldrh	r2, [r3, #8]
 8014952:	4b67      	ldr	r3, [pc, #412]	; (8014af0 <tcp_receive+0x4c4>)
 8014954:	881b      	ldrh	r3, [r3, #0]
 8014956:	4413      	add	r3, r2
 8014958:	b29a      	uxth	r2, r3
 801495a:	4b65      	ldr	r3, [pc, #404]	; (8014af0 <tcp_receive+0x4c4>)
 801495c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 801495e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014960:	f7fe f943 	bl	8012bea <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801496a:	2b00      	cmp	r3, #0
 801496c:	d00e      	beq.n	801498c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10a      	bne.n	801498c <tcp_receive+0x360>
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801497a:	2b00      	cmp	r3, #0
 801497c:	d106      	bne.n	801498c <tcp_receive+0x360>
 801497e:	4b59      	ldr	r3, [pc, #356]	; (8014ae4 <tcp_receive+0x4b8>)
 8014980:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8014984:	495b      	ldr	r1, [pc, #364]	; (8014af4 <tcp_receive+0x4c8>)
 8014986:	4859      	ldr	r0, [pc, #356]	; (8014aec <tcp_receive+0x4c0>)
 8014988:	f006 f882 	bl	801aa90 <iprintf>
      while (pcb->unacked != NULL &&
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014990:	2b00      	cmp	r3, #0
 8014992:	d022      	beq.n	80149da <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014998:	68db      	ldr	r3, [r3, #12]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	4618      	mov	r0, r3
 801499e:	f7fb fc7f 	bl	80102a0 <lwip_htonl>
 80149a2:	4604      	mov	r4, r0
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149a8:	891b      	ldrh	r3, [r3, #8]
 80149aa:	461d      	mov	r5, r3
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	899b      	ldrh	r3, [r3, #12]
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7fb fc64 	bl	8010284 <lwip_htons>
 80149bc:	4603      	mov	r3, r0
 80149be:	f003 0303 	and.w	r3, r3, #3
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d001      	beq.n	80149ca <tcp_receive+0x39e>
 80149c6:	2301      	movs	r3, #1
 80149c8:	e000      	b.n	80149cc <tcp_receive+0x3a0>
 80149ca:	2300      	movs	r3, #0
 80149cc:	442b      	add	r3, r5
 80149ce:	18e2      	adds	r2, r4, r3
 80149d0:	4b49      	ldr	r3, [pc, #292]	; (8014af8 <tcp_receive+0x4cc>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	dd90      	ble.n	80148fc <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d104      	bne.n	80149ec <tcp_receive+0x3c0>
        pcb->rtime = -1;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80149ea:	e002      	b.n	80149f2 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2200      	movs	r2, #0
 80149f0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2200      	movs	r2, #0
 80149f6:	76da      	strb	r2, [r3, #27]
 80149f8:	e002      	b.n	8014a00 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f001 fd30 	bl	8016460 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8014a00:	e04f      	b.n	8014aa2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a0c:	681a      	ldr	r2, [r3, #0]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d103      	bne.n	8014a22 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8014a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7fc fe5d 	bl	80116ec <pbuf_clen>
 8014a32:	4603      	mov	r3, r0
 8014a34:	429c      	cmp	r4, r3
 8014a36:	d206      	bcs.n	8014a46 <tcp_receive+0x41a>
 8014a38:	4b2a      	ldr	r3, [pc, #168]	; (8014ae4 <tcp_receive+0x4b8>)
 8014a3a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8014a3e:	492a      	ldr	r1, [pc, #168]	; (8014ae8 <tcp_receive+0x4bc>)
 8014a40:	482a      	ldr	r0, [pc, #168]	; (8014aec <tcp_receive+0x4c0>)
 8014a42:	f006 f825 	bl	801aa90 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8014a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7fc fe4e 	bl	80116ec <pbuf_clen>
 8014a50:	4603      	mov	r3, r0
 8014a52:	461a      	mov	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014a5a:	1a9b      	subs	r3, r3, r2
 8014a5c:	b29a      	uxth	r2, r3
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8014a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a66:	891a      	ldrh	r2, [r3, #8]
 8014a68:	4b21      	ldr	r3, [pc, #132]	; (8014af0 <tcp_receive+0x4c4>)
 8014a6a:	881b      	ldrh	r3, [r3, #0]
 8014a6c:	4413      	add	r3, r2
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	4b1f      	ldr	r3, [pc, #124]	; (8014af0 <tcp_receive+0x4c4>)
 8014a72:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8014a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014a76:	f7fe f8b8 	bl	8012bea <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d00e      	beq.n	8014aa2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d10a      	bne.n	8014aa2 <tcp_receive+0x476>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d106      	bne.n	8014aa2 <tcp_receive+0x476>
 8014a94:	4b13      	ldr	r3, [pc, #76]	; (8014ae4 <tcp_receive+0x4b8>)
 8014a96:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8014a9a:	4916      	ldr	r1, [pc, #88]	; (8014af4 <tcp_receive+0x4c8>)
 8014a9c:	4813      	ldr	r0, [pc, #76]	; (8014aec <tcp_receive+0x4c0>)
 8014a9e:	f005 fff7 	bl	801aa90 <iprintf>
    while (pcb->unsent != NULL &&
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d036      	beq.n	8014b18 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014aaa:	4b13      	ldr	r3, [pc, #76]	; (8014af8 <tcp_receive+0x4cc>)
 8014aac:	681c      	ldr	r4, [r3, #0]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fb fbf2 	bl	80102a0 <lwip_htonl>
 8014abc:	4605      	mov	r5, r0
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ac2:	891b      	ldrh	r3, [r3, #8]
 8014ac4:	461e      	mov	r6, r3
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014aca:	68db      	ldr	r3, [r3, #12]
 8014acc:	899b      	ldrh	r3, [r3, #12]
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7fb fbd7 	bl	8010284 <lwip_htons>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	f003 0303 	and.w	r3, r3, #3
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00d      	beq.n	8014afc <tcp_receive+0x4d0>
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	e00c      	b.n	8014afe <tcp_receive+0x4d2>
 8014ae4:	0801cfe4 	.word	0x0801cfe4
 8014ae8:	0801d224 	.word	0x0801d224
 8014aec:	0801d028 	.word	0x0801d028
 8014af0:	20004230 	.word	0x20004230
 8014af4:	0801d24c 	.word	0x0801d24c
 8014af8:	2000422c 	.word	0x2000422c
 8014afc:	2300      	movs	r3, #0
 8014afe:	4433      	add	r3, r6
 8014b00:	442b      	add	r3, r5
 8014b02:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	db07      	blt.n	8014b18 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014b08:	4b8d      	ldr	r3, [pc, #564]	; (8014d40 <tcp_receive+0x714>)
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b10:	1ad3      	subs	r3, r2, r3
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f77f af75 	ble.w	8014a02 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014b1e:	4b89      	ldr	r3, [pc, #548]	; (8014d44 <tcp_receive+0x718>)
 8014b20:	881b      	ldrh	r3, [r3, #0]
 8014b22:	4413      	add	r3, r2
 8014b24:	b29a      	uxth	r2, r3
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d052      	beq.n	8014bda <tcp_receive+0x5ae>
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014b38:	4b81      	ldr	r3, [pc, #516]	; (8014d40 <tcp_receive+0x714>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	1ad3      	subs	r3, r2, r3
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	da4b      	bge.n	8014bda <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014b42:	4b81      	ldr	r3, [pc, #516]	; (8014d48 <tcp_receive+0x71c>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	1ad3      	subs	r3, r2, r3
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8014b54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014b5c:	10db      	asrs	r3, r3, #3
 8014b5e:	b21b      	sxth	r3, r3
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	1ad3      	subs	r3, r2, r3
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014b6e:	b29a      	uxth	r2, r3
 8014b70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b72:	4413      	add	r3, r2
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	b21a      	sxth	r2, r3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014b7c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	da03      	bge.n	8014b8c <tcp_receive+0x560>
        m = -m;
 8014b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b86:	425b      	negs	r3, r3
 8014b88:	b29b      	uxth	r3, r3
 8014b8a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8014b8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014b94:	109b      	asrs	r3, r3, #2
 8014b96:	b21b      	sxth	r3, r3
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014ba6:	b29a      	uxth	r2, r3
 8014ba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014baa:	4413      	add	r3, r2
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	b21a      	sxth	r2, r3
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014bba:	10db      	asrs	r3, r3, #3
 8014bbc:	b21b      	sxth	r3, r3
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	4413      	add	r3, r2
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	b21a      	sxth	r2, r3
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014bda:	4b5c      	ldr	r3, [pc, #368]	; (8014d4c <tcp_receive+0x720>)
 8014bdc:	881b      	ldrh	r3, [r3, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	f000 84f1 	beq.w	80155c6 <tcp_receive+0xf9a>
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	7d1b      	ldrb	r3, [r3, #20]
 8014be8:	2b06      	cmp	r3, #6
 8014bea:	f200 84ec 	bhi.w	80155c6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bf2:	4b57      	ldr	r3, [pc, #348]	; (8014d50 <tcp_receive+0x724>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	1ad3      	subs	r3, r2, r3
 8014bf8:	3b01      	subs	r3, #1
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	f2c0 80b8 	blt.w	8014d70 <tcp_receive+0x744>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c04:	4b51      	ldr	r3, [pc, #324]	; (8014d4c <tcp_receive+0x720>)
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	4619      	mov	r1, r3
 8014c0a:	4b51      	ldr	r3, [pc, #324]	; (8014d50 <tcp_receive+0x724>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	440b      	add	r3, r1
 8014c10:	1ad3      	subs	r3, r2, r3
 8014c12:	3301      	adds	r3, #1
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f300 80ab 	bgt.w	8014d70 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014c1a:	4b4e      	ldr	r3, [pc, #312]	; (8014d54 <tcp_receive+0x728>)
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c24:	4b4a      	ldr	r3, [pc, #296]	; (8014d50 <tcp_receive+0x724>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	1ad3      	subs	r3, r2, r3
 8014c2a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014c2c:	4b49      	ldr	r3, [pc, #292]	; (8014d54 <tcp_receive+0x728>)
 8014c2e:	685b      	ldr	r3, [r3, #4]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d106      	bne.n	8014c42 <tcp_receive+0x616>
 8014c34:	4b48      	ldr	r3, [pc, #288]	; (8014d58 <tcp_receive+0x72c>)
 8014c36:	f240 523c 	movw	r2, #1340	; 0x53c
 8014c3a:	4948      	ldr	r1, [pc, #288]	; (8014d5c <tcp_receive+0x730>)
 8014c3c:	4848      	ldr	r0, [pc, #288]	; (8014d60 <tcp_receive+0x734>)
 8014c3e:	f005 ff27 	bl	801aa90 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8014c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c44:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014c48:	4293      	cmp	r3, r2
 8014c4a:	dd06      	ble.n	8014c5a <tcp_receive+0x62e>
 8014c4c:	4b42      	ldr	r3, [pc, #264]	; (8014d58 <tcp_receive+0x72c>)
 8014c4e:	f240 523d 	movw	r2, #1341	; 0x53d
 8014c52:	4944      	ldr	r1, [pc, #272]	; (8014d64 <tcp_receive+0x738>)
 8014c54:	4842      	ldr	r0, [pc, #264]	; (8014d60 <tcp_receive+0x734>)
 8014c56:	f005 ff1b 	bl	801aa90 <iprintf>
      if (inseg.p->len < off) {
 8014c5a:	4b3e      	ldr	r3, [pc, #248]	; (8014d54 <tcp_receive+0x728>)
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	895b      	ldrh	r3, [r3, #10]
 8014c60:	461a      	mov	r2, r3
 8014c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c64:	4293      	cmp	r3, r2
 8014c66:	dd3e      	ble.n	8014ce6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014c68:	4b3a      	ldr	r3, [pc, #232]	; (8014d54 <tcp_receive+0x728>)
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	891b      	ldrh	r3, [r3, #8]
 8014c6e:	461a      	mov	r2, r3
 8014c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c72:	4293      	cmp	r3, r2
 8014c74:	dd06      	ble.n	8014c84 <tcp_receive+0x658>
 8014c76:	4b38      	ldr	r3, [pc, #224]	; (8014d58 <tcp_receive+0x72c>)
 8014c78:	f240 523f 	movw	r2, #1343	; 0x53f
 8014c7c:	493a      	ldr	r1, [pc, #232]	; (8014d68 <tcp_receive+0x73c>)
 8014c7e:	4838      	ldr	r0, [pc, #224]	; (8014d60 <tcp_receive+0x734>)
 8014c80:	f005 ff06 	bl	801aa90 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014c84:	4b33      	ldr	r3, [pc, #204]	; (8014d54 <tcp_receive+0x728>)
 8014c86:	685b      	ldr	r3, [r3, #4]
 8014c88:	891a      	ldrh	r2, [r3, #8]
 8014c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8014c92:	e00e      	b.n	8014cb2 <tcp_receive+0x686>
          off -= p->len;
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	895b      	ldrh	r3, [r3, #10]
 8014c98:	461a      	mov	r2, r3
 8014c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9c:	1a9b      	subs	r3, r3, r2
 8014c9e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8014ca0:	69bb      	ldr	r3, [r7, #24]
 8014ca2:	8a3a      	ldrh	r2, [r7, #16]
 8014ca4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	2200      	movs	r2, #0
 8014caa:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8014cb2:	69bb      	ldr	r3, [r7, #24]
 8014cb4:	895b      	ldrh	r3, [r3, #10]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cba:	4293      	cmp	r3, r2
 8014cbc:	dcea      	bgt.n	8014c94 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	425b      	negs	r3, r3
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	b21b      	sxth	r3, r3
 8014cc8:	4619      	mov	r1, r3
 8014cca:	69b8      	ldr	r0, [r7, #24]
 8014ccc:	f7fc fc50 	bl	8011570 <pbuf_header>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d01c      	beq.n	8014d10 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014cd6:	4b20      	ldr	r3, [pc, #128]	; (8014d58 <tcp_receive+0x72c>)
 8014cd8:	f240 524c 	movw	r2, #1356	; 0x54c
 8014cdc:	4923      	ldr	r1, [pc, #140]	; (8014d6c <tcp_receive+0x740>)
 8014cde:	4820      	ldr	r0, [pc, #128]	; (8014d60 <tcp_receive+0x734>)
 8014ce0:	f005 fed6 	bl	801aa90 <iprintf>
 8014ce4:	e014      	b.n	8014d10 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8014ce6:	4b1b      	ldr	r3, [pc, #108]	; (8014d54 <tcp_receive+0x728>)
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cec:	b292      	uxth	r2, r2
 8014cee:	4252      	negs	r2, r2
 8014cf0:	b292      	uxth	r2, r2
 8014cf2:	b212      	sxth	r2, r2
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7fc fc3a 	bl	8011570 <pbuf_header>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d006      	beq.n	8014d10 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014d02:	4b15      	ldr	r3, [pc, #84]	; (8014d58 <tcp_receive+0x72c>)
 8014d04:	f240 5251 	movw	r2, #1361	; 0x551
 8014d08:	4918      	ldr	r1, [pc, #96]	; (8014d6c <tcp_receive+0x740>)
 8014d0a:	4815      	ldr	r0, [pc, #84]	; (8014d60 <tcp_receive+0x734>)
 8014d0c:	f005 fec0 	bl	801aa90 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8014d10:	4b10      	ldr	r3, [pc, #64]	; (8014d54 <tcp_receive+0x728>)
 8014d12:	891a      	ldrh	r2, [r3, #8]
 8014d14:	4b0e      	ldr	r3, [pc, #56]	; (8014d50 <tcp_receive+0x724>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	b299      	uxth	r1, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d1e:	b29b      	uxth	r3, r3
 8014d20:	1acb      	subs	r3, r1, r3
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	4413      	add	r3, r2
 8014d26:	b29a      	uxth	r2, r3
 8014d28:	4b0a      	ldr	r3, [pc, #40]	; (8014d54 <tcp_receive+0x728>)
 8014d2a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d30:	4a07      	ldr	r2, [pc, #28]	; (8014d50 <tcp_receive+0x724>)
 8014d32:	6013      	str	r3, [r2, #0]
 8014d34:	4b07      	ldr	r3, [pc, #28]	; (8014d54 <tcp_receive+0x728>)
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	4a05      	ldr	r2, [pc, #20]	; (8014d50 <tcp_receive+0x724>)
 8014d3a:	6812      	ldr	r2, [r2, #0]
 8014d3c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014d3e:	e025      	b.n	8014d8c <tcp_receive+0x760>
 8014d40:	2000422c 	.word	0x2000422c
 8014d44:	20004230 	.word	0x20004230
 8014d48:	2000ab54 	.word	0x2000ab54
 8014d4c:	20004232 	.word	0x20004232
 8014d50:	20004228 	.word	0x20004228
 8014d54:	20004208 	.word	0x20004208
 8014d58:	0801cfe4 	.word	0x0801cfe4
 8014d5c:	0801d26c 	.word	0x0801d26c
 8014d60:	0801d028 	.word	0x0801d028
 8014d64:	0801d27c 	.word	0x0801d27c
 8014d68:	0801d28c 	.word	0x0801d28c
 8014d6c:	0801d29c 	.word	0x0801d29c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014d70:	4b87      	ldr	r3, [pc, #540]	; (8014f90 <tcp_receive+0x964>)
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d78:	1ad3      	subs	r3, r2, r3
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	da06      	bge.n	8014d8c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	7e9b      	ldrb	r3, [r3, #26]
 8014d82:	f043 0302 	orr.w	r3, r3, #2
 8014d86:	b2da      	uxtb	r2, r3
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014d8c:	4b80      	ldr	r3, [pc, #512]	; (8014f90 <tcp_receive+0x964>)
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d94:	1ad3      	subs	r3, r2, r3
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	f2c0 8410 	blt.w	80155bc <tcp_receive+0xf90>
 8014d9c:	4b7c      	ldr	r3, [pc, #496]	; (8014f90 <tcp_receive+0x964>)
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014da4:	6879      	ldr	r1, [r7, #4]
 8014da6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014da8:	440b      	add	r3, r1
 8014daa:	1ad3      	subs	r3, r2, r3
 8014dac:	3301      	adds	r3, #1
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	f300 8404 	bgt.w	80155bc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014db8:	4b75      	ldr	r3, [pc, #468]	; (8014f90 <tcp_receive+0x964>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	f040 8287 	bne.w	80152d0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014dc2:	4b74      	ldr	r3, [pc, #464]	; (8014f94 <tcp_receive+0x968>)
 8014dc4:	891c      	ldrh	r4, [r3, #8]
 8014dc6:	4b73      	ldr	r3, [pc, #460]	; (8014f94 <tcp_receive+0x968>)
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	899b      	ldrh	r3, [r3, #12]
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7fb fa58 	bl	8010284 <lwip_htons>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	f003 0303 	and.w	r3, r3, #3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d001      	beq.n	8014de2 <tcp_receive+0x7b6>
 8014dde:	2301      	movs	r3, #1
 8014de0:	e000      	b.n	8014de4 <tcp_receive+0x7b8>
 8014de2:	2300      	movs	r3, #0
 8014de4:	4423      	add	r3, r4
 8014de6:	b29a      	uxth	r2, r3
 8014de8:	4b6b      	ldr	r3, [pc, #428]	; (8014f98 <tcp_receive+0x96c>)
 8014dea:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014df0:	4b69      	ldr	r3, [pc, #420]	; (8014f98 <tcp_receive+0x96c>)
 8014df2:	881b      	ldrh	r3, [r3, #0]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d26e      	bcs.n	8014ed6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014df8:	4b66      	ldr	r3, [pc, #408]	; (8014f94 <tcp_receive+0x968>)
 8014dfa:	68db      	ldr	r3, [r3, #12]
 8014dfc:	899b      	ldrh	r3, [r3, #12]
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fb fa3f 	bl	8010284 <lwip_htons>
 8014e06:	4603      	mov	r3, r0
 8014e08:	f003 0301 	and.w	r3, r3, #1
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d01b      	beq.n	8014e48 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014e10:	4b60      	ldr	r3, [pc, #384]	; (8014f94 <tcp_receive+0x968>)
 8014e12:	68db      	ldr	r3, [r3, #12]
 8014e14:	899b      	ldrh	r3, [r3, #12]
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e1c:	b29c      	uxth	r4, r3
 8014e1e:	4b5d      	ldr	r3, [pc, #372]	; (8014f94 <tcp_receive+0x968>)
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	899b      	ldrh	r3, [r3, #12]
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7fb fa2c 	bl	8010284 <lwip_htons>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7fb fa25 	bl	8010284 <lwip_htons>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	4b55      	ldr	r3, [pc, #340]	; (8014f94 <tcp_receive+0x968>)
 8014e40:	68db      	ldr	r3, [r3, #12]
 8014e42:	4322      	orrs	r2, r4
 8014e44:	b292      	uxth	r2, r2
 8014e46:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014e4c:	4b51      	ldr	r3, [pc, #324]	; (8014f94 <tcp_receive+0x968>)
 8014e4e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014e50:	4b50      	ldr	r3, [pc, #320]	; (8014f94 <tcp_receive+0x968>)
 8014e52:	68db      	ldr	r3, [r3, #12]
 8014e54:	899b      	ldrh	r3, [r3, #12]
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7fb fa13 	bl	8010284 <lwip_htons>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	f003 0302 	and.w	r3, r3, #2
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d005      	beq.n	8014e74 <tcp_receive+0x848>
            inseg.len -= 1;
 8014e68:	4b4a      	ldr	r3, [pc, #296]	; (8014f94 <tcp_receive+0x968>)
 8014e6a:	891b      	ldrh	r3, [r3, #8]
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	b29a      	uxth	r2, r3
 8014e70:	4b48      	ldr	r3, [pc, #288]	; (8014f94 <tcp_receive+0x968>)
 8014e72:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014e74:	4b47      	ldr	r3, [pc, #284]	; (8014f94 <tcp_receive+0x968>)
 8014e76:	685a      	ldr	r2, [r3, #4]
 8014e78:	4b46      	ldr	r3, [pc, #280]	; (8014f94 <tcp_receive+0x968>)
 8014e7a:	891b      	ldrh	r3, [r3, #8]
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	4610      	mov	r0, r2
 8014e80:	f7fc fa26 	bl	80112d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014e84:	4b43      	ldr	r3, [pc, #268]	; (8014f94 <tcp_receive+0x968>)
 8014e86:	891c      	ldrh	r4, [r3, #8]
 8014e88:	4b42      	ldr	r3, [pc, #264]	; (8014f94 <tcp_receive+0x968>)
 8014e8a:	68db      	ldr	r3, [r3, #12]
 8014e8c:	899b      	ldrh	r3, [r3, #12]
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7fb f9f7 	bl	8010284 <lwip_htons>
 8014e96:	4603      	mov	r3, r0
 8014e98:	f003 0303 	and.w	r3, r3, #3
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d001      	beq.n	8014ea4 <tcp_receive+0x878>
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	e000      	b.n	8014ea6 <tcp_receive+0x87a>
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	4423      	add	r3, r4
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	4b3b      	ldr	r3, [pc, #236]	; (8014f98 <tcp_receive+0x96c>)
 8014eac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014eae:	4b3a      	ldr	r3, [pc, #232]	; (8014f98 <tcp_receive+0x96c>)
 8014eb0:	881b      	ldrh	r3, [r3, #0]
 8014eb2:	461a      	mov	r2, r3
 8014eb4:	4b36      	ldr	r3, [pc, #216]	; (8014f90 <tcp_receive+0x964>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	441a      	add	r2, r3
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ebe:	6879      	ldr	r1, [r7, #4]
 8014ec0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ec2:	440b      	add	r3, r1
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d006      	beq.n	8014ed6 <tcp_receive+0x8aa>
 8014ec8:	4b34      	ldr	r3, [pc, #208]	; (8014f9c <tcp_receive+0x970>)
 8014eca:	f240 527f 	movw	r2, #1407	; 0x57f
 8014ece:	4934      	ldr	r1, [pc, #208]	; (8014fa0 <tcp_receive+0x974>)
 8014ed0:	4834      	ldr	r0, [pc, #208]	; (8014fa4 <tcp_receive+0x978>)
 8014ed2:	f005 fddd 	bl	801aa90 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	f000 80e1 	beq.w	80150a2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014ee0:	4b2c      	ldr	r3, [pc, #176]	; (8014f94 <tcp_receive+0x968>)
 8014ee2:	68db      	ldr	r3, [r3, #12]
 8014ee4:	899b      	ldrh	r3, [r3, #12]
 8014ee6:	b29b      	uxth	r3, r3
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fb f9cb 	bl	8010284 <lwip_htons>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	f003 0301 	and.w	r3, r3, #1
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d010      	beq.n	8014f1a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014ef8:	e00a      	b.n	8014f10 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014efe:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f04:	681a      	ldr	r2, [r3, #0]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8014f0a:	68b8      	ldr	r0, [r7, #8]
 8014f0c:	f7fd fe6d 	bl	8012bea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d1f0      	bne.n	8014efa <tcp_receive+0x8ce>
 8014f18:	e0c3      	b.n	80150a2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014f20:	e04f      	b.n	8014fc2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	899b      	ldrh	r3, [r3, #12]
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7fb f9aa 	bl	8010284 <lwip_htons>
 8014f30:	4603      	mov	r3, r0
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d03b      	beq.n	8014fb2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014f3a:	4b16      	ldr	r3, [pc, #88]	; (8014f94 <tcp_receive+0x968>)
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	899b      	ldrh	r3, [r3, #12]
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7fb f99e 	bl	8010284 <lwip_htons>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d12f      	bne.n	8014fb2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014f52:	4b10      	ldr	r3, [pc, #64]	; (8014f94 <tcp_receive+0x968>)
 8014f54:	68db      	ldr	r3, [r3, #12]
 8014f56:	899b      	ldrh	r3, [r3, #12]
 8014f58:	b29c      	uxth	r4, r3
 8014f5a:	2001      	movs	r0, #1
 8014f5c:	f7fb f992 	bl	8010284 <lwip_htons>
 8014f60:	4603      	mov	r3, r0
 8014f62:	461a      	mov	r2, r3
 8014f64:	4b0b      	ldr	r3, [pc, #44]	; (8014f94 <tcp_receive+0x968>)
 8014f66:	68db      	ldr	r3, [r3, #12]
 8014f68:	4322      	orrs	r2, r4
 8014f6a:	b292      	uxth	r2, r2
 8014f6c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014f6e:	4b09      	ldr	r3, [pc, #36]	; (8014f94 <tcp_receive+0x968>)
 8014f70:	891c      	ldrh	r4, [r3, #8]
 8014f72:	4b08      	ldr	r3, [pc, #32]	; (8014f94 <tcp_receive+0x968>)
 8014f74:	68db      	ldr	r3, [r3, #12]
 8014f76:	899b      	ldrh	r3, [r3, #12]
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7fb f982 	bl	8010284 <lwip_htons>
 8014f80:	4603      	mov	r3, r0
 8014f82:	f003 0303 	and.w	r3, r3, #3
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d00e      	beq.n	8014fa8 <tcp_receive+0x97c>
 8014f8a:	2301      	movs	r3, #1
 8014f8c:	e00d      	b.n	8014faa <tcp_receive+0x97e>
 8014f8e:	bf00      	nop
 8014f90:	20004228 	.word	0x20004228
 8014f94:	20004208 	.word	0x20004208
 8014f98:	20004232 	.word	0x20004232
 8014f9c:	0801cfe4 	.word	0x0801cfe4
 8014fa0:	0801d2b0 	.word	0x0801d2b0
 8014fa4:	0801d028 	.word	0x0801d028
 8014fa8:	2300      	movs	r3, #0
 8014faa:	4423      	add	r3, r4
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	4b95      	ldr	r3, [pc, #596]	; (8015204 <tcp_receive+0xbd8>)
 8014fb0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8014fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8014fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8014fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014fbe:	f7fd fe14 	bl	8012bea <tcp_seg_free>
            while (next &&
 8014fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d00e      	beq.n	8014fe6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014fc8:	4b8e      	ldr	r3, [pc, #568]	; (8015204 <tcp_receive+0xbd8>)
 8014fca:	881b      	ldrh	r3, [r3, #0]
 8014fcc:	461a      	mov	r2, r3
 8014fce:	4b8e      	ldr	r3, [pc, #568]	; (8015208 <tcp_receive+0xbdc>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	441a      	add	r2, r3
 8014fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd6:	68db      	ldr	r3, [r3, #12]
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014fdc:	8909      	ldrh	r1, [r1, #8]
 8014fde:	440b      	add	r3, r1
 8014fe0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	da9d      	bge.n	8014f22 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d057      	beq.n	801509c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8014fec:	4b85      	ldr	r3, [pc, #532]	; (8015204 <tcp_receive+0xbd8>)
 8014fee:	881b      	ldrh	r3, [r3, #0]
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	4b85      	ldr	r3, [pc, #532]	; (8015208 <tcp_receive+0xbdc>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	441a      	add	r2, r3
 8014ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015000:	2b00      	cmp	r3, #0
 8015002:	dd4b      	ble.n	801509c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	685b      	ldr	r3, [r3, #4]
 801500a:	b29a      	uxth	r2, r3
 801500c:	4b7e      	ldr	r3, [pc, #504]	; (8015208 <tcp_receive+0xbdc>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	b29b      	uxth	r3, r3
 8015012:	1ad3      	subs	r3, r2, r3
 8015014:	b29a      	uxth	r2, r3
 8015016:	4b7d      	ldr	r3, [pc, #500]	; (801520c <tcp_receive+0xbe0>)
 8015018:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801501a:	4b7c      	ldr	r3, [pc, #496]	; (801520c <tcp_receive+0xbe0>)
 801501c:	68db      	ldr	r3, [r3, #12]
 801501e:	899b      	ldrh	r3, [r3, #12]
 8015020:	b29b      	uxth	r3, r3
 8015022:	4618      	mov	r0, r3
 8015024:	f7fb f92e 	bl	8010284 <lwip_htons>
 8015028:	4603      	mov	r3, r0
 801502a:	f003 0302 	and.w	r3, r3, #2
 801502e:	2b00      	cmp	r3, #0
 8015030:	d005      	beq.n	801503e <tcp_receive+0xa12>
                inseg.len -= 1;
 8015032:	4b76      	ldr	r3, [pc, #472]	; (801520c <tcp_receive+0xbe0>)
 8015034:	891b      	ldrh	r3, [r3, #8]
 8015036:	3b01      	subs	r3, #1
 8015038:	b29a      	uxth	r2, r3
 801503a:	4b74      	ldr	r3, [pc, #464]	; (801520c <tcp_receive+0xbe0>)
 801503c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801503e:	4b73      	ldr	r3, [pc, #460]	; (801520c <tcp_receive+0xbe0>)
 8015040:	685a      	ldr	r2, [r3, #4]
 8015042:	4b72      	ldr	r3, [pc, #456]	; (801520c <tcp_receive+0xbe0>)
 8015044:	891b      	ldrh	r3, [r3, #8]
 8015046:	4619      	mov	r1, r3
 8015048:	4610      	mov	r0, r2
 801504a:	f7fc f941 	bl	80112d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801504e:	4b6f      	ldr	r3, [pc, #444]	; (801520c <tcp_receive+0xbe0>)
 8015050:	891c      	ldrh	r4, [r3, #8]
 8015052:	4b6e      	ldr	r3, [pc, #440]	; (801520c <tcp_receive+0xbe0>)
 8015054:	68db      	ldr	r3, [r3, #12]
 8015056:	899b      	ldrh	r3, [r3, #12]
 8015058:	b29b      	uxth	r3, r3
 801505a:	4618      	mov	r0, r3
 801505c:	f7fb f912 	bl	8010284 <lwip_htons>
 8015060:	4603      	mov	r3, r0
 8015062:	f003 0303 	and.w	r3, r3, #3
 8015066:	2b00      	cmp	r3, #0
 8015068:	d001      	beq.n	801506e <tcp_receive+0xa42>
 801506a:	2301      	movs	r3, #1
 801506c:	e000      	b.n	8015070 <tcp_receive+0xa44>
 801506e:	2300      	movs	r3, #0
 8015070:	4423      	add	r3, r4
 8015072:	b29a      	uxth	r2, r3
 8015074:	4b63      	ldr	r3, [pc, #396]	; (8015204 <tcp_receive+0xbd8>)
 8015076:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015078:	4b62      	ldr	r3, [pc, #392]	; (8015204 <tcp_receive+0xbd8>)
 801507a:	881b      	ldrh	r3, [r3, #0]
 801507c:	461a      	mov	r2, r3
 801507e:	4b62      	ldr	r3, [pc, #392]	; (8015208 <tcp_receive+0xbdc>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	441a      	add	r2, r3
 8015084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015086:	68db      	ldr	r3, [r3, #12]
 8015088:	685b      	ldr	r3, [r3, #4]
 801508a:	429a      	cmp	r2, r3
 801508c:	d006      	beq.n	801509c <tcp_receive+0xa70>
 801508e:	4b60      	ldr	r3, [pc, #384]	; (8015210 <tcp_receive+0xbe4>)
 8015090:	f240 52af 	movw	r2, #1455	; 0x5af
 8015094:	495f      	ldr	r1, [pc, #380]	; (8015214 <tcp_receive+0xbe8>)
 8015096:	4860      	ldr	r0, [pc, #384]	; (8015218 <tcp_receive+0xbec>)
 8015098:	f005 fcfa 	bl	801aa90 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150a0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80150a2:	4b58      	ldr	r3, [pc, #352]	; (8015204 <tcp_receive+0xbd8>)
 80150a4:	881b      	ldrh	r3, [r3, #0]
 80150a6:	461a      	mov	r2, r3
 80150a8:	4b57      	ldr	r3, [pc, #348]	; (8015208 <tcp_receive+0xbdc>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	441a      	add	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80150b6:	4b53      	ldr	r3, [pc, #332]	; (8015204 <tcp_receive+0xbd8>)
 80150b8:	881b      	ldrh	r3, [r3, #0]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d206      	bcs.n	80150cc <tcp_receive+0xaa0>
 80150be:	4b54      	ldr	r3, [pc, #336]	; (8015210 <tcp_receive+0xbe4>)
 80150c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80150c4:	4955      	ldr	r1, [pc, #340]	; (801521c <tcp_receive+0xbf0>)
 80150c6:	4854      	ldr	r0, [pc, #336]	; (8015218 <tcp_receive+0xbec>)
 80150c8:	f005 fce2 	bl	801aa90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80150d0:	4b4c      	ldr	r3, [pc, #304]	; (8015204 <tcp_receive+0xbd8>)
 80150d2:	881b      	ldrh	r3, [r3, #0]
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	b29a      	uxth	r2, r3
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f7fd f8f7 	bl	80122d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80150e2:	4b4a      	ldr	r3, [pc, #296]	; (801520c <tcp_receive+0xbe0>)
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	891b      	ldrh	r3, [r3, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d006      	beq.n	80150fa <tcp_receive+0xace>
          recv_data = inseg.p;
 80150ec:	4b47      	ldr	r3, [pc, #284]	; (801520c <tcp_receive+0xbe0>)
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	4a4b      	ldr	r2, [pc, #300]	; (8015220 <tcp_receive+0xbf4>)
 80150f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80150f4:	4b45      	ldr	r3, [pc, #276]	; (801520c <tcp_receive+0xbe0>)
 80150f6:	2200      	movs	r2, #0
 80150f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80150fa:	4b44      	ldr	r3, [pc, #272]	; (801520c <tcp_receive+0xbe0>)
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	899b      	ldrh	r3, [r3, #12]
 8015100:	b29b      	uxth	r3, r3
 8015102:	4618      	mov	r0, r3
 8015104:	f7fb f8be 	bl	8010284 <lwip_htons>
 8015108:	4603      	mov	r3, r0
 801510a:	f003 0301 	and.w	r3, r3, #1
 801510e:	2b00      	cmp	r3, #0
 8015110:	f000 80b4 	beq.w	801527c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015114:	4b43      	ldr	r3, [pc, #268]	; (8015224 <tcp_receive+0xbf8>)
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	f043 0320 	orr.w	r3, r3, #32
 801511c:	b2da      	uxtb	r2, r3
 801511e:	4b41      	ldr	r3, [pc, #260]	; (8015224 <tcp_receive+0xbf8>)
 8015120:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015122:	e0ab      	b.n	801527c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015128:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	4a35      	ldr	r2, [pc, #212]	; (8015208 <tcp_receive+0xbdc>)
 8015134:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	891b      	ldrh	r3, [r3, #8]
 801513a:	461c      	mov	r4, r3
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	899b      	ldrh	r3, [r3, #12]
 8015142:	b29b      	uxth	r3, r3
 8015144:	4618      	mov	r0, r3
 8015146:	f7fb f89d 	bl	8010284 <lwip_htons>
 801514a:	4603      	mov	r3, r0
 801514c:	f003 0303 	and.w	r3, r3, #3
 8015150:	2b00      	cmp	r3, #0
 8015152:	d001      	beq.n	8015158 <tcp_receive+0xb2c>
 8015154:	2301      	movs	r3, #1
 8015156:	e000      	b.n	801515a <tcp_receive+0xb2e>
 8015158:	2300      	movs	r3, #0
 801515a:	191a      	adds	r2, r3, r4
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015160:	441a      	add	r2, r3
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801516a:	461c      	mov	r4, r3
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	891b      	ldrh	r3, [r3, #8]
 8015170:	461d      	mov	r5, r3
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	899b      	ldrh	r3, [r3, #12]
 8015178:	b29b      	uxth	r3, r3
 801517a:	4618      	mov	r0, r3
 801517c:	f7fb f882 	bl	8010284 <lwip_htons>
 8015180:	4603      	mov	r3, r0
 8015182:	f003 0303 	and.w	r3, r3, #3
 8015186:	2b00      	cmp	r3, #0
 8015188:	d001      	beq.n	801518e <tcp_receive+0xb62>
 801518a:	2301      	movs	r3, #1
 801518c:	e000      	b.n	8015190 <tcp_receive+0xb64>
 801518e:	2300      	movs	r3, #0
 8015190:	442b      	add	r3, r5
 8015192:	429c      	cmp	r4, r3
 8015194:	d206      	bcs.n	80151a4 <tcp_receive+0xb78>
 8015196:	4b1e      	ldr	r3, [pc, #120]	; (8015210 <tcp_receive+0xbe4>)
 8015198:	f240 52de 	movw	r2, #1502	; 0x5de
 801519c:	4922      	ldr	r1, [pc, #136]	; (8015228 <tcp_receive+0xbfc>)
 801519e:	481e      	ldr	r0, [pc, #120]	; (8015218 <tcp_receive+0xbec>)
 80151a0:	f005 fc76 	bl	801aa90 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	891b      	ldrh	r3, [r3, #8]
 80151a8:	461c      	mov	r4, r3
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	68db      	ldr	r3, [r3, #12]
 80151ae:	899b      	ldrh	r3, [r3, #12]
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fb f866 	bl	8010284 <lwip_htons>
 80151b8:	4603      	mov	r3, r0
 80151ba:	f003 0303 	and.w	r3, r3, #3
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d001      	beq.n	80151c6 <tcp_receive+0xb9a>
 80151c2:	2301      	movs	r3, #1
 80151c4:	e000      	b.n	80151c8 <tcp_receive+0xb9c>
 80151c6:	2300      	movs	r3, #0
 80151c8:	1919      	adds	r1, r3, r4
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80151ce:	b28b      	uxth	r3, r1
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	b29a      	uxth	r2, r3
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f7fd f879 	bl	80122d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	891b      	ldrh	r3, [r3, #8]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d028      	beq.n	801523a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80151e8:	4b0d      	ldr	r3, [pc, #52]	; (8015220 <tcp_receive+0xbf4>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d01d      	beq.n	801522c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80151f0:	4b0b      	ldr	r3, [pc, #44]	; (8015220 <tcp_receive+0xbf4>)
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	4619      	mov	r1, r3
 80151fa:	4610      	mov	r0, r2
 80151fc:	f7fc fab6 	bl	801176c <pbuf_cat>
 8015200:	e018      	b.n	8015234 <tcp_receive+0xc08>
 8015202:	bf00      	nop
 8015204:	20004232 	.word	0x20004232
 8015208:	20004228 	.word	0x20004228
 801520c:	20004208 	.word	0x20004208
 8015210:	0801cfe4 	.word	0x0801cfe4
 8015214:	0801d2e8 	.word	0x0801d2e8
 8015218:	0801d028 	.word	0x0801d028
 801521c:	0801d324 	.word	0x0801d324
 8015220:	20004238 	.word	0x20004238
 8015224:	20004235 	.word	0x20004235
 8015228:	0801d344 	.word	0x0801d344
            } else {
              recv_data = cseg->p;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	4a71      	ldr	r2, [pc, #452]	; (80153f8 <tcp_receive+0xdcc>)
 8015232:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	2200      	movs	r2, #0
 8015238:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	68db      	ldr	r3, [r3, #12]
 801523e:	899b      	ldrh	r3, [r3, #12]
 8015240:	b29b      	uxth	r3, r3
 8015242:	4618      	mov	r0, r3
 8015244:	f7fb f81e 	bl	8010284 <lwip_htons>
 8015248:	4603      	mov	r3, r0
 801524a:	f003 0301 	and.w	r3, r3, #1
 801524e:	2b00      	cmp	r3, #0
 8015250:	d00d      	beq.n	801526e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015252:	4b6a      	ldr	r3, [pc, #424]	; (80153fc <tcp_receive+0xdd0>)
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	f043 0320 	orr.w	r3, r3, #32
 801525a:	b2da      	uxtb	r2, r3
 801525c:	4b67      	ldr	r3, [pc, #412]	; (80153fc <tcp_receive+0xdd0>)
 801525e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	7d1b      	ldrb	r3, [r3, #20]
 8015264:	2b04      	cmp	r3, #4
 8015266:	d102      	bne.n	801526e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2207      	movs	r2, #7
 801526c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8015276:	68f8      	ldr	r0, [r7, #12]
 8015278:	f7fd fcb7 	bl	8012bea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015280:	2b00      	cmp	r3, #0
 8015282:	d008      	beq.n	8015296 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015288:	68db      	ldr	r3, [r3, #12]
 801528a:	685a      	ldr	r2, [r3, #4]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015290:	429a      	cmp	r2, r3
 8015292:	f43f af47 	beq.w	8015124 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	7e9b      	ldrb	r3, [r3, #26]
 801529a:	f003 0301 	and.w	r3, r3, #1
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d00e      	beq.n	80152c0 <tcp_receive+0xc94>
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	7e9b      	ldrb	r3, [r3, #26]
 80152a6:	f023 0301 	bic.w	r3, r3, #1
 80152aa:	b2da      	uxtb	r2, r3
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	769a      	strb	r2, [r3, #26]
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	7e9b      	ldrb	r3, [r3, #26]
 80152b4:	f043 0302 	orr.w	r3, r3, #2
 80152b8:	b2da      	uxtb	r2, r3
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80152be:	e181      	b.n	80155c4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	7e9b      	ldrb	r3, [r3, #26]
 80152c4:	f043 0301 	orr.w	r3, r3, #1
 80152c8:	b2da      	uxtb	r2, r3
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80152ce:	e179      	b.n	80155c4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f001 f8c5 	bl	8016460 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d106      	bne.n	80152ec <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80152de:	4848      	ldr	r0, [pc, #288]	; (8015400 <tcp_receive+0xdd4>)
 80152e0:	f7fd fc9b 	bl	8012c1a <tcp_seg_copy>
 80152e4:	4602      	mov	r2, r0
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80152ea:	e16b      	b.n	80155c4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80152ec:	2300      	movs	r3, #0
 80152ee:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152f6:	e150      	b.n	801559a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 80152f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fa:	68db      	ldr	r3, [r3, #12]
 80152fc:	685a      	ldr	r2, [r3, #4]
 80152fe:	4b41      	ldr	r3, [pc, #260]	; (8015404 <tcp_receive+0xdd8>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	d11d      	bne.n	8015342 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015306:	4b3e      	ldr	r3, [pc, #248]	; (8015400 <tcp_receive+0xdd4>)
 8015308:	891a      	ldrh	r2, [r3, #8]
 801530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530c:	891b      	ldrh	r3, [r3, #8]
 801530e:	429a      	cmp	r2, r3
 8015310:	f240 8148 	bls.w	80155a4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8015314:	483a      	ldr	r0, [pc, #232]	; (8015400 <tcp_receive+0xdd4>)
 8015316:	f7fd fc80 	bl	8012c1a <tcp_seg_copy>
 801531a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2b00      	cmp	r3, #0
 8015320:	f000 8142 	beq.w	80155a8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8015324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015326:	2b00      	cmp	r3, #0
 8015328:	d003      	beq.n	8015332 <tcp_receive+0xd06>
                    prev->next = cseg;
 801532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532c:	68fa      	ldr	r2, [r7, #12]
 801532e:	601a      	str	r2, [r3, #0]
 8015330:	e002      	b.n	8015338 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	68fa      	ldr	r2, [r7, #12]
 8015336:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801533a:	68f8      	ldr	r0, [r7, #12]
 801533c:	f7ff f900 	bl	8014540 <tcp_oos_insert_segment>
                }
                break;
 8015340:	e132      	b.n	80155a8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015344:	2b00      	cmp	r3, #0
 8015346:	d117      	bne.n	8015378 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015348:	4b2e      	ldr	r3, [pc, #184]	; (8015404 <tcp_receive+0xdd8>)
 801534a:	681a      	ldr	r2, [r3, #0]
 801534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801534e:	68db      	ldr	r3, [r3, #12]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	1ad3      	subs	r3, r2, r3
 8015354:	2b00      	cmp	r3, #0
 8015356:	da57      	bge.n	8015408 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8015358:	4829      	ldr	r0, [pc, #164]	; (8015400 <tcp_receive+0xdd4>)
 801535a:	f7fd fc5e 	bl	8012c1a <tcp_seg_copy>
 801535e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2b00      	cmp	r3, #0
 8015364:	f000 8122 	beq.w	80155ac <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	68fa      	ldr	r2, [r7, #12]
 801536c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801536e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015370:	68f8      	ldr	r0, [r7, #12]
 8015372:	f7ff f8e5 	bl	8014540 <tcp_oos_insert_segment>
                  }
                  break;
 8015376:	e119      	b.n	80155ac <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8015378:	4b22      	ldr	r3, [pc, #136]	; (8015404 <tcp_receive+0xdd8>)
 801537a:	681a      	ldr	r2, [r3, #0]
 801537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801537e:	68db      	ldr	r3, [r3, #12]
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	3b01      	subs	r3, #1
 8015386:	2b00      	cmp	r3, #0
 8015388:	db3e      	blt.n	8015408 <tcp_receive+0xddc>
 801538a:	4b1e      	ldr	r3, [pc, #120]	; (8015404 <tcp_receive+0xdd8>)
 801538c:	681a      	ldr	r2, [r3, #0]
 801538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015390:	68db      	ldr	r3, [r3, #12]
 8015392:	685b      	ldr	r3, [r3, #4]
 8015394:	1ad3      	subs	r3, r2, r3
 8015396:	3301      	adds	r3, #1
 8015398:	2b00      	cmp	r3, #0
 801539a:	dc35      	bgt.n	8015408 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801539c:	4818      	ldr	r0, [pc, #96]	; (8015400 <tcp_receive+0xdd4>)
 801539e:	f7fd fc3c 	bl	8012c1a <tcp_seg_copy>
 80153a2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	f000 8102 	beq.w	80155b0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80153ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ae:	68db      	ldr	r3, [r3, #12]
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153b4:	8912      	ldrh	r2, [r2, #8]
 80153b6:	441a      	add	r2, r3
 80153b8:	4b12      	ldr	r3, [pc, #72]	; (8015404 <tcp_receive+0xdd8>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	1ad3      	subs	r3, r2, r3
 80153be:	2b00      	cmp	r3, #0
 80153c0:	dd12      	ble.n	80153e8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80153c2:	4b10      	ldr	r3, [pc, #64]	; (8015404 <tcp_receive+0xdd8>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	b29a      	uxth	r2, r3
 80153c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ca:	68db      	ldr	r3, [r3, #12]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	b29b      	uxth	r3, r3
 80153d0:	1ad3      	subs	r3, r2, r3
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80153d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153da:	685a      	ldr	r2, [r3, #4]
 80153dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153de:	891b      	ldrh	r3, [r3, #8]
 80153e0:	4619      	mov	r1, r3
 80153e2:	4610      	mov	r0, r2
 80153e4:	f7fb ff74 	bl	80112d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80153e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ea:	68fa      	ldr	r2, [r7, #12]
 80153ec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80153ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f7ff f8a5 	bl	8014540 <tcp_oos_insert_segment>
                  }
                  break;
 80153f6:	e0db      	b.n	80155b0 <tcp_receive+0xf84>
 80153f8:	20004238 	.word	0x20004238
 80153fc:	20004235 	.word	0x20004235
 8015400:	20004208 	.word	0x20004208
 8015404:	20004228 	.word	0x20004228
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	f040 80bf 	bne.w	8015590 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015412:	4b7c      	ldr	r3, [pc, #496]	; (8015604 <tcp_receive+0xfd8>)
 8015414:	681a      	ldr	r2, [r3, #0]
 8015416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015418:	68db      	ldr	r3, [r3, #12]
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801541e:	2b00      	cmp	r3, #0
 8015420:	f340 80b6 	ble.w	8015590 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	899b      	ldrh	r3, [r3, #12]
 801542a:	b29b      	uxth	r3, r3
 801542c:	4618      	mov	r0, r3
 801542e:	f7fa ff29 	bl	8010284 <lwip_htons>
 8015432:	4603      	mov	r3, r0
 8015434:	f003 0301 	and.w	r3, r3, #1
 8015438:	2b00      	cmp	r3, #0
 801543a:	f040 80bb 	bne.w	80155b4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801543e:	4872      	ldr	r0, [pc, #456]	; (8015608 <tcp_receive+0xfdc>)
 8015440:	f7fd fbeb 	bl	8012c1a <tcp_seg_copy>
 8015444:	4602      	mov	r2, r0
 8015446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015448:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	f000 80b2 	beq.w	80155b8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801545c:	8912      	ldrh	r2, [r2, #8]
 801545e:	441a      	add	r2, r3
 8015460:	4b68      	ldr	r3, [pc, #416]	; (8015604 <tcp_receive+0xfd8>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	1ad3      	subs	r3, r2, r3
 8015466:	2b00      	cmp	r3, #0
 8015468:	dd12      	ble.n	8015490 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801546a:	4b66      	ldr	r3, [pc, #408]	; (8015604 <tcp_receive+0xfd8>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	b29a      	uxth	r2, r3
 8015470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	b29b      	uxth	r3, r3
 8015478:	1ad3      	subs	r3, r2, r3
 801547a:	b29a      	uxth	r2, r3
 801547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015482:	685a      	ldr	r2, [r3, #4]
 8015484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015486:	891b      	ldrh	r3, [r3, #8]
 8015488:	4619      	mov	r1, r3
 801548a:	4610      	mov	r0, r2
 801548c:	f7fb ff20 	bl	80112d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015490:	4b5e      	ldr	r3, [pc, #376]	; (801560c <tcp_receive+0xfe0>)
 8015492:	881b      	ldrh	r3, [r3, #0]
 8015494:	461a      	mov	r2, r3
 8015496:	4b5b      	ldr	r3, [pc, #364]	; (8015604 <tcp_receive+0xfd8>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	441a      	add	r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154a0:	6879      	ldr	r1, [r7, #4]
 80154a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80154a4:	440b      	add	r3, r1
 80154a6:	1ad3      	subs	r3, r2, r3
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	f340 8085 	ble.w	80155b8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80154ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	899b      	ldrh	r3, [r3, #12]
 80154b6:	b29b      	uxth	r3, r3
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7fa fee3 	bl	8010284 <lwip_htons>
 80154be:	4603      	mov	r3, r0
 80154c0:	f003 0301 	and.w	r3, r3, #1
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d01e      	beq.n	8015506 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80154c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	68db      	ldr	r3, [r3, #12]
 80154ce:	899b      	ldrh	r3, [r3, #12]
 80154d0:	b29b      	uxth	r3, r3
 80154d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80154d6:	b29c      	uxth	r4, r3
 80154d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	68db      	ldr	r3, [r3, #12]
 80154de:	899b      	ldrh	r3, [r3, #12]
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fa fece 	bl	8010284 <lwip_htons>
 80154e8:	4603      	mov	r3, r0
 80154ea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fa fec7 	bl	8010284 <lwip_htons>
 80154f6:	4603      	mov	r3, r0
 80154f8:	461a      	mov	r2, r3
 80154fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	4322      	orrs	r2, r4
 8015502:	b292      	uxth	r2, r2
 8015504:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801550a:	b29a      	uxth	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015510:	4413      	add	r3, r2
 8015512:	b299      	uxth	r1, r3
 8015514:	4b3b      	ldr	r3, [pc, #236]	; (8015604 <tcp_receive+0xfd8>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	b29a      	uxth	r2, r3
 801551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	1a8a      	subs	r2, r1, r2
 8015520:	b292      	uxth	r2, r2
 8015522:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	685a      	ldr	r2, [r3, #4]
 801552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	891b      	ldrh	r3, [r3, #8]
 8015530:	4619      	mov	r1, r3
 8015532:	4610      	mov	r0, r2
 8015534:	f7fb fecc 	bl	80112d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	891c      	ldrh	r4, [r3, #8]
 801553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	68db      	ldr	r3, [r3, #12]
 8015544:	899b      	ldrh	r3, [r3, #12]
 8015546:	b29b      	uxth	r3, r3
 8015548:	4618      	mov	r0, r3
 801554a:	f7fa fe9b 	bl	8010284 <lwip_htons>
 801554e:	4603      	mov	r3, r0
 8015550:	f003 0303 	and.w	r3, r3, #3
 8015554:	2b00      	cmp	r3, #0
 8015556:	d001      	beq.n	801555c <tcp_receive+0xf30>
 8015558:	2301      	movs	r3, #1
 801555a:	e000      	b.n	801555e <tcp_receive+0xf32>
 801555c:	2300      	movs	r3, #0
 801555e:	4423      	add	r3, r4
 8015560:	b29a      	uxth	r2, r3
 8015562:	4b2a      	ldr	r3, [pc, #168]	; (801560c <tcp_receive+0xfe0>)
 8015564:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015566:	4b29      	ldr	r3, [pc, #164]	; (801560c <tcp_receive+0xfe0>)
 8015568:	881b      	ldrh	r3, [r3, #0]
 801556a:	461a      	mov	r2, r3
 801556c:	4b25      	ldr	r3, [pc, #148]	; (8015604 <tcp_receive+0xfd8>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	441a      	add	r2, r3
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015576:	6879      	ldr	r1, [r7, #4]
 8015578:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801557a:	440b      	add	r3, r1
 801557c:	429a      	cmp	r2, r3
 801557e:	d01b      	beq.n	80155b8 <tcp_receive+0xf8c>
 8015580:	4b23      	ldr	r3, [pc, #140]	; (8015610 <tcp_receive+0xfe4>)
 8015582:	f240 627b 	movw	r2, #1659	; 0x67b
 8015586:	4923      	ldr	r1, [pc, #140]	; (8015614 <tcp_receive+0xfe8>)
 8015588:	4823      	ldr	r0, [pc, #140]	; (8015618 <tcp_receive+0xfec>)
 801558a:	f005 fa81 	bl	801aa90 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801558e:	e013      	b.n	80155b8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8015590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015592:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559c:	2b00      	cmp	r3, #0
 801559e:	f47f aeab 	bne.w	80152f8 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80155a2:	e00f      	b.n	80155c4 <tcp_receive+0xf98>
                break;
 80155a4:	bf00      	nop
 80155a6:	e00d      	b.n	80155c4 <tcp_receive+0xf98>
                break;
 80155a8:	bf00      	nop
 80155aa:	e00b      	b.n	80155c4 <tcp_receive+0xf98>
                  break;
 80155ac:	bf00      	nop
 80155ae:	e009      	b.n	80155c4 <tcp_receive+0xf98>
                  break;
 80155b0:	bf00      	nop
 80155b2:	e007      	b.n	80155c4 <tcp_receive+0xf98>
                  break;
 80155b4:	bf00      	nop
 80155b6:	e005      	b.n	80155c4 <tcp_receive+0xf98>
                break;
 80155b8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80155ba:	e003      	b.n	80155c4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f000 ff4f 	bl	8016460 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80155c2:	e01a      	b.n	80155fa <tcp_receive+0xfce>
 80155c4:	e019      	b.n	80155fa <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80155c6:	4b0f      	ldr	r3, [pc, #60]	; (8015604 <tcp_receive+0xfd8>)
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ce:	1ad3      	subs	r3, r2, r3
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	db0a      	blt.n	80155ea <tcp_receive+0xfbe>
 80155d4:	4b0b      	ldr	r3, [pc, #44]	; (8015604 <tcp_receive+0xfd8>)
 80155d6:	681a      	ldr	r2, [r3, #0]
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155dc:	6879      	ldr	r1, [r7, #4]
 80155de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80155e0:	440b      	add	r3, r1
 80155e2:	1ad3      	subs	r3, r2, r3
 80155e4:	3301      	adds	r3, #1
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	dd07      	ble.n	80155fa <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	7e9b      	ldrb	r3, [r3, #26]
 80155ee:	f043 0302 	orr.w	r3, r3, #2
 80155f2:	b2da      	uxtb	r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80155f8:	e7ff      	b.n	80155fa <tcp_receive+0xfce>
 80155fa:	bf00      	nop
 80155fc:	3734      	adds	r7, #52	; 0x34
 80155fe:	46bd      	mov	sp, r7
 8015600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015602:	bf00      	nop
 8015604:	20004228 	.word	0x20004228
 8015608:	20004208 	.word	0x20004208
 801560c:	20004232 	.word	0x20004232
 8015610:	0801cfe4 	.word	0x0801cfe4
 8015614:	0801d2b0 	.word	0x0801d2b0
 8015618:	0801d028 	.word	0x0801d028

0801561c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801561c:	b480      	push	{r7}
 801561e:	b083      	sub	sp, #12
 8015620:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8015622:	4b18      	ldr	r3, [pc, #96]	; (8015684 <tcp_getoptbyte+0x68>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d005      	beq.n	8015636 <tcp_getoptbyte+0x1a>
 801562a:	4b17      	ldr	r3, [pc, #92]	; (8015688 <tcp_getoptbyte+0x6c>)
 801562c:	881a      	ldrh	r2, [r3, #0]
 801562e:	4b17      	ldr	r3, [pc, #92]	; (801568c <tcp_getoptbyte+0x70>)
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	429a      	cmp	r2, r3
 8015634:	d20e      	bcs.n	8015654 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8015636:	4b16      	ldr	r3, [pc, #88]	; (8015690 <tcp_getoptbyte+0x74>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	3314      	adds	r3, #20
 801563c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801563e:	4b12      	ldr	r3, [pc, #72]	; (8015688 <tcp_getoptbyte+0x6c>)
 8015640:	881b      	ldrh	r3, [r3, #0]
 8015642:	1c5a      	adds	r2, r3, #1
 8015644:	b291      	uxth	r1, r2
 8015646:	4a10      	ldr	r2, [pc, #64]	; (8015688 <tcp_getoptbyte+0x6c>)
 8015648:	8011      	strh	r1, [r2, #0]
 801564a:	461a      	mov	r2, r3
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	4413      	add	r3, r2
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	e010      	b.n	8015676 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8015654:	4b0c      	ldr	r3, [pc, #48]	; (8015688 <tcp_getoptbyte+0x6c>)
 8015656:	881b      	ldrh	r3, [r3, #0]
 8015658:	1c5a      	adds	r2, r3, #1
 801565a:	b291      	uxth	r1, r2
 801565c:	4a0a      	ldr	r2, [pc, #40]	; (8015688 <tcp_getoptbyte+0x6c>)
 801565e:	8011      	strh	r1, [r2, #0]
 8015660:	b2da      	uxtb	r2, r3
 8015662:	4b0a      	ldr	r3, [pc, #40]	; (801568c <tcp_getoptbyte+0x70>)
 8015664:	881b      	ldrh	r3, [r3, #0]
 8015666:	b2db      	uxtb	r3, r3
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801566c:	4b05      	ldr	r3, [pc, #20]	; (8015684 <tcp_getoptbyte+0x68>)
 801566e:	681a      	ldr	r2, [r3, #0]
 8015670:	79fb      	ldrb	r3, [r7, #7]
 8015672:	4413      	add	r3, r2
 8015674:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015676:	4618      	mov	r0, r3
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
 8015682:	bf00      	nop
 8015684:	20004220 	.word	0x20004220
 8015688:	20004224 	.word	0x20004224
 801568c:	2000421e 	.word	0x2000421e
 8015690:	20004218 	.word	0x20004218

08015694 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801569c:	4b2d      	ldr	r3, [pc, #180]	; (8015754 <tcp_parseopt+0xc0>)
 801569e:	881b      	ldrh	r3, [r3, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d053      	beq.n	801574c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80156a4:	4b2c      	ldr	r3, [pc, #176]	; (8015758 <tcp_parseopt+0xc4>)
 80156a6:	2200      	movs	r2, #0
 80156a8:	801a      	strh	r2, [r3, #0]
 80156aa:	e043      	b.n	8015734 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80156ac:	f7ff ffb6 	bl	801561c <tcp_getoptbyte>
 80156b0:	4603      	mov	r3, r0
 80156b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80156b4:	7bfb      	ldrb	r3, [r7, #15]
 80156b6:	2b01      	cmp	r3, #1
 80156b8:	d03c      	beq.n	8015734 <tcp_parseopt+0xa0>
 80156ba:	2b02      	cmp	r3, #2
 80156bc:	d002      	beq.n	80156c4 <tcp_parseopt+0x30>
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d03f      	beq.n	8015742 <tcp_parseopt+0xae>
 80156c2:	e026      	b.n	8015712 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80156c4:	f7ff ffaa 	bl	801561c <tcp_getoptbyte>
 80156c8:	4603      	mov	r3, r0
 80156ca:	2b04      	cmp	r3, #4
 80156cc:	d13b      	bne.n	8015746 <tcp_parseopt+0xb2>
 80156ce:	4b22      	ldr	r3, [pc, #136]	; (8015758 <tcp_parseopt+0xc4>)
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	3302      	adds	r3, #2
 80156d4:	4a1f      	ldr	r2, [pc, #124]	; (8015754 <tcp_parseopt+0xc0>)
 80156d6:	8812      	ldrh	r2, [r2, #0]
 80156d8:	4293      	cmp	r3, r2
 80156da:	dc34      	bgt.n	8015746 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80156dc:	f7ff ff9e 	bl	801561c <tcp_getoptbyte>
 80156e0:	4603      	mov	r3, r0
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	021b      	lsls	r3, r3, #8
 80156e6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80156e8:	f7ff ff98 	bl	801561c <tcp_getoptbyte>
 80156ec:	4603      	mov	r3, r0
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	89bb      	ldrh	r3, [r7, #12]
 80156f2:	4313      	orrs	r3, r2
 80156f4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80156f6:	89bb      	ldrh	r3, [r7, #12]
 80156f8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80156fc:	d804      	bhi.n	8015708 <tcp_parseopt+0x74>
 80156fe:	89bb      	ldrh	r3, [r7, #12]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d001      	beq.n	8015708 <tcp_parseopt+0x74>
 8015704:	89ba      	ldrh	r2, [r7, #12]
 8015706:	e001      	b.n	801570c <tcp_parseopt+0x78>
 8015708:	f44f 7206 	mov.w	r2, #536	; 0x218
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8015710:	e010      	b.n	8015734 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8015712:	f7ff ff83 	bl	801561c <tcp_getoptbyte>
 8015716:	4603      	mov	r3, r0
 8015718:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801571a:	7afb      	ldrb	r3, [r7, #11]
 801571c:	2b01      	cmp	r3, #1
 801571e:	d914      	bls.n	801574a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8015720:	7afb      	ldrb	r3, [r7, #11]
 8015722:	b29a      	uxth	r2, r3
 8015724:	4b0c      	ldr	r3, [pc, #48]	; (8015758 <tcp_parseopt+0xc4>)
 8015726:	881b      	ldrh	r3, [r3, #0]
 8015728:	4413      	add	r3, r2
 801572a:	b29b      	uxth	r3, r3
 801572c:	3b02      	subs	r3, #2
 801572e:	b29a      	uxth	r2, r3
 8015730:	4b09      	ldr	r3, [pc, #36]	; (8015758 <tcp_parseopt+0xc4>)
 8015732:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015734:	4b08      	ldr	r3, [pc, #32]	; (8015758 <tcp_parseopt+0xc4>)
 8015736:	881a      	ldrh	r2, [r3, #0]
 8015738:	4b06      	ldr	r3, [pc, #24]	; (8015754 <tcp_parseopt+0xc0>)
 801573a:	881b      	ldrh	r3, [r3, #0]
 801573c:	429a      	cmp	r2, r3
 801573e:	d3b5      	bcc.n	80156ac <tcp_parseopt+0x18>
 8015740:	e004      	b.n	801574c <tcp_parseopt+0xb8>
        return;
 8015742:	bf00      	nop
 8015744:	e002      	b.n	801574c <tcp_parseopt+0xb8>
          return;
 8015746:	bf00      	nop
 8015748:	e000      	b.n	801574c <tcp_parseopt+0xb8>
          return;
 801574a:	bf00      	nop
      }
    }
  }
}
 801574c:	3710      	adds	r7, #16
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}
 8015752:	bf00      	nop
 8015754:	2000421c 	.word	0x2000421c
 8015758:	20004224 	.word	0x20004224

0801575c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801575c:	b480      	push	{r7}
 801575e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015760:	4b05      	ldr	r3, [pc, #20]	; (8015778 <tcp_trigger_input_pcb_close+0x1c>)
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	f043 0310 	orr.w	r3, r3, #16
 8015768:	b2da      	uxtb	r2, r3
 801576a:	4b03      	ldr	r3, [pc, #12]	; (8015778 <tcp_trigger_input_pcb_close+0x1c>)
 801576c:	701a      	strb	r2, [r3, #0]
}
 801576e:	bf00      	nop
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr
 8015778:	20004235 	.word	0x20004235

0801577c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b086      	sub	sp, #24
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	607b      	str	r3, [r7, #4]
 8015786:	460b      	mov	r3, r1
 8015788:	817b      	strh	r3, [r7, #10]
 801578a:	4613      	mov	r3, r2
 801578c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801578e:	897a      	ldrh	r2, [r7, #10]
 8015790:	893b      	ldrh	r3, [r7, #8]
 8015792:	4413      	add	r3, r2
 8015794:	b29b      	uxth	r3, r3
 8015796:	3314      	adds	r3, #20
 8015798:	b29b      	uxth	r3, r3
 801579a:	2200      	movs	r2, #0
 801579c:	4619      	mov	r1, r3
 801579e:	2001      	movs	r0, #1
 80157a0:	f7fb fb98 	bl	8010ed4 <pbuf_alloc>
 80157a4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d057      	beq.n	801585c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	895b      	ldrh	r3, [r3, #10]
 80157b0:	461a      	mov	r2, r3
 80157b2:	897b      	ldrh	r3, [r7, #10]
 80157b4:	3314      	adds	r3, #20
 80157b6:	429a      	cmp	r2, r3
 80157b8:	da05      	bge.n	80157c6 <tcp_output_alloc_header+0x4a>
 80157ba:	4b2b      	ldr	r3, [pc, #172]	; (8015868 <tcp_output_alloc_header+0xec>)
 80157bc:	2273      	movs	r2, #115	; 0x73
 80157be:	492b      	ldr	r1, [pc, #172]	; (801586c <tcp_output_alloc_header+0xf0>)
 80157c0:	482b      	ldr	r0, [pc, #172]	; (8015870 <tcp_output_alloc_header+0xf4>)
 80157c2:	f005 f965 	bl	801aa90 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	8adb      	ldrh	r3, [r3, #22]
 80157d0:	4618      	mov	r0, r3
 80157d2:	f7fa fd57 	bl	8010284 <lwip_htons>
 80157d6:	4603      	mov	r3, r0
 80157d8:	461a      	mov	r2, r3
 80157da:	693b      	ldr	r3, [r7, #16]
 80157dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	8b1b      	ldrh	r3, [r3, #24]
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7fa fd4e 	bl	8010284 <lwip_htons>
 80157e8:	4603      	mov	r3, r0
 80157ea:	461a      	mov	r2, r3
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80157f0:	693b      	ldr	r3, [r7, #16]
 80157f2:	687a      	ldr	r2, [r7, #4]
 80157f4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7fa fd50 	bl	80102a0 <lwip_htonl>
 8015800:	4602      	mov	r2, r0
 8015802:	693b      	ldr	r3, [r7, #16]
 8015804:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8015806:	897b      	ldrh	r3, [r7, #10]
 8015808:	089b      	lsrs	r3, r3, #2
 801580a:	b29b      	uxth	r3, r3
 801580c:	3305      	adds	r3, #5
 801580e:	b29b      	uxth	r3, r3
 8015810:	031b      	lsls	r3, r3, #12
 8015812:	b29b      	uxth	r3, r3
 8015814:	f043 0310 	orr.w	r3, r3, #16
 8015818:	b29b      	uxth	r3, r3
 801581a:	4618      	mov	r0, r3
 801581c:	f7fa fd32 	bl	8010284 <lwip_htons>
 8015820:	4603      	mov	r3, r0
 8015822:	461a      	mov	r2, r3
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801582c:	4618      	mov	r0, r3
 801582e:	f7fa fd29 	bl	8010284 <lwip_htons>
 8015832:	4603      	mov	r3, r0
 8015834:	461a      	mov	r2, r3
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	2200      	movs	r2, #0
 801583e:	741a      	strb	r2, [r3, #16]
 8015840:	2200      	movs	r2, #0
 8015842:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	2200      	movs	r2, #0
 8015848:	749a      	strb	r2, [r3, #18]
 801584a:	2200      	movs	r2, #0
 801584c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015852:	68fa      	ldr	r2, [r7, #12]
 8015854:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015856:	441a      	add	r2, r3
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801585c:	697b      	ldr	r3, [r7, #20]
}
 801585e:	4618      	mov	r0, r3
 8015860:	3718      	adds	r7, #24
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}
 8015866:	bf00      	nop
 8015868:	0801d36c 	.word	0x0801d36c
 801586c:	0801d3a0 	.word	0x0801d3a0
 8015870:	0801d3d0 	.word	0x0801d3d0

08015874 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015874:	b590      	push	{r4, r7, lr}
 8015876:	b085      	sub	sp, #20
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015880:	2b00      	cmp	r3, #0
 8015882:	d02d      	beq.n	80158e0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015888:	60fb      	str	r3, [r7, #12]
 801588a:	e002      	b.n	8015892 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d1f8      	bne.n	801588c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	899b      	ldrh	r3, [r3, #12]
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7fa fcee 	bl	8010284 <lwip_htons>
 80158a8:	4603      	mov	r3, r0
 80158aa:	f003 0307 	and.w	r3, r3, #7
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d116      	bne.n	80158e0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	68db      	ldr	r3, [r3, #12]
 80158b6:	899b      	ldrh	r3, [r3, #12]
 80158b8:	b29c      	uxth	r4, r3
 80158ba:	2001      	movs	r0, #1
 80158bc:	f7fa fce2 	bl	8010284 <lwip_htons>
 80158c0:	4603      	mov	r3, r0
 80158c2:	461a      	mov	r2, r3
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	68db      	ldr	r3, [r3, #12]
 80158c8:	4322      	orrs	r2, r4
 80158ca:	b292      	uxth	r2, r2
 80158cc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	7e9b      	ldrb	r3, [r3, #26]
 80158d2:	f043 0320 	orr.w	r3, r3, #32
 80158d6:	b2da      	uxtb	r2, r3
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80158dc:	2300      	movs	r3, #0
 80158de:	e004      	b.n	80158ea <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80158e0:	2101      	movs	r1, #1
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 fcc0 	bl	8016268 <tcp_enqueue_flags>
 80158e8:	4603      	mov	r3, r0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3714      	adds	r7, #20
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd90      	pop	{r4, r7, pc}
	...

080158f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80158f4:	b590      	push	{r4, r7, lr}
 80158f6:	b087      	sub	sp, #28
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	603b      	str	r3, [r7, #0]
 8015900:	4613      	mov	r3, r2
 8015902:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	b2db      	uxtb	r3, r3
 801590c:	f003 0304 	and.w	r3, r3, #4
 8015910:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015912:	2003      	movs	r0, #3
 8015914:	f7fb f8a4 	bl	8010a60 <memp_malloc>
 8015918:	6138      	str	r0, [r7, #16]
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d104      	bne.n	801592a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015920:	68b8      	ldr	r0, [r7, #8]
 8015922:	f7fb fe49 	bl	80115b8 <pbuf_free>
    return NULL;
 8015926:	2300      	movs	r3, #0
 8015928:	e061      	b.n	80159ee <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015930:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	2200      	movs	r2, #0
 8015936:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	68ba      	ldr	r2, [r7, #8]
 801593c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	891a      	ldrh	r2, [r3, #8]
 8015942:	7dfb      	ldrb	r3, [r7, #23]
 8015944:	b29b      	uxth	r3, r3
 8015946:	429a      	cmp	r2, r3
 8015948:	d205      	bcs.n	8015956 <tcp_create_segment+0x62>
 801594a:	4b2b      	ldr	r3, [pc, #172]	; (80159f8 <tcp_create_segment+0x104>)
 801594c:	22ba      	movs	r2, #186	; 0xba
 801594e:	492b      	ldr	r1, [pc, #172]	; (80159fc <tcp_create_segment+0x108>)
 8015950:	482b      	ldr	r0, [pc, #172]	; (8015a00 <tcp_create_segment+0x10c>)
 8015952:	f005 f89d 	bl	801aa90 <iprintf>
  seg->len = p->tot_len - optlen;
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	891a      	ldrh	r2, [r3, #8]
 801595a:	7dfb      	ldrb	r3, [r7, #23]
 801595c:	b29b      	uxth	r3, r3
 801595e:	1ad3      	subs	r3, r2, r3
 8015960:	b29a      	uxth	r2, r3
 8015962:	693b      	ldr	r3, [r7, #16]
 8015964:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8015966:	2114      	movs	r1, #20
 8015968:	68b8      	ldr	r0, [r7, #8]
 801596a:	f7fb fe01 	bl	8011570 <pbuf_header>
 801596e:	4603      	mov	r3, r0
 8015970:	2b00      	cmp	r3, #0
 8015972:	d004      	beq.n	801597e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015974:	6938      	ldr	r0, [r7, #16]
 8015976:	f7fd f938 	bl	8012bea <tcp_seg_free>
    return NULL;
 801597a:	2300      	movs	r3, #0
 801597c:	e037      	b.n	80159ee <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	685a      	ldr	r2, [r3, #4]
 8015984:	693b      	ldr	r3, [r7, #16]
 8015986:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	8ada      	ldrh	r2, [r3, #22]
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	68dc      	ldr	r4, [r3, #12]
 8015990:	4610      	mov	r0, r2
 8015992:	f7fa fc77 	bl	8010284 <lwip_htons>
 8015996:	4603      	mov	r3, r0
 8015998:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	8b1a      	ldrh	r2, [r3, #24]
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	68dc      	ldr	r4, [r3, #12]
 80159a2:	4610      	mov	r0, r2
 80159a4:	f7fa fc6e 	bl	8010284 <lwip_htons>
 80159a8:	4603      	mov	r3, r0
 80159aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	68dc      	ldr	r4, [r3, #12]
 80159b0:	6838      	ldr	r0, [r7, #0]
 80159b2:	f7fa fc75 	bl	80102a0 <lwip_htonl>
 80159b6:	4603      	mov	r3, r0
 80159b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80159ba:	7dfb      	ldrb	r3, [r7, #23]
 80159bc:	089b      	lsrs	r3, r3, #2
 80159be:	b2db      	uxtb	r3, r3
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	3305      	adds	r3, #5
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	031b      	lsls	r3, r3, #12
 80159c8:	b29a      	uxth	r2, r3
 80159ca:	79fb      	ldrb	r3, [r7, #7]
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	4313      	orrs	r3, r2
 80159d0:	b29a      	uxth	r2, r3
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	68dc      	ldr	r4, [r3, #12]
 80159d6:	4610      	mov	r0, r2
 80159d8:	f7fa fc54 	bl	8010284 <lwip_htons>
 80159dc:	4603      	mov	r3, r0
 80159de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	2200      	movs	r2, #0
 80159e6:	749a      	strb	r2, [r3, #18]
 80159e8:	2200      	movs	r2, #0
 80159ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80159ec:	693b      	ldr	r3, [r7, #16]
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	371c      	adds	r7, #28
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd90      	pop	{r4, r7, pc}
 80159f6:	bf00      	nop
 80159f8:	0801d36c 	.word	0x0801d36c
 80159fc:	0801d3f8 	.word	0x0801d3f8
 8015a00:	0801d3d0 	.word	0x0801d3d0

08015a04 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b086      	sub	sp, #24
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	607b      	str	r3, [r7, #4]
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	73fb      	strb	r3, [r7, #15]
 8015a10:	460b      	mov	r3, r1
 8015a12:	81bb      	strh	r3, [r7, #12]
 8015a14:	4613      	mov	r3, r2
 8015a16:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015a18:	89bb      	ldrh	r3, [r7, #12]
 8015a1a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015a1c:	89ba      	ldrh	r2, [r7, #12]
 8015a1e:	897b      	ldrh	r3, [r7, #10]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d221      	bcs.n	8015a68 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015a24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015a28:	f003 0302 	and.w	r3, r3, #2
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d111      	bne.n	8015a54 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8015a30:	6a3b      	ldr	r3, [r7, #32]
 8015a32:	7e9b      	ldrb	r3, [r3, #26]
 8015a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d115      	bne.n	8015a68 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8015a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d007      	beq.n	8015a54 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015a44:	6a3b      	ldr	r3, [r7, #32]
 8015a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d103      	bne.n	8015a54 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8015a4c:	6a3b      	ldr	r3, [r7, #32]
 8015a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d009      	beq.n	8015a68 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015a54:	89bb      	ldrh	r3, [r7, #12]
 8015a56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015a5a:	f023 0203 	bic.w	r2, r3, #3
 8015a5e:	897b      	ldrh	r3, [r7, #10]
 8015a60:	4293      	cmp	r3, r2
 8015a62:	bf28      	it	cs
 8015a64:	4613      	movcs	r3, r2
 8015a66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015a68:	8af9      	ldrh	r1, [r7, #22]
 8015a6a:	7bfb      	ldrb	r3, [r7, #15]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7fb fa30 	bl	8010ed4 <pbuf_alloc>
 8015a74:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a76:	693b      	ldr	r3, [r7, #16]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d101      	bne.n	8015a80 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	e019      	b.n	8015ab4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d006      	beq.n	8015a96 <tcp_pbuf_prealloc+0x92>
 8015a88:	4b0c      	ldr	r3, [pc, #48]	; (8015abc <tcp_pbuf_prealloc+0xb8>)
 8015a8a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015a8e:	490c      	ldr	r1, [pc, #48]	; (8015ac0 <tcp_pbuf_prealloc+0xbc>)
 8015a90:	480c      	ldr	r0, [pc, #48]	; (8015ac4 <tcp_pbuf_prealloc+0xc0>)
 8015a92:	f004 fffd 	bl	801aa90 <iprintf>
  *oversize = p->len - length;
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	895a      	ldrh	r2, [r3, #10]
 8015a9a:	89bb      	ldrh	r3, [r7, #12]
 8015a9c:	1ad3      	subs	r3, r2, r3
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	89ba      	ldrh	r2, [r7, #12]
 8015aa8:	811a      	strh	r2, [r3, #8]
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	891a      	ldrh	r2, [r3, #8]
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	815a      	strh	r2, [r3, #10]
  return p;
 8015ab2:	693b      	ldr	r3, [r7, #16]
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3718      	adds	r7, #24
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	0801d36c 	.word	0x0801d36c
 8015ac0:	0801d410 	.word	0x0801d410
 8015ac4:	0801d3d0 	.word	0x0801d3d0

08015ac8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	460b      	mov	r3, r1
 8015ad2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	7d1b      	ldrb	r3, [r3, #20]
 8015ad8:	2b04      	cmp	r3, #4
 8015ada:	d00e      	beq.n	8015afa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015ae0:	2b07      	cmp	r3, #7
 8015ae2:	d00a      	beq.n	8015afa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015ae8:	2b02      	cmp	r3, #2
 8015aea:	d006      	beq.n	8015afa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015af0:	2b03      	cmp	r3, #3
 8015af2:	d002      	beq.n	8015afa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015af4:	f06f 030a 	mvn.w	r3, #10
 8015af8:	e04f      	b.n	8015b9a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8015afa:	887b      	ldrh	r3, [r7, #2]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d101      	bne.n	8015b04 <tcp_write_checks+0x3c>
    return ERR_OK;
 8015b00:	2300      	movs	r3, #0
 8015b02:	e04a      	b.n	8015b9a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015b0a:	887a      	ldrh	r2, [r7, #2]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d909      	bls.n	8015b24 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	7e9b      	ldrb	r3, [r3, #26]
 8015b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015b18:	b2da      	uxtb	r2, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b22:	e03a      	b.n	8015b9a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015b2a:	2b08      	cmp	r3, #8
 8015b2c:	d806      	bhi.n	8015b3c <tcp_write_checks+0x74>
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015b34:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	d909      	bls.n	8015b50 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	7e9b      	ldrb	r3, [r3, #26]
 8015b40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015b44:	b2da      	uxtb	r2, r3
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b4e:	e024      	b.n	8015b9a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d00f      	beq.n	8015b7a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d11a      	bne.n	8015b98 <tcp_write_checks+0xd0>
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d116      	bne.n	8015b98 <tcp_write_checks+0xd0>
 8015b6a:	4b0e      	ldr	r3, [pc, #56]	; (8015ba4 <tcp_write_checks+0xdc>)
 8015b6c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8015b70:	490d      	ldr	r1, [pc, #52]	; (8015ba8 <tcp_write_checks+0xe0>)
 8015b72:	480e      	ldr	r0, [pc, #56]	; (8015bac <tcp_write_checks+0xe4>)
 8015b74:	f004 ff8c 	bl	801aa90 <iprintf>
 8015b78:	e00e      	b.n	8015b98 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d103      	bne.n	8015b8a <tcp_write_checks+0xc2>
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d006      	beq.n	8015b98 <tcp_write_checks+0xd0>
 8015b8a:	4b06      	ldr	r3, [pc, #24]	; (8015ba4 <tcp_write_checks+0xdc>)
 8015b8c:	f240 1259 	movw	r2, #345	; 0x159
 8015b90:	4907      	ldr	r1, [pc, #28]	; (8015bb0 <tcp_write_checks+0xe8>)
 8015b92:	4806      	ldr	r0, [pc, #24]	; (8015bac <tcp_write_checks+0xe4>)
 8015b94:	f004 ff7c 	bl	801aa90 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015b98:	2300      	movs	r3, #0
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3708      	adds	r7, #8
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	0801d36c 	.word	0x0801d36c
 8015ba8:	0801d424 	.word	0x0801d424
 8015bac:	0801d3d0 	.word	0x0801d3d0
 8015bb0:	0801d460 	.word	0x0801d460

08015bb4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015bb4:	b590      	push	{r4, r7, lr}
 8015bb6:	b09b      	sub	sp, #108	; 0x6c
 8015bb8:	af04      	add	r7, sp, #16
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	4611      	mov	r1, r2
 8015bc0:	461a      	mov	r2, r3
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	80fb      	strh	r3, [r7, #6]
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8015bda:	2300      	movs	r3, #0
 8015bdc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015bde:	2300      	movs	r3, #0
 8015be0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8015be4:	2300      	movs	r3, #0
 8015be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8015bea:	2300      	movs	r3, #0
 8015bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015c02:	085b      	lsrs	r3, r3, #1
 8015c04:	b29a      	uxth	r2, r3
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c0a:	4293      	cmp	r3, r2
 8015c0c:	bf28      	it	cs
 8015c0e:	4613      	movcs	r3, r2
 8015c10:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d102      	bne.n	8015c1e <tcp_write+0x6a>
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c1c:	e000      	b.n	8015c20 <tcp_write+0x6c>
 8015c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c20:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d109      	bne.n	8015c3c <tcp_write+0x88>
 8015c28:	4b92      	ldr	r3, [pc, #584]	; (8015e74 <tcp_write+0x2c0>)
 8015c2a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8015c2e:	4992      	ldr	r1, [pc, #584]	; (8015e78 <tcp_write+0x2c4>)
 8015c30:	4892      	ldr	r0, [pc, #584]	; (8015e7c <tcp_write+0x2c8>)
 8015c32:	f004 ff2d 	bl	801aa90 <iprintf>
 8015c36:	f06f 030f 	mvn.w	r3, #15
 8015c3a:	e30a      	b.n	8016252 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015c3c:	88fb      	ldrh	r3, [r7, #6]
 8015c3e:	4619      	mov	r1, r3
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	f7ff ff41 	bl	8015ac8 <tcp_write_checks>
 8015c46:	4603      	mov	r3, r0
 8015c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015c4c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d002      	beq.n	8015c5a <tcp_write+0xa6>
    return err;
 8015c54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015c58:	e2fb      	b.n	8016252 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015c60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	f000 80f5 	beq.w	8015e58 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c72:	653b      	str	r3, [r7, #80]	; 0x50
 8015c74:	e002      	b.n	8015c7c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8015c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d1f8      	bne.n	8015c76 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8015c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c86:	7a9b      	ldrb	r3, [r3, #10]
 8015c88:	009b      	lsls	r3, r3, #2
 8015c8a:	b29b      	uxth	r3, r3
 8015c8c:	f003 0304 	and.w	r3, r3, #4
 8015c90:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015c92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c96:	891b      	ldrh	r3, [r3, #8]
 8015c98:	4619      	mov	r1, r3
 8015c9a:	8c3b      	ldrh	r3, [r7, #32]
 8015c9c:	440b      	add	r3, r1
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	da06      	bge.n	8015cb0 <tcp_write+0xfc>
 8015ca2:	4b74      	ldr	r3, [pc, #464]	; (8015e74 <tcp_write+0x2c0>)
 8015ca4:	f240 12c7 	movw	r2, #455	; 0x1c7
 8015ca8:	4975      	ldr	r1, [pc, #468]	; (8015e80 <tcp_write+0x2cc>)
 8015caa:	4874      	ldr	r0, [pc, #464]	; (8015e7c <tcp_write+0x2c8>)
 8015cac:	f004 fef0 	bl	801aa90 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cb2:	891a      	ldrh	r2, [r3, #8]
 8015cb4:	8c3b      	ldrh	r3, [r7, #32]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015cbc:	1ad3      	subs	r3, r2, r3
 8015cbe:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015cc6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015cc8:	8a7b      	ldrh	r3, [r7, #18]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d027      	beq.n	8015d1e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015cce:	8a7b      	ldrh	r3, [r7, #18]
 8015cd0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d206      	bcs.n	8015ce4 <tcp_write+0x130>
 8015cd6:	4b67      	ldr	r3, [pc, #412]	; (8015e74 <tcp_write+0x2c0>)
 8015cd8:	f240 12d9 	movw	r2, #473	; 0x1d9
 8015cdc:	4969      	ldr	r1, [pc, #420]	; (8015e84 <tcp_write+0x2d0>)
 8015cde:	4867      	ldr	r0, [pc, #412]	; (8015e7c <tcp_write+0x2c8>)
 8015ce0:	f004 fed6 	bl	801aa90 <iprintf>
      seg = last_unsent;
 8015ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015ce8:	8a7b      	ldrh	r3, [r7, #18]
 8015cea:	88fa      	ldrh	r2, [r7, #6]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d901      	bls.n	8015cf4 <tcp_write+0x140>
 8015cf0:	8a7b      	ldrh	r3, [r7, #18]
 8015cf2:	e000      	b.n	8015cf6 <tcp_write+0x142>
 8015cf4:	88fb      	ldrh	r3, [r7, #6]
 8015cf6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	bfa8      	it	ge
 8015cfc:	4613      	movge	r3, r2
 8015cfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015d00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d06:	4413      	add	r3, r2
 8015d08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015d0c:	8a7a      	ldrh	r2, [r7, #18]
 8015d0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d10:	1ad3      	subs	r3, r2, r3
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015d16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d1a:	1ad3      	subs	r3, r2, r3
 8015d1c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015d1e:	8a7b      	ldrh	r3, [r7, #18]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d00b      	beq.n	8015d3c <tcp_write+0x188>
 8015d24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015d28:	88fb      	ldrh	r3, [r7, #6]
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d006      	beq.n	8015d3c <tcp_write+0x188>
 8015d2e:	4b51      	ldr	r3, [pc, #324]	; (8015e74 <tcp_write+0x2c0>)
 8015d30:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015d34:	4954      	ldr	r1, [pc, #336]	; (8015e88 <tcp_write+0x2d4>)
 8015d36:	4851      	ldr	r0, [pc, #324]	; (8015e7c <tcp_write+0x2c8>)
 8015d38:	f004 feaa 	bl	801aa90 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015d3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015d40:	88fb      	ldrh	r3, [r7, #6]
 8015d42:	429a      	cmp	r2, r3
 8015d44:	f080 8168 	bcs.w	8016018 <tcp_write+0x464>
 8015d48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	f000 8164 	beq.w	8016018 <tcp_write+0x464>
 8015d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d52:	891b      	ldrh	r3, [r3, #8]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	f000 815f 	beq.w	8016018 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015d5a:	88fa      	ldrh	r2, [r7, #6]
 8015d5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d60:	1ad2      	subs	r2, r2, r3
 8015d62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d64:	4293      	cmp	r3, r2
 8015d66:	bfa8      	it	ge
 8015d68:	4613      	movge	r3, r2
 8015d6a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d6e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015d70:	797b      	ldrb	r3, [r7, #5]
 8015d72:	f003 0301 	and.w	r3, r3, #1
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d027      	beq.n	8015dca <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015d7a:	f107 0012 	add.w	r0, r7, #18
 8015d7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d80:	8bf9      	ldrh	r1, [r7, #30]
 8015d82:	2301      	movs	r3, #1
 8015d84:	9302      	str	r3, [sp, #8]
 8015d86:	797b      	ldrb	r3, [r7, #5]
 8015d88:	9301      	str	r3, [sp, #4]
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	9300      	str	r3, [sp, #0]
 8015d8e:	4603      	mov	r3, r0
 8015d90:	2004      	movs	r0, #4
 8015d92:	f7ff fe37 	bl	8015a04 <tcp_pbuf_prealloc>
 8015d96:	6578      	str	r0, [r7, #84]	; 0x54
 8015d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	f000 8227 	beq.w	80161ee <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015da2:	6858      	ldr	r0, [r3, #4]
 8015da4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015da8:	68ba      	ldr	r2, [r7, #8]
 8015daa:	4413      	add	r3, r2
 8015dac:	8bfa      	ldrh	r2, [r7, #30]
 8015dae:	4619      	mov	r1, r3
 8015db0:	f004 fdb3 	bl	801a91a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015db4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015db6:	f7fb fc99 	bl	80116ec <pbuf_clen>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015dc2:	4413      	add	r3, r2
 8015dc4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015dc8:	e03f      	b.n	8015e4a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	637b      	str	r3, [r7, #52]	; 0x34
 8015dd0:	e002      	b.n	8015dd8 <tcp_write+0x224>
 8015dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8015dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d1f8      	bne.n	8015dd2 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015de2:	7b1b      	ldrb	r3, [r3, #12]
 8015de4:	2b01      	cmp	r3, #1
 8015de6:	d115      	bne.n	8015e14 <tcp_write+0x260>
 8015de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dea:	685b      	ldr	r3, [r3, #4]
 8015dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015dee:	8952      	ldrh	r2, [r2, #10]
 8015df0:	4413      	add	r3, r2
 8015df2:	68ba      	ldr	r2, [r7, #8]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d10d      	bne.n	8015e14 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015df8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d006      	beq.n	8015e0e <tcp_write+0x25a>
 8015e00:	4b1c      	ldr	r3, [pc, #112]	; (8015e74 <tcp_write+0x2c0>)
 8015e02:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015e06:	4921      	ldr	r1, [pc, #132]	; (8015e8c <tcp_write+0x2d8>)
 8015e08:	481c      	ldr	r0, [pc, #112]	; (8015e7c <tcp_write+0x2c8>)
 8015e0a:	f004 fe41 	bl	801aa90 <iprintf>
          extendlen = seglen;
 8015e0e:	8bfb      	ldrh	r3, [r7, #30]
 8015e10:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015e12:	e01a      	b.n	8015e4a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015e14:	8bfb      	ldrh	r3, [r7, #30]
 8015e16:	2201      	movs	r2, #1
 8015e18:	4619      	mov	r1, r3
 8015e1a:	2004      	movs	r0, #4
 8015e1c:	f7fb f85a 	bl	8010ed4 <pbuf_alloc>
 8015e20:	6578      	str	r0, [r7, #84]	; 0x54
 8015e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	f000 81e4 	beq.w	80161f2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8015e2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e2e:	68ba      	ldr	r2, [r7, #8]
 8015e30:	441a      	add	r2, r3
 8015e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e34:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015e36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015e38:	f7fb fc58 	bl	80116ec <pbuf_clen>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	461a      	mov	r2, r3
 8015e40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015e44:	4413      	add	r3, r2
 8015e46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8015e4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e4e:	8bfb      	ldrh	r3, [r7, #30]
 8015e50:	4413      	add	r3, r2
 8015e52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015e56:	e0df      	b.n	8016018 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	f000 80da 	beq.w	8016018 <tcp_write+0x464>
 8015e64:	4b03      	ldr	r3, [pc, #12]	; (8015e74 <tcp_write+0x2c0>)
 8015e66:	f240 2225 	movw	r2, #549	; 0x225
 8015e6a:	4909      	ldr	r1, [pc, #36]	; (8015e90 <tcp_write+0x2dc>)
 8015e6c:	4803      	ldr	r0, [pc, #12]	; (8015e7c <tcp_write+0x2c8>)
 8015e6e:	f004 fe0f 	bl	801aa90 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015e72:	e0d1      	b.n	8016018 <tcp_write+0x464>
 8015e74:	0801d36c 	.word	0x0801d36c
 8015e78:	0801d494 	.word	0x0801d494
 8015e7c:	0801d3d0 	.word	0x0801d3d0
 8015e80:	0801d4c8 	.word	0x0801d4c8
 8015e84:	0801d4e0 	.word	0x0801d4e0
 8015e88:	0801d500 	.word	0x0801d500
 8015e8c:	0801d520 	.word	0x0801d520
 8015e90:	0801d54c 	.word	0x0801d54c
    struct pbuf *p;
    u16_t left = len - pos;
 8015e94:	88fa      	ldrh	r2, [r7, #6]
 8015e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e9a:	1ad3      	subs	r3, r2, r3
 8015e9c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ea6:	1ad3      	subs	r3, r2, r3
 8015ea8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015eaa:	8b7a      	ldrh	r2, [r7, #26]
 8015eac:	8bbb      	ldrh	r3, [r7, #28]
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	bf28      	it	cs
 8015eb2:	4613      	movcs	r3, r2
 8015eb4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015eb6:	797b      	ldrb	r3, [r7, #5]
 8015eb8:	f003 0301 	and.w	r3, r3, #1
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d036      	beq.n	8015f2e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ec4:	b29a      	uxth	r2, r3
 8015ec6:	8b3b      	ldrh	r3, [r7, #24]
 8015ec8:	4413      	add	r3, r2
 8015eca:	b299      	uxth	r1, r3
 8015ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	bf0c      	ite	eq
 8015ed2:	2301      	moveq	r3, #1
 8015ed4:	2300      	movne	r3, #0
 8015ed6:	b2db      	uxtb	r3, r3
 8015ed8:	f107 0012 	add.w	r0, r7, #18
 8015edc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ede:	9302      	str	r3, [sp, #8]
 8015ee0:	797b      	ldrb	r3, [r7, #5]
 8015ee2:	9301      	str	r3, [sp, #4]
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	9300      	str	r3, [sp, #0]
 8015ee8:	4603      	mov	r3, r0
 8015eea:	2000      	movs	r0, #0
 8015eec:	f7ff fd8a 	bl	8015a04 <tcp_pbuf_prealloc>
 8015ef0:	6338      	str	r0, [r7, #48]	; 0x30
 8015ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	f000 817e 	beq.w	80161f6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efc:	895b      	ldrh	r3, [r3, #10]
 8015efe:	8b3a      	ldrh	r2, [r7, #24]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d906      	bls.n	8015f12 <tcp_write+0x35e>
 8015f04:	4b8f      	ldr	r3, [pc, #572]	; (8016144 <tcp_write+0x590>)
 8015f06:	f240 2241 	movw	r2, #577	; 0x241
 8015f0a:	498f      	ldr	r1, [pc, #572]	; (8016148 <tcp_write+0x594>)
 8015f0c:	488f      	ldr	r0, [pc, #572]	; (801614c <tcp_write+0x598>)
 8015f0e:	f004 fdbf 	bl	801aa90 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8015f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f14:	685a      	ldr	r2, [r3, #4]
 8015f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f1a:	18d0      	adds	r0, r2, r3
 8015f1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f20:	68ba      	ldr	r2, [r7, #8]
 8015f22:	4413      	add	r3, r2
 8015f24:	8b3a      	ldrh	r2, [r7, #24]
 8015f26:	4619      	mov	r1, r3
 8015f28:	f004 fcf7 	bl	801a91a <memcpy>
 8015f2c:	e02e      	b.n	8015f8c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015f2e:	8a7b      	ldrh	r3, [r7, #18]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d006      	beq.n	8015f42 <tcp_write+0x38e>
 8015f34:	4b83      	ldr	r3, [pc, #524]	; (8016144 <tcp_write+0x590>)
 8015f36:	f240 224b 	movw	r2, #587	; 0x24b
 8015f3a:	4985      	ldr	r1, [pc, #532]	; (8016150 <tcp_write+0x59c>)
 8015f3c:	4883      	ldr	r0, [pc, #524]	; (801614c <tcp_write+0x598>)
 8015f3e:	f004 fda7 	bl	801aa90 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015f42:	8b3b      	ldrh	r3, [r7, #24]
 8015f44:	2201      	movs	r2, #1
 8015f46:	4619      	mov	r1, r3
 8015f48:	2000      	movs	r0, #0
 8015f4a:	f7fa ffc3 	bl	8010ed4 <pbuf_alloc>
 8015f4e:	6178      	str	r0, [r7, #20]
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f000 8151 	beq.w	80161fa <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8015f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f5c:	68ba      	ldr	r2, [r7, #8]
 8015f5e:	441a      	add	r2, r3
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f68:	b29b      	uxth	r3, r3
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	2000      	movs	r0, #0
 8015f70:	f7fa ffb0 	bl	8010ed4 <pbuf_alloc>
 8015f74:	6338      	str	r0, [r7, #48]	; 0x30
 8015f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d103      	bne.n	8015f84 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015f7c:	6978      	ldr	r0, [r7, #20]
 8015f7e:	f7fb fb1b 	bl	80115b8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015f82:	e13d      	b.n	8016200 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015f84:	6979      	ldr	r1, [r7, #20]
 8015f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f88:	f7fb fbf0 	bl	801176c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f8e:	f7fb fbad 	bl	80116ec <pbuf_clen>
 8015f92:	4603      	mov	r3, r0
 8015f94:	461a      	mov	r2, r3
 8015f96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015f9a:	4413      	add	r3, r2
 8015f9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015fa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015fa4:	2b09      	cmp	r3, #9
 8015fa6:	d805      	bhi.n	8015fb4 <tcp_write+0x400>
 8015fa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015fac:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	d903      	bls.n	8015fbc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fb6:	f7fb faff 	bl	80115b8 <pbuf_free>
      goto memerr;
 8015fba:	e121      	b.n	8016200 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015fc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015fc4:	441a      	add	r2, r3
 8015fc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015fca:	9300      	str	r3, [sp, #0]
 8015fcc:	4613      	mov	r3, r2
 8015fce:	2200      	movs	r2, #0
 8015fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015fd2:	68f8      	ldr	r0, [r7, #12]
 8015fd4:	f7ff fc8e 	bl	80158f4 <tcp_create_segment>
 8015fd8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	f000 810e 	beq.w	80161fe <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d102      	bne.n	8015fee <tcp_write+0x43a>
      queue = seg;
 8015fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fea:	647b      	str	r3, [r7, #68]	; 0x44
 8015fec:	e00c      	b.n	8016008 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d106      	bne.n	8016002 <tcp_write+0x44e>
 8015ff4:	4b53      	ldr	r3, [pc, #332]	; (8016144 <tcp_write+0x590>)
 8015ff6:	f240 2285 	movw	r2, #645	; 0x285
 8015ffa:	4956      	ldr	r1, [pc, #344]	; (8016154 <tcp_write+0x5a0>)
 8015ffc:	4853      	ldr	r0, [pc, #332]	; (801614c <tcp_write+0x598>)
 8015ffe:	f004 fd47 	bl	801aa90 <iprintf>
      prev_seg->next = seg;
 8016002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016006:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801600a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801600c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016010:	8b3b      	ldrh	r3, [r7, #24]
 8016012:	4413      	add	r3, r2
 8016014:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016018:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801601c:	88fb      	ldrh	r3, [r7, #6]
 801601e:	429a      	cmp	r2, r3
 8016020:	f4ff af38 	bcc.w	8015e94 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016026:	2b00      	cmp	r3, #0
 8016028:	d02c      	beq.n	8016084 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801602a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016030:	e01e      	b.n	8016070 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8016032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016034:	891a      	ldrh	r2, [r3, #8]
 8016036:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016038:	4413      	add	r3, r2
 801603a:	b29a      	uxth	r2, r3
 801603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801603e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d110      	bne.n	801606a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801604e:	8952      	ldrh	r2, [r2, #10]
 8016050:	4413      	add	r3, r2
 8016052:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016054:	68b9      	ldr	r1, [r7, #8]
 8016056:	4618      	mov	r0, r3
 8016058:	f004 fc5f 	bl	801a91a <memcpy>
        p->len += oversize_used;
 801605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605e:	895a      	ldrh	r2, [r3, #10]
 8016060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016062:	4413      	add	r3, r2
 8016064:	b29a      	uxth	r2, r3
 8016066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016068:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	2b00      	cmp	r3, #0
 8016074:	d1dd      	bne.n	8016032 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8016076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016078:	891a      	ldrh	r2, [r3, #8]
 801607a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801607c:	4413      	add	r3, r2
 801607e:	b29a      	uxth	r2, r3
 8016080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016082:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016084:	8a7a      	ldrh	r2, [r7, #18]
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801608c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801608e:	2b00      	cmp	r3, #0
 8016090:	d018      	beq.n	80160c4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016094:	2b00      	cmp	r3, #0
 8016096:	d106      	bne.n	80160a6 <tcp_write+0x4f2>
 8016098:	4b2a      	ldr	r3, [pc, #168]	; (8016144 <tcp_write+0x590>)
 801609a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801609e:	492e      	ldr	r1, [pc, #184]	; (8016158 <tcp_write+0x5a4>)
 80160a0:	482a      	ldr	r0, [pc, #168]	; (801614c <tcp_write+0x598>)
 80160a2:	f004 fcf5 	bl	801aa90 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80160a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fb fb5d 	bl	801176c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80160b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160b4:	891a      	ldrh	r2, [r3, #8]
 80160b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160b8:	891b      	ldrh	r3, [r3, #8]
 80160ba:	4413      	add	r3, r2
 80160bc:	b29a      	uxth	r2, r3
 80160be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160c0:	811a      	strh	r2, [r3, #8]
 80160c2:	e037      	b.n	8016134 <tcp_write+0x580>
  } else if (extendlen > 0) {
 80160c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d034      	beq.n	8016134 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80160ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d003      	beq.n	80160d8 <tcp_write+0x524>
 80160d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d106      	bne.n	80160e6 <tcp_write+0x532>
 80160d8:	4b1a      	ldr	r3, [pc, #104]	; (8016144 <tcp_write+0x590>)
 80160da:	f240 22c1 	movw	r2, #705	; 0x2c1
 80160de:	491f      	ldr	r1, [pc, #124]	; (801615c <tcp_write+0x5a8>)
 80160e0:	481a      	ldr	r0, [pc, #104]	; (801614c <tcp_write+0x598>)
 80160e2:	f004 fcd5 	bl	801aa90 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80160e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80160ec:	e009      	b.n	8016102 <tcp_write+0x54e>
      p->tot_len += extendlen;
 80160ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f0:	891a      	ldrh	r2, [r3, #8]
 80160f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160f4:	4413      	add	r3, r2
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160fa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80160fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	62bb      	str	r3, [r7, #40]	; 0x28
 8016102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d1f1      	bne.n	80160ee <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610c:	891a      	ldrh	r2, [r3, #8]
 801610e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016110:	4413      	add	r3, r2
 8016112:	b29a      	uxth	r2, r3
 8016114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016116:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801611a:	895a      	ldrh	r2, [r3, #10]
 801611c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801611e:	4413      	add	r3, r2
 8016120:	b29a      	uxth	r2, r3
 8016122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016124:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016128:	891a      	ldrh	r2, [r3, #8]
 801612a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801612c:	4413      	add	r3, r2
 801612e:	b29a      	uxth	r2, r3
 8016130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016132:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016136:	2b00      	cmp	r3, #0
 8016138:	d112      	bne.n	8016160 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801613e:	669a      	str	r2, [r3, #104]	; 0x68
 8016140:	e011      	b.n	8016166 <tcp_write+0x5b2>
 8016142:	bf00      	nop
 8016144:	0801d36c 	.word	0x0801d36c
 8016148:	0801d57c 	.word	0x0801d57c
 801614c:	0801d3d0 	.word	0x0801d3d0
 8016150:	0801d5bc 	.word	0x0801d5bc
 8016154:	0801d5cc 	.word	0x0801d5cc
 8016158:	0801d5e0 	.word	0x0801d5e0
 801615c:	0801d618 	.word	0x0801d618
  } else {
    last_unsent->next = queue;
 8016160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016164:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801616a:	88fb      	ldrh	r3, [r7, #6]
 801616c:	441a      	add	r2, r3
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016178:	88fb      	ldrh	r3, [r7, #6]
 801617a:	1ad3      	subs	r3, r2, r3
 801617c:	b29a      	uxth	r2, r3
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801618a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016194:	2b00      	cmp	r3, #0
 8016196:	d00e      	beq.n	80161b6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801619c:	2b00      	cmp	r3, #0
 801619e:	d10a      	bne.n	80161b6 <tcp_write+0x602>
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d106      	bne.n	80161b6 <tcp_write+0x602>
 80161a8:	4b2c      	ldr	r3, [pc, #176]	; (801625c <tcp_write+0x6a8>)
 80161aa:	f240 22ed 	movw	r2, #749	; 0x2ed
 80161ae:	492c      	ldr	r1, [pc, #176]	; (8016260 <tcp_write+0x6ac>)
 80161b0:	482c      	ldr	r0, [pc, #176]	; (8016264 <tcp_write+0x6b0>)
 80161b2:	f004 fc6d 	bl	801aa90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80161b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d016      	beq.n	80161ea <tcp_write+0x636>
 80161bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161be:	68db      	ldr	r3, [r3, #12]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d012      	beq.n	80161ea <tcp_write+0x636>
 80161c4:	797b      	ldrb	r3, [r7, #5]
 80161c6:	f003 0302 	and.w	r3, r3, #2
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d10d      	bne.n	80161ea <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80161ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161d0:	68db      	ldr	r3, [r3, #12]
 80161d2:	899b      	ldrh	r3, [r3, #12]
 80161d4:	b29c      	uxth	r4, r3
 80161d6:	2008      	movs	r0, #8
 80161d8:	f7fa f854 	bl	8010284 <lwip_htons>
 80161dc:	4603      	mov	r3, r0
 80161de:	461a      	mov	r2, r3
 80161e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	4322      	orrs	r2, r4
 80161e6:	b292      	uxth	r2, r2
 80161e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80161ea:	2300      	movs	r3, #0
 80161ec:	e031      	b.n	8016252 <tcp_write+0x69e>
          goto memerr;
 80161ee:	bf00      	nop
 80161f0:	e006      	b.n	8016200 <tcp_write+0x64c>
            goto memerr;
 80161f2:	bf00      	nop
 80161f4:	e004      	b.n	8016200 <tcp_write+0x64c>
        goto memerr;
 80161f6:	bf00      	nop
 80161f8:	e002      	b.n	8016200 <tcp_write+0x64c>
        goto memerr;
 80161fa:	bf00      	nop
 80161fc:	e000      	b.n	8016200 <tcp_write+0x64c>
      goto memerr;
 80161fe:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	7e9b      	ldrb	r3, [r3, #26]
 8016204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016208:	b2da      	uxtb	r2, r3
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801620e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016210:	2b00      	cmp	r3, #0
 8016212:	d002      	beq.n	801621a <tcp_write+0x666>
    pbuf_free(concat_p);
 8016214:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016216:	f7fb f9cf 	bl	80115b8 <pbuf_free>
  }
  if (queue != NULL) {
 801621a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801621c:	2b00      	cmp	r3, #0
 801621e:	d002      	beq.n	8016226 <tcp_write+0x672>
    tcp_segs_free(queue);
 8016220:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016222:	f7fc fcce 	bl	8012bc2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801622c:	2b00      	cmp	r3, #0
 801622e:	d00e      	beq.n	801624e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016234:	2b00      	cmp	r3, #0
 8016236:	d10a      	bne.n	801624e <tcp_write+0x69a>
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801623c:	2b00      	cmp	r3, #0
 801623e:	d106      	bne.n	801624e <tcp_write+0x69a>
 8016240:	4b06      	ldr	r3, [pc, #24]	; (801625c <tcp_write+0x6a8>)
 8016242:	f240 3202 	movw	r2, #770	; 0x302
 8016246:	4906      	ldr	r1, [pc, #24]	; (8016260 <tcp_write+0x6ac>)
 8016248:	4806      	ldr	r0, [pc, #24]	; (8016264 <tcp_write+0x6b0>)
 801624a:	f004 fc21 	bl	801aa90 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801624e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016252:	4618      	mov	r0, r3
 8016254:	375c      	adds	r7, #92	; 0x5c
 8016256:	46bd      	mov	sp, r7
 8016258:	bd90      	pop	{r4, r7, pc}
 801625a:	bf00      	nop
 801625c:	0801d36c 	.word	0x0801d36c
 8016260:	0801d650 	.word	0x0801d650
 8016264:	0801d3d0 	.word	0x0801d3d0

08016268 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b08a      	sub	sp, #40	; 0x28
 801626c:	af02      	add	r7, sp, #8
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	460b      	mov	r3, r1
 8016272:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016274:	2300      	movs	r3, #0
 8016276:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016278:	2300      	movs	r3, #0
 801627a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801627c:	78fb      	ldrb	r3, [r7, #3]
 801627e:	f003 0303 	and.w	r3, r3, #3
 8016282:	2b00      	cmp	r3, #0
 8016284:	d106      	bne.n	8016294 <tcp_enqueue_flags+0x2c>
 8016286:	4b6f      	ldr	r3, [pc, #444]	; (8016444 <tcp_enqueue_flags+0x1dc>)
 8016288:	f240 321b 	movw	r2, #795	; 0x31b
 801628c:	496e      	ldr	r1, [pc, #440]	; (8016448 <tcp_enqueue_flags+0x1e0>)
 801628e:	486f      	ldr	r0, [pc, #444]	; (801644c <tcp_enqueue_flags+0x1e4>)
 8016290:	f004 fbfe 	bl	801aa90 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801629a:	2b08      	cmp	r3, #8
 801629c:	d806      	bhi.n	80162ac <tcp_enqueue_flags+0x44>
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80162a4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80162a8:	4293      	cmp	r3, r2
 80162aa:	d90e      	bls.n	80162ca <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80162ac:	78fb      	ldrb	r3, [r7, #3]
 80162ae:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d109      	bne.n	80162ca <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	7e9b      	ldrb	r3, [r3, #26]
 80162ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80162be:	b2da      	uxtb	r2, r3
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80162c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162c8:	e0b7      	b.n	801643a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 80162ca:	78fb      	ldrb	r3, [r7, #3]
 80162cc:	f003 0302 	and.w	r3, r3, #2
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d001      	beq.n	80162d8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80162d4:	2301      	movs	r3, #1
 80162d6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80162d8:	7ffb      	ldrb	r3, [r7, #31]
 80162da:	009b      	lsls	r3, r3, #2
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	f003 0304 	and.w	r3, r3, #4
 80162e2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80162e4:	7dfb      	ldrb	r3, [r7, #23]
 80162e6:	b29b      	uxth	r3, r3
 80162e8:	2200      	movs	r2, #0
 80162ea:	4619      	mov	r1, r3
 80162ec:	2000      	movs	r0, #0
 80162ee:	f7fa fdf1 	bl	8010ed4 <pbuf_alloc>
 80162f2:	6138      	str	r0, [r7, #16]
 80162f4:	693b      	ldr	r3, [r7, #16]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d109      	bne.n	801630e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	7e9b      	ldrb	r3, [r3, #26]
 80162fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016302:	b2da      	uxtb	r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801630c:	e095      	b.n	801643a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	895a      	ldrh	r2, [r3, #10]
 8016312:	7dfb      	ldrb	r3, [r7, #23]
 8016314:	b29b      	uxth	r3, r3
 8016316:	429a      	cmp	r2, r3
 8016318:	d206      	bcs.n	8016328 <tcp_enqueue_flags+0xc0>
 801631a:	4b4a      	ldr	r3, [pc, #296]	; (8016444 <tcp_enqueue_flags+0x1dc>)
 801631c:	f240 3241 	movw	r2, #833	; 0x341
 8016320:	494b      	ldr	r1, [pc, #300]	; (8016450 <tcp_enqueue_flags+0x1e8>)
 8016322:	484a      	ldr	r0, [pc, #296]	; (801644c <tcp_enqueue_flags+0x1e4>)
 8016324:	f004 fbb4 	bl	801aa90 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801632c:	78fa      	ldrb	r2, [r7, #3]
 801632e:	7ffb      	ldrb	r3, [r7, #31]
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	460b      	mov	r3, r1
 8016334:	6939      	ldr	r1, [r7, #16]
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f7ff fadc 	bl	80158f4 <tcp_create_segment>
 801633c:	60f8      	str	r0, [r7, #12]
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d109      	bne.n	8016358 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	7e9b      	ldrb	r3, [r3, #26]
 8016348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801634c:	b2da      	uxtb	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016356:	e070      	b.n	801643a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	f003 0303 	and.w	r3, r3, #3
 8016360:	2b00      	cmp	r3, #0
 8016362:	d006      	beq.n	8016372 <tcp_enqueue_flags+0x10a>
 8016364:	4b37      	ldr	r3, [pc, #220]	; (8016444 <tcp_enqueue_flags+0x1dc>)
 8016366:	f240 3249 	movw	r2, #841	; 0x349
 801636a:	493a      	ldr	r1, [pc, #232]	; (8016454 <tcp_enqueue_flags+0x1ec>)
 801636c:	4837      	ldr	r0, [pc, #220]	; (801644c <tcp_enqueue_flags+0x1e4>)
 801636e:	f004 fb8f 	bl	801aa90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	891b      	ldrh	r3, [r3, #8]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d006      	beq.n	8016388 <tcp_enqueue_flags+0x120>
 801637a:	4b32      	ldr	r3, [pc, #200]	; (8016444 <tcp_enqueue_flags+0x1dc>)
 801637c:	f240 324a 	movw	r2, #842	; 0x34a
 8016380:	4935      	ldr	r1, [pc, #212]	; (8016458 <tcp_enqueue_flags+0x1f0>)
 8016382:	4832      	ldr	r0, [pc, #200]	; (801644c <tcp_enqueue_flags+0x1e4>)
 8016384:	f004 fb84 	bl	801aa90 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801638c:	2b00      	cmp	r3, #0
 801638e:	d103      	bne.n	8016398 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	68fa      	ldr	r2, [r7, #12]
 8016394:	669a      	str	r2, [r3, #104]	; 0x68
 8016396:	e00d      	b.n	80163b4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801639c:	61bb      	str	r3, [r7, #24]
 801639e:	e002      	b.n	80163a6 <tcp_enqueue_flags+0x13e>
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	61bb      	str	r3, [r7, #24]
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d1f8      	bne.n	80163a0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80163ae:	69bb      	ldr	r3, [r7, #24]
 80163b0:	68fa      	ldr	r2, [r7, #12]
 80163b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80163bc:	78fb      	ldrb	r3, [r7, #3]
 80163be:	f003 0302 	and.w	r3, r3, #2
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d104      	bne.n	80163d0 <tcp_enqueue_flags+0x168>
 80163c6:	78fb      	ldrb	r3, [r7, #3]
 80163c8:	f003 0301 	and.w	r3, r3, #1
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d004      	beq.n	80163da <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163d4:	1c5a      	adds	r2, r3, #1
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80163da:	78fb      	ldrb	r3, [r7, #3]
 80163dc:	f003 0301 	and.w	r3, r3, #1
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d006      	beq.n	80163f2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	7e9b      	ldrb	r3, [r3, #26]
 80163e8:	f043 0320 	orr.w	r3, r3, #32
 80163ec:	b2da      	uxtb	r2, r3
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	685b      	ldr	r3, [r3, #4]
 80163f6:	4618      	mov	r0, r3
 80163f8:	f7fb f978 	bl	80116ec <pbuf_clen>
 80163fc:	4603      	mov	r3, r0
 80163fe:	461a      	mov	r2, r3
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016406:	4413      	add	r3, r2
 8016408:	b29a      	uxth	r2, r3
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016416:	2b00      	cmp	r3, #0
 8016418:	d00e      	beq.n	8016438 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801641e:	2b00      	cmp	r3, #0
 8016420:	d10a      	bne.n	8016438 <tcp_enqueue_flags+0x1d0>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016426:	2b00      	cmp	r3, #0
 8016428:	d106      	bne.n	8016438 <tcp_enqueue_flags+0x1d0>
 801642a:	4b06      	ldr	r3, [pc, #24]	; (8016444 <tcp_enqueue_flags+0x1dc>)
 801642c:	f240 326d 	movw	r2, #877	; 0x36d
 8016430:	490a      	ldr	r1, [pc, #40]	; (801645c <tcp_enqueue_flags+0x1f4>)
 8016432:	4806      	ldr	r0, [pc, #24]	; (801644c <tcp_enqueue_flags+0x1e4>)
 8016434:	f004 fb2c 	bl	801aa90 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016438:	2300      	movs	r3, #0
}
 801643a:	4618      	mov	r0, r3
 801643c:	3720      	adds	r7, #32
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	0801d36c 	.word	0x0801d36c
 8016448:	0801d670 	.word	0x0801d670
 801644c:	0801d3d0 	.word	0x0801d3d0
 8016450:	0801d6c8 	.word	0x0801d6c8
 8016454:	0801d704 	.word	0x0801d704
 8016458:	0801d71c 	.word	0x0801d71c
 801645c:	0801d748 	.word	0x0801d748

08016460 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016460:	b590      	push	{r4, r7, lr}
 8016462:	b08b      	sub	sp, #44	; 0x2c
 8016464:	af04      	add	r7, sp, #16
 8016466:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8016468:	2300      	movs	r3, #0
 801646a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801646c:	7dbb      	ldrb	r3, [r7, #22]
 801646e:	b29c      	uxth	r4, r3
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016474:	4618      	mov	r0, r3
 8016476:	f7f9 ff13 	bl	80102a0 <lwip_htonl>
 801647a:	4603      	mov	r3, r0
 801647c:	2200      	movs	r2, #0
 801647e:	4621      	mov	r1, r4
 8016480:	6878      	ldr	r0, [r7, #4]
 8016482:	f7ff f97b 	bl	801577c <tcp_output_alloc_header>
 8016486:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d109      	bne.n	80164a2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	7e9b      	ldrb	r3, [r3, #26]
 8016492:	f043 0303 	orr.w	r3, r3, #3
 8016496:	b2da      	uxtb	r2, r3
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801649c:	f06f 0301 	mvn.w	r3, #1
 80164a0:	e036      	b.n	8016510 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	3304      	adds	r3, #4
 80164a6:	4618      	mov	r0, r3
 80164a8:	f002 f9be 	bl	8018828 <ip4_route>
 80164ac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d102      	bne.n	80164ba <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80164b4:	23fc      	movs	r3, #252	; 0xfc
 80164b6:	75fb      	strb	r3, [r7, #23]
 80164b8:	e012      	b.n	80164e0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80164ba:	6879      	ldr	r1, [r7, #4]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	1d18      	adds	r0, r3, #4
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	7a9c      	ldrb	r4, [r3, #10]
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	7a5b      	ldrb	r3, [r3, #9]
 80164c8:	68fa      	ldr	r2, [r7, #12]
 80164ca:	9202      	str	r2, [sp, #8]
 80164cc:	2206      	movs	r2, #6
 80164ce:	9201      	str	r2, [sp, #4]
 80164d0:	9300      	str	r3, [sp, #0]
 80164d2:	4623      	mov	r3, r4
 80164d4:	4602      	mov	r2, r0
 80164d6:	6938      	ldr	r0, [r7, #16]
 80164d8:	f002 fb4e 	bl	8018b78 <ip4_output_if>
 80164dc:	4603      	mov	r3, r0
 80164de:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80164e0:	6938      	ldr	r0, [r7, #16]
 80164e2:	f7fb f869 	bl	80115b8 <pbuf_free>

  if (err != ERR_OK) {
 80164e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d007      	beq.n	80164fe <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	7e9b      	ldrb	r3, [r3, #26]
 80164f2:	f043 0303 	orr.w	r3, r3, #3
 80164f6:	b2da      	uxtb	r2, r3
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	769a      	strb	r2, [r3, #26]
 80164fc:	e006      	b.n	801650c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	7e9b      	ldrb	r3, [r3, #26]
 8016502:	f023 0303 	bic.w	r3, r3, #3
 8016506:	b2da      	uxtb	r2, r3
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801650c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016510:	4618      	mov	r0, r3
 8016512:	371c      	adds	r7, #28
 8016514:	46bd      	mov	sp, r7
 8016516:	bd90      	pop	{r4, r7, pc}

08016518 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016518:	b5b0      	push	{r4, r5, r7, lr}
 801651a:	b08a      	sub	sp, #40	; 0x28
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	7d1b      	ldrb	r3, [r3, #20]
 8016524:	2b01      	cmp	r3, #1
 8016526:	d106      	bne.n	8016536 <tcp_output+0x1e>
 8016528:	4b9b      	ldr	r3, [pc, #620]	; (8016798 <tcp_output+0x280>)
 801652a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801652e:	499b      	ldr	r1, [pc, #620]	; (801679c <tcp_output+0x284>)
 8016530:	489b      	ldr	r0, [pc, #620]	; (80167a0 <tcp_output+0x288>)
 8016532:	f004 faad 	bl	801aa90 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016536:	4b9b      	ldr	r3, [pc, #620]	; (80167a4 <tcp_output+0x28c>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	687a      	ldr	r2, [r7, #4]
 801653c:	429a      	cmp	r2, r3
 801653e:	d101      	bne.n	8016544 <tcp_output+0x2c>
    return ERR_OK;
 8016540:	2300      	movs	r3, #0
 8016542:	e1cf      	b.n	80168e4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016550:	429a      	cmp	r2, r3
 8016552:	d203      	bcs.n	801655c <tcp_output+0x44>
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801655a:	e002      	b.n	8016562 <tcp_output+0x4a>
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016562:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016568:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	7e9b      	ldrb	r3, [r3, #26]
 801656e:	f003 0302 	and.w	r3, r3, #2
 8016572:	2b00      	cmp	r3, #0
 8016574:	d017      	beq.n	80165a6 <tcp_output+0x8e>
 8016576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016578:	2b00      	cmp	r3, #0
 801657a:	d00f      	beq.n	801659c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657e:	68db      	ldr	r3, [r3, #12]
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	4618      	mov	r0, r3
 8016584:	f7f9 fe8c 	bl	80102a0 <lwip_htonl>
 8016588:	4602      	mov	r2, r0
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801658e:	1ad3      	subs	r3, r2, r3
 8016590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016592:	8912      	ldrh	r2, [r2, #8]
 8016594:	4413      	add	r3, r2
     (seg == NULL ||
 8016596:	69ba      	ldr	r2, [r7, #24]
 8016598:	429a      	cmp	r2, r3
 801659a:	d204      	bcs.n	80165a6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f7ff ff5f 	bl	8016460 <tcp_send_empty_ack>
 80165a2:	4603      	mov	r3, r0
 80165a4:	e19e      	b.n	80168e4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165aa:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80165ac:	6a3b      	ldr	r3, [r7, #32]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d007      	beq.n	80165c2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80165b2:	e002      	b.n	80165ba <tcp_output+0xa2>
 80165b4:	6a3b      	ldr	r3, [r7, #32]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	623b      	str	r3, [r7, #32]
 80165ba:	6a3b      	ldr	r3, [r7, #32]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d1f8      	bne.n	80165b4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	3304      	adds	r3, #4
 80165c6:	4618      	mov	r0, r3
 80165c8:	f002 f92e 	bl	8018828 <ip4_route>
 80165cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d102      	bne.n	80165da <tcp_output+0xc2>
    return ERR_RTE;
 80165d4:	f06f 0303 	mvn.w	r3, #3
 80165d8:	e184      	b.n	80168e4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d003      	beq.n	80165e8 <tcp_output+0xd0>
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d111      	bne.n	801660c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d002      	beq.n	80165f4 <tcp_output+0xdc>
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	3304      	adds	r3, #4
 80165f2:	e000      	b.n	80165f6 <tcp_output+0xde>
 80165f4:	2300      	movs	r3, #0
 80165f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80165f8:	693b      	ldr	r3, [r7, #16]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d102      	bne.n	8016604 <tcp_output+0xec>
      return ERR_RTE;
 80165fe:	f06f 0303 	mvn.w	r3, #3
 8016602:	e16f      	b.n	80168e4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016604:	693b      	ldr	r3, [r7, #16]
 8016606:	681a      	ldr	r2, [r3, #0]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801660e:	2b00      	cmp	r3, #0
 8016610:	f000 813e 	beq.w	8016890 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8016614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016616:	68db      	ldr	r3, [r3, #12]
 8016618:	685b      	ldr	r3, [r3, #4]
 801661a:	4618      	mov	r0, r3
 801661c:	f7f9 fe40 	bl	80102a0 <lwip_htonl>
 8016620:	4602      	mov	r2, r0
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016626:	1ad3      	subs	r3, r2, r3
 8016628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801662a:	8912      	ldrh	r2, [r2, #8]
 801662c:	4413      	add	r3, r2
  if (seg != NULL &&
 801662e:	69ba      	ldr	r2, [r7, #24]
 8016630:	429a      	cmp	r2, r3
 8016632:	f080 812d 	bcs.w	8016890 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8016636:	69bb      	ldr	r3, [r7, #24]
 8016638:	2b00      	cmp	r3, #0
 801663a:	f000 8129 	beq.w	8016890 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016644:	461a      	mov	r2, r3
 8016646:	69bb      	ldr	r3, [r7, #24]
 8016648:	4293      	cmp	r3, r2
 801664a:	f040 8121 	bne.w	8016890 <tcp_output+0x378>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016652:	2b00      	cmp	r3, #0
 8016654:	f040 811c 	bne.w	8016890 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801665e:	2b00      	cmp	r3, #0
 8016660:	f040 812b 	bne.w	80168ba <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2200      	movs	r2, #0
 8016668:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2201      	movs	r2, #1
 8016670:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8016674:	e121      	b.n	80168ba <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016678:	68db      	ldr	r3, [r3, #12]
 801667a:	899b      	ldrh	r3, [r3, #12]
 801667c:	b29b      	uxth	r3, r3
 801667e:	4618      	mov	r0, r3
 8016680:	f7f9 fe00 	bl	8010284 <lwip_htons>
 8016684:	4603      	mov	r3, r0
 8016686:	f003 0304 	and.w	r3, r3, #4
 801668a:	2b00      	cmp	r3, #0
 801668c:	d006      	beq.n	801669c <tcp_output+0x184>
 801668e:	4b42      	ldr	r3, [pc, #264]	; (8016798 <tcp_output+0x280>)
 8016690:	f240 4246 	movw	r2, #1094	; 0x446
 8016694:	4944      	ldr	r1, [pc, #272]	; (80167a8 <tcp_output+0x290>)
 8016696:	4842      	ldr	r0, [pc, #264]	; (80167a0 <tcp_output+0x288>)
 8016698:	f004 f9fa 	bl	801aa90 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d01f      	beq.n	80166e4 <tcp_output+0x1cc>
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	7e9b      	ldrb	r3, [r3, #26]
 80166a8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d119      	bne.n	80166e4 <tcp_output+0x1cc>
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d00b      	beq.n	80166d0 <tcp_output+0x1b8>
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d110      	bne.n	80166e4 <tcp_output+0x1cc>
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80166c6:	891a      	ldrh	r2, [r3, #8]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d209      	bcs.n	80166e4 <tcp_output+0x1cc>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d004      	beq.n	80166e4 <tcp_output+0x1cc>
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80166e0:	2b08      	cmp	r3, #8
 80166e2:	d901      	bls.n	80166e8 <tcp_output+0x1d0>
 80166e4:	2301      	movs	r3, #1
 80166e6:	e000      	b.n	80166ea <tcp_output+0x1d2>
 80166e8:	2300      	movs	r3, #0
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d106      	bne.n	80166fc <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	7e9b      	ldrb	r3, [r3, #26]
 80166f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	f000 80e1 	beq.w	80168be <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	7d1b      	ldrb	r3, [r3, #20]
 8016700:	2b02      	cmp	r3, #2
 8016702:	d00d      	beq.n	8016720 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016706:	68db      	ldr	r3, [r3, #12]
 8016708:	899b      	ldrh	r3, [r3, #12]
 801670a:	b29c      	uxth	r4, r3
 801670c:	2010      	movs	r0, #16
 801670e:	f7f9 fdb9 	bl	8010284 <lwip_htons>
 8016712:	4603      	mov	r3, r0
 8016714:	461a      	mov	r2, r3
 8016716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016718:	68db      	ldr	r3, [r3, #12]
 801671a:	4322      	orrs	r2, r4
 801671c:	b292      	uxth	r2, r2
 801671e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8016720:	697a      	ldr	r2, [r7, #20]
 8016722:	6879      	ldr	r1, [r7, #4]
 8016724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016726:	f000 f8e1 	bl	80168ec <tcp_output_segment>
 801672a:	4603      	mov	r3, r0
 801672c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801672e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d009      	beq.n	801674a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	7e9b      	ldrb	r3, [r3, #26]
 801673a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801673e:	b2da      	uxtb	r2, r3
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	769a      	strb	r2, [r3, #26]
      return err;
 8016744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016748:	e0cc      	b.n	80168e4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674c:	681a      	ldr	r2, [r3, #0]
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	7d1b      	ldrb	r3, [r3, #20]
 8016756:	2b02      	cmp	r3, #2
 8016758:	d006      	beq.n	8016768 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	7e9b      	ldrb	r3, [r3, #26]
 801675e:	f023 0303 	bic.w	r3, r3, #3
 8016762:	b2da      	uxtb	r2, r3
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801676a:	68db      	ldr	r3, [r3, #12]
 801676c:	685b      	ldr	r3, [r3, #4]
 801676e:	4618      	mov	r0, r3
 8016770:	f7f9 fd96 	bl	80102a0 <lwip_htonl>
 8016774:	4604      	mov	r4, r0
 8016776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016778:	891b      	ldrh	r3, [r3, #8]
 801677a:	461d      	mov	r5, r3
 801677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801677e:	68db      	ldr	r3, [r3, #12]
 8016780:	899b      	ldrh	r3, [r3, #12]
 8016782:	b29b      	uxth	r3, r3
 8016784:	4618      	mov	r0, r3
 8016786:	f7f9 fd7d 	bl	8010284 <lwip_htons>
 801678a:	4603      	mov	r3, r0
 801678c:	f003 0303 	and.w	r3, r3, #3
 8016790:	2b00      	cmp	r3, #0
 8016792:	d00b      	beq.n	80167ac <tcp_output+0x294>
 8016794:	2301      	movs	r3, #1
 8016796:	e00a      	b.n	80167ae <tcp_output+0x296>
 8016798:	0801d36c 	.word	0x0801d36c
 801679c:	0801d770 	.word	0x0801d770
 80167a0:	0801d3d0 	.word	0x0801d3d0
 80167a4:	2000ab64 	.word	0x2000ab64
 80167a8:	0801d798 	.word	0x0801d798
 80167ac:	2300      	movs	r3, #0
 80167ae:	442b      	add	r3, r5
 80167b0:	4423      	add	r3, r4
 80167b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	1ad3      	subs	r3, r2, r3
 80167bc:	2b00      	cmp	r3, #0
 80167be:	da02      	bge.n	80167c6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	68ba      	ldr	r2, [r7, #8]
 80167c4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80167c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c8:	891b      	ldrh	r3, [r3, #8]
 80167ca:	461c      	mov	r4, r3
 80167cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	899b      	ldrh	r3, [r3, #12]
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7f9 fd55 	bl	8010284 <lwip_htons>
 80167da:	4603      	mov	r3, r0
 80167dc:	f003 0303 	and.w	r3, r3, #3
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d001      	beq.n	80167e8 <tcp_output+0x2d0>
 80167e4:	2301      	movs	r3, #1
 80167e6:	e000      	b.n	80167ea <tcp_output+0x2d2>
 80167e8:	2300      	movs	r3, #0
 80167ea:	4423      	add	r3, r4
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d049      	beq.n	8016884 <tcp_output+0x36c>
      seg->next = NULL;
 80167f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f2:	2200      	movs	r2, #0
 80167f4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d105      	bne.n	801680a <tcp_output+0x2f2>
        pcb->unacked = seg;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016802:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8016804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016806:	623b      	str	r3, [r7, #32]
 8016808:	e03f      	b.n	801688a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680c:	68db      	ldr	r3, [r3, #12]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	4618      	mov	r0, r3
 8016812:	f7f9 fd45 	bl	80102a0 <lwip_htonl>
 8016816:	4604      	mov	r4, r0
 8016818:	6a3b      	ldr	r3, [r7, #32]
 801681a:	68db      	ldr	r3, [r3, #12]
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	4618      	mov	r0, r3
 8016820:	f7f9 fd3e 	bl	80102a0 <lwip_htonl>
 8016824:	4603      	mov	r3, r0
 8016826:	1ae3      	subs	r3, r4, r3
 8016828:	2b00      	cmp	r3, #0
 801682a:	da24      	bge.n	8016876 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	336c      	adds	r3, #108	; 0x6c
 8016830:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016832:	e002      	b.n	801683a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8016834:	69fb      	ldr	r3, [r7, #28]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d011      	beq.n	8016866 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	68db      	ldr	r3, [r3, #12]
 8016848:	685b      	ldr	r3, [r3, #4]
 801684a:	4618      	mov	r0, r3
 801684c:	f7f9 fd28 	bl	80102a0 <lwip_htonl>
 8016850:	4604      	mov	r4, r0
 8016852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016854:	68db      	ldr	r3, [r3, #12]
 8016856:	685b      	ldr	r3, [r3, #4]
 8016858:	4618      	mov	r0, r3
 801685a:	f7f9 fd21 	bl	80102a0 <lwip_htonl>
 801685e:	4603      	mov	r3, r0
 8016860:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016862:	2b00      	cmp	r3, #0
 8016864:	dbe6      	blt.n	8016834 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8016866:	69fb      	ldr	r3, [r7, #28]
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801686c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016872:	601a      	str	r2, [r3, #0]
 8016874:	e009      	b.n	801688a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016876:	6a3b      	ldr	r3, [r7, #32]
 8016878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801687a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801687c:	6a3b      	ldr	r3, [r7, #32]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	623b      	str	r3, [r7, #32]
 8016882:	e002      	b.n	801688a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016886:	f7fc f9b0 	bl	8012bea <tcp_seg_free>
    }
    seg = pcb->unsent;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801688e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016892:	2b00      	cmp	r3, #0
 8016894:	d015      	beq.n	80168c2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016898:	68db      	ldr	r3, [r3, #12]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	4618      	mov	r0, r3
 801689e:	f7f9 fcff 	bl	80102a0 <lwip_htonl>
 80168a2:	4602      	mov	r2, r0
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168a8:	1ad3      	subs	r3, r2, r3
 80168aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168ac:	8912      	ldrh	r2, [r2, #8]
 80168ae:	4413      	add	r3, r2
  while (seg != NULL &&
 80168b0:	69ba      	ldr	r2, [r7, #24]
 80168b2:	429a      	cmp	r2, r3
 80168b4:	f4bf aedf 	bcs.w	8016676 <tcp_output+0x15e>
  }
output_done:
 80168b8:	e003      	b.n	80168c2 <tcp_output+0x3aa>
    goto output_done;
 80168ba:	bf00      	nop
 80168bc:	e002      	b.n	80168c4 <tcp_output+0x3ac>
      break;
 80168be:	bf00      	nop
 80168c0:	e000      	b.n	80168c4 <tcp_output+0x3ac>
output_done:
 80168c2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d103      	bne.n	80168d4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2200      	movs	r2, #0
 80168d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	7e9b      	ldrb	r3, [r3, #26]
 80168d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168dc:	b2da      	uxtb	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80168e2:	2300      	movs	r3, #0
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3728      	adds	r7, #40	; 0x28
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bdb0      	pop	{r4, r5, r7, pc}

080168ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80168ec:	b5b0      	push	{r4, r5, r7, lr}
 80168ee:	b08c      	sub	sp, #48	; 0x30
 80168f0:	af04      	add	r7, sp, #16
 80168f2:	60f8      	str	r0, [r7, #12]
 80168f4:	60b9      	str	r1, [r7, #8]
 80168f6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	89db      	ldrh	r3, [r3, #14]
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d001      	beq.n	8016906 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8016902:	2300      	movs	r3, #0
 8016904:	e08b      	b.n	8016a1e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016906:	68bb      	ldr	r3, [r7, #8]
 8016908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	68dc      	ldr	r4, [r3, #12]
 801690e:	4610      	mov	r0, r2
 8016910:	f7f9 fcc6 	bl	80102a0 <lwip_htonl>
 8016914:	4603      	mov	r3, r0
 8016916:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016918:	68bb      	ldr	r3, [r7, #8]
 801691a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	68dc      	ldr	r4, [r3, #12]
 8016920:	4610      	mov	r0, r2
 8016922:	f7f9 fcaf 	bl	8010284 <lwip_htons>
 8016926:	4603      	mov	r3, r0
 8016928:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801692e:	68ba      	ldr	r2, [r7, #8]
 8016930:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016932:	441a      	add	r2, r3
 8016934:	68bb      	ldr	r3, [r7, #8]
 8016936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	68db      	ldr	r3, [r3, #12]
 801693c:	3314      	adds	r3, #20
 801693e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	7a9b      	ldrb	r3, [r3, #10]
 8016944:	f003 0301 	and.w	r3, r3, #1
 8016948:	2b00      	cmp	r3, #0
 801694a:	d014      	beq.n	8016976 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	3304      	adds	r3, #4
 8016950:	4619      	mov	r1, r3
 8016952:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016956:	f7fc fc73 	bl	8013240 <tcp_eff_send_mss_impl>
 801695a:	4603      	mov	r3, r0
 801695c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801695e:	8b7b      	ldrh	r3, [r7, #26]
 8016960:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016964:	4618      	mov	r0, r3
 8016966:	f7f9 fc9b 	bl	80102a0 <lwip_htonl>
 801696a:	4602      	mov	r2, r0
 801696c:	69fb      	ldr	r3, [r7, #28]
 801696e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	3304      	adds	r3, #4
 8016974:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801697c:	2b00      	cmp	r3, #0
 801697e:	da02      	bge.n	8016986 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	2200      	movs	r2, #0
 8016984:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801698a:	2b00      	cmp	r3, #0
 801698c:	d10c      	bne.n	80169a8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801698e:	4b26      	ldr	r3, [pc, #152]	; (8016a28 <tcp_output_segment+0x13c>)
 8016990:	681a      	ldr	r2, [r3, #0]
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	68db      	ldr	r3, [r3, #12]
 801699a:	685b      	ldr	r3, [r3, #4]
 801699c:	4618      	mov	r0, r3
 801699e:	f7f9 fc7f 	bl	80102a0 <lwip_htonl>
 80169a2:	4602      	mov	r2, r0
 80169a4:	68bb      	ldr	r3, [r7, #8]
 80169a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	68db      	ldr	r3, [r3, #12]
 80169ac:	461a      	mov	r2, r3
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	1ad3      	subs	r3, r2, r3
 80169b6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	8959      	ldrh	r1, [r3, #10]
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	685b      	ldr	r3, [r3, #4]
 80169c2:	8b3a      	ldrh	r2, [r7, #24]
 80169c4:	1a8a      	subs	r2, r1, r2
 80169c6:	b292      	uxth	r2, r2
 80169c8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	685b      	ldr	r3, [r3, #4]
 80169ce:	8919      	ldrh	r1, [r3, #8]
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	685b      	ldr	r3, [r3, #4]
 80169d4:	8b3a      	ldrh	r2, [r7, #24]
 80169d6:	1a8a      	subs	r2, r1, r2
 80169d8:	b292      	uxth	r2, r2
 80169da:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	68fa      	ldr	r2, [r7, #12]
 80169e2:	68d2      	ldr	r2, [r2, #12]
 80169e4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	68db      	ldr	r3, [r3, #12]
 80169ea:	2200      	movs	r2, #0
 80169ec:	741a      	strb	r2, [r3, #16]
 80169ee:	2200      	movs	r2, #0
 80169f0:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	6858      	ldr	r0, [r3, #4]
 80169f6:	68b9      	ldr	r1, [r7, #8]
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	1d1c      	adds	r4, r3, #4
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	7a9d      	ldrb	r5, [r3, #10]
 8016a00:	68bb      	ldr	r3, [r7, #8]
 8016a02:	7a5b      	ldrb	r3, [r3, #9]
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	9202      	str	r2, [sp, #8]
 8016a08:	2206      	movs	r2, #6
 8016a0a:	9201      	str	r2, [sp, #4]
 8016a0c:	9300      	str	r3, [sp, #0]
 8016a0e:	462b      	mov	r3, r5
 8016a10:	4622      	mov	r2, r4
 8016a12:	f002 f8b1 	bl	8018b78 <ip4_output_if>
 8016a16:	4603      	mov	r3, r0
 8016a18:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8016a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3720      	adds	r7, #32
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bdb0      	pop	{r4, r5, r7, pc}
 8016a26:	bf00      	nop
 8016a28:	2000ab54 	.word	0x2000ab54

08016a2c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b08c      	sub	sp, #48	; 0x30
 8016a30:	af04      	add	r7, sp, #16
 8016a32:	60f8      	str	r0, [r7, #12]
 8016a34:	60b9      	str	r1, [r7, #8]
 8016a36:	607a      	str	r2, [r7, #4]
 8016a38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	2114      	movs	r1, #20
 8016a3e:	2001      	movs	r0, #1
 8016a40:	f7fa fa48 	bl	8010ed4 <pbuf_alloc>
 8016a44:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d05b      	beq.n	8016b04 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016a4c:	69fb      	ldr	r3, [r7, #28]
 8016a4e:	895b      	ldrh	r3, [r3, #10]
 8016a50:	2b13      	cmp	r3, #19
 8016a52:	d806      	bhi.n	8016a62 <tcp_rst+0x36>
 8016a54:	4b2d      	ldr	r3, [pc, #180]	; (8016b0c <tcp_rst+0xe0>)
 8016a56:	f240 524d 	movw	r2, #1357	; 0x54d
 8016a5a:	492d      	ldr	r1, [pc, #180]	; (8016b10 <tcp_rst+0xe4>)
 8016a5c:	482d      	ldr	r0, [pc, #180]	; (8016b14 <tcp_rst+0xe8>)
 8016a5e:	f004 f817 	bl	801aa90 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	685b      	ldr	r3, [r3, #4]
 8016a66:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8016a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7f9 fc0a 	bl	8010284 <lwip_htons>
 8016a70:	4603      	mov	r3, r0
 8016a72:	461a      	mov	r2, r3
 8016a74:	69bb      	ldr	r3, [r7, #24]
 8016a76:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8016a78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f9 fc02 	bl	8010284 <lwip_htons>
 8016a80:	4603      	mov	r3, r0
 8016a82:	461a      	mov	r2, r3
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8016a88:	68f8      	ldr	r0, [r7, #12]
 8016a8a:	f7f9 fc09 	bl	80102a0 <lwip_htonl>
 8016a8e:	4602      	mov	r2, r0
 8016a90:	69bb      	ldr	r3, [r7, #24]
 8016a92:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8016a94:	68b8      	ldr	r0, [r7, #8]
 8016a96:	f7f9 fc03 	bl	80102a0 <lwip_htonl>
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	69bb      	ldr	r3, [r7, #24]
 8016a9e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8016aa0:	f245 0014 	movw	r0, #20500	; 0x5014
 8016aa4:	f7f9 fbee 	bl	8010284 <lwip_htons>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	461a      	mov	r2, r3
 8016aac:	69bb      	ldr	r3, [r7, #24]
 8016aae:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8016ab0:	69bb      	ldr	r3, [r7, #24]
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	f042 0208 	orr.w	r2, r2, #8
 8016ab8:	739a      	strb	r2, [r3, #14]
 8016aba:	2200      	movs	r2, #0
 8016abc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8016ac0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8016ac2:	69bb      	ldr	r3, [r7, #24]
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	741a      	strb	r2, [r3, #16]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8016acc:	69bb      	ldr	r3, [r7, #24]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	749a      	strb	r2, [r3, #18]
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8016ad6:	6838      	ldr	r0, [r7, #0]
 8016ad8:	f001 fea6 	bl	8018828 <ip4_route>
 8016adc:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d00b      	beq.n	8016afc <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	9302      	str	r3, [sp, #8]
 8016ae8:	2306      	movs	r3, #6
 8016aea:	9301      	str	r3, [sp, #4]
 8016aec:	2300      	movs	r3, #0
 8016aee:	9300      	str	r3, [sp, #0]
 8016af0:	23ff      	movs	r3, #255	; 0xff
 8016af2:	683a      	ldr	r2, [r7, #0]
 8016af4:	6879      	ldr	r1, [r7, #4]
 8016af6:	69f8      	ldr	r0, [r7, #28]
 8016af8:	f002 f83e 	bl	8018b78 <ip4_output_if>
  }
  pbuf_free(p);
 8016afc:	69f8      	ldr	r0, [r7, #28]
 8016afe:	f7fa fd5b 	bl	80115b8 <pbuf_free>
 8016b02:	e000      	b.n	8016b06 <tcp_rst+0xda>
    return;
 8016b04:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016b06:	3720      	adds	r7, #32
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	0801d36c 	.word	0x0801d36c
 8016b10:	0801d3a0 	.word	0x0801d3a0
 8016b14:	0801d3d0 	.word	0x0801d3d0

08016b18 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b084      	sub	sp, #16
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d029      	beq.n	8016b7c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b2c:	60fb      	str	r3, [r7, #12]
 8016b2e:	e002      	b.n	8016b36 <tcp_rexmit_rto+0x1e>
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	60fb      	str	r3, [r7, #12]
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d1f8      	bne.n	8016b30 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2200      	movs	r2, #0
 8016b52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016b5a:	2bff      	cmp	r3, #255	; 0xff
 8016b5c:	d007      	beq.n	8016b6e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016b64:	3301      	adds	r3, #1
 8016b66:	b2da      	uxtb	r2, r3
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2200      	movs	r2, #0
 8016b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f7ff fccf 	bl	8016518 <tcp_output>
 8016b7a:	e000      	b.n	8016b7e <tcp_rexmit_rto+0x66>
    return;
 8016b7c:	bf00      	nop
}
 8016b7e:	3710      	adds	r7, #16
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}

08016b84 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016b84:	b590      	push	{r4, r7, lr}
 8016b86:	b085      	sub	sp, #20
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d043      	beq.n	8016c1c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b98:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	681a      	ldr	r2, [r3, #0]
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	3368      	adds	r3, #104	; 0x68
 8016ba6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016ba8:	e002      	b.n	8016bb0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d011      	beq.n	8016bdc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	68db      	ldr	r3, [r3, #12]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7f9 fb6d 	bl	80102a0 <lwip_htonl>
 8016bc6:	4604      	mov	r4, r0
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	68db      	ldr	r3, [r3, #12]
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7f9 fb66 	bl	80102a0 <lwip_htonl>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	dbe6      	blt.n	8016baa <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d103      	bne.n	8016bfa <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016c00:	2bff      	cmp	r3, #255	; 0xff
 8016c02:	d007      	beq.n	8016c14 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016c0a:	3301      	adds	r3, #1
 8016c0c:	b2da      	uxtb	r2, r3
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2200      	movs	r2, #0
 8016c18:	635a      	str	r2, [r3, #52]	; 0x34
 8016c1a:	e000      	b.n	8016c1e <tcp_rexmit+0x9a>
    return;
 8016c1c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8016c1e:	3714      	adds	r7, #20
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd90      	pop	{r4, r7, pc}

08016c24 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d04a      	beq.n	8016cca <tcp_rexmit_fast+0xa6>
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	7e9b      	ldrb	r3, [r3, #26]
 8016c38:	f003 0304 	and.w	r3, r3, #4
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d144      	bne.n	8016cca <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f7ff ff9f 	bl	8016b84 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d207      	bcs.n	8016c66 <tcp_rexmit_fast+0x42>
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016c5c:	0fda      	lsrs	r2, r3, #31
 8016c5e:	4413      	add	r3, r2
 8016c60:	105b      	asrs	r3, r3, #1
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	e006      	b.n	8016c74 <tcp_rexmit_fast+0x50>
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016c6c:	0fda      	lsrs	r2, r3, #31
 8016c6e:	4413      	add	r3, r2
 8016c70:	105b      	asrs	r3, r3, #1
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016c80:	461a      	mov	r2, r3
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c86:	005b      	lsls	r3, r3, #1
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d206      	bcs.n	8016c9a <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c90:	005b      	lsls	r3, r3, #1
 8016c92:	b29a      	uxth	r2, r3
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	0049      	lsls	r1, r1, #1
 8016ca8:	440b      	add	r3, r1
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	4413      	add	r3, r2
 8016cae:	b29a      	uxth	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	7e9b      	ldrb	r3, [r3, #26]
 8016cba:	f043 0304 	orr.w	r3, r3, #4
 8016cbe:	b2da      	uxtb	r2, r3
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8016cca:	bf00      	nop
 8016ccc:	3708      	adds	r7, #8
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016cd2:	b580      	push	{r7, lr}
 8016cd4:	b08a      	sub	sp, #40	; 0x28
 8016cd6:	af04      	add	r7, sp, #16
 8016cd8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cde:	3b01      	subs	r3, #1
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f7f9 fadd 	bl	80102a0 <lwip_htonl>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	2200      	movs	r2, #0
 8016cea:	2100      	movs	r1, #0
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	f7fe fd45 	bl	801577c <tcp_output_alloc_header>
 8016cf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d102      	bne.n	8016d00 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cfe:	e021      	b.n	8016d44 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	3304      	adds	r3, #4
 8016d04:	4618      	mov	r0, r3
 8016d06:	f001 fd8f 	bl	8018828 <ip4_route>
 8016d0a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d102      	bne.n	8016d18 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8016d12:	23fc      	movs	r3, #252	; 0xfc
 8016d14:	75fb      	strb	r3, [r7, #23]
 8016d16:	e010      	b.n	8016d3a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8016d18:	6879      	ldr	r1, [r7, #4]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	1d1a      	adds	r2, r3, #4
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	7a98      	ldrb	r0, [r3, #10]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	9302      	str	r3, [sp, #8]
 8016d26:	2306      	movs	r3, #6
 8016d28:	9301      	str	r3, [sp, #4]
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	9300      	str	r3, [sp, #0]
 8016d2e:	4603      	mov	r3, r0
 8016d30:	6938      	ldr	r0, [r7, #16]
 8016d32:	f001 ff21 	bl	8018b78 <ip4_output_if>
 8016d36:	4603      	mov	r3, r0
 8016d38:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8016d3a:	6938      	ldr	r0, [r7, #16]
 8016d3c:	f7fa fc3c 	bl	80115b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	3718      	adds	r7, #24
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}

08016d4c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016d4c:	b590      	push	{r4, r7, lr}
 8016d4e:	b08f      	sub	sp, #60	; 0x3c
 8016d50:	af04      	add	r7, sp, #16
 8016d52:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d58:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8016d5a:	6a3b      	ldr	r3, [r7, #32]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d102      	bne.n	8016d66 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016d64:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8016d66:	6a3b      	ldr	r3, [r7, #32]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d101      	bne.n	8016d70 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	e085      	b.n	8016e7c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016d70:	6a3b      	ldr	r3, [r7, #32]
 8016d72:	68db      	ldr	r3, [r3, #12]
 8016d74:	899b      	ldrh	r3, [r3, #12]
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7f9 fa83 	bl	8010284 <lwip_htons>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	f003 0301 	and.w	r3, r3, #1
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d005      	beq.n	8016d94 <tcp_zero_window_probe+0x48>
 8016d88:	6a3b      	ldr	r3, [r7, #32]
 8016d8a:	891b      	ldrh	r3, [r3, #8]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d101      	bne.n	8016d94 <tcp_zero_window_probe+0x48>
 8016d90:	2301      	movs	r3, #1
 8016d92:	e000      	b.n	8016d96 <tcp_zero_window_probe+0x4a>
 8016d94:	2300      	movs	r3, #0
 8016d96:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016d98:	7ffb      	ldrb	r3, [r7, #31]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	bf0c      	ite	eq
 8016d9e:	2301      	moveq	r3, #1
 8016da0:	2300      	movne	r3, #0
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8016da6:	6a3b      	ldr	r3, [r7, #32]
 8016da8:	68db      	ldr	r3, [r3, #12]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	8bba      	ldrh	r2, [r7, #28]
 8016dae:	2100      	movs	r1, #0
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f7fe fce3 	bl	801577c <tcp_output_alloc_header>
 8016db6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016db8:	69bb      	ldr	r3, [r7, #24]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d102      	bne.n	8016dc4 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dc2:	e05b      	b.n	8016e7c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016dc4:	69bb      	ldr	r3, [r7, #24]
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016dca:	7ffb      	ldrb	r3, [r7, #31]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d00e      	beq.n	8016dee <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016dd0:	697b      	ldr	r3, [r7, #20]
 8016dd2:	899b      	ldrh	r3, [r3, #12]
 8016dd4:	b29b      	uxth	r3, r3
 8016dd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016dda:	b29c      	uxth	r4, r3
 8016ddc:	2011      	movs	r0, #17
 8016dde:	f7f9 fa51 	bl	8010284 <lwip_htons>
 8016de2:	4603      	mov	r3, r0
 8016de4:	4323      	orrs	r3, r4
 8016de6:	b29a      	uxth	r2, r3
 8016de8:	697b      	ldr	r3, [r7, #20]
 8016dea:	819a      	strh	r2, [r3, #12]
 8016dec:	e010      	b.n	8016e10 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016dee:	69bb      	ldr	r3, [r7, #24]
 8016df0:	685b      	ldr	r3, [r3, #4]
 8016df2:	3314      	adds	r3, #20
 8016df4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016df6:	6a3b      	ldr	r3, [r7, #32]
 8016df8:	6858      	ldr	r0, [r3, #4]
 8016dfa:	6a3b      	ldr	r3, [r7, #32]
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	891a      	ldrh	r2, [r3, #8]
 8016e00:	6a3b      	ldr	r3, [r7, #32]
 8016e02:	891b      	ldrh	r3, [r3, #8]
 8016e04:	1ad3      	subs	r3, r2, r3
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	2201      	movs	r2, #1
 8016e0a:	6939      	ldr	r1, [r7, #16]
 8016e0c:	f7fa fdd0 	bl	80119b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016e10:	6a3b      	ldr	r3, [r7, #32]
 8016e12:	68db      	ldr	r3, [r3, #12]
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7f9 fa42 	bl	80102a0 <lwip_htonl>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	3301      	adds	r3, #1
 8016e20:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	1ad3      	subs	r3, r2, r3
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	da02      	bge.n	8016e34 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	68fa      	ldr	r2, [r7, #12]
 8016e32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	3304      	adds	r3, #4
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f001 fcf5 	bl	8018828 <ip4_route>
 8016e3e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8016e40:	68bb      	ldr	r3, [r7, #8]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d103      	bne.n	8016e4e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8016e46:	23fc      	movs	r3, #252	; 0xfc
 8016e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e4c:	e011      	b.n	8016e72 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016e4e:	6879      	ldr	r1, [r7, #4]
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	1d1a      	adds	r2, r3, #4
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	7a98      	ldrb	r0, [r3, #10]
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	9302      	str	r3, [sp, #8]
 8016e5c:	2306      	movs	r3, #6
 8016e5e:	9301      	str	r3, [sp, #4]
 8016e60:	2300      	movs	r3, #0
 8016e62:	9300      	str	r3, [sp, #0]
 8016e64:	4603      	mov	r3, r0
 8016e66:	69b8      	ldr	r0, [r7, #24]
 8016e68:	f001 fe86 	bl	8018b78 <ip4_output_if>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8016e72:	69b8      	ldr	r0, [r7, #24]
 8016e74:	f7fa fba0 	bl	80115b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	372c      	adds	r7, #44	; 0x2c
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd90      	pop	{r4, r7, pc}

08016e84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b082      	sub	sp, #8
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016e8c:	f7fa fe12 	bl	8011ab4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016e90:	4b0a      	ldr	r3, [pc, #40]	; (8016ebc <tcpip_tcp_timer+0x38>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d103      	bne.n	8016ea0 <tcpip_tcp_timer+0x1c>
 8016e98:	4b09      	ldr	r3, [pc, #36]	; (8016ec0 <tcpip_tcp_timer+0x3c>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d005      	beq.n	8016eac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	4908      	ldr	r1, [pc, #32]	; (8016ec4 <tcpip_tcp_timer+0x40>)
 8016ea4:	20fa      	movs	r0, #250	; 0xfa
 8016ea6:	f000 f86f 	bl	8016f88 <sys_timeout>
 8016eaa:	e002      	b.n	8016eb2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016eac:	4b06      	ldr	r3, [pc, #24]	; (8016ec8 <tcpip_tcp_timer+0x44>)
 8016eae:	2200      	movs	r2, #0
 8016eb0:	601a      	str	r2, [r3, #0]
  }
}
 8016eb2:	bf00      	nop
 8016eb4:	3708      	adds	r7, #8
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bd80      	pop	{r7, pc}
 8016eba:	bf00      	nop
 8016ebc:	2000ab50 	.word	0x2000ab50
 8016ec0:	2000ab60 	.word	0x2000ab60
 8016ec4:	08016e85 	.word	0x08016e85
 8016ec8:	20004244 	.word	0x20004244

08016ecc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016ed0:	4b0a      	ldr	r3, [pc, #40]	; (8016efc <tcp_timer_needed+0x30>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d10f      	bne.n	8016ef8 <tcp_timer_needed+0x2c>
 8016ed8:	4b09      	ldr	r3, [pc, #36]	; (8016f00 <tcp_timer_needed+0x34>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d103      	bne.n	8016ee8 <tcp_timer_needed+0x1c>
 8016ee0:	4b08      	ldr	r3, [pc, #32]	; (8016f04 <tcp_timer_needed+0x38>)
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d007      	beq.n	8016ef8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016ee8:	4b04      	ldr	r3, [pc, #16]	; (8016efc <tcp_timer_needed+0x30>)
 8016eea:	2201      	movs	r2, #1
 8016eec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016eee:	2200      	movs	r2, #0
 8016ef0:	4905      	ldr	r1, [pc, #20]	; (8016f08 <tcp_timer_needed+0x3c>)
 8016ef2:	20fa      	movs	r0, #250	; 0xfa
 8016ef4:	f000 f848 	bl	8016f88 <sys_timeout>
  }
}
 8016ef8:	bf00      	nop
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	20004244 	.word	0x20004244
 8016f00:	2000ab50 	.word	0x2000ab50
 8016f04:	2000ab60 	.word	0x2000ab60
 8016f08:	08016e85 	.word	0x08016e85

08016f0c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b084      	sub	sp, #16
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	4903      	ldr	r1, [pc, #12]	; (8016f34 <cyclic_timer+0x28>)
 8016f26:	4618      	mov	r0, r3
 8016f28:	f000 f82e 	bl	8016f88 <sys_timeout>
}
 8016f2c:	bf00      	nop
 8016f2e:	3710      	adds	r7, #16
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}
 8016f34:	08016f0d 	.word	0x08016f0d

08016f38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b082      	sub	sp, #8
 8016f3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016f3e:	2301      	movs	r3, #1
 8016f40:	607b      	str	r3, [r7, #4]
 8016f42:	e00e      	b.n	8016f62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8016f44:	4a0d      	ldr	r2, [pc, #52]	; (8016f7c <sys_timeouts_init+0x44>)
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	00db      	lsls	r3, r3, #3
 8016f50:	4a0a      	ldr	r2, [pc, #40]	; (8016f7c <sys_timeouts_init+0x44>)
 8016f52:	4413      	add	r3, r2
 8016f54:	461a      	mov	r2, r3
 8016f56:	490a      	ldr	r1, [pc, #40]	; (8016f80 <sys_timeouts_init+0x48>)
 8016f58:	f000 f816 	bl	8016f88 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	3301      	adds	r3, #1
 8016f60:	607b      	str	r3, [r7, #4]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2b02      	cmp	r3, #2
 8016f66:	d9ed      	bls.n	8016f44 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8016f68:	f7f2 fd0a 	bl	8009980 <sys_now>
 8016f6c:	4602      	mov	r2, r0
 8016f6e:	4b05      	ldr	r3, [pc, #20]	; (8016f84 <sys_timeouts_init+0x4c>)
 8016f70:	601a      	str	r2, [r3, #0]
}
 8016f72:	bf00      	nop
 8016f74:	3708      	adds	r7, #8
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bd80      	pop	{r7, pc}
 8016f7a:	bf00      	nop
 8016f7c:	0801e0bc 	.word	0x0801e0bc
 8016f80:	08016f0d 	.word	0x08016f0d
 8016f84:	20004240 	.word	0x20004240

08016f88 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b088      	sub	sp, #32
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	60f8      	str	r0, [r7, #12]
 8016f90:	60b9      	str	r1, [r7, #8]
 8016f92:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016f94:	200a      	movs	r0, #10
 8016f96:	f7f9 fd63 	bl	8010a60 <memp_malloc>
 8016f9a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8016f9c:	697b      	ldr	r3, [r7, #20]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d10a      	bne.n	8016fb8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016fa2:	697b      	ldr	r3, [r7, #20]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	f040 8084 	bne.w	80170b2 <sys_timeout+0x12a>
 8016faa:	4b44      	ldr	r3, [pc, #272]	; (80170bc <sys_timeout+0x134>)
 8016fac:	22d4      	movs	r2, #212	; 0xd4
 8016fae:	4944      	ldr	r1, [pc, #272]	; (80170c0 <sys_timeout+0x138>)
 8016fb0:	4844      	ldr	r0, [pc, #272]	; (80170c4 <sys_timeout+0x13c>)
 8016fb2:	f003 fd6d 	bl	801aa90 <iprintf>
    return;
 8016fb6:	e07c      	b.n	80170b2 <sys_timeout+0x12a>
  }

  now = sys_now();
 8016fb8:	f7f2 fce2 	bl	8009980 <sys_now>
 8016fbc:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8016fbe:	4b42      	ldr	r3, [pc, #264]	; (80170c8 <sys_timeout+0x140>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d105      	bne.n	8016fd2 <sys_timeout+0x4a>
    diff = 0;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8016fca:	4a40      	ldr	r2, [pc, #256]	; (80170cc <sys_timeout+0x144>)
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	6013      	str	r3, [r2, #0]
 8016fd0:	e004      	b.n	8016fdc <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8016fd2:	4b3e      	ldr	r3, [pc, #248]	; (80170cc <sys_timeout+0x144>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	693a      	ldr	r2, [r7, #16]
 8016fd8:	1ad3      	subs	r3, r2, r3
 8016fda:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	68ba      	ldr	r2, [r7, #8]
 8016fe6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	687a      	ldr	r2, [r7, #4]
 8016fec:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8016fee:	68fa      	ldr	r2, [r7, #12]
 8016ff0:	69bb      	ldr	r3, [r7, #24]
 8016ff2:	441a      	add	r2, r3
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016ff8:	4b33      	ldr	r3, [pc, #204]	; (80170c8 <sys_timeout+0x140>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d103      	bne.n	8017008 <sys_timeout+0x80>
    next_timeout = timeout;
 8017000:	4a31      	ldr	r2, [pc, #196]	; (80170c8 <sys_timeout+0x140>)
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	6013      	str	r3, [r2, #0]
    return;
 8017006:	e055      	b.n	80170b4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8017008:	4b2f      	ldr	r3, [pc, #188]	; (80170c8 <sys_timeout+0x140>)
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	429a      	cmp	r2, r3
 8017012:	d20f      	bcs.n	8017034 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8017014:	4b2c      	ldr	r3, [pc, #176]	; (80170c8 <sys_timeout+0x140>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	6859      	ldr	r1, [r3, #4]
 801701a:	4b2b      	ldr	r3, [pc, #172]	; (80170c8 <sys_timeout+0x140>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	68fa      	ldr	r2, [r7, #12]
 8017020:	1a8a      	subs	r2, r1, r2
 8017022:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8017024:	4b28      	ldr	r3, [pc, #160]	; (80170c8 <sys_timeout+0x140>)
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	697b      	ldr	r3, [r7, #20]
 801702a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801702c:	4a26      	ldr	r2, [pc, #152]	; (80170c8 <sys_timeout+0x140>)
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	6013      	str	r3, [r2, #0]
 8017032:	e03f      	b.n	80170b4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017034:	4b24      	ldr	r3, [pc, #144]	; (80170c8 <sys_timeout+0x140>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	61fb      	str	r3, [r7, #28]
 801703a:	e036      	b.n	80170aa <sys_timeout+0x122>
      timeout->time -= t->time;
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	685a      	ldr	r2, [r3, #4]
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	685b      	ldr	r3, [r3, #4]
 8017044:	1ad2      	subs	r2, r2, r3
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801704a:	69fb      	ldr	r3, [r7, #28]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d006      	beq.n	8017060 <sys_timeout+0xd8>
 8017052:	69fb      	ldr	r3, [r7, #28]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	685a      	ldr	r2, [r3, #4]
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	429a      	cmp	r2, r3
 801705e:	d921      	bls.n	80170a4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8017060:	69fb      	ldr	r3, [r7, #28]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d009      	beq.n	801707c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	6859      	ldr	r1, [r3, #4]
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	685a      	ldr	r2, [r3, #4]
 8017072:	69fb      	ldr	r3, [r7, #28]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	1a8a      	subs	r2, r1, r2
 8017078:	605a      	str	r2, [r3, #4]
 801707a:	e00b      	b.n	8017094 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	68fa      	ldr	r2, [r7, #12]
 8017082:	429a      	cmp	r2, r3
 8017084:	d206      	bcs.n	8017094 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8017086:	4b10      	ldr	r3, [pc, #64]	; (80170c8 <sys_timeout+0x140>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	685a      	ldr	r2, [r3, #4]
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	441a      	add	r2, r3
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8017094:	69fb      	ldr	r3, [r7, #28]
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801709c:	69fb      	ldr	r3, [r7, #28]
 801709e:	697a      	ldr	r2, [r7, #20]
 80170a0:	601a      	str	r2, [r3, #0]
        break;
 80170a2:	e007      	b.n	80170b4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80170a4:	69fb      	ldr	r3, [r7, #28]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	61fb      	str	r3, [r7, #28]
 80170aa:	69fb      	ldr	r3, [r7, #28]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d1c5      	bne.n	801703c <sys_timeout+0xb4>
 80170b0:	e000      	b.n	80170b4 <sys_timeout+0x12c>
    return;
 80170b2:	bf00      	nop
      }
    }
  }
}
 80170b4:	3720      	adds	r7, #32
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	0801d7b0 	.word	0x0801d7b0
 80170c0:	0801d7e4 	.word	0x0801d7e4
 80170c4:	0801d824 	.word	0x0801d824
 80170c8:	2000423c 	.word	0x2000423c
 80170cc:	20004240 	.word	0x20004240

080170d0 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b086      	sub	sp, #24
 80170d4:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80170d6:	4b24      	ldr	r3, [pc, #144]	; (8017168 <sys_check_timeouts+0x98>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d03f      	beq.n	801715e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80170de:	f7f2 fc4f 	bl	8009980 <sys_now>
 80170e2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80170e4:	4b21      	ldr	r3, [pc, #132]	; (801716c <sys_check_timeouts+0x9c>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	1ad3      	subs	r3, r2, r3
 80170ec:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80170ee:	2300      	movs	r3, #0
 80170f0:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80170f2:	4b1d      	ldr	r3, [pc, #116]	; (8017168 <sys_check_timeouts+0x98>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d02c      	beq.n	8017158 <sys_check_timeouts+0x88>
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	685b      	ldr	r3, [r3, #4]
 8017102:	697a      	ldr	r2, [r7, #20]
 8017104:	429a      	cmp	r2, r3
 8017106:	d327      	bcc.n	8017158 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8017108:	2301      	movs	r3, #1
 801710a:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	685a      	ldr	r2, [r3, #4]
 8017110:	4b16      	ldr	r3, [pc, #88]	; (801716c <sys_check_timeouts+0x9c>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	4413      	add	r3, r2
 8017116:	4a15      	ldr	r2, [pc, #84]	; (801716c <sys_check_timeouts+0x9c>)
 8017118:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	685b      	ldr	r3, [r3, #4]
 801711e:	697a      	ldr	r2, [r7, #20]
 8017120:	1ad3      	subs	r3, r2, r3
 8017122:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	4a0f      	ldr	r2, [pc, #60]	; (8017168 <sys_check_timeouts+0x98>)
 801712a:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	689b      	ldr	r3, [r3, #8]
 8017130:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017138:	68b9      	ldr	r1, [r7, #8]
 801713a:	200a      	movs	r0, #10
 801713c:	f7f9 fce2 	bl	8010b04 <memp_free>
        if (handler != NULL) {
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d008      	beq.n	8017158 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8017146:	480a      	ldr	r0, [pc, #40]	; (8017170 <sys_check_timeouts+0xa0>)
 8017148:	f002 fe6a 	bl	8019e20 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6838      	ldr	r0, [r7, #0]
 8017150:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8017152:	4807      	ldr	r0, [pc, #28]	; (8017170 <sys_check_timeouts+0xa0>)
 8017154:	f002 fe73 	bl	8019e3e <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8017158:	7cfb      	ldrb	r3, [r7, #19]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d1c7      	bne.n	80170ee <sys_check_timeouts+0x1e>
  }
}
 801715e:	bf00      	nop
 8017160:	3718      	adds	r7, #24
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	2000423c 	.word	0x2000423c
 801716c:	20004240 	.word	0x20004240
 8017170:	20007644 	.word	0x20007644

08017174 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b082      	sub	sp, #8
 8017178:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 801717a:	4b0f      	ldr	r3, [pc, #60]	; (80171b8 <sys_timeouts_sleeptime+0x44>)
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d102      	bne.n	8017188 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8017182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017186:	e013      	b.n	80171b0 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8017188:	f7f2 fbfa 	bl	8009980 <sys_now>
 801718c:	4602      	mov	r2, r0
 801718e:	4b0b      	ldr	r3, [pc, #44]	; (80171bc <sys_timeouts_sleeptime+0x48>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	1ad3      	subs	r3, r2, r3
 8017194:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8017196:	4b08      	ldr	r3, [pc, #32]	; (80171b8 <sys_timeouts_sleeptime+0x44>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	687a      	ldr	r2, [r7, #4]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d901      	bls.n	80171a6 <sys_timeouts_sleeptime+0x32>
    return 0;
 80171a2:	2300      	movs	r3, #0
 80171a4:	e004      	b.n	80171b0 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80171a6:	4b04      	ldr	r3, [pc, #16]	; (80171b8 <sys_timeouts_sleeptime+0x44>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	685a      	ldr	r2, [r3, #4]
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	1ad3      	subs	r3, r2, r3
  }
}
 80171b0:	4618      	mov	r0, r3
 80171b2:	3708      	adds	r7, #8
 80171b4:	46bd      	mov	sp, r7
 80171b6:	bd80      	pop	{r7, pc}
 80171b8:	2000423c 	.word	0x2000423c
 80171bc:	20004240 	.word	0x20004240

080171c0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80171ca:	4b0f      	ldr	r3, [pc, #60]	; (8017208 <sys_timeouts_mbox_fetch+0x48>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d105      	bne.n	80171de <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80171d2:	2200      	movs	r2, #0
 80171d4:	6839      	ldr	r1, [r7, #0]
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f002 fced 	bl	8019bb6 <sys_arch_mbox_fetch>
    return;
 80171dc:	e011      	b.n	8017202 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80171de:	f7ff ffc9 	bl	8017174 <sys_timeouts_sleeptime>
 80171e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d008      	beq.n	80171fc <sys_timeouts_mbox_fetch+0x3c>
 80171ea:	68fa      	ldr	r2, [r7, #12]
 80171ec:	6839      	ldr	r1, [r7, #0]
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f002 fce1 	bl	8019bb6 <sys_arch_mbox_fetch>
 80171f4:	4603      	mov	r3, r0
 80171f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80171fa:	d102      	bne.n	8017202 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80171fc:	f7ff ff68 	bl	80170d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017200:	e7e3      	b.n	80171ca <sys_timeouts_mbox_fetch+0xa>
  }
}
 8017202:	3710      	adds	r7, #16
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}
 8017208:	2000423c 	.word	0x2000423c

0801720c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801720c:	b480      	push	{r7}
 801720e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8017210:	bf00      	nop
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr
	...

0801721c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017222:	2300      	movs	r3, #0
 8017224:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017226:	4b17      	ldr	r3, [pc, #92]	; (8017284 <udp_new_port+0x68>)
 8017228:	881b      	ldrh	r3, [r3, #0]
 801722a:	1c5a      	adds	r2, r3, #1
 801722c:	b291      	uxth	r1, r2
 801722e:	4a15      	ldr	r2, [pc, #84]	; (8017284 <udp_new_port+0x68>)
 8017230:	8011      	strh	r1, [r2, #0]
 8017232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017236:	4293      	cmp	r3, r2
 8017238:	d103      	bne.n	8017242 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801723a:	4b12      	ldr	r3, [pc, #72]	; (8017284 <udp_new_port+0x68>)
 801723c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017240:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017242:	4b11      	ldr	r3, [pc, #68]	; (8017288 <udp_new_port+0x6c>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	603b      	str	r3, [r7, #0]
 8017248:	e011      	b.n	801726e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	8a5a      	ldrh	r2, [r3, #18]
 801724e:	4b0d      	ldr	r3, [pc, #52]	; (8017284 <udp_new_port+0x68>)
 8017250:	881b      	ldrh	r3, [r3, #0]
 8017252:	429a      	cmp	r2, r3
 8017254:	d108      	bne.n	8017268 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017256:	88fb      	ldrh	r3, [r7, #6]
 8017258:	3301      	adds	r3, #1
 801725a:	80fb      	strh	r3, [r7, #6]
 801725c:	88fb      	ldrh	r3, [r7, #6]
 801725e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017262:	d3e0      	bcc.n	8017226 <udp_new_port+0xa>
        return 0;
 8017264:	2300      	movs	r3, #0
 8017266:	e007      	b.n	8017278 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	68db      	ldr	r3, [r3, #12]
 801726c:	603b      	str	r3, [r7, #0]
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d1ea      	bne.n	801724a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017274:	4b03      	ldr	r3, [pc, #12]	; (8017284 <udp_new_port+0x68>)
 8017276:	881b      	ldrh	r3, [r3, #0]
}
 8017278:	4618      	mov	r0, r3
 801727a:	370c      	adds	r7, #12
 801727c:	46bd      	mov	sp, r7
 801727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017282:	4770      	bx	lr
 8017284:	20000124 	.word	0x20000124
 8017288:	2000ab68 	.word	0x2000ab68

0801728c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801728c:	b480      	push	{r7}
 801728e:	b085      	sub	sp, #20
 8017290:	af00      	add	r7, sp, #0
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	60b9      	str	r1, [r7, #8]
 8017296:	4613      	mov	r3, r2
 8017298:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801729a:	79fb      	ldrb	r3, [r7, #7]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d018      	beq.n	80172d2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d013      	beq.n	80172ce <udp_input_local_match+0x42>
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d00f      	beq.n	80172ce <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80172ae:	4b14      	ldr	r3, [pc, #80]	; (8017300 <udp_input_local_match+0x74>)
 80172b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80172b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80172b6:	d00a      	beq.n	80172ce <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	681a      	ldr	r2, [r3, #0]
 80172bc:	4b10      	ldr	r3, [pc, #64]	; (8017300 <udp_input_local_match+0x74>)
 80172be:	695b      	ldr	r3, [r3, #20]
 80172c0:	405a      	eors	r2, r3
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	3308      	adds	r3, #8
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d110      	bne.n	80172f0 <udp_input_local_match+0x64>
          return 1;
 80172ce:	2301      	movs	r3, #1
 80172d0:	e00f      	b.n	80172f2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d009      	beq.n	80172ec <udp_input_local_match+0x60>
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d005      	beq.n	80172ec <udp_input_local_match+0x60>
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	4b06      	ldr	r3, [pc, #24]	; (8017300 <udp_input_local_match+0x74>)
 80172e6:	695b      	ldr	r3, [r3, #20]
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d101      	bne.n	80172f0 <udp_input_local_match+0x64>
      return 1;
 80172ec:	2301      	movs	r3, #1
 80172ee:	e000      	b.n	80172f2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80172f0:	2300      	movs	r3, #0
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3714      	adds	r7, #20
 80172f6:	46bd      	mov	sp, r7
 80172f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fc:	4770      	bx	lr
 80172fe:	bf00      	nop
 8017300:	20007648 	.word	0x20007648

08017304 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017304:	b590      	push	{r4, r7, lr}
 8017306:	b08d      	sub	sp, #52	; 0x34
 8017308:	af02      	add	r7, sp, #8
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801730e:	2300      	movs	r3, #0
 8017310:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	895b      	ldrh	r3, [r3, #10]
 8017316:	2b07      	cmp	r3, #7
 8017318:	d803      	bhi.n	8017322 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801731a:	6878      	ldr	r0, [r7, #4]
 801731c:	f7fa f94c 	bl	80115b8 <pbuf_free>
    goto end;
 8017320:	e0c6      	b.n	80174b0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	685b      	ldr	r3, [r3, #4]
 8017326:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017328:	4b63      	ldr	r3, [pc, #396]	; (80174b8 <udp_input+0x1b4>)
 801732a:	695a      	ldr	r2, [r3, #20]
 801732c:	4b62      	ldr	r3, [pc, #392]	; (80174b8 <udp_input+0x1b4>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4619      	mov	r1, r3
 8017332:	4610      	mov	r0, r2
 8017334:	f001 fcf2 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 8017338:	4603      	mov	r3, r0
 801733a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	881b      	ldrh	r3, [r3, #0]
 8017340:	b29b      	uxth	r3, r3
 8017342:	4618      	mov	r0, r3
 8017344:	f7f8 ff9e 	bl	8010284 <lwip_htons>
 8017348:	4603      	mov	r3, r0
 801734a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	885b      	ldrh	r3, [r3, #2]
 8017350:	b29b      	uxth	r3, r3
 8017352:	4618      	mov	r0, r3
 8017354:	f7f8 ff96 	bl	8010284 <lwip_htons>
 8017358:	4603      	mov	r3, r0
 801735a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801735c:	2300      	movs	r3, #0
 801735e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017360:	2300      	movs	r3, #0
 8017362:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017364:	2300      	movs	r3, #0
 8017366:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017368:	4b54      	ldr	r3, [pc, #336]	; (80174bc <udp_input+0x1b8>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	627b      	str	r3, [r7, #36]	; 0x24
 801736e:	e03b      	b.n	80173e8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017372:	8a5b      	ldrh	r3, [r3, #18]
 8017374:	89fa      	ldrh	r2, [r7, #14]
 8017376:	429a      	cmp	r2, r3
 8017378:	d131      	bne.n	80173de <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801737a:	7cfb      	ldrb	r3, [r7, #19]
 801737c:	461a      	mov	r2, r3
 801737e:	6839      	ldr	r1, [r7, #0]
 8017380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017382:	f7ff ff83 	bl	801728c <udp_input_local_match>
 8017386:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017388:	2b00      	cmp	r3, #0
 801738a:	d028      	beq.n	80173de <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738e:	7c1b      	ldrb	r3, [r3, #16]
 8017390:	f003 0304 	and.w	r3, r3, #4
 8017394:	2b00      	cmp	r3, #0
 8017396:	d104      	bne.n	80173a2 <udp_input+0x9e>
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d101      	bne.n	80173a2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80173a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a4:	8a9b      	ldrh	r3, [r3, #20]
 80173a6:	8a3a      	ldrh	r2, [r7, #16]
 80173a8:	429a      	cmp	r2, r3
 80173aa:	d118      	bne.n	80173de <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80173ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ae:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d005      	beq.n	80173c0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80173b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b6:	685a      	ldr	r2, [r3, #4]
 80173b8:	4b3f      	ldr	r3, [pc, #252]	; (80174b8 <udp_input+0x1b4>)
 80173ba:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80173bc:	429a      	cmp	r2, r3
 80173be:	d10e      	bne.n	80173de <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80173c0:	6a3b      	ldr	r3, [r7, #32]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d014      	beq.n	80173f0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80173c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c8:	68da      	ldr	r2, [r3, #12]
 80173ca:	6a3b      	ldr	r3, [r7, #32]
 80173cc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80173ce:	4b3b      	ldr	r3, [pc, #236]	; (80174bc <udp_input+0x1b8>)
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80173d6:	4a39      	ldr	r2, [pc, #228]	; (80174bc <udp_input+0x1b8>)
 80173d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173da:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80173dc:	e008      	b.n	80173f0 <udp_input+0xec>
      }
    }

    prev = pcb;
 80173de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80173e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e4:	68db      	ldr	r3, [r3, #12]
 80173e6:	627b      	str	r3, [r7, #36]	; 0x24
 80173e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d1c0      	bne.n	8017370 <udp_input+0x6c>
 80173ee:	e000      	b.n	80173f2 <udp_input+0xee>
        break;
 80173f0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80173f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d101      	bne.n	80173fc <udp_input+0xf8>
    pcb = uncon_pcb;
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80173fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d002      	beq.n	8017408 <udp_input+0x104>
    for_us = 1;
 8017402:	2301      	movs	r3, #1
 8017404:	76fb      	strb	r3, [r7, #27]
 8017406:	e00a      	b.n	801741e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	3304      	adds	r3, #4
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	4b2a      	ldr	r3, [pc, #168]	; (80174b8 <udp_input+0x1b4>)
 8017410:	695b      	ldr	r3, [r3, #20]
 8017412:	429a      	cmp	r2, r3
 8017414:	bf0c      	ite	eq
 8017416:	2301      	moveq	r3, #1
 8017418:	2300      	movne	r3, #0
 801741a:	b2db      	uxtb	r3, r3
 801741c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801741e:	7efb      	ldrb	r3, [r7, #27]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d042      	beq.n	80174aa <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8017424:	f06f 0107 	mvn.w	r1, #7
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	f7fa f8a1 	bl	8011570 <pbuf_header>
 801742e:	4603      	mov	r3, r0
 8017430:	2b00      	cmp	r3, #0
 8017432:	d00a      	beq.n	801744a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8017434:	4b22      	ldr	r3, [pc, #136]	; (80174c0 <udp_input+0x1bc>)
 8017436:	f240 1255 	movw	r2, #341	; 0x155
 801743a:	4922      	ldr	r1, [pc, #136]	; (80174c4 <udp_input+0x1c0>)
 801743c:	4822      	ldr	r0, [pc, #136]	; (80174c8 <udp_input+0x1c4>)
 801743e:	f003 fb27 	bl	801aa90 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f7fa f8b8 	bl	80115b8 <pbuf_free>
      goto end;
 8017448:	e032      	b.n	80174b0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744c:	2b00      	cmp	r3, #0
 801744e:	d012      	beq.n	8017476 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017452:	699b      	ldr	r3, [r3, #24]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d00a      	beq.n	801746e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745a:	699c      	ldr	r4, [r3, #24]
 801745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745e:	69d8      	ldr	r0, [r3, #28]
 8017460:	8a3b      	ldrh	r3, [r7, #16]
 8017462:	9300      	str	r3, [sp, #0]
 8017464:	4b19      	ldr	r3, [pc, #100]	; (80174cc <udp_input+0x1c8>)
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801746a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801746c:	e021      	b.n	80174b2 <udp_input+0x1ae>
        pbuf_free(p);
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f7fa f8a2 	bl	80115b8 <pbuf_free>
        goto end;
 8017474:	e01c      	b.n	80174b0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017476:	7cfb      	ldrb	r3, [r7, #19]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d112      	bne.n	80174a2 <udp_input+0x19e>
 801747c:	4b0e      	ldr	r3, [pc, #56]	; (80174b8 <udp_input+0x1b4>)
 801747e:	695b      	ldr	r3, [r3, #20]
 8017480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017484:	2be0      	cmp	r3, #224	; 0xe0
 8017486:	d00c      	beq.n	80174a2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017488:	4b0b      	ldr	r3, [pc, #44]	; (80174b8 <udp_input+0x1b4>)
 801748a:	899b      	ldrh	r3, [r3, #12]
 801748c:	3308      	adds	r3, #8
 801748e:	b29b      	uxth	r3, r3
 8017490:	b21b      	sxth	r3, r3
 8017492:	4619      	mov	r1, r3
 8017494:	6878      	ldr	r0, [r7, #4]
 8017496:	f7fa f87d 	bl	8011594 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801749a:	2103      	movs	r1, #3
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f001 f93b 	bl	8018718 <icmp_dest_unreach>
      pbuf_free(p);
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7fa f888 	bl	80115b8 <pbuf_free>
  return;
 80174a8:	e003      	b.n	80174b2 <udp_input+0x1ae>
    pbuf_free(p);
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7fa f884 	bl	80115b8 <pbuf_free>
  return;
 80174b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80174b2:	372c      	adds	r7, #44	; 0x2c
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd90      	pop	{r4, r7, pc}
 80174b8:	20007648 	.word	0x20007648
 80174bc:	2000ab68 	.word	0x2000ab68
 80174c0:	0801d84c 	.word	0x0801d84c
 80174c4:	0801d87c 	.word	0x0801d87c
 80174c8:	0801d890 	.word	0x0801d890
 80174cc:	20007658 	.word	0x20007658

080174d0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b086      	sub	sp, #24
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	4613      	mov	r3, r2
 80174dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d101      	bne.n	80174e8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80174e4:	4b30      	ldr	r3, [pc, #192]	; (80175a8 <udp_bind+0xd8>)
 80174e6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d002      	beq.n	80174f4 <udp_bind+0x24>
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d102      	bne.n	80174fa <udp_bind+0x2a>
    return ERR_VAL;
 80174f4:	f06f 0305 	mvn.w	r3, #5
 80174f8:	e052      	b.n	80175a0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80174fa:	2300      	movs	r3, #0
 80174fc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80174fe:	4b2b      	ldr	r3, [pc, #172]	; (80175ac <udp_bind+0xdc>)
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	617b      	str	r3, [r7, #20]
 8017504:	e009      	b.n	801751a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017506:	68fa      	ldr	r2, [r7, #12]
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	429a      	cmp	r2, r3
 801750c:	d102      	bne.n	8017514 <udp_bind+0x44>
      rebind = 1;
 801750e:	2301      	movs	r3, #1
 8017510:	74fb      	strb	r3, [r7, #19]
      break;
 8017512:	e005      	b.n	8017520 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	68db      	ldr	r3, [r3, #12]
 8017518:	617b      	str	r3, [r7, #20]
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d1f2      	bne.n	8017506 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8017520:	88fb      	ldrh	r3, [r7, #6]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d109      	bne.n	801753a <udp_bind+0x6a>
    port = udp_new_port();
 8017526:	f7ff fe79 	bl	801721c <udp_new_port>
 801752a:	4603      	mov	r3, r0
 801752c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801752e:	88fb      	ldrh	r3, [r7, #6]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d11e      	bne.n	8017572 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017534:	f06f 0307 	mvn.w	r3, #7
 8017538:	e032      	b.n	80175a0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801753a:	4b1c      	ldr	r3, [pc, #112]	; (80175ac <udp_bind+0xdc>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	617b      	str	r3, [r7, #20]
 8017540:	e014      	b.n	801756c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8017542:	68fa      	ldr	r2, [r7, #12]
 8017544:	697b      	ldr	r3, [r7, #20]
 8017546:	429a      	cmp	r2, r3
 8017548:	d00d      	beq.n	8017566 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	8a5b      	ldrh	r3, [r3, #18]
 801754e:	88fa      	ldrh	r2, [r7, #6]
 8017550:	429a      	cmp	r2, r3
 8017552:	d108      	bne.n	8017566 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	681a      	ldr	r2, [r3, #0]
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801755c:	429a      	cmp	r2, r3
 801755e:	d102      	bne.n	8017566 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017560:	f06f 0307 	mvn.w	r3, #7
 8017564:	e01c      	b.n	80175a0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	617b      	str	r3, [r7, #20]
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d1e7      	bne.n	8017542 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d002      	beq.n	801757e <udp_bind+0xae>
 8017578:	68bb      	ldr	r3, [r7, #8]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	e000      	b.n	8017580 <udp_bind+0xb0>
 801757e:	2300      	movs	r3, #0
 8017580:	68fa      	ldr	r2, [r7, #12]
 8017582:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	88fa      	ldrh	r2, [r7, #6]
 8017588:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801758a:	7cfb      	ldrb	r3, [r7, #19]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d106      	bne.n	801759e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017590:	4b06      	ldr	r3, [pc, #24]	; (80175ac <udp_bind+0xdc>)
 8017592:	681a      	ldr	r2, [r3, #0]
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017598:	4a04      	ldr	r2, [pc, #16]	; (80175ac <udp_bind+0xdc>)
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801759e:	2300      	movs	r3, #0
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	3718      	adds	r7, #24
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}
 80175a8:	0801e0d4 	.word	0x0801e0d4
 80175ac:	2000ab68 	.word	0x2000ab68

080175b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80175b0:	b480      	push	{r7}
 80175b2:	b085      	sub	sp, #20
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	60f8      	str	r0, [r7, #12]
 80175b8:	60b9      	str	r1, [r7, #8]
 80175ba:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	68ba      	ldr	r2, [r7, #8]
 80175c0:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	687a      	ldr	r2, [r7, #4]
 80175c6:	61da      	str	r2, [r3, #28]
}
 80175c8:	bf00      	nop
 80175ca:	3714      	adds	r7, #20
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80175dc:	4b15      	ldr	r3, [pc, #84]	; (8017634 <udp_remove+0x60>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d105      	bne.n	80175f2 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80175e6:	4b13      	ldr	r3, [pc, #76]	; (8017634 <udp_remove+0x60>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	4a11      	ldr	r2, [pc, #68]	; (8017634 <udp_remove+0x60>)
 80175ee:	6013      	str	r3, [r2, #0]
 80175f0:	e017      	b.n	8017622 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80175f2:	4b10      	ldr	r3, [pc, #64]	; (8017634 <udp_remove+0x60>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	60fb      	str	r3, [r7, #12]
 80175f8:	e010      	b.n	801761c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	68db      	ldr	r3, [r3, #12]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d009      	beq.n	8017616 <udp_remove+0x42>
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	68db      	ldr	r3, [r3, #12]
 8017606:	687a      	ldr	r2, [r7, #4]
 8017608:	429a      	cmp	r2, r3
 801760a:	d104      	bne.n	8017616 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	68da      	ldr	r2, [r3, #12]
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	60da      	str	r2, [r3, #12]
        break;
 8017614:	e005      	b.n	8017622 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	68db      	ldr	r3, [r3, #12]
 801761a:	60fb      	str	r3, [r7, #12]
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d1eb      	bne.n	80175fa <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017622:	6879      	ldr	r1, [r7, #4]
 8017624:	2000      	movs	r0, #0
 8017626:	f7f9 fa6d 	bl	8010b04 <memp_free>
}
 801762a:	bf00      	nop
 801762c:	3710      	adds	r7, #16
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}
 8017632:	bf00      	nop
 8017634:	2000ab68 	.word	0x2000ab68

08017638 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b082      	sub	sp, #8
 801763c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801763e:	2000      	movs	r0, #0
 8017640:	f7f9 fa0e 	bl	8010a60 <memp_malloc>
 8017644:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d007      	beq.n	801765c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801764c:	2220      	movs	r2, #32
 801764e:	2100      	movs	r1, #0
 8017650:	6878      	ldr	r0, [r7, #4]
 8017652:	f003 f96d 	bl	801a930 <memset>
    pcb->ttl = UDP_TTL;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	22ff      	movs	r2, #255	; 0xff
 801765a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801765c:	687b      	ldr	r3, [r7, #4]
}
 801765e:	4618      	mov	r0, r3
 8017660:	3708      	adds	r7, #8
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}

08017666 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8017666:	b580      	push	{r7, lr}
 8017668:	b084      	sub	sp, #16
 801766a:	af00      	add	r7, sp, #0
 801766c:	4603      	mov	r3, r0
 801766e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8017670:	f7ff ffe2 	bl	8017638 <udp_new>
 8017674:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017676:	68fb      	ldr	r3, [r7, #12]
}
 8017678:	4618      	mov	r0, r3
 801767a:	3710      	adds	r7, #16
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}

08017680 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8017680:	b480      	push	{r7}
 8017682:	b085      	sub	sp, #20
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d01e      	beq.n	80176ce <udp_netif_ip_addr_changed+0x4e>
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d01a      	beq.n	80176ce <udp_netif_ip_addr_changed+0x4e>
 8017698:	683b      	ldr	r3, [r7, #0]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d017      	beq.n	80176ce <udp_netif_ip_addr_changed+0x4e>
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d013      	beq.n	80176ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80176a6:	4b0d      	ldr	r3, [pc, #52]	; (80176dc <udp_netif_ip_addr_changed+0x5c>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	60fb      	str	r3, [r7, #12]
 80176ac:	e00c      	b.n	80176c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	681a      	ldr	r2, [r3, #0]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d103      	bne.n	80176c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	68db      	ldr	r3, [r3, #12]
 80176c6:	60fb      	str	r3, [r7, #12]
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d1ef      	bne.n	80176ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80176ce:	bf00      	nop
 80176d0:	3714      	adds	r7, #20
 80176d2:	46bd      	mov	sp, r7
 80176d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop
 80176dc:	2000ab68 	.word	0x2000ab68

080176e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80176e8:	4915      	ldr	r1, [pc, #84]	; (8017740 <etharp_free_entry+0x60>)
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	4613      	mov	r3, r2
 80176ee:	005b      	lsls	r3, r3, #1
 80176f0:	4413      	add	r3, r2
 80176f2:	00db      	lsls	r3, r3, #3
 80176f4:	440b      	add	r3, r1
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d013      	beq.n	8017724 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80176fc:	4910      	ldr	r1, [pc, #64]	; (8017740 <etharp_free_entry+0x60>)
 80176fe:	687a      	ldr	r2, [r7, #4]
 8017700:	4613      	mov	r3, r2
 8017702:	005b      	lsls	r3, r3, #1
 8017704:	4413      	add	r3, r2
 8017706:	00db      	lsls	r3, r3, #3
 8017708:	440b      	add	r3, r1
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	4618      	mov	r0, r3
 801770e:	f7f9 ff53 	bl	80115b8 <pbuf_free>
    arp_table[i].q = NULL;
 8017712:	490b      	ldr	r1, [pc, #44]	; (8017740 <etharp_free_entry+0x60>)
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	4613      	mov	r3, r2
 8017718:	005b      	lsls	r3, r3, #1
 801771a:	4413      	add	r3, r2
 801771c:	00db      	lsls	r3, r3, #3
 801771e:	440b      	add	r3, r1
 8017720:	2200      	movs	r2, #0
 8017722:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017724:	4906      	ldr	r1, [pc, #24]	; (8017740 <etharp_free_entry+0x60>)
 8017726:	687a      	ldr	r2, [r7, #4]
 8017728:	4613      	mov	r3, r2
 801772a:	005b      	lsls	r3, r3, #1
 801772c:	4413      	add	r3, r2
 801772e:	00db      	lsls	r3, r3, #3
 8017730:	440b      	add	r3, r1
 8017732:	3314      	adds	r3, #20
 8017734:	2200      	movs	r2, #0
 8017736:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017738:	bf00      	nop
 801773a:	3708      	adds	r7, #8
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}
 8017740:	20004248 	.word	0x20004248

08017744 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801774a:	2300      	movs	r3, #0
 801774c:	71fb      	strb	r3, [r7, #7]
 801774e:	e096      	b.n	801787e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017750:	79fa      	ldrb	r2, [r7, #7]
 8017752:	494f      	ldr	r1, [pc, #316]	; (8017890 <etharp_tmr+0x14c>)
 8017754:	4613      	mov	r3, r2
 8017756:	005b      	lsls	r3, r3, #1
 8017758:	4413      	add	r3, r2
 801775a:	00db      	lsls	r3, r3, #3
 801775c:	440b      	add	r3, r1
 801775e:	3314      	adds	r3, #20
 8017760:	781b      	ldrb	r3, [r3, #0]
 8017762:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8017764:	79bb      	ldrb	r3, [r7, #6]
 8017766:	2b00      	cmp	r3, #0
 8017768:	f000 8086 	beq.w	8017878 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801776c:	79fa      	ldrb	r2, [r7, #7]
 801776e:	4948      	ldr	r1, [pc, #288]	; (8017890 <etharp_tmr+0x14c>)
 8017770:	4613      	mov	r3, r2
 8017772:	005b      	lsls	r3, r3, #1
 8017774:	4413      	add	r3, r2
 8017776:	00db      	lsls	r3, r3, #3
 8017778:	440b      	add	r3, r1
 801777a:	3312      	adds	r3, #18
 801777c:	881b      	ldrh	r3, [r3, #0]
 801777e:	3301      	adds	r3, #1
 8017780:	b298      	uxth	r0, r3
 8017782:	4943      	ldr	r1, [pc, #268]	; (8017890 <etharp_tmr+0x14c>)
 8017784:	4613      	mov	r3, r2
 8017786:	005b      	lsls	r3, r3, #1
 8017788:	4413      	add	r3, r2
 801778a:	00db      	lsls	r3, r3, #3
 801778c:	440b      	add	r3, r1
 801778e:	3312      	adds	r3, #18
 8017790:	4602      	mov	r2, r0
 8017792:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017794:	79fa      	ldrb	r2, [r7, #7]
 8017796:	493e      	ldr	r1, [pc, #248]	; (8017890 <etharp_tmr+0x14c>)
 8017798:	4613      	mov	r3, r2
 801779a:	005b      	lsls	r3, r3, #1
 801779c:	4413      	add	r3, r2
 801779e:	00db      	lsls	r3, r3, #3
 80177a0:	440b      	add	r3, r1
 80177a2:	3312      	adds	r3, #18
 80177a4:	881b      	ldrh	r3, [r3, #0]
 80177a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80177aa:	d215      	bcs.n	80177d8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80177ac:	79fa      	ldrb	r2, [r7, #7]
 80177ae:	4938      	ldr	r1, [pc, #224]	; (8017890 <etharp_tmr+0x14c>)
 80177b0:	4613      	mov	r3, r2
 80177b2:	005b      	lsls	r3, r3, #1
 80177b4:	4413      	add	r3, r2
 80177b6:	00db      	lsls	r3, r3, #3
 80177b8:	440b      	add	r3, r1
 80177ba:	3314      	adds	r3, #20
 80177bc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d10f      	bne.n	80177e2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80177c2:	79fa      	ldrb	r2, [r7, #7]
 80177c4:	4932      	ldr	r1, [pc, #200]	; (8017890 <etharp_tmr+0x14c>)
 80177c6:	4613      	mov	r3, r2
 80177c8:	005b      	lsls	r3, r3, #1
 80177ca:	4413      	add	r3, r2
 80177cc:	00db      	lsls	r3, r3, #3
 80177ce:	440b      	add	r3, r1
 80177d0:	3312      	adds	r3, #18
 80177d2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80177d4:	2b04      	cmp	r3, #4
 80177d6:	d904      	bls.n	80177e2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80177d8:	79fb      	ldrb	r3, [r7, #7]
 80177da:	4618      	mov	r0, r3
 80177dc:	f7ff ff80 	bl	80176e0 <etharp_free_entry>
 80177e0:	e04a      	b.n	8017878 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80177e2:	79fa      	ldrb	r2, [r7, #7]
 80177e4:	492a      	ldr	r1, [pc, #168]	; (8017890 <etharp_tmr+0x14c>)
 80177e6:	4613      	mov	r3, r2
 80177e8:	005b      	lsls	r3, r3, #1
 80177ea:	4413      	add	r3, r2
 80177ec:	00db      	lsls	r3, r3, #3
 80177ee:	440b      	add	r3, r1
 80177f0:	3314      	adds	r3, #20
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	2b03      	cmp	r3, #3
 80177f6:	d10a      	bne.n	801780e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80177f8:	79fa      	ldrb	r2, [r7, #7]
 80177fa:	4925      	ldr	r1, [pc, #148]	; (8017890 <etharp_tmr+0x14c>)
 80177fc:	4613      	mov	r3, r2
 80177fe:	005b      	lsls	r3, r3, #1
 8017800:	4413      	add	r3, r2
 8017802:	00db      	lsls	r3, r3, #3
 8017804:	440b      	add	r3, r1
 8017806:	3314      	adds	r3, #20
 8017808:	2204      	movs	r2, #4
 801780a:	701a      	strb	r2, [r3, #0]
 801780c:	e034      	b.n	8017878 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801780e:	79fa      	ldrb	r2, [r7, #7]
 8017810:	491f      	ldr	r1, [pc, #124]	; (8017890 <etharp_tmr+0x14c>)
 8017812:	4613      	mov	r3, r2
 8017814:	005b      	lsls	r3, r3, #1
 8017816:	4413      	add	r3, r2
 8017818:	00db      	lsls	r3, r3, #3
 801781a:	440b      	add	r3, r1
 801781c:	3314      	adds	r3, #20
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	2b04      	cmp	r3, #4
 8017822:	d10a      	bne.n	801783a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017824:	79fa      	ldrb	r2, [r7, #7]
 8017826:	491a      	ldr	r1, [pc, #104]	; (8017890 <etharp_tmr+0x14c>)
 8017828:	4613      	mov	r3, r2
 801782a:	005b      	lsls	r3, r3, #1
 801782c:	4413      	add	r3, r2
 801782e:	00db      	lsls	r3, r3, #3
 8017830:	440b      	add	r3, r1
 8017832:	3314      	adds	r3, #20
 8017834:	2202      	movs	r2, #2
 8017836:	701a      	strb	r2, [r3, #0]
 8017838:	e01e      	b.n	8017878 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801783a:	79fa      	ldrb	r2, [r7, #7]
 801783c:	4914      	ldr	r1, [pc, #80]	; (8017890 <etharp_tmr+0x14c>)
 801783e:	4613      	mov	r3, r2
 8017840:	005b      	lsls	r3, r3, #1
 8017842:	4413      	add	r3, r2
 8017844:	00db      	lsls	r3, r3, #3
 8017846:	440b      	add	r3, r1
 8017848:	3314      	adds	r3, #20
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	2b01      	cmp	r3, #1
 801784e:	d113      	bne.n	8017878 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017850:	79fa      	ldrb	r2, [r7, #7]
 8017852:	490f      	ldr	r1, [pc, #60]	; (8017890 <etharp_tmr+0x14c>)
 8017854:	4613      	mov	r3, r2
 8017856:	005b      	lsls	r3, r3, #1
 8017858:	4413      	add	r3, r2
 801785a:	00db      	lsls	r3, r3, #3
 801785c:	440b      	add	r3, r1
 801785e:	3308      	adds	r3, #8
 8017860:	6818      	ldr	r0, [r3, #0]
 8017862:	79fa      	ldrb	r2, [r7, #7]
 8017864:	4613      	mov	r3, r2
 8017866:	005b      	lsls	r3, r3, #1
 8017868:	4413      	add	r3, r2
 801786a:	00db      	lsls	r3, r3, #3
 801786c:	4a08      	ldr	r2, [pc, #32]	; (8017890 <etharp_tmr+0x14c>)
 801786e:	4413      	add	r3, r2
 8017870:	3304      	adds	r3, #4
 8017872:	4619      	mov	r1, r3
 8017874:	f000 fe38 	bl	80184e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017878:	79fb      	ldrb	r3, [r7, #7]
 801787a:	3301      	adds	r3, #1
 801787c:	71fb      	strb	r3, [r7, #7]
 801787e:	79fb      	ldrb	r3, [r7, #7]
 8017880:	2b09      	cmp	r3, #9
 8017882:	f67f af65 	bls.w	8017750 <etharp_tmr+0xc>
      }
    }
  }
}
 8017886:	bf00      	nop
 8017888:	3708      	adds	r7, #8
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
 801788e:	bf00      	nop
 8017890:	20004248 	.word	0x20004248

08017894 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b088      	sub	sp, #32
 8017898:	af00      	add	r7, sp, #0
 801789a:	60f8      	str	r0, [r7, #12]
 801789c:	460b      	mov	r3, r1
 801789e:	607a      	str	r2, [r7, #4]
 80178a0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80178a2:	230a      	movs	r3, #10
 80178a4:	77fb      	strb	r3, [r7, #31]
 80178a6:	230a      	movs	r3, #10
 80178a8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80178aa:	230a      	movs	r3, #10
 80178ac:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80178ae:	2300      	movs	r3, #0
 80178b0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80178b2:	230a      	movs	r3, #10
 80178b4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80178b6:	2300      	movs	r3, #0
 80178b8:	833b      	strh	r3, [r7, #24]
 80178ba:	2300      	movs	r3, #0
 80178bc:	82fb      	strh	r3, [r7, #22]
 80178be:	2300      	movs	r3, #0
 80178c0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80178c2:	2300      	movs	r3, #0
 80178c4:	773b      	strb	r3, [r7, #28]
 80178c6:	e093      	b.n	80179f0 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80178c8:	7f3a      	ldrb	r2, [r7, #28]
 80178ca:	4990      	ldr	r1, [pc, #576]	; (8017b0c <etharp_find_entry+0x278>)
 80178cc:	4613      	mov	r3, r2
 80178ce:	005b      	lsls	r3, r3, #1
 80178d0:	4413      	add	r3, r2
 80178d2:	00db      	lsls	r3, r3, #3
 80178d4:	440b      	add	r3, r1
 80178d6:	3314      	adds	r3, #20
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80178dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80178e0:	2b0a      	cmp	r3, #10
 80178e2:	d105      	bne.n	80178f0 <etharp_find_entry+0x5c>
 80178e4:	7cfb      	ldrb	r3, [r7, #19]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d102      	bne.n	80178f0 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80178ea:	7f3b      	ldrb	r3, [r7, #28]
 80178ec:	777b      	strb	r3, [r7, #29]
 80178ee:	e07c      	b.n	80179ea <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80178f0:	7cfb      	ldrb	r3, [r7, #19]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d079      	beq.n	80179ea <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80178f6:	7cfb      	ldrb	r3, [r7, #19]
 80178f8:	2b01      	cmp	r3, #1
 80178fa:	d009      	beq.n	8017910 <etharp_find_entry+0x7c>
 80178fc:	7cfb      	ldrb	r3, [r7, #19]
 80178fe:	2b01      	cmp	r3, #1
 8017900:	d806      	bhi.n	8017910 <etharp_find_entry+0x7c>
 8017902:	4b83      	ldr	r3, [pc, #524]	; (8017b10 <etharp_find_entry+0x27c>)
 8017904:	f44f 7293 	mov.w	r2, #294	; 0x126
 8017908:	4982      	ldr	r1, [pc, #520]	; (8017b14 <etharp_find_entry+0x280>)
 801790a:	4883      	ldr	r0, [pc, #524]	; (8017b18 <etharp_find_entry+0x284>)
 801790c:	f003 f8c0 	bl	801aa90 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d00f      	beq.n	8017936 <etharp_find_entry+0xa2>
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	6819      	ldr	r1, [r3, #0]
 801791a:	7f3a      	ldrb	r2, [r7, #28]
 801791c:	487b      	ldr	r0, [pc, #492]	; (8017b0c <etharp_find_entry+0x278>)
 801791e:	4613      	mov	r3, r2
 8017920:	005b      	lsls	r3, r3, #1
 8017922:	4413      	add	r3, r2
 8017924:	00db      	lsls	r3, r3, #3
 8017926:	4403      	add	r3, r0
 8017928:	3304      	adds	r3, #4
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	4299      	cmp	r1, r3
 801792e:	d102      	bne.n	8017936 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017930:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8017934:	e0e5      	b.n	8017b02 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017936:	7cfb      	ldrb	r3, [r7, #19]
 8017938:	2b01      	cmp	r3, #1
 801793a:	d13b      	bne.n	80179b4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801793c:	7f3a      	ldrb	r2, [r7, #28]
 801793e:	4973      	ldr	r1, [pc, #460]	; (8017b0c <etharp_find_entry+0x278>)
 8017940:	4613      	mov	r3, r2
 8017942:	005b      	lsls	r3, r3, #1
 8017944:	4413      	add	r3, r2
 8017946:	00db      	lsls	r3, r3, #3
 8017948:	440b      	add	r3, r1
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d018      	beq.n	8017982 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8017950:	7f3a      	ldrb	r2, [r7, #28]
 8017952:	496e      	ldr	r1, [pc, #440]	; (8017b0c <etharp_find_entry+0x278>)
 8017954:	4613      	mov	r3, r2
 8017956:	005b      	lsls	r3, r3, #1
 8017958:	4413      	add	r3, r2
 801795a:	00db      	lsls	r3, r3, #3
 801795c:	440b      	add	r3, r1
 801795e:	3312      	adds	r3, #18
 8017960:	881b      	ldrh	r3, [r3, #0]
 8017962:	8b3a      	ldrh	r2, [r7, #24]
 8017964:	429a      	cmp	r2, r3
 8017966:	d840      	bhi.n	80179ea <etharp_find_entry+0x156>
            old_queue = i;
 8017968:	7f3b      	ldrb	r3, [r7, #28]
 801796a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801796c:	7f3a      	ldrb	r2, [r7, #28]
 801796e:	4967      	ldr	r1, [pc, #412]	; (8017b0c <etharp_find_entry+0x278>)
 8017970:	4613      	mov	r3, r2
 8017972:	005b      	lsls	r3, r3, #1
 8017974:	4413      	add	r3, r2
 8017976:	00db      	lsls	r3, r3, #3
 8017978:	440b      	add	r3, r1
 801797a:	3312      	adds	r3, #18
 801797c:	881b      	ldrh	r3, [r3, #0]
 801797e:	833b      	strh	r3, [r7, #24]
 8017980:	e033      	b.n	80179ea <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017982:	7f3a      	ldrb	r2, [r7, #28]
 8017984:	4961      	ldr	r1, [pc, #388]	; (8017b0c <etharp_find_entry+0x278>)
 8017986:	4613      	mov	r3, r2
 8017988:	005b      	lsls	r3, r3, #1
 801798a:	4413      	add	r3, r2
 801798c:	00db      	lsls	r3, r3, #3
 801798e:	440b      	add	r3, r1
 8017990:	3312      	adds	r3, #18
 8017992:	881b      	ldrh	r3, [r3, #0]
 8017994:	8afa      	ldrh	r2, [r7, #22]
 8017996:	429a      	cmp	r2, r3
 8017998:	d827      	bhi.n	80179ea <etharp_find_entry+0x156>
            old_pending = i;
 801799a:	7f3b      	ldrb	r3, [r7, #28]
 801799c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801799e:	7f3a      	ldrb	r2, [r7, #28]
 80179a0:	495a      	ldr	r1, [pc, #360]	; (8017b0c <etharp_find_entry+0x278>)
 80179a2:	4613      	mov	r3, r2
 80179a4:	005b      	lsls	r3, r3, #1
 80179a6:	4413      	add	r3, r2
 80179a8:	00db      	lsls	r3, r3, #3
 80179aa:	440b      	add	r3, r1
 80179ac:	3312      	adds	r3, #18
 80179ae:	881b      	ldrh	r3, [r3, #0]
 80179b0:	82fb      	strh	r3, [r7, #22]
 80179b2:	e01a      	b.n	80179ea <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80179b4:	7cfb      	ldrb	r3, [r7, #19]
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d917      	bls.n	80179ea <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80179ba:	7f3a      	ldrb	r2, [r7, #28]
 80179bc:	4953      	ldr	r1, [pc, #332]	; (8017b0c <etharp_find_entry+0x278>)
 80179be:	4613      	mov	r3, r2
 80179c0:	005b      	lsls	r3, r3, #1
 80179c2:	4413      	add	r3, r2
 80179c4:	00db      	lsls	r3, r3, #3
 80179c6:	440b      	add	r3, r1
 80179c8:	3312      	adds	r3, #18
 80179ca:	881b      	ldrh	r3, [r3, #0]
 80179cc:	8aba      	ldrh	r2, [r7, #20]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d80b      	bhi.n	80179ea <etharp_find_entry+0x156>
            old_stable = i;
 80179d2:	7f3b      	ldrb	r3, [r7, #28]
 80179d4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80179d6:	7f3a      	ldrb	r2, [r7, #28]
 80179d8:	494c      	ldr	r1, [pc, #304]	; (8017b0c <etharp_find_entry+0x278>)
 80179da:	4613      	mov	r3, r2
 80179dc:	005b      	lsls	r3, r3, #1
 80179de:	4413      	add	r3, r2
 80179e0:	00db      	lsls	r3, r3, #3
 80179e2:	440b      	add	r3, r1
 80179e4:	3312      	adds	r3, #18
 80179e6:	881b      	ldrh	r3, [r3, #0]
 80179e8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179ea:	7f3b      	ldrb	r3, [r7, #28]
 80179ec:	3301      	adds	r3, #1
 80179ee:	773b      	strb	r3, [r7, #28]
 80179f0:	7f3b      	ldrb	r3, [r7, #28]
 80179f2:	2b09      	cmp	r3, #9
 80179f4:	f67f af68 	bls.w	80178c8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80179f8:	7afb      	ldrb	r3, [r7, #11]
 80179fa:	f003 0302 	and.w	r3, r3, #2
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d108      	bne.n	8017a14 <etharp_find_entry+0x180>
 8017a02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017a06:	2b0a      	cmp	r3, #10
 8017a08:	d107      	bne.n	8017a1a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017a0a:	7afb      	ldrb	r3, [r7, #11]
 8017a0c:	f003 0301 	and.w	r3, r3, #1
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d102      	bne.n	8017a1a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8017a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a18:	e073      	b.n	8017b02 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017a1a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017a1e:	2b09      	cmp	r3, #9
 8017a20:	dc02      	bgt.n	8017a28 <etharp_find_entry+0x194>
    i = empty;
 8017a22:	7f7b      	ldrb	r3, [r7, #29]
 8017a24:	773b      	strb	r3, [r7, #28]
 8017a26:	e036      	b.n	8017a96 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017a28:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017a2c:	2b09      	cmp	r3, #9
 8017a2e:	dc13      	bgt.n	8017a58 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8017a30:	7fbb      	ldrb	r3, [r7, #30]
 8017a32:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017a34:	7f3a      	ldrb	r2, [r7, #28]
 8017a36:	4935      	ldr	r1, [pc, #212]	; (8017b0c <etharp_find_entry+0x278>)
 8017a38:	4613      	mov	r3, r2
 8017a3a:	005b      	lsls	r3, r3, #1
 8017a3c:	4413      	add	r3, r2
 8017a3e:	00db      	lsls	r3, r3, #3
 8017a40:	440b      	add	r3, r1
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d018      	beq.n	8017a7a <etharp_find_entry+0x1e6>
 8017a48:	4b31      	ldr	r3, [pc, #196]	; (8017b10 <etharp_find_entry+0x27c>)
 8017a4a:	f240 126f 	movw	r2, #367	; 0x16f
 8017a4e:	4933      	ldr	r1, [pc, #204]	; (8017b1c <etharp_find_entry+0x288>)
 8017a50:	4831      	ldr	r0, [pc, #196]	; (8017b18 <etharp_find_entry+0x284>)
 8017a52:	f003 f81d 	bl	801aa90 <iprintf>
 8017a56:	e010      	b.n	8017a7a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017a58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017a5c:	2b09      	cmp	r3, #9
 8017a5e:	dc02      	bgt.n	8017a66 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8017a60:	7ffb      	ldrb	r3, [r7, #31]
 8017a62:	773b      	strb	r3, [r7, #28]
 8017a64:	e009      	b.n	8017a7a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017a66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017a6a:	2b09      	cmp	r3, #9
 8017a6c:	dc02      	bgt.n	8017a74 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017a6e:	7efb      	ldrb	r3, [r7, #27]
 8017a70:	773b      	strb	r3, [r7, #28]
 8017a72:	e002      	b.n	8017a7a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8017a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a78:	e043      	b.n	8017b02 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017a7a:	7f3b      	ldrb	r3, [r7, #28]
 8017a7c:	2b09      	cmp	r3, #9
 8017a7e:	d906      	bls.n	8017a8e <etharp_find_entry+0x1fa>
 8017a80:	4b23      	ldr	r3, [pc, #140]	; (8017b10 <etharp_find_entry+0x27c>)
 8017a82:	f240 1281 	movw	r2, #385	; 0x181
 8017a86:	4926      	ldr	r1, [pc, #152]	; (8017b20 <etharp_find_entry+0x28c>)
 8017a88:	4823      	ldr	r0, [pc, #140]	; (8017b18 <etharp_find_entry+0x284>)
 8017a8a:	f003 f801 	bl	801aa90 <iprintf>
    etharp_free_entry(i);
 8017a8e:	7f3b      	ldrb	r3, [r7, #28]
 8017a90:	4618      	mov	r0, r3
 8017a92:	f7ff fe25 	bl	80176e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017a96:	7f3b      	ldrb	r3, [r7, #28]
 8017a98:	2b09      	cmp	r3, #9
 8017a9a:	d906      	bls.n	8017aaa <etharp_find_entry+0x216>
 8017a9c:	4b1c      	ldr	r3, [pc, #112]	; (8017b10 <etharp_find_entry+0x27c>)
 8017a9e:	f240 1285 	movw	r2, #389	; 0x185
 8017aa2:	491f      	ldr	r1, [pc, #124]	; (8017b20 <etharp_find_entry+0x28c>)
 8017aa4:	481c      	ldr	r0, [pc, #112]	; (8017b18 <etharp_find_entry+0x284>)
 8017aa6:	f002 fff3 	bl	801aa90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017aaa:	7f3a      	ldrb	r2, [r7, #28]
 8017aac:	4917      	ldr	r1, [pc, #92]	; (8017b0c <etharp_find_entry+0x278>)
 8017aae:	4613      	mov	r3, r2
 8017ab0:	005b      	lsls	r3, r3, #1
 8017ab2:	4413      	add	r3, r2
 8017ab4:	00db      	lsls	r3, r3, #3
 8017ab6:	440b      	add	r3, r1
 8017ab8:	3314      	adds	r3, #20
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d006      	beq.n	8017ace <etharp_find_entry+0x23a>
 8017ac0:	4b13      	ldr	r3, [pc, #76]	; (8017b10 <etharp_find_entry+0x27c>)
 8017ac2:	f240 1287 	movw	r2, #391	; 0x187
 8017ac6:	4917      	ldr	r1, [pc, #92]	; (8017b24 <etharp_find_entry+0x290>)
 8017ac8:	4813      	ldr	r0, [pc, #76]	; (8017b18 <etharp_find_entry+0x284>)
 8017aca:	f002 ffe1 	bl	801aa90 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d00a      	beq.n	8017aea <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017ad4:	7f3a      	ldrb	r2, [r7, #28]
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	6819      	ldr	r1, [r3, #0]
 8017ada:	480c      	ldr	r0, [pc, #48]	; (8017b0c <etharp_find_entry+0x278>)
 8017adc:	4613      	mov	r3, r2
 8017ade:	005b      	lsls	r3, r3, #1
 8017ae0:	4413      	add	r3, r2
 8017ae2:	00db      	lsls	r3, r3, #3
 8017ae4:	4403      	add	r3, r0
 8017ae6:	3304      	adds	r3, #4
 8017ae8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017aea:	7f3a      	ldrb	r2, [r7, #28]
 8017aec:	4907      	ldr	r1, [pc, #28]	; (8017b0c <etharp_find_entry+0x278>)
 8017aee:	4613      	mov	r3, r2
 8017af0:	005b      	lsls	r3, r3, #1
 8017af2:	4413      	add	r3, r2
 8017af4:	00db      	lsls	r3, r3, #3
 8017af6:	440b      	add	r3, r1
 8017af8:	3312      	adds	r3, #18
 8017afa:	2200      	movs	r2, #0
 8017afc:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8017afe:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3720      	adds	r7, #32
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	20004248 	.word	0x20004248
 8017b10:	0801d8e8 	.word	0x0801d8e8
 8017b14:	0801d920 	.word	0x0801d920
 8017b18:	0801d960 	.word	0x0801d960
 8017b1c:	0801d988 	.word	0x0801d988
 8017b20:	0801d9a0 	.word	0x0801d9a0
 8017b24:	0801d9b4 	.word	0x0801d9b4

08017b28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b088      	sub	sp, #32
 8017b2c:	af02      	add	r7, sp, #8
 8017b2e:	60f8      	str	r0, [r7, #12]
 8017b30:	60b9      	str	r1, [r7, #8]
 8017b32:	607a      	str	r2, [r7, #4]
 8017b34:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017b3c:	2b06      	cmp	r3, #6
 8017b3e:	d006      	beq.n	8017b4e <etharp_update_arp_entry+0x26>
 8017b40:	4b48      	ldr	r3, [pc, #288]	; (8017c64 <etharp_update_arp_entry+0x13c>)
 8017b42:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017b46:	4948      	ldr	r1, [pc, #288]	; (8017c68 <etharp_update_arp_entry+0x140>)
 8017b48:	4848      	ldr	r0, [pc, #288]	; (8017c6c <etharp_update_arp_entry+0x144>)
 8017b4a:	f002 ffa1 	bl	801aa90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d012      	beq.n	8017b7a <etharp_update_arp_entry+0x52>
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d00e      	beq.n	8017b7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	68f9      	ldr	r1, [r7, #12]
 8017b62:	4618      	mov	r0, r3
 8017b64:	f001 f8da 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 8017b68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d105      	bne.n	8017b7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017b76:	2be0      	cmp	r3, #224	; 0xe0
 8017b78:	d102      	bne.n	8017b80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017b7a:	f06f 030f 	mvn.w	r3, #15
 8017b7e:	e06c      	b.n	8017c5a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017b80:	78fb      	ldrb	r3, [r7, #3]
 8017b82:	68fa      	ldr	r2, [r7, #12]
 8017b84:	4619      	mov	r1, r3
 8017b86:	68b8      	ldr	r0, [r7, #8]
 8017b88:	f7ff fe84 	bl	8017894 <etharp_find_entry>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	da02      	bge.n	8017b9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017b9c:	e05d      	b.n	8017c5a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017b9e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017ba2:	4933      	ldr	r1, [pc, #204]	; (8017c70 <etharp_update_arp_entry+0x148>)
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	005b      	lsls	r3, r3, #1
 8017ba8:	4413      	add	r3, r2
 8017baa:	00db      	lsls	r3, r3, #3
 8017bac:	440b      	add	r3, r1
 8017bae:	3314      	adds	r3, #20
 8017bb0:	2202      	movs	r2, #2
 8017bb2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017bb4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017bb8:	492d      	ldr	r1, [pc, #180]	; (8017c70 <etharp_update_arp_entry+0x148>)
 8017bba:	4613      	mov	r3, r2
 8017bbc:	005b      	lsls	r3, r3, #1
 8017bbe:	4413      	add	r3, r2
 8017bc0:	00db      	lsls	r3, r3, #3
 8017bc2:	440b      	add	r3, r1
 8017bc4:	3308      	adds	r3, #8
 8017bc6:	68fa      	ldr	r2, [r7, #12]
 8017bc8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8017bca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017bce:	4613      	mov	r3, r2
 8017bd0:	005b      	lsls	r3, r3, #1
 8017bd2:	4413      	add	r3, r2
 8017bd4:	00db      	lsls	r3, r3, #3
 8017bd6:	3308      	adds	r3, #8
 8017bd8:	4a25      	ldr	r2, [pc, #148]	; (8017c70 <etharp_update_arp_entry+0x148>)
 8017bda:	4413      	add	r3, r2
 8017bdc:	3304      	adds	r3, #4
 8017bde:	2206      	movs	r2, #6
 8017be0:	6879      	ldr	r1, [r7, #4]
 8017be2:	4618      	mov	r0, r3
 8017be4:	f002 fe99 	bl	801a91a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017be8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017bec:	4920      	ldr	r1, [pc, #128]	; (8017c70 <etharp_update_arp_entry+0x148>)
 8017bee:	4613      	mov	r3, r2
 8017bf0:	005b      	lsls	r3, r3, #1
 8017bf2:	4413      	add	r3, r2
 8017bf4:	00db      	lsls	r3, r3, #3
 8017bf6:	440b      	add	r3, r1
 8017bf8:	3312      	adds	r3, #18
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017bfe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017c02:	491b      	ldr	r1, [pc, #108]	; (8017c70 <etharp_update_arp_entry+0x148>)
 8017c04:	4613      	mov	r3, r2
 8017c06:	005b      	lsls	r3, r3, #1
 8017c08:	4413      	add	r3, r2
 8017c0a:	00db      	lsls	r3, r3, #3
 8017c0c:	440b      	add	r3, r1
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d021      	beq.n	8017c58 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017c14:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017c18:	4915      	ldr	r1, [pc, #84]	; (8017c70 <etharp_update_arp_entry+0x148>)
 8017c1a:	4613      	mov	r3, r2
 8017c1c:	005b      	lsls	r3, r3, #1
 8017c1e:	4413      	add	r3, r2
 8017c20:	00db      	lsls	r3, r3, #3
 8017c22:	440b      	add	r3, r1
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017c28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017c2c:	4910      	ldr	r1, [pc, #64]	; (8017c70 <etharp_update_arp_entry+0x148>)
 8017c2e:	4613      	mov	r3, r2
 8017c30:	005b      	lsls	r3, r3, #1
 8017c32:	4413      	add	r3, r2
 8017c34:	00db      	lsls	r3, r3, #3
 8017c36:	440b      	add	r3, r1
 8017c38:	2200      	movs	r2, #0
 8017c3a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 8017c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017c46:	9300      	str	r3, [sp, #0]
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6939      	ldr	r1, [r7, #16]
 8017c4c:	68f8      	ldr	r0, [r7, #12]
 8017c4e:	f001 ff07 	bl	8019a60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017c52:	6938      	ldr	r0, [r7, #16]
 8017c54:	f7f9 fcb0 	bl	80115b8 <pbuf_free>
  }
  return ERR_OK;
 8017c58:	2300      	movs	r3, #0
}
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	3718      	adds	r7, #24
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}
 8017c62:	bf00      	nop
 8017c64:	0801d8e8 	.word	0x0801d8e8
 8017c68:	0801d9e0 	.word	0x0801d9e0
 8017c6c:	0801d960 	.word	0x0801d960
 8017c70:	20004248 	.word	0x20004248

08017c74 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b084      	sub	sp, #16
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	73fb      	strb	r3, [r7, #15]
 8017c80:	e01f      	b.n	8017cc2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8017c82:	7bfa      	ldrb	r2, [r7, #15]
 8017c84:	4912      	ldr	r1, [pc, #72]	; (8017cd0 <etharp_cleanup_netif+0x5c>)
 8017c86:	4613      	mov	r3, r2
 8017c88:	005b      	lsls	r3, r3, #1
 8017c8a:	4413      	add	r3, r2
 8017c8c:	00db      	lsls	r3, r3, #3
 8017c8e:	440b      	add	r3, r1
 8017c90:	3314      	adds	r3, #20
 8017c92:	781b      	ldrb	r3, [r3, #0]
 8017c94:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017c96:	7bbb      	ldrb	r3, [r7, #14]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d00f      	beq.n	8017cbc <etharp_cleanup_netif+0x48>
 8017c9c:	7bfa      	ldrb	r2, [r7, #15]
 8017c9e:	490c      	ldr	r1, [pc, #48]	; (8017cd0 <etharp_cleanup_netif+0x5c>)
 8017ca0:	4613      	mov	r3, r2
 8017ca2:	005b      	lsls	r3, r3, #1
 8017ca4:	4413      	add	r3, r2
 8017ca6:	00db      	lsls	r3, r3, #3
 8017ca8:	440b      	add	r3, r1
 8017caa:	3308      	adds	r3, #8
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	687a      	ldr	r2, [r7, #4]
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d103      	bne.n	8017cbc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8017cb4:	7bfb      	ldrb	r3, [r7, #15]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7ff fd12 	bl	80176e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017cbc:	7bfb      	ldrb	r3, [r7, #15]
 8017cbe:	3301      	adds	r3, #1
 8017cc0:	73fb      	strb	r3, [r7, #15]
 8017cc2:	7bfb      	ldrb	r3, [r7, #15]
 8017cc4:	2b09      	cmp	r3, #9
 8017cc6:	d9dc      	bls.n	8017c82 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017cc8:	bf00      	nop
 8017cca:	3710      	adds	r7, #16
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	20004248 	.word	0x20004248

08017cd4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017cd4:	b5b0      	push	{r4, r5, r7, lr}
 8017cd6:	b08a      	sub	sp, #40	; 0x28
 8017cd8:	af04      	add	r7, sp, #16
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017cde:	683b      	ldr	r3, [r7, #0]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d107      	bne.n	8017cf4 <etharp_input+0x20>
 8017ce4:	4b3d      	ldr	r3, [pc, #244]	; (8017ddc <etharp_input+0x108>)
 8017ce6:	f44f 7222 	mov.w	r2, #648	; 0x288
 8017cea:	493d      	ldr	r1, [pc, #244]	; (8017de0 <etharp_input+0x10c>)
 8017cec:	483d      	ldr	r0, [pc, #244]	; (8017de4 <etharp_input+0x110>)
 8017cee:	f002 fecf 	bl	801aa90 <iprintf>
 8017cf2:	e06f      	b.n	8017dd4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	685b      	ldr	r3, [r3, #4]
 8017cf8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8017cfa:	693b      	ldr	r3, [r7, #16]
 8017cfc:	881b      	ldrh	r3, [r3, #0]
 8017cfe:	b29b      	uxth	r3, r3
 8017d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d04:	d10c      	bne.n	8017d20 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8017d0a:	2b06      	cmp	r3, #6
 8017d0c:	d108      	bne.n	8017d20 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017d12:	2b04      	cmp	r3, #4
 8017d14:	d104      	bne.n	8017d20 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	885b      	ldrh	r3, [r3, #2]
 8017d1a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017d1c:	2b08      	cmp	r3, #8
 8017d1e:	d003      	beq.n	8017d28 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017d20:	6878      	ldr	r0, [r7, #4]
 8017d22:	f7f9 fc49 	bl	80115b8 <pbuf_free>
    return;
 8017d26:	e055      	b.n	8017dd4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8017d28:	693b      	ldr	r3, [r7, #16]
 8017d2a:	330e      	adds	r3, #14
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8017d30:	693b      	ldr	r3, [r7, #16]
 8017d32:	3318      	adds	r3, #24
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017d38:	683b      	ldr	r3, [r7, #0]
 8017d3a:	3304      	adds	r3, #4
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d102      	bne.n	8017d48 <etharp_input+0x74>
    for_us = 0;
 8017d42:	2300      	movs	r3, #0
 8017d44:	75fb      	strb	r3, [r7, #23]
 8017d46:	e009      	b.n	8017d5c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017d48:	68ba      	ldr	r2, [r7, #8]
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	3304      	adds	r3, #4
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	bf0c      	ite	eq
 8017d54:	2301      	moveq	r3, #1
 8017d56:	2300      	movne	r3, #0
 8017d58:	b2db      	uxtb	r3, r3
 8017d5a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017d5c:	693b      	ldr	r3, [r7, #16]
 8017d5e:	f103 0208 	add.w	r2, r3, #8
 8017d62:	7dfb      	ldrb	r3, [r7, #23]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d001      	beq.n	8017d6c <etharp_input+0x98>
 8017d68:	2301      	movs	r3, #1
 8017d6a:	e000      	b.n	8017d6e <etharp_input+0x9a>
 8017d6c:	2302      	movs	r3, #2
 8017d6e:	f107 010c 	add.w	r1, r7, #12
 8017d72:	6838      	ldr	r0, [r7, #0]
 8017d74:	f7ff fed8 	bl	8017b28 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	88db      	ldrh	r3, [r3, #6]
 8017d7c:	b29b      	uxth	r3, r3
 8017d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d82:	d003      	beq.n	8017d8c <etharp_input+0xb8>
 8017d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d88:	d01e      	beq.n	8017dc8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8017d8a:	e020      	b.n	8017dce <etharp_input+0xfa>
    if (for_us) {
 8017d8c:	7dfb      	ldrb	r3, [r7, #23]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d01c      	beq.n	8017dcc <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	f103 052b 	add.w	r5, r3, #43	; 0x2b
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8017da8:	693a      	ldr	r2, [r7, #16]
 8017daa:	3208      	adds	r2, #8
      etharp_raw(netif,
 8017dac:	2102      	movs	r1, #2
 8017dae:	9103      	str	r1, [sp, #12]
 8017db0:	f107 010c 	add.w	r1, r7, #12
 8017db4:	9102      	str	r1, [sp, #8]
 8017db6:	9201      	str	r2, [sp, #4]
 8017db8:	9300      	str	r3, [sp, #0]
 8017dba:	462b      	mov	r3, r5
 8017dbc:	4622      	mov	r2, r4
 8017dbe:	4601      	mov	r1, r0
 8017dc0:	6838      	ldr	r0, [r7, #0]
 8017dc2:	f000 fae3 	bl	801838c <etharp_raw>
    break;
 8017dc6:	e001      	b.n	8017dcc <etharp_input+0xf8>
    break;
 8017dc8:	bf00      	nop
 8017dca:	e000      	b.n	8017dce <etharp_input+0xfa>
    break;
 8017dcc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017dce:	6878      	ldr	r0, [r7, #4]
 8017dd0:	f7f9 fbf2 	bl	80115b8 <pbuf_free>
}
 8017dd4:	3718      	adds	r7, #24
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8017dda:	bf00      	nop
 8017ddc:	0801d8e8 	.word	0x0801d8e8
 8017de0:	0801da38 	.word	0x0801da38
 8017de4:	0801d960 	.word	0x0801d960

08017de8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b086      	sub	sp, #24
 8017dec:	af02      	add	r7, sp, #8
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	4613      	mov	r3, r2
 8017df4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017df6:	79fa      	ldrb	r2, [r7, #7]
 8017df8:	4944      	ldr	r1, [pc, #272]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	005b      	lsls	r3, r3, #1
 8017dfe:	4413      	add	r3, r2
 8017e00:	00db      	lsls	r3, r3, #3
 8017e02:	440b      	add	r3, r1
 8017e04:	3314      	adds	r3, #20
 8017e06:	781b      	ldrb	r3, [r3, #0]
 8017e08:	2b01      	cmp	r3, #1
 8017e0a:	d806      	bhi.n	8017e1a <etharp_output_to_arp_index+0x32>
 8017e0c:	4b40      	ldr	r3, [pc, #256]	; (8017f10 <etharp_output_to_arp_index+0x128>)
 8017e0e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8017e12:	4940      	ldr	r1, [pc, #256]	; (8017f14 <etharp_output_to_arp_index+0x12c>)
 8017e14:	4840      	ldr	r0, [pc, #256]	; (8017f18 <etharp_output_to_arp_index+0x130>)
 8017e16:	f002 fe3b 	bl	801aa90 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017e1a:	79fa      	ldrb	r2, [r7, #7]
 8017e1c:	493b      	ldr	r1, [pc, #236]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017e1e:	4613      	mov	r3, r2
 8017e20:	005b      	lsls	r3, r3, #1
 8017e22:	4413      	add	r3, r2
 8017e24:	00db      	lsls	r3, r3, #3
 8017e26:	440b      	add	r3, r1
 8017e28:	3314      	adds	r3, #20
 8017e2a:	781b      	ldrb	r3, [r3, #0]
 8017e2c:	2b02      	cmp	r3, #2
 8017e2e:	d153      	bne.n	8017ed8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017e30:	79fa      	ldrb	r2, [r7, #7]
 8017e32:	4936      	ldr	r1, [pc, #216]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017e34:	4613      	mov	r3, r2
 8017e36:	005b      	lsls	r3, r3, #1
 8017e38:	4413      	add	r3, r2
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	440b      	add	r3, r1
 8017e3e:	3312      	adds	r3, #18
 8017e40:	881b      	ldrh	r3, [r3, #0]
 8017e42:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017e46:	d919      	bls.n	8017e7c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017e48:	79fa      	ldrb	r2, [r7, #7]
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	005b      	lsls	r3, r3, #1
 8017e4e:	4413      	add	r3, r2
 8017e50:	00db      	lsls	r3, r3, #3
 8017e52:	4a2e      	ldr	r2, [pc, #184]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017e54:	4413      	add	r3, r2
 8017e56:	3304      	adds	r3, #4
 8017e58:	4619      	mov	r1, r3
 8017e5a:	68f8      	ldr	r0, [r7, #12]
 8017e5c:	f000 fb44 	bl	80184e8 <etharp_request>
 8017e60:	4603      	mov	r3, r0
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d138      	bne.n	8017ed8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017e66:	79fa      	ldrb	r2, [r7, #7]
 8017e68:	4928      	ldr	r1, [pc, #160]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	005b      	lsls	r3, r3, #1
 8017e6e:	4413      	add	r3, r2
 8017e70:	00db      	lsls	r3, r3, #3
 8017e72:	440b      	add	r3, r1
 8017e74:	3314      	adds	r3, #20
 8017e76:	2203      	movs	r2, #3
 8017e78:	701a      	strb	r2, [r3, #0]
 8017e7a:	e02d      	b.n	8017ed8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017e7c:	79fa      	ldrb	r2, [r7, #7]
 8017e7e:	4923      	ldr	r1, [pc, #140]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017e80:	4613      	mov	r3, r2
 8017e82:	005b      	lsls	r3, r3, #1
 8017e84:	4413      	add	r3, r2
 8017e86:	00db      	lsls	r3, r3, #3
 8017e88:	440b      	add	r3, r1
 8017e8a:	3312      	adds	r3, #18
 8017e8c:	881b      	ldrh	r3, [r3, #0]
 8017e8e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017e92:	d321      	bcc.n	8017ed8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017e94:	79fa      	ldrb	r2, [r7, #7]
 8017e96:	4613      	mov	r3, r2
 8017e98:	005b      	lsls	r3, r3, #1
 8017e9a:	4413      	add	r3, r2
 8017e9c:	00db      	lsls	r3, r3, #3
 8017e9e:	4a1b      	ldr	r2, [pc, #108]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017ea0:	4413      	add	r3, r2
 8017ea2:	1d19      	adds	r1, r3, #4
 8017ea4:	79fa      	ldrb	r2, [r7, #7]
 8017ea6:	4613      	mov	r3, r2
 8017ea8:	005b      	lsls	r3, r3, #1
 8017eaa:	4413      	add	r3, r2
 8017eac:	00db      	lsls	r3, r3, #3
 8017eae:	3308      	adds	r3, #8
 8017eb0:	4a16      	ldr	r2, [pc, #88]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017eb2:	4413      	add	r3, r2
 8017eb4:	3304      	adds	r3, #4
 8017eb6:	461a      	mov	r2, r3
 8017eb8:	68f8      	ldr	r0, [r7, #12]
 8017eba:	f000 faf3 	bl	80184a4 <etharp_request_dst>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d109      	bne.n	8017ed8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017ec4:	79fa      	ldrb	r2, [r7, #7]
 8017ec6:	4911      	ldr	r1, [pc, #68]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017ec8:	4613      	mov	r3, r2
 8017eca:	005b      	lsls	r3, r3, #1
 8017ecc:	4413      	add	r3, r2
 8017ece:	00db      	lsls	r3, r3, #3
 8017ed0:	440b      	add	r3, r1
 8017ed2:	3314      	adds	r3, #20
 8017ed4:	2203      	movs	r2, #3
 8017ed6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8017ede:	79fa      	ldrb	r2, [r7, #7]
 8017ee0:	4613      	mov	r3, r2
 8017ee2:	005b      	lsls	r3, r3, #1
 8017ee4:	4413      	add	r3, r2
 8017ee6:	00db      	lsls	r3, r3, #3
 8017ee8:	3308      	adds	r3, #8
 8017eea:	4a08      	ldr	r2, [pc, #32]	; (8017f0c <etharp_output_to_arp_index+0x124>)
 8017eec:	4413      	add	r3, r2
 8017eee:	1d1a      	adds	r2, r3, #4
 8017ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	4613      	mov	r3, r2
 8017ef8:	460a      	mov	r2, r1
 8017efa:	68b9      	ldr	r1, [r7, #8]
 8017efc:	68f8      	ldr	r0, [r7, #12]
 8017efe:	f001 fdaf 	bl	8019a60 <ethernet_output>
 8017f02:	4603      	mov	r3, r0
}
 8017f04:	4618      	mov	r0, r3
 8017f06:	3710      	adds	r7, #16
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}
 8017f0c:	20004248 	.word	0x20004248
 8017f10:	0801d8e8 	.word	0x0801d8e8
 8017f14:	0801da58 	.word	0x0801da58
 8017f18:	0801d960 	.word	0x0801d960

08017f1c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b08a      	sub	sp, #40	; 0x28
 8017f20:	af02      	add	r7, sp, #8
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d106      	bne.n	8017f40 <etharp_output+0x24>
 8017f32:	4b69      	ldr	r3, [pc, #420]	; (80180d8 <etharp_output+0x1bc>)
 8017f34:	f240 321b 	movw	r2, #795	; 0x31b
 8017f38:	4968      	ldr	r1, [pc, #416]	; (80180dc <etharp_output+0x1c0>)
 8017f3a:	4869      	ldr	r0, [pc, #420]	; (80180e0 <etharp_output+0x1c4>)
 8017f3c:	f002 fda8 	bl	801aa90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017f40:	68bb      	ldr	r3, [r7, #8]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d106      	bne.n	8017f54 <etharp_output+0x38>
 8017f46:	4b64      	ldr	r3, [pc, #400]	; (80180d8 <etharp_output+0x1bc>)
 8017f48:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017f4c:	4965      	ldr	r1, [pc, #404]	; (80180e4 <etharp_output+0x1c8>)
 8017f4e:	4864      	ldr	r0, [pc, #400]	; (80180e0 <etharp_output+0x1c4>)
 8017f50:	f002 fd9e 	bl	801aa90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d106      	bne.n	8017f68 <etharp_output+0x4c>
 8017f5a:	4b5f      	ldr	r3, [pc, #380]	; (80180d8 <etharp_output+0x1bc>)
 8017f5c:	f240 321d 	movw	r2, #797	; 0x31d
 8017f60:	4961      	ldr	r1, [pc, #388]	; (80180e8 <etharp_output+0x1cc>)
 8017f62:	485f      	ldr	r0, [pc, #380]	; (80180e0 <etharp_output+0x1c4>)
 8017f64:	f002 fd94 	bl	801aa90 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	68f9      	ldr	r1, [r7, #12]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f000 fed4 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 8017f74:	4603      	mov	r3, r0
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d002      	beq.n	8017f80 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017f7a:	4b5c      	ldr	r3, [pc, #368]	; (80180ec <etharp_output+0x1d0>)
 8017f7c:	61fb      	str	r3, [r7, #28]
 8017f7e:	e09b      	b.n	80180b8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f88:	2be0      	cmp	r3, #224	; 0xe0
 8017f8a:	d118      	bne.n	8017fbe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017f90:	2300      	movs	r3, #0
 8017f92:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017f94:	235e      	movs	r3, #94	; 0x5e
 8017f96:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	3301      	adds	r3, #1
 8017f9c:	781b      	ldrb	r3, [r3, #0]
 8017f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	3302      	adds	r3, #2
 8017faa:	781b      	ldrb	r3, [r3, #0]
 8017fac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	3303      	adds	r3, #3
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017fb6:	f107 0310 	add.w	r3, r7, #16
 8017fba:	61fb      	str	r3, [r7, #28]
 8017fbc:	e07c      	b.n	80180b8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681a      	ldr	r2, [r3, #0]
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	3304      	adds	r3, #4
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	405a      	eors	r2, r3
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	3308      	adds	r3, #8
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4013      	ands	r3, r2
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d012      	beq.n	8017ffc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017fdc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017fe0:	4293      	cmp	r3, r2
 8017fe2:	d00b      	beq.n	8017ffc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	330c      	adds	r3, #12
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d003      	beq.n	8017ff6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	330c      	adds	r3, #12
 8017ff2:	61bb      	str	r3, [r7, #24]
 8017ff4:	e002      	b.n	8017ffc <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017ff6:	f06f 0303 	mvn.w	r3, #3
 8017ffa:	e069      	b.n	80180d0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017ffc:	4b3c      	ldr	r3, [pc, #240]	; (80180f0 <etharp_output+0x1d4>)
 8017ffe:	781b      	ldrb	r3, [r3, #0]
 8018000:	4619      	mov	r1, r3
 8018002:	4a3c      	ldr	r2, [pc, #240]	; (80180f4 <etharp_output+0x1d8>)
 8018004:	460b      	mov	r3, r1
 8018006:	005b      	lsls	r3, r3, #1
 8018008:	440b      	add	r3, r1
 801800a:	00db      	lsls	r3, r3, #3
 801800c:	4413      	add	r3, r2
 801800e:	3314      	adds	r3, #20
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	2b01      	cmp	r3, #1
 8018014:	d917      	bls.n	8018046 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018016:	69bb      	ldr	r3, [r7, #24]
 8018018:	681a      	ldr	r2, [r3, #0]
 801801a:	4b35      	ldr	r3, [pc, #212]	; (80180f0 <etharp_output+0x1d4>)
 801801c:	781b      	ldrb	r3, [r3, #0]
 801801e:	4618      	mov	r0, r3
 8018020:	4934      	ldr	r1, [pc, #208]	; (80180f4 <etharp_output+0x1d8>)
 8018022:	4603      	mov	r3, r0
 8018024:	005b      	lsls	r3, r3, #1
 8018026:	4403      	add	r3, r0
 8018028:	00db      	lsls	r3, r3, #3
 801802a:	440b      	add	r3, r1
 801802c:	3304      	adds	r3, #4
 801802e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018030:	429a      	cmp	r2, r3
 8018032:	d108      	bne.n	8018046 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018034:	4b2e      	ldr	r3, [pc, #184]	; (80180f0 <etharp_output+0x1d4>)
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	461a      	mov	r2, r3
 801803a:	68b9      	ldr	r1, [r7, #8]
 801803c:	68f8      	ldr	r0, [r7, #12]
 801803e:	f7ff fed3 	bl	8017de8 <etharp_output_to_arp_index>
 8018042:	4603      	mov	r3, r0
 8018044:	e044      	b.n	80180d0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018046:	2300      	movs	r3, #0
 8018048:	75fb      	strb	r3, [r7, #23]
 801804a:	e02a      	b.n	80180a2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801804c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018050:	4928      	ldr	r1, [pc, #160]	; (80180f4 <etharp_output+0x1d8>)
 8018052:	4613      	mov	r3, r2
 8018054:	005b      	lsls	r3, r3, #1
 8018056:	4413      	add	r3, r2
 8018058:	00db      	lsls	r3, r3, #3
 801805a:	440b      	add	r3, r1
 801805c:	3314      	adds	r3, #20
 801805e:	781b      	ldrb	r3, [r3, #0]
 8018060:	2b01      	cmp	r3, #1
 8018062:	d918      	bls.n	8018096 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018064:	69bb      	ldr	r3, [r7, #24]
 8018066:	6819      	ldr	r1, [r3, #0]
 8018068:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801806c:	4821      	ldr	r0, [pc, #132]	; (80180f4 <etharp_output+0x1d8>)
 801806e:	4613      	mov	r3, r2
 8018070:	005b      	lsls	r3, r3, #1
 8018072:	4413      	add	r3, r2
 8018074:	00db      	lsls	r3, r3, #3
 8018076:	4403      	add	r3, r0
 8018078:	3304      	adds	r3, #4
 801807a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801807c:	4299      	cmp	r1, r3
 801807e:	d10a      	bne.n	8018096 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8018080:	7dfa      	ldrb	r2, [r7, #23]
 8018082:	4b1b      	ldr	r3, [pc, #108]	; (80180f0 <etharp_output+0x1d4>)
 8018084:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018086:	7dfb      	ldrb	r3, [r7, #23]
 8018088:	461a      	mov	r2, r3
 801808a:	68b9      	ldr	r1, [r7, #8]
 801808c:	68f8      	ldr	r0, [r7, #12]
 801808e:	f7ff feab 	bl	8017de8 <etharp_output_to_arp_index>
 8018092:	4603      	mov	r3, r0
 8018094:	e01c      	b.n	80180d0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801809a:	b2db      	uxtb	r3, r3
 801809c:	3301      	adds	r3, #1
 801809e:	b2db      	uxtb	r3, r3
 80180a0:	75fb      	strb	r3, [r7, #23]
 80180a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80180a6:	2b09      	cmp	r3, #9
 80180a8:	ddd0      	ble.n	801804c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80180aa:	68ba      	ldr	r2, [r7, #8]
 80180ac:	69b9      	ldr	r1, [r7, #24]
 80180ae:	68f8      	ldr	r0, [r7, #12]
 80180b0:	f000 f822 	bl	80180f8 <etharp_query>
 80180b4:	4603      	mov	r3, r0
 80180b6:	e00b      	b.n	80180d0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 80180be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80180c2:	9300      	str	r3, [sp, #0]
 80180c4:	69fb      	ldr	r3, [r7, #28]
 80180c6:	68b9      	ldr	r1, [r7, #8]
 80180c8:	68f8      	ldr	r0, [r7, #12]
 80180ca:	f001 fcc9 	bl	8019a60 <ethernet_output>
 80180ce:	4603      	mov	r3, r0
}
 80180d0:	4618      	mov	r0, r3
 80180d2:	3720      	adds	r7, #32
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}
 80180d8:	0801d8e8 	.word	0x0801d8e8
 80180dc:	0801da38 	.word	0x0801da38
 80180e0:	0801d960 	.word	0x0801d960
 80180e4:	0801da88 	.word	0x0801da88
 80180e8:	0801da28 	.word	0x0801da28
 80180ec:	0801e0d8 	.word	0x0801e0d8
 80180f0:	20004338 	.word	0x20004338
 80180f4:	20004248 	.word	0x20004248

080180f8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3b04      	subs	r3, #4
 800ac64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f023 0201 	bic.w	r2, r3, #1
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac84:	4a0c      	ldr	r2, [pc, #48]	; (800acb8 <pxPortInitialiseStack+0x64>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3b14      	subs	r3, #20
 800ac8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3b04      	subs	r3, #4
 800ac9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f06f 0202 	mvn.w	r2, #2
 800aca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3b20      	subs	r3, #32
 800aca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	0800acbd 	.word	0x0800acbd

0800acbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acc6:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <prvTaskExitError+0x50>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acce:	d009      	beq.n	800ace4 <prvTaskExitError+0x28>
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	e7fe      	b.n	800ace2 <prvTaskExitError+0x26>
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acf6:	bf00      	nop
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0fc      	beq.n	800acf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acfe:	bf00      	nop
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000118 	.word	0x20000118

0800ad10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <pxCurrentTCBConst2>)
 800ad12:	6819      	ldr	r1, [r3, #0]
 800ad14:	6808      	ldr	r0, [r1, #0]
 800ad16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1a:	f380 8809 	msr	PSP, r0
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f04f 0000 	mov.w	r0, #0
 800ad26:	f380 8811 	msr	BASEPRI, r0
 800ad2a:	4770      	bx	lr
 800ad2c:	f3af 8000 	nop.w

0800ad30 <pxCurrentTCBConst2>:
 800ad30:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop

0800ad38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad38:	4808      	ldr	r0, [pc, #32]	; (800ad5c <prvPortStartFirstTask+0x24>)
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	6800      	ldr	r0, [r0, #0]
 800ad3e:	f380 8808 	msr	MSP, r0
 800ad42:	f04f 0000 	mov.w	r0, #0
 800ad46:	f380 8814 	msr	CONTROL, r0
 800ad4a:	b662      	cpsie	i
 800ad4c:	b661      	cpsie	f
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	df00      	svc	0
 800ad58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad5a:	bf00      	nop
 800ad5c:	e000ed08 	.word	0xe000ed08

0800ad60 <xPortStartScheduler>:

/*
 * See header file for description.
=======
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b08c      	sub	sp, #48	; 0x30
 80180fc:	af02      	add	r7, sp, #8
 80180fe:	60f8      	str	r0, [r7, #12]
 8018100:	60b9      	str	r1, [r7, #8]
 8018102:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	332b      	adds	r3, #43	; 0x2b
 8018108:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801810a:	23ff      	movs	r3, #255	; 0xff
 801810c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018110:	2300      	movs	r3, #0
 8018112:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018114:	68bb      	ldr	r3, [r7, #8]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	68f9      	ldr	r1, [r7, #12]
 801811a:	4618      	mov	r0, r3
 801811c:	f000 fdfe 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 8018120:	4603      	mov	r3, r0
 8018122:	2b00      	cmp	r3, #0
 8018124:	d10c      	bne.n	8018140 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018126:	68bb      	ldr	r3, [r7, #8]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801812e:	2be0      	cmp	r3, #224	; 0xe0
 8018130:	d006      	beq.n	8018140 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d003      	beq.n	8018140 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d102      	bne.n	8018146 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018140:	f06f 030f 	mvn.w	r3, #15
 8018144:	e10f      	b.n	8018366 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018146:	68fa      	ldr	r2, [r7, #12]
 8018148:	2101      	movs	r1, #1
 801814a:	68b8      	ldr	r0, [r7, #8]
 801814c:	f7ff fba2 	bl	8017894 <etharp_find_entry>
 8018150:	4603      	mov	r3, r0
 8018152:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8018154:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018158:	2b00      	cmp	r3, #0
 801815a:	da02      	bge.n	8018162 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 801815c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018160:	e101      	b.n	8018366 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018162:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018166:	4982      	ldr	r1, [pc, #520]	; (8018370 <etharp_query+0x278>)
 8018168:	4613      	mov	r3, r2
 801816a:	005b      	lsls	r3, r3, #1
 801816c:	4413      	add	r3, r2
 801816e:	00db      	lsls	r3, r3, #3
 8018170:	440b      	add	r3, r1
 8018172:	3314      	adds	r3, #20
 8018174:	781b      	ldrb	r3, [r3, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d117      	bne.n	80181aa <etharp_query+0xb2>
    is_new_entry = 1;
 801817a:	2301      	movs	r3, #1
 801817c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801817e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018182:	497b      	ldr	r1, [pc, #492]	; (8018370 <etharp_query+0x278>)
 8018184:	4613      	mov	r3, r2
 8018186:	005b      	lsls	r3, r3, #1
 8018188:	4413      	add	r3, r2
 801818a:	00db      	lsls	r3, r3, #3
 801818c:	440b      	add	r3, r1
 801818e:	3314      	adds	r3, #20
 8018190:	2201      	movs	r2, #1
 8018192:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018194:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018198:	4975      	ldr	r1, [pc, #468]	; (8018370 <etharp_query+0x278>)
 801819a:	4613      	mov	r3, r2
 801819c:	005b      	lsls	r3, r3, #1
 801819e:	4413      	add	r3, r2
 80181a0:	00db      	lsls	r3, r3, #3
 80181a2:	440b      	add	r3, r1
 80181a4:	3308      	adds	r3, #8
 80181a6:	68fa      	ldr	r2, [r7, #12]
 80181a8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80181aa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80181ae:	4970      	ldr	r1, [pc, #448]	; (8018370 <etharp_query+0x278>)
 80181b0:	4613      	mov	r3, r2
 80181b2:	005b      	lsls	r3, r3, #1
 80181b4:	4413      	add	r3, r2
 80181b6:	00db      	lsls	r3, r3, #3
 80181b8:	440b      	add	r3, r1
 80181ba:	3314      	adds	r3, #20
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	2b01      	cmp	r3, #1
 80181c0:	d012      	beq.n	80181e8 <etharp_query+0xf0>
 80181c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80181c6:	496a      	ldr	r1, [pc, #424]	; (8018370 <etharp_query+0x278>)
 80181c8:	4613      	mov	r3, r2
 80181ca:	005b      	lsls	r3, r3, #1
 80181cc:	4413      	add	r3, r2
 80181ce:	00db      	lsls	r3, r3, #3
 80181d0:	440b      	add	r3, r1
 80181d2:	3314      	adds	r3, #20
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	2b01      	cmp	r3, #1
 80181d8:	d806      	bhi.n	80181e8 <etharp_query+0xf0>
 80181da:	4b66      	ldr	r3, [pc, #408]	; (8018374 <etharp_query+0x27c>)
 80181dc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80181e0:	4965      	ldr	r1, [pc, #404]	; (8018378 <etharp_query+0x280>)
 80181e2:	4866      	ldr	r0, [pc, #408]	; (801837c <etharp_query+0x284>)
 80181e4:	f002 fc54 	bl	801aa90 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80181e8:	6a3b      	ldr	r3, [r7, #32]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d102      	bne.n	80181f4 <etharp_query+0xfc>
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d10c      	bne.n	801820e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80181f4:	68b9      	ldr	r1, [r7, #8]
 80181f6:	68f8      	ldr	r0, [r7, #12]
 80181f8:	f000 f976 	bl	80184e8 <etharp_request>
 80181fc:	4603      	mov	r3, r0
 80181fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d102      	bne.n	801820e <etharp_query+0x116>
      return result;
 8018208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801820c:	e0ab      	b.n	8018366 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d106      	bne.n	8018222 <etharp_query+0x12a>
 8018214:	4b57      	ldr	r3, [pc, #348]	; (8018374 <etharp_query+0x27c>)
 8018216:	f240 32db 	movw	r2, #987	; 0x3db
 801821a:	4959      	ldr	r1, [pc, #356]	; (8018380 <etharp_query+0x288>)
 801821c:	4857      	ldr	r0, [pc, #348]	; (801837c <etharp_query+0x284>)
 801821e:	f002 fc37 	bl	801aa90 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018222:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018226:	4952      	ldr	r1, [pc, #328]	; (8018370 <etharp_query+0x278>)
 8018228:	4613      	mov	r3, r2
 801822a:	005b      	lsls	r3, r3, #1
 801822c:	4413      	add	r3, r2
 801822e:	00db      	lsls	r3, r3, #3
 8018230:	440b      	add	r3, r1
 8018232:	3314      	adds	r3, #20
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	2b01      	cmp	r3, #1
 8018238:	d919      	bls.n	801826e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801823a:	7cfa      	ldrb	r2, [r7, #19]
 801823c:	4b51      	ldr	r3, [pc, #324]	; (8018384 <etharp_query+0x28c>)
 801823e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018240:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018244:	4613      	mov	r3, r2
 8018246:	005b      	lsls	r3, r3, #1
 8018248:	4413      	add	r3, r2
 801824a:	00db      	lsls	r3, r3, #3
 801824c:	3308      	adds	r3, #8
 801824e:	4a48      	ldr	r2, [pc, #288]	; (8018370 <etharp_query+0x278>)
 8018250:	4413      	add	r3, r2
 8018252:	1d1a      	adds	r2, r3, #4
 8018254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018258:	9300      	str	r3, [sp, #0]
 801825a:	4613      	mov	r3, r2
 801825c:	697a      	ldr	r2, [r7, #20]
 801825e:	6879      	ldr	r1, [r7, #4]
 8018260:	68f8      	ldr	r0, [r7, #12]
 8018262:	f001 fbfd 	bl	8019a60 <ethernet_output>
 8018266:	4603      	mov	r3, r0
 8018268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801826c:	e079      	b.n	8018362 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801826e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018272:	493f      	ldr	r1, [pc, #252]	; (8018370 <etharp_query+0x278>)
 8018274:	4613      	mov	r3, r2
 8018276:	005b      	lsls	r3, r3, #1
 8018278:	4413      	add	r3, r2
 801827a:	00db      	lsls	r3, r3, #3
 801827c:	440b      	add	r3, r1
 801827e:	3314      	adds	r3, #20
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	2b01      	cmp	r3, #1
 8018284:	d16d      	bne.n	8018362 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018286:	2300      	movs	r3, #0
 8018288:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801828e:	e01a      	b.n	80182c6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018290:	69fb      	ldr	r3, [r7, #28]
 8018292:	895a      	ldrh	r2, [r3, #10]
 8018294:	69fb      	ldr	r3, [r7, #28]
 8018296:	891b      	ldrh	r3, [r3, #8]
 8018298:	429a      	cmp	r2, r3
 801829a:	d10a      	bne.n	80182b2 <etharp_query+0x1ba>
 801829c:	69fb      	ldr	r3, [r7, #28]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d006      	beq.n	80182b2 <etharp_query+0x1ba>
 80182a4:	4b33      	ldr	r3, [pc, #204]	; (8018374 <etharp_query+0x27c>)
 80182a6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80182aa:	4937      	ldr	r1, [pc, #220]	; (8018388 <etharp_query+0x290>)
 80182ac:	4833      	ldr	r0, [pc, #204]	; (801837c <etharp_query+0x284>)
 80182ae:	f002 fbef 	bl	801aa90 <iprintf>
      if (p->type != PBUF_ROM) {
 80182b2:	69fb      	ldr	r3, [r7, #28]
 80182b4:	7b1b      	ldrb	r3, [r3, #12]
 80182b6:	2b01      	cmp	r3, #1
 80182b8:	d002      	beq.n	80182c0 <etharp_query+0x1c8>
        copy_needed = 1;
 80182ba:	2301      	movs	r3, #1
 80182bc:	61bb      	str	r3, [r7, #24]
        break;
 80182be:	e005      	b.n	80182cc <etharp_query+0x1d4>
      }
      p = p->next;
 80182c0:	69fb      	ldr	r3, [r7, #28]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80182c6:	69fb      	ldr	r3, [r7, #28]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d1e1      	bne.n	8018290 <etharp_query+0x198>
    }
    if (copy_needed) {
 80182cc:	69bb      	ldr	r3, [r7, #24]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d017      	beq.n	8018302 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80182d2:	69fb      	ldr	r3, [r7, #28]
 80182d4:	891b      	ldrh	r3, [r3, #8]
 80182d6:	2200      	movs	r2, #0
 80182d8:	4619      	mov	r1, r3
 80182da:	2002      	movs	r0, #2
 80182dc:	f7f8 fdfa 	bl	8010ed4 <pbuf_alloc>
 80182e0:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80182e2:	69fb      	ldr	r3, [r7, #28]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d011      	beq.n	801830c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 80182e8:	6879      	ldr	r1, [r7, #4]
 80182ea:	69f8      	ldr	r0, [r7, #28]
 80182ec:	f7f9 fa94 	bl	8011818 <pbuf_copy>
 80182f0:	4603      	mov	r3, r0
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d00a      	beq.n	801830c <etharp_query+0x214>
          pbuf_free(p);
 80182f6:	69f8      	ldr	r0, [r7, #28]
 80182f8:	f7f9 f95e 	bl	80115b8 <pbuf_free>
          p = NULL;
 80182fc:	2300      	movs	r3, #0
 80182fe:	61fb      	str	r3, [r7, #28]
 8018300:	e004      	b.n	801830c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018306:	69f8      	ldr	r0, [r7, #28]
 8018308:	f7f9 fa08 	bl	801171c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801830c:	69fb      	ldr	r3, [r7, #28]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d024      	beq.n	801835c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018312:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018316:	4916      	ldr	r1, [pc, #88]	; (8018370 <etharp_query+0x278>)
 8018318:	4613      	mov	r3, r2
 801831a:	005b      	lsls	r3, r3, #1
 801831c:	4413      	add	r3, r2
 801831e:	00db      	lsls	r3, r3, #3
 8018320:	440b      	add	r3, r1
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d00b      	beq.n	8018340 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8018328:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801832c:	4910      	ldr	r1, [pc, #64]	; (8018370 <etharp_query+0x278>)
 801832e:	4613      	mov	r3, r2
 8018330:	005b      	lsls	r3, r3, #1
 8018332:	4413      	add	r3, r2
 8018334:	00db      	lsls	r3, r3, #3
 8018336:	440b      	add	r3, r1
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	4618      	mov	r0, r3
 801833c:	f7f9 f93c 	bl	80115b8 <pbuf_free>
      }
      arp_table[i].q = p;
 8018340:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018344:	490a      	ldr	r1, [pc, #40]	; (8018370 <etharp_query+0x278>)
 8018346:	4613      	mov	r3, r2
 8018348:	005b      	lsls	r3, r3, #1
 801834a:	4413      	add	r3, r2
 801834c:	00db      	lsls	r3, r3, #3
 801834e:	440b      	add	r3, r1
 8018350:	69fa      	ldr	r2, [r7, #28]
 8018352:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018354:	2300      	movs	r3, #0
 8018356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801835a:	e002      	b.n	8018362 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801835c:	23ff      	movs	r3, #255	; 0xff
 801835e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018362:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018366:	4618      	mov	r0, r3
 8018368:	3728      	adds	r7, #40	; 0x28
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
 801836e:	bf00      	nop
 8018370:	20004248 	.word	0x20004248
 8018374:	0801d8e8 	.word	0x0801d8e8
 8018378:	0801da94 	.word	0x0801da94
 801837c:	0801d960 	.word	0x0801d960
 8018380:	0801da88 	.word	0x0801da88
 8018384:	20004338 	.word	0x20004338
 8018388:	0801dabc 	.word	0x0801dabc

0801838c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b08a      	sub	sp, #40	; 0x28
 8018390:	af02      	add	r7, sp, #8
 8018392:	60f8      	str	r0, [r7, #12]
 8018394:	60b9      	str	r1, [r7, #8]
 8018396:	607a      	str	r2, [r7, #4]
 8018398:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801839a:	2300      	movs	r3, #0
 801839c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d106      	bne.n	80183b2 <etharp_raw+0x26>
 80183a4:	4b3a      	ldr	r3, [pc, #232]	; (8018490 <etharp_raw+0x104>)
 80183a6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80183aa:	493a      	ldr	r1, [pc, #232]	; (8018494 <etharp_raw+0x108>)
 80183ac:	483a      	ldr	r0, [pc, #232]	; (8018498 <etharp_raw+0x10c>)
 80183ae:	f002 fb6f 	bl	801aa90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80183b2:	2200      	movs	r2, #0
 80183b4:	211c      	movs	r1, #28
 80183b6:	2002      	movs	r0, #2
 80183b8:	f7f8 fd8c 	bl	8010ed4 <pbuf_alloc>
 80183bc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80183be:	69bb      	ldr	r3, [r7, #24]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d102      	bne.n	80183ca <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80183c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183c8:	e05d      	b.n	8018486 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80183ca:	69bb      	ldr	r3, [r7, #24]
 80183cc:	895b      	ldrh	r3, [r3, #10]
 80183ce:	2b1b      	cmp	r3, #27
 80183d0:	d806      	bhi.n	80183e0 <etharp_raw+0x54>
 80183d2:	4b2f      	ldr	r3, [pc, #188]	; (8018490 <etharp_raw+0x104>)
 80183d4:	f240 4264 	movw	r2, #1124	; 0x464
 80183d8:	4930      	ldr	r1, [pc, #192]	; (801849c <etharp_raw+0x110>)
 80183da:	482f      	ldr	r0, [pc, #188]	; (8018498 <etharp_raw+0x10c>)
 80183dc:	f002 fb58 	bl	801aa90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80183e0:	69bb      	ldr	r3, [r7, #24]
 80183e2:	685b      	ldr	r3, [r3, #4]
 80183e4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80183e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7f7 ff4b 	bl	8010284 <lwip_htons>
 80183ee:	4603      	mov	r3, r0
 80183f0:	461a      	mov	r2, r3
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80183fc:	2b06      	cmp	r3, #6
 80183fe:	d006      	beq.n	801840e <etharp_raw+0x82>
 8018400:	4b23      	ldr	r3, [pc, #140]	; (8018490 <etharp_raw+0x104>)
 8018402:	f240 426b 	movw	r2, #1131	; 0x46b
 8018406:	4926      	ldr	r1, [pc, #152]	; (80184a0 <etharp_raw+0x114>)
 8018408:	4823      	ldr	r0, [pc, #140]	; (8018498 <etharp_raw+0x10c>)
 801840a:	f002 fb41 	bl	801aa90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801840e:	697b      	ldr	r3, [r7, #20]
 8018410:	3308      	adds	r3, #8
 8018412:	2206      	movs	r2, #6
 8018414:	6839      	ldr	r1, [r7, #0]
 8018416:	4618      	mov	r0, r3
 8018418:	f002 fa7f 	bl	801a91a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	3312      	adds	r3, #18
 8018420:	2206      	movs	r2, #6
 8018422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018424:	4618      	mov	r0, r3
 8018426:	f002 fa78 	bl	801a91a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801842a:	697b      	ldr	r3, [r7, #20]
 801842c:	330e      	adds	r3, #14
 801842e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018430:	6812      	ldr	r2, [r2, #0]
 8018432:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	3318      	adds	r3, #24
 8018438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801843a:	6812      	ldr	r2, [r2, #0]
 801843c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	2200      	movs	r2, #0
 8018442:	701a      	strb	r2, [r3, #0]
 8018444:	2200      	movs	r2, #0
 8018446:	f042 0201 	orr.w	r2, r2, #1
 801844a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801844c:	697b      	ldr	r3, [r7, #20]
 801844e:	2200      	movs	r2, #0
 8018450:	f042 0208 	orr.w	r2, r2, #8
 8018454:	709a      	strb	r2, [r3, #2]
 8018456:	2200      	movs	r2, #0
 8018458:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	2206      	movs	r2, #6
 801845e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018460:	697b      	ldr	r3, [r7, #20]
 8018462:	2204      	movs	r2, #4
 8018464:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018466:	f640 0306 	movw	r3, #2054	; 0x806
 801846a:	9300      	str	r3, [sp, #0]
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	68ba      	ldr	r2, [r7, #8]
 8018470:	69b9      	ldr	r1, [r7, #24]
 8018472:	68f8      	ldr	r0, [r7, #12]
 8018474:	f001 faf4 	bl	8019a60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018478:	69b8      	ldr	r0, [r7, #24]
 801847a:	f7f9 f89d 	bl	80115b8 <pbuf_free>
  p = NULL;
 801847e:	2300      	movs	r3, #0
 8018480:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018482:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018486:	4618      	mov	r0, r3
 8018488:	3720      	adds	r7, #32
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}
 801848e:	bf00      	nop
 8018490:	0801d8e8 	.word	0x0801d8e8
 8018494:	0801da38 	.word	0x0801da38
 8018498:	0801d960 	.word	0x0801d960
 801849c:	0801dad8 	.word	0x0801dad8
 80184a0:	0801db0c 	.word	0x0801db0c

080184a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b088      	sub	sp, #32
 80184a8:	af04      	add	r7, sp, #16
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	60b9      	str	r1, [r7, #8]
 80184ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	f103 012b 	add.w	r1, r3, #43	; 0x2b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80184c0:	2201      	movs	r2, #1
 80184c2:	9203      	str	r2, [sp, #12]
 80184c4:	68ba      	ldr	r2, [r7, #8]
 80184c6:	9202      	str	r2, [sp, #8]
 80184c8:	4a06      	ldr	r2, [pc, #24]	; (80184e4 <etharp_request_dst+0x40>)
 80184ca:	9201      	str	r2, [sp, #4]
 80184cc:	9300      	str	r3, [sp, #0]
 80184ce:	4603      	mov	r3, r0
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	68f8      	ldr	r0, [r7, #12]
 80184d4:	f7ff ff5a 	bl	801838c <etharp_raw>
 80184d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3710      	adds	r7, #16
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	0801e0e0 	.word	0x0801e0e0

080184e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b082      	sub	sp, #8
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80184f2:	4a05      	ldr	r2, [pc, #20]	; (8018508 <etharp_request+0x20>)
 80184f4:	6839      	ldr	r1, [r7, #0]
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f7ff ffd4 	bl	80184a4 <etharp_request_dst>
 80184fc:	4603      	mov	r3, r0
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3708      	adds	r7, #8
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
 8018506:	bf00      	nop
 8018508:	0801e0d8 	.word	0x0801e0d8

0801850c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b08e      	sub	sp, #56	; 0x38
 8018510:	af04      	add	r7, sp, #16
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018516:	4b7a      	ldr	r3, [pc, #488]	; (8018700 <icmp_input+0x1f4>)
 8018518:	689b      	ldr	r3, [r3, #8]
 801851a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	b29b      	uxth	r3, r3
 8018522:	f003 030f 	and.w	r3, r3, #15
 8018526:	b29b      	uxth	r3, r3
 8018528:	009b      	lsls	r3, r3, #2
 801852a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801852c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801852e:	2b13      	cmp	r3, #19
 8018530:	f240 80d1 	bls.w	80186d6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	895b      	ldrh	r3, [r3, #10]
 8018538:	2b03      	cmp	r3, #3
 801853a:	f240 80ce 	bls.w	80186da <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018548:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801854c:	2b00      	cmp	r3, #0
 801854e:	f000 80bb 	beq.w	80186c8 <icmp_input+0x1bc>
 8018552:	2b08      	cmp	r3, #8
 8018554:	f040 80bb 	bne.w	80186ce <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8018558:	4b6a      	ldr	r3, [pc, #424]	; (8018704 <icmp_input+0x1f8>)
 801855a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801855c:	4b68      	ldr	r3, [pc, #416]	; (8018700 <icmp_input+0x1f4>)
 801855e:	695b      	ldr	r3, [r3, #20]
 8018560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018564:	2be0      	cmp	r3, #224	; 0xe0
 8018566:	f000 80bf 	beq.w	80186e8 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801856a:	4b65      	ldr	r3, [pc, #404]	; (8018700 <icmp_input+0x1f4>)
 801856c:	695a      	ldr	r2, [r3, #20]
 801856e:	4b64      	ldr	r3, [pc, #400]	; (8018700 <icmp_input+0x1f4>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	4619      	mov	r1, r3
 8018574:	4610      	mov	r0, r2
 8018576:	f000 fbd1 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 801857a:	4603      	mov	r3, r0
 801857c:	2b00      	cmp	r3, #0
 801857e:	f040 80b5 	bne.w	80186ec <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	891b      	ldrh	r3, [r3, #8]
 8018586:	2b07      	cmp	r3, #7
 8018588:	f240 80a9 	bls.w	80186de <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801858c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801858e:	330e      	adds	r3, #14
 8018590:	b29b      	uxth	r3, r3
 8018592:	b21b      	sxth	r3, r3
 8018594:	4619      	mov	r1, r3
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f7f8 ffea 	bl	8011570 <pbuf_header>
 801859c:	4603      	mov	r3, r0
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d046      	beq.n	8018630 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	891a      	ldrh	r2, [r3, #8]
 80185a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185a8:	4413      	add	r3, r2
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	2200      	movs	r2, #0
 80185ae:	4619      	mov	r1, r3
 80185b0:	2002      	movs	r0, #2
 80185b2:	f7f8 fc8f 	bl	8010ed4 <pbuf_alloc>
 80185b6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80185b8:	69bb      	ldr	r3, [r7, #24]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	f000 8098 	beq.w	80186f0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80185c0:	69bb      	ldr	r3, [r7, #24]
 80185c2:	895b      	ldrh	r3, [r3, #10]
 80185c4:	461a      	mov	r2, r3
 80185c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185c8:	3308      	adds	r3, #8
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d203      	bcs.n	80185d6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80185ce:	69b8      	ldr	r0, [r7, #24]
 80185d0:	f7f8 fff2 	bl	80115b8 <pbuf_free>
        goto icmperr;
 80185d4:	e08d      	b.n	80186f2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80185d6:	69bb      	ldr	r3, [r7, #24]
 80185d8:	685b      	ldr	r3, [r3, #4]
 80185da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80185dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80185de:	4618      	mov	r0, r3
 80185e0:	f002 f99b 	bl	801a91a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80185e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185e6:	425b      	negs	r3, r3
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	b21b      	sxth	r3, r3
 80185ec:	4619      	mov	r1, r3
 80185ee:	69b8      	ldr	r0, [r7, #24]
 80185f0:	f7f8 ffbe 	bl	8011570 <pbuf_header>
 80185f4:	4603      	mov	r3, r0
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d009      	beq.n	801860e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80185fa:	4b43      	ldr	r3, [pc, #268]	; (8018708 <icmp_input+0x1fc>)
 80185fc:	22af      	movs	r2, #175	; 0xaf
 80185fe:	4943      	ldr	r1, [pc, #268]	; (801870c <icmp_input+0x200>)
 8018600:	4843      	ldr	r0, [pc, #268]	; (8018710 <icmp_input+0x204>)
 8018602:	f002 fa45 	bl	801aa90 <iprintf>
        pbuf_free(r);
 8018606:	69b8      	ldr	r0, [r7, #24]
 8018608:	f7f8 ffd6 	bl	80115b8 <pbuf_free>
        goto icmperr;
 801860c:	e071      	b.n	80186f2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801860e:	6879      	ldr	r1, [r7, #4]
 8018610:	69b8      	ldr	r0, [r7, #24]
 8018612:	f7f9 f901 	bl	8011818 <pbuf_copy>
 8018616:	4603      	mov	r3, r0
 8018618:	2b00      	cmp	r3, #0
 801861a:	d003      	beq.n	8018624 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801861c:	69b8      	ldr	r0, [r7, #24]
 801861e:	f7f8 ffcb 	bl	80115b8 <pbuf_free>
        goto icmperr;
 8018622:	e066      	b.n	80186f2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8018624:	6878      	ldr	r0, [r7, #4]
 8018626:	f7f8 ffc7 	bl	80115b8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801862a:	69bb      	ldr	r3, [r7, #24]
 801862c:	607b      	str	r3, [r7, #4]
 801862e:	e015      	b.n	801865c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8018630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018632:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8018636:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801863a:	33f2      	adds	r3, #242	; 0xf2
 801863c:	b29b      	uxth	r3, r3
 801863e:	b21b      	sxth	r3, r3
 8018640:	4619      	mov	r1, r3
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f7f8 ff94 	bl	8011570 <pbuf_header>
 8018648:	4603      	mov	r3, r0
 801864a:	2b00      	cmp	r3, #0
 801864c:	d006      	beq.n	801865c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801864e:	4b2e      	ldr	r3, [pc, #184]	; (8018708 <icmp_input+0x1fc>)
 8018650:	22c0      	movs	r2, #192	; 0xc0
 8018652:	4930      	ldr	r1, [pc, #192]	; (8018714 <icmp_input+0x208>)
 8018654:	482e      	ldr	r0, [pc, #184]	; (8018710 <icmp_input+0x204>)
 8018656:	f002 fa1b 	bl	801aa90 <iprintf>
        goto icmperr;
 801865a:	e04a      	b.n	80186f2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8018662:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018666:	4619      	mov	r1, r3
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f7f8 ff81 	bl	8011570 <pbuf_header>
 801866e:	4603      	mov	r3, r0
 8018670:	2b00      	cmp	r3, #0
 8018672:	d12b      	bne.n	80186cc <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	685b      	ldr	r3, [r3, #4]
 8018678:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801867a:	69fb      	ldr	r3, [r7, #28]
 801867c:	681a      	ldr	r2, [r3, #0]
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018682:	4b1f      	ldr	r3, [pc, #124]	; (8018700 <icmp_input+0x1f4>)
 8018684:	691a      	ldr	r2, [r3, #16]
 8018686:	693b      	ldr	r3, [r7, #16]
 8018688:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	2200      	movs	r2, #0
 801868e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	2200      	movs	r2, #0
 8018694:	709a      	strb	r2, [r3, #2]
 8018696:	2200      	movs	r2, #0
 8018698:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801869a:	693b      	ldr	r3, [r7, #16]
 801869c:	22ff      	movs	r2, #255	; 0xff
 801869e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80186a0:	693b      	ldr	r3, [r7, #16]
 80186a2:	2200      	movs	r2, #0
 80186a4:	729a      	strb	r2, [r3, #10]
 80186a6:	2200      	movs	r2, #0
 80186a8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	9302      	str	r3, [sp, #8]
 80186ae:	2301      	movs	r3, #1
 80186b0:	9301      	str	r3, [sp, #4]
 80186b2:	2300      	movs	r3, #0
 80186b4:	9300      	str	r3, [sp, #0]
 80186b6:	23ff      	movs	r3, #255	; 0xff
 80186b8:	2200      	movs	r2, #0
 80186ba:	69f9      	ldr	r1, [r7, #28]
 80186bc:	6878      	ldr	r0, [r7, #4]
 80186be:	f000 fa5b 	bl	8018b78 <ip4_output_if>
 80186c2:	4603      	mov	r3, r0
 80186c4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80186c6:	e001      	b.n	80186cc <icmp_input+0x1c0>
    break;
 80186c8:	bf00      	nop
 80186ca:	e000      	b.n	80186ce <icmp_input+0x1c2>
    break;
 80186cc:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f7f8 ff72 	bl	80115b8 <pbuf_free>
  return;
 80186d4:	e011      	b.n	80186fa <icmp_input+0x1ee>
    goto lenerr;
 80186d6:	bf00      	nop
 80186d8:	e002      	b.n	80186e0 <icmp_input+0x1d4>
    goto lenerr;
 80186da:	bf00      	nop
 80186dc:	e000      	b.n	80186e0 <icmp_input+0x1d4>
      goto lenerr;
 80186de:	bf00      	nop
lenerr:
  pbuf_free(p);
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f7f8 ff69 	bl	80115b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80186e6:	e008      	b.n	80186fa <icmp_input+0x1ee>
      goto icmperr;
 80186e8:	bf00      	nop
 80186ea:	e002      	b.n	80186f2 <icmp_input+0x1e6>
      goto icmperr;
 80186ec:	bf00      	nop
 80186ee:	e000      	b.n	80186f2 <icmp_input+0x1e6>
        goto icmperr;
 80186f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f7f8 ff60 	bl	80115b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80186f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80186fa:	3728      	adds	r7, #40	; 0x28
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	20007648 	.word	0x20007648
 8018704:	2000765c 	.word	0x2000765c
 8018708:	0801db50 	.word	0x0801db50
 801870c:	0801db88 	.word	0x0801db88
 8018710:	0801dbc0 	.word	0x0801dbc0
 8018714:	0801dbe8 	.word	0x0801dbe8

08018718 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	460b      	mov	r3, r1
 8018722:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018724:	78fb      	ldrb	r3, [r7, #3]
 8018726:	461a      	mov	r2, r3
 8018728:	2103      	movs	r1, #3
 801872a:	6878      	ldr	r0, [r7, #4]
 801872c:	f000 f814 	bl	8018758 <icmp_send_response>
}
 8018730:	bf00      	nop
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
 8018740:	460b      	mov	r3, r1
 8018742:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018744:	78fb      	ldrb	r3, [r7, #3]
 8018746:	461a      	mov	r2, r3
 8018748:	210b      	movs	r1, #11
 801874a:	6878      	ldr	r0, [r7, #4]
 801874c:	f000 f804 	bl	8018758 <icmp_send_response>
}
 8018750:	bf00      	nop
 8018752:	3708      	adds	r7, #8
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}

08018758 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b08c      	sub	sp, #48	; 0x30
 801875c:	af04      	add	r7, sp, #16
 801875e:	6078      	str	r0, [r7, #4]
 8018760:	460b      	mov	r3, r1
 8018762:	70fb      	strb	r3, [r7, #3]
 8018764:	4613      	mov	r3, r2
 8018766:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018768:	2200      	movs	r2, #0
 801876a:	2124      	movs	r1, #36	; 0x24
 801876c:	2001      	movs	r0, #1
 801876e:	f7f8 fbb1 	bl	8010ed4 <pbuf_alloc>
 8018772:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018774:	69fb      	ldr	r3, [r7, #28]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d04c      	beq.n	8018814 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801877a:	69fb      	ldr	r3, [r7, #28]
 801877c:	895b      	ldrh	r3, [r3, #10]
 801877e:	2b23      	cmp	r3, #35	; 0x23
 8018780:	d806      	bhi.n	8018790 <icmp_send_response+0x38>
 8018782:	4b26      	ldr	r3, [pc, #152]	; (801881c <icmp_send_response+0xc4>)
 8018784:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8018788:	4925      	ldr	r1, [pc, #148]	; (8018820 <icmp_send_response+0xc8>)
 801878a:	4826      	ldr	r0, [pc, #152]	; (8018824 <icmp_send_response+0xcc>)
 801878c:	f002 f980 	bl	801aa90 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	685b      	ldr	r3, [r3, #4]
 8018794:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018796:	69fb      	ldr	r3, [r7, #28]
 8018798:	685b      	ldr	r3, [r3, #4]
 801879a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801879c:	697b      	ldr	r3, [r7, #20]
 801879e:	78fa      	ldrb	r2, [r7, #3]
 80187a0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80187a2:	697b      	ldr	r3, [r7, #20]
 80187a4:	78ba      	ldrb	r2, [r7, #2]
 80187a6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80187a8:	697b      	ldr	r3, [r7, #20]
 80187aa:	2200      	movs	r2, #0
 80187ac:	711a      	strb	r2, [r3, #4]
 80187ae:	2200      	movs	r2, #0
 80187b0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	2200      	movs	r2, #0
 80187b6:	719a      	strb	r2, [r3, #6]
 80187b8:	2200      	movs	r2, #0
 80187ba:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	685b      	ldr	r3, [r3, #4]
 80187c0:	f103 0008 	add.w	r0, r3, #8
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	685b      	ldr	r3, [r3, #4]
 80187c8:	221c      	movs	r2, #28
 80187ca:	4619      	mov	r1, r3
 80187cc:	f002 f8a5 	bl	801a91a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80187d0:	69bb      	ldr	r3, [r7, #24]
 80187d2:	68db      	ldr	r3, [r3, #12]
 80187d4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80187d6:	f107 030c 	add.w	r3, r7, #12
 80187da:	4618      	mov	r0, r3
 80187dc:	f000 f824 	bl	8018828 <ip4_route>
 80187e0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80187e2:	693b      	ldr	r3, [r7, #16]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d011      	beq.n	801880c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80187e8:	697b      	ldr	r3, [r7, #20]
 80187ea:	2200      	movs	r2, #0
 80187ec:	709a      	strb	r2, [r3, #2]
 80187ee:	2200      	movs	r2, #0
 80187f0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80187f2:	f107 020c 	add.w	r2, r7, #12
 80187f6:	693b      	ldr	r3, [r7, #16]
 80187f8:	9302      	str	r3, [sp, #8]
 80187fa:	2301      	movs	r3, #1
 80187fc:	9301      	str	r3, [sp, #4]
 80187fe:	2300      	movs	r3, #0
 8018800:	9300      	str	r3, [sp, #0]
 8018802:	23ff      	movs	r3, #255	; 0xff
 8018804:	2100      	movs	r1, #0
 8018806:	69f8      	ldr	r0, [r7, #28]
 8018808:	f000 f9b6 	bl	8018b78 <ip4_output_if>
  }
  pbuf_free(q);
 801880c:	69f8      	ldr	r0, [r7, #28]
 801880e:	f7f8 fed3 	bl	80115b8 <pbuf_free>
 8018812:	e000      	b.n	8018816 <icmp_send_response+0xbe>
    return;
 8018814:	bf00      	nop
}
 8018816:	3720      	adds	r7, #32
 8018818:	46bd      	mov	sp, r7
 801881a:	bd80      	pop	{r7, pc}
 801881c:	0801db50 	.word	0x0801db50
 8018820:	0801dc1c 	.word	0x0801dc1c
 8018824:	0801dbc0 	.word	0x0801dbc0

08018828 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018828:	b480      	push	{r7}
 801882a:	b085      	sub	sp, #20
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8018830:	4b30      	ldr	r3, [pc, #192]	; (80188f4 <ip4_route+0xcc>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	60fb      	str	r3, [r7, #12]
 8018836:	e036      	b.n	80188a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801883e:	f003 0301 	and.w	r3, r3, #1
 8018842:	b2db      	uxtb	r3, r3
 8018844:	2b00      	cmp	r3, #0
 8018846:	d02b      	beq.n	80188a0 <ip4_route+0x78>
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801884e:	089b      	lsrs	r3, r3, #2
 8018850:	f003 0301 	and.w	r3, r3, #1
 8018854:	b2db      	uxtb	r3, r3
 8018856:	2b00      	cmp	r3, #0
 8018858:	d022      	beq.n	80188a0 <ip4_route+0x78>
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	3304      	adds	r3, #4
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d01d      	beq.n	80188a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681a      	ldr	r2, [r3, #0]
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	3304      	adds	r3, #4
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	405a      	eors	r2, r3
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	3308      	adds	r3, #8
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	4013      	ands	r3, r2
 8018878:	2b00      	cmp	r3, #0
 801887a:	d101      	bne.n	8018880 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	e033      	b.n	80188e8 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018886:	f003 0302 	and.w	r3, r3, #2
 801888a:	2b00      	cmp	r3, #0
 801888c:	d108      	bne.n	80188a0 <ip4_route+0x78>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681a      	ldr	r2, [r3, #0]
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	330c      	adds	r3, #12
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	429a      	cmp	r2, r3
 801889a:	d101      	bne.n	80188a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	e023      	b.n	80188e8 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	60fb      	str	r3, [r7, #12]
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d1c5      	bne.n	8018838 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80188ac:	4b12      	ldr	r3, [pc, #72]	; (80188f8 <ip4_route+0xd0>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d015      	beq.n	80188e0 <ip4_route+0xb8>
 80188b4:	4b10      	ldr	r3, [pc, #64]	; (80188f8 <ip4_route+0xd0>)
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188bc:	f003 0301 	and.w	r3, r3, #1
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d00d      	beq.n	80188e0 <ip4_route+0xb8>
 80188c4:	4b0c      	ldr	r3, [pc, #48]	; (80188f8 <ip4_route+0xd0>)
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188cc:	f003 0304 	and.w	r3, r3, #4
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d005      	beq.n	80188e0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80188d4:	4b08      	ldr	r3, [pc, #32]	; (80188f8 <ip4_route+0xd0>)
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	3304      	adds	r3, #4
 80188da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d101      	bne.n	80188e4 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80188e0:	2300      	movs	r3, #0
 80188e2:	e001      	b.n	80188e8 <ip4_route+0xc0>
  }

  return netif_default;
 80188e4:	4b04      	ldr	r3, [pc, #16]	; (80188f8 <ip4_route+0xd0>)
 80188e6:	681b      	ldr	r3, [r3, #0]
}
 80188e8:	4618      	mov	r0, r3
 80188ea:	3714      	adds	r7, #20
 80188ec:	46bd      	mov	sp, r7
 80188ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f2:	4770      	bx	lr
 80188f4:	2000ab40 	.word	0x2000ab40
 80188f8:	2000ab44 	.word	0x2000ab44

080188fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad66:	4b44      	ldr	r3, [pc, #272]	; (800ae78 <xPortStartScheduler+0x118>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a44      	ldr	r2, [pc, #272]	; (800ae7c <xPortStartScheduler+0x11c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d109      	bne.n	800ad84 <xPortStartScheduler+0x24>
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	613b      	str	r3, [r7, #16]
 800ad82:	e7fe      	b.n	800ad82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad84:	4b3c      	ldr	r3, [pc, #240]	; (800ae78 <xPortStartScheduler+0x118>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a3d      	ldr	r2, [pc, #244]	; (800ae80 <xPortStartScheduler+0x120>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d109      	bne.n	800ada2 <xPortStartScheduler+0x42>
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e7fe      	b.n	800ada0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ada2:	4b38      	ldr	r3, [pc, #224]	; (800ae84 <xPortStartScheduler+0x124>)
 800ada4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	22ff      	movs	r2, #255	; 0xff
 800adb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	4b30      	ldr	r3, [pc, #192]	; (800ae88 <xPortStartScheduler+0x128>)
 800adc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adca:	4b30      	ldr	r3, [pc, #192]	; (800ae8c <xPortStartScheduler+0x12c>)
 800adcc:	2207      	movs	r2, #7
 800adce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800add0:	e009      	b.n	800ade6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800add2:	4b2e      	ldr	r3, [pc, #184]	; (800ae8c <xPortStartScheduler+0x12c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3b01      	subs	r3, #1
 800add8:	4a2c      	ldr	r2, [pc, #176]	; (800ae8c <xPortStartScheduler+0x12c>)
 800adda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adee:	2b80      	cmp	r3, #128	; 0x80
 800adf0:	d0ef      	beq.n	800add2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adf2:	4b26      	ldr	r3, [pc, #152]	; (800ae8c <xPortStartScheduler+0x12c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f1c3 0307 	rsb	r3, r3, #7
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d009      	beq.n	800ae12 <xPortStartScheduler+0xb2>
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	60bb      	str	r3, [r7, #8]
 800ae10:	e7fe      	b.n	800ae10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae12:	4b1e      	ldr	r3, [pc, #120]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae1c:	4b1b      	ldr	r3, [pc, #108]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae24:	4a19      	ldr	r2, [pc, #100]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae30:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a16      	ldr	r2, [pc, #88]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae3c:	4b14      	ldr	r3, [pc, #80]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a13      	ldr	r2, [pc, #76]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae48:	f000 f8d6 	bl	800aff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae4c:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <xPortStartScheduler+0x134>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae52:	f000 f8f5 	bl	800b040 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae56:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a0f      	ldr	r2, [pc, #60]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae62:	f7ff ff69 	bl	800ad38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae66:	f7ff fbb3 	bl	800a5d0 <vTaskSwitchContext>
	prvTaskExitError();
 800ae6a:	f7ff ff27 	bl	800acbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	e000ed00 	.word	0xe000ed00
 800ae7c:	410fc271 	.word	0x410fc271
 800ae80:	410fc270 	.word	0x410fc270
 800ae84:	e000e400 	.word	0xe000e400
 800ae88:	20000588 	.word	0x20000588
 800ae8c:	2000058c 	.word	0x2000058c
 800ae90:	e000ed20 	.word	0xe000ed20
 800ae94:	20000118 	.word	0x20000118
 800ae98:	e000ef34 	.word	0xe000ef34

0800ae9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <vPortEnterCritical+0x54>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	4a0d      	ldr	r2, [pc, #52]	; (800aef0 <vPortEnterCritical+0x54>)
 800aebc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aebe:	4b0c      	ldr	r3, [pc, #48]	; (800aef0 <vPortEnterCritical+0x54>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d10e      	bne.n	800aee4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aec6:	4b0b      	ldr	r3, [pc, #44]	; (800aef4 <vPortEnterCritical+0x58>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <vPortEnterCritical+0x48>
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	e7fe      	b.n	800aee2 <vPortEnterCritical+0x46>
	}
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	20000118 	.word	0x20000118
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aefe:	4b11      	ldr	r3, [pc, #68]	; (800af44 <vPortExitCritical+0x4c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d109      	bne.n	800af1a <vPortExitCritical+0x22>
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	607b      	str	r3, [r7, #4]
 800af18:	e7fe      	b.n	800af18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800af1a:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <vPortExitCritical+0x4c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3b01      	subs	r3, #1
 800af20:	4a08      	ldr	r2, [pc, #32]	; (800af44 <vPortExitCritical+0x4c>)
 800af22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af24:	4b07      	ldr	r3, [pc, #28]	; (800af44 <vPortExitCritical+0x4c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <vPortExitCritical+0x3e>
 800af2c:	2300      	movs	r3, #0
 800af2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20000118 	.word	0x20000118
	...

0800af50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af50:	f3ef 8009 	mrs	r0, PSP
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <pxCurrentTCBConst>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	f01e 0f10 	tst.w	lr, #16
 800af60:	bf08      	it	eq
 800af62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	6010      	str	r0, [r2, #0]
 800af6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af74:	f380 8811 	msr	BASEPRI, r0
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f7ff fb26 	bl	800a5d0 <vTaskSwitchContext>
 800af84:	f04f 0000 	mov.w	r0, #0
 800af88:	f380 8811 	msr	BASEPRI, r0
 800af8c:	bc09      	pop	{r0, r3}
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	6808      	ldr	r0, [r1, #0]
 800af92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af96:	f01e 0f10 	tst.w	lr, #16
 800af9a:	bf08      	it	eq
 800af9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afa0:	f380 8809 	msr	PSP, r0
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst>:
 800afb0:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afd0:	f7ff fa42 	bl	800a458 <xTaskIncrementTick>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afda:	4b06      	ldr	r3, [pc, #24]	; (800aff4 <SysTick_Handler+0x3c>)
 800afdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe0:	601a      	str	r2, [r3, #0]
 800afe2:	2300      	movs	r3, #0
 800afe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800afec:	bf00      	nop
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
=======
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b086      	sub	sp, #24
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
 8018904:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	685b      	ldr	r3, [r3, #4]
 801890a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	091b      	lsrs	r3, r3, #4
 8018912:	b2db      	uxtb	r3, r3
 8018914:	2b04      	cmp	r3, #4
 8018916:	d004      	beq.n	8018922 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	f7f8 fe4d 	bl	80115b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801891e:	2300      	movs	r3, #0
 8018920:	e122      	b.n	8018b68 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8018922:	697b      	ldr	r3, [r7, #20]
 8018924:	781b      	ldrb	r3, [r3, #0]
 8018926:	b29b      	uxth	r3, r3
 8018928:	f003 030f 	and.w	r3, r3, #15
 801892c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801892e:	897b      	ldrh	r3, [r7, #10]
 8018930:	009b      	lsls	r3, r3, #2
 8018932:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018934:	697b      	ldr	r3, [r7, #20]
 8018936:	885b      	ldrh	r3, [r3, #2]
 8018938:	b29b      	uxth	r3, r3
 801893a:	4618      	mov	r0, r3
 801893c:	f7f7 fca2 	bl	8010284 <lwip_htons>
 8018940:	4603      	mov	r3, r0
 8018942:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	891b      	ldrh	r3, [r3, #8]
 8018948:	893a      	ldrh	r2, [r7, #8]
 801894a:	429a      	cmp	r2, r3
 801894c:	d204      	bcs.n	8018958 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801894e:	893b      	ldrh	r3, [r7, #8]
 8018950:	4619      	mov	r1, r3
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	f7f8 fcbc 	bl	80112d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	895b      	ldrh	r3, [r3, #10]
 801895c:	897a      	ldrh	r2, [r7, #10]
 801895e:	429a      	cmp	r2, r3
 8018960:	d807      	bhi.n	8018972 <ip4_input+0x76>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	891b      	ldrh	r3, [r3, #8]
 8018966:	893a      	ldrh	r2, [r7, #8]
 8018968:	429a      	cmp	r2, r3
 801896a:	d802      	bhi.n	8018972 <ip4_input+0x76>
 801896c:	897b      	ldrh	r3, [r7, #10]
 801896e:	2b13      	cmp	r3, #19
 8018970:	d804      	bhi.n	801897c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018972:	6878      	ldr	r0, [r7, #4]
 8018974:	f7f8 fe20 	bl	80115b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018978:	2300      	movs	r3, #0
 801897a:	e0f5      	b.n	8018b68 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	691b      	ldr	r3, [r3, #16]
 8018980:	4a7b      	ldr	r2, [pc, #492]	; (8018b70 <ip4_input+0x274>)
 8018982:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018984:	697b      	ldr	r3, [r7, #20]
 8018986:	68db      	ldr	r3, [r3, #12]
 8018988:	4a79      	ldr	r2, [pc, #484]	; (8018b70 <ip4_input+0x274>)
 801898a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801898c:	4b78      	ldr	r3, [pc, #480]	; (8018b70 <ip4_input+0x274>)
 801898e:	695b      	ldr	r3, [r3, #20]
 8018990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018994:	2be0      	cmp	r3, #224	; 0xe0
 8018996:	d112      	bne.n	80189be <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801899e:	f003 0301 	and.w	r3, r3, #1
 80189a2:	b2db      	uxtb	r3, r3
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d007      	beq.n	80189b8 <ip4_input+0xbc>
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	3304      	adds	r3, #4
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d002      	beq.n	80189b8 <ip4_input+0xbc>
      netif = inp;
 80189b2:	683b      	ldr	r3, [r7, #0]
 80189b4:	613b      	str	r3, [r7, #16]
 80189b6:	e041      	b.n	8018a3c <ip4_input+0x140>
    } else {
      netif = NULL;
 80189b8:	2300      	movs	r3, #0
 80189ba:	613b      	str	r3, [r7, #16]
 80189bc:	e03e      	b.n	8018a3c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80189be:	2301      	movs	r3, #1
 80189c0:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80189c6:	693b      	ldr	r3, [r7, #16]
 80189c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189cc:	f003 0301 	and.w	r3, r3, #1
 80189d0:	b2db      	uxtb	r3, r3
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d014      	beq.n	8018a00 <ip4_input+0x104>
 80189d6:	693b      	ldr	r3, [r7, #16]
 80189d8:	3304      	adds	r3, #4
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d00f      	beq.n	8018a00 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80189e0:	4b63      	ldr	r3, [pc, #396]	; (8018b70 <ip4_input+0x274>)
 80189e2:	695a      	ldr	r2, [r3, #20]
 80189e4:	693b      	ldr	r3, [r7, #16]
 80189e6:	3304      	adds	r3, #4
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	429a      	cmp	r2, r3
 80189ec:	d026      	beq.n	8018a3c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80189ee:	4b60      	ldr	r3, [pc, #384]	; (8018b70 <ip4_input+0x274>)
 80189f0:	695b      	ldr	r3, [r3, #20]
 80189f2:	6939      	ldr	r1, [r7, #16]
 80189f4:	4618      	mov	r0, r3
 80189f6:	f000 f991 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 80189fa:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d11d      	bne.n	8018a3c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d00d      	beq.n	8018a22 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8018a06:	4b5a      	ldr	r3, [pc, #360]	; (8018b70 <ip4_input+0x274>)
 8018a08:	695b      	ldr	r3, [r3, #20]
 8018a0a:	b2db      	uxtb	r3, r3
 8018a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8018a0e:	d102      	bne.n	8018a16 <ip4_input+0x11a>
          netif = NULL;
 8018a10:	2300      	movs	r3, #0
 8018a12:	613b      	str	r3, [r7, #16]
          break;
 8018a14:	e012      	b.n	8018a3c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8018a16:	2300      	movs	r3, #0
 8018a18:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8018a1a:	4b56      	ldr	r3, [pc, #344]	; (8018b74 <ip4_input+0x278>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	613b      	str	r3, [r7, #16]
 8018a20:	e002      	b.n	8018a28 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8018a28:	693a      	ldr	r2, [r7, #16]
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d102      	bne.n	8018a36 <ip4_input+0x13a>
        netif = netif->next;
 8018a30:	693b      	ldr	r3, [r7, #16]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d1c4      	bne.n	80189c6 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018a3c:	4b4c      	ldr	r3, [pc, #304]	; (8018b70 <ip4_input+0x274>)
 8018a3e:	691b      	ldr	r3, [r3, #16]
 8018a40:	6839      	ldr	r1, [r7, #0]
 8018a42:	4618      	mov	r0, r3
 8018a44:	f000 f96a 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d105      	bne.n	8018a5a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018a4e:	4b48      	ldr	r3, [pc, #288]	; (8018b70 <ip4_input+0x274>)
 8018a50:	691b      	ldr	r3, [r3, #16]
 8018a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018a56:	2be0      	cmp	r3, #224	; 0xe0
 8018a58:	d104      	bne.n	8018a64 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f7f8 fdac 	bl	80115b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018a60:	2300      	movs	r3, #0
 8018a62:	e081      	b.n	8018b68 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018a64:	693b      	ldr	r3, [r7, #16]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d104      	bne.n	8018a74 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f7f8 fda4 	bl	80115b8 <pbuf_free>
    return ERR_OK;
 8018a70:	2300      	movs	r3, #0
 8018a72:	e079      	b.n	8018b68 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018a74:	697b      	ldr	r3, [r7, #20]
 8018a76:	88db      	ldrh	r3, [r3, #6]
 8018a78:	b29b      	uxth	r3, r3
 8018a7a:	461a      	mov	r2, r3
 8018a7c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018a80:	4013      	ands	r3, r2
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d00b      	beq.n	8018a9e <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	f000 fc8e 	bl	80193a8 <ip4_reass>
 8018a8c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d101      	bne.n	8018a98 <ip4_input+0x19c>
      return ERR_OK;
 8018a94:	2300      	movs	r3, #0
 8018a96:	e067      	b.n	8018b68 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018a9e:	4a34      	ldr	r2, [pc, #208]	; (8018b70 <ip4_input+0x274>)
 8018aa0:	693b      	ldr	r3, [r7, #16]
 8018aa2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018aa4:	4a32      	ldr	r2, [pc, #200]	; (8018b70 <ip4_input+0x274>)
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018aaa:	4a31      	ldr	r2, [pc, #196]	; (8018b70 <ip4_input+0x274>)
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	781b      	ldrb	r3, [r3, #0]
 8018ab4:	b29b      	uxth	r3, r3
 8018ab6:	f003 030f 	and.w	r3, r3, #15
 8018aba:	b29b      	uxth	r3, r3
 8018abc:	009b      	lsls	r3, r3, #2
 8018abe:	b29a      	uxth	r2, r3
 8018ac0:	4b2b      	ldr	r3, [pc, #172]	; (8018b70 <ip4_input+0x274>)
 8018ac2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8018ac4:	897b      	ldrh	r3, [r7, #10]
 8018ac6:	425b      	negs	r3, r3
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	b21b      	sxth	r3, r3
 8018acc:	4619      	mov	r1, r3
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	f7f8 fd4e 	bl	8011570 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	7a5b      	ldrb	r3, [r3, #9]
 8018ad8:	2b06      	cmp	r3, #6
 8018ada:	d009      	beq.n	8018af0 <ip4_input+0x1f4>
 8018adc:	2b11      	cmp	r3, #17
 8018ade:	d002      	beq.n	8018ae6 <ip4_input+0x1ea>
 8018ae0:	2b01      	cmp	r3, #1
 8018ae2:	d00a      	beq.n	8018afa <ip4_input+0x1fe>
 8018ae4:	e00e      	b.n	8018b04 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8018ae6:	6839      	ldr	r1, [r7, #0]
 8018ae8:	6878      	ldr	r0, [r7, #4]
 8018aea:	f7fe fc0b 	bl	8017304 <udp_input>
      break;
 8018aee:	e028      	b.n	8018b42 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8018af0:	6839      	ldr	r1, [r7, #0]
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f7fa fc2a 	bl	801334c <tcp_input>
      break;
 8018af8:	e023      	b.n	8018b42 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8018afa:	6839      	ldr	r1, [r7, #0]
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f7ff fd05 	bl	801850c <icmp_input>
      break;
 8018b02:	e01e      	b.n	8018b42 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018b04:	4b1a      	ldr	r3, [pc, #104]	; (8018b70 <ip4_input+0x274>)
 8018b06:	695b      	ldr	r3, [r3, #20]
 8018b08:	6939      	ldr	r1, [r7, #16]
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	f000 f906 	bl	8018d1c <ip4_addr_isbroadcast_u32>
 8018b10:	4603      	mov	r3, r0
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d112      	bne.n	8018b3c <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018b16:	4b16      	ldr	r3, [pc, #88]	; (8018b70 <ip4_input+0x274>)
 8018b18:	695b      	ldr	r3, [r3, #20]
 8018b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018b1e:	2be0      	cmp	r3, #224	; 0xe0
 8018b20:	d00c      	beq.n	8018b3c <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8018b22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018b26:	4619      	mov	r1, r3
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f7f8 fd33 	bl	8011594 <pbuf_header_force>
        p->payload = iphdr;
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	697a      	ldr	r2, [r7, #20]
 8018b32:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018b34:	2102      	movs	r1, #2
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f7ff fdee 	bl	8018718 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8018b3c:	6878      	ldr	r0, [r7, #4]
 8018b3e:	f7f8 fd3b 	bl	80115b8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018b42:	4b0b      	ldr	r3, [pc, #44]	; (8018b70 <ip4_input+0x274>)
 8018b44:	2200      	movs	r2, #0
 8018b46:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018b48:	4b09      	ldr	r3, [pc, #36]	; (8018b70 <ip4_input+0x274>)
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018b4e:	4b08      	ldr	r3, [pc, #32]	; (8018b70 <ip4_input+0x274>)
 8018b50:	2200      	movs	r2, #0
 8018b52:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018b54:	4b06      	ldr	r3, [pc, #24]	; (8018b70 <ip4_input+0x274>)
 8018b56:	2200      	movs	r2, #0
 8018b58:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018b5a:	4b05      	ldr	r3, [pc, #20]	; (8018b70 <ip4_input+0x274>)
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018b60:	4b03      	ldr	r3, [pc, #12]	; (8018b70 <ip4_input+0x274>)
 8018b62:	2200      	movs	r2, #0
 8018b64:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018b66:	2300      	movs	r3, #0
}
 8018b68:	4618      	mov	r0, r3
 8018b6a:	3718      	adds	r7, #24
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd80      	pop	{r7, pc}
 8018b70:	20007648 	.word	0x20007648
 8018b74:	2000ab40 	.word	0x2000ab40

08018b78 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b08a      	sub	sp, #40	; 0x28
 8018b7c:	af04      	add	r7, sp, #16
 8018b7e:	60f8      	str	r0, [r7, #12]
 8018b80:	60b9      	str	r1, [r7, #8]
 8018b82:	607a      	str	r2, [r7, #4]
 8018b84:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d009      	beq.n	8018ba4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d003      	beq.n	8018b9e <ip4_output_if+0x26>
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d102      	bne.n	8018ba4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba0:	3304      	adds	r3, #4
 8018ba2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018ba4:	78fa      	ldrb	r2, [r7, #3]
 8018ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba8:	9302      	str	r3, [sp, #8]
 8018baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018bae:	9301      	str	r3, [sp, #4]
 8018bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018bb4:	9300      	str	r3, [sp, #0]
 8018bb6:	4613      	mov	r3, r2
 8018bb8:	687a      	ldr	r2, [r7, #4]
 8018bba:	6979      	ldr	r1, [r7, #20]
 8018bbc:	68f8      	ldr	r0, [r7, #12]
 8018bbe:	f000 f805 	bl	8018bcc <ip4_output_if_src>
 8018bc2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	3718      	adds	r7, #24
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}

08018bcc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b088      	sub	sp, #32
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	60f8      	str	r0, [r7, #12]
 8018bd4:	60b9      	str	r1, [r7, #8]
 8018bd6:	607a      	str	r2, [r7, #4]
 8018bd8:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	89db      	ldrh	r3, [r3, #14]
 8018bde:	2b01      	cmp	r3, #1
 8018be0:	d006      	beq.n	8018bf0 <ip4_output_if_src+0x24>
 8018be2:	4b48      	ldr	r3, [pc, #288]	; (8018d04 <ip4_output_if_src+0x138>)
 8018be4:	f240 3233 	movw	r2, #819	; 0x333
 8018be8:	4947      	ldr	r1, [pc, #284]	; (8018d08 <ip4_output_if_src+0x13c>)
 8018bea:	4848      	ldr	r0, [pc, #288]	; (8018d0c <ip4_output_if_src+0x140>)
 8018bec:	f001 ff50 	bl	801aa90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d060      	beq.n	8018cb8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018bf6:	2314      	movs	r3, #20
 8018bf8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8018bfa:	2114      	movs	r1, #20
 8018bfc:	68f8      	ldr	r0, [r7, #12]
 8018bfe:	f7f8 fcb7 	bl	8011570 <pbuf_header>
 8018c02:	4603      	mov	r3, r0
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d002      	beq.n	8018c0e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018c08:	f06f 0301 	mvn.w	r3, #1
 8018c0c:	e075      	b.n	8018cfa <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	685b      	ldr	r3, [r3, #4]
 8018c12:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	895b      	ldrh	r3, [r3, #10]
 8018c18:	2b13      	cmp	r3, #19
 8018c1a:	d806      	bhi.n	8018c2a <ip4_output_if_src+0x5e>
 8018c1c:	4b39      	ldr	r3, [pc, #228]	; (8018d04 <ip4_output_if_src+0x138>)
 8018c1e:	f240 3261 	movw	r2, #865	; 0x361
 8018c22:	493b      	ldr	r1, [pc, #236]	; (8018d10 <ip4_output_if_src+0x144>)
 8018c24:	4839      	ldr	r0, [pc, #228]	; (8018d0c <ip4_output_if_src+0x140>)
 8018c26:	f001 ff33 	bl	801aa90 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018c2a:	69fb      	ldr	r3, [r7, #28]
 8018c2c:	78fa      	ldrb	r2, [r7, #3]
 8018c2e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018c30:	69fb      	ldr	r3, [r7, #28]
 8018c32:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018c36:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	69fb      	ldr	r3, [r7, #28]
 8018c3e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018c40:	8b7b      	ldrh	r3, [r7, #26]
 8018c42:	089b      	lsrs	r3, r3, #2
 8018c44:	b29b      	uxth	r3, r3
 8018c46:	b2db      	uxtb	r3, r3
 8018c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c4c:	b2da      	uxtb	r2, r3
 8018c4e:	69fb      	ldr	r3, [r7, #28]
 8018c50:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018c52:	69fb      	ldr	r3, [r7, #28]
 8018c54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018c58:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	891b      	ldrh	r3, [r3, #8]
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7f7 fb10 	bl	8010284 <lwip_htons>
 8018c64:	4603      	mov	r3, r0
 8018c66:	461a      	mov	r2, r3
 8018c68:	69fb      	ldr	r3, [r7, #28]
 8018c6a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018c6c:	69fb      	ldr	r3, [r7, #28]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	719a      	strb	r2, [r3, #6]
 8018c72:	2200      	movs	r2, #0
 8018c74:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018c76:	4b27      	ldr	r3, [pc, #156]	; (8018d14 <ip4_output_if_src+0x148>)
 8018c78:	881b      	ldrh	r3, [r3, #0]
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f7f7 fb02 	bl	8010284 <lwip_htons>
 8018c80:	4603      	mov	r3, r0
 8018c82:	461a      	mov	r2, r3
 8018c84:	69fb      	ldr	r3, [r7, #28]
 8018c86:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018c88:	4b22      	ldr	r3, [pc, #136]	; (8018d14 <ip4_output_if_src+0x148>)
 8018c8a:	881b      	ldrh	r3, [r3, #0]
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	b29a      	uxth	r2, r3
 8018c90:	4b20      	ldr	r3, [pc, #128]	; (8018d14 <ip4_output_if_src+0x148>)
 8018c92:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018c94:	68bb      	ldr	r3, [r7, #8]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d104      	bne.n	8018ca4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018c9a:	4b1f      	ldr	r3, [pc, #124]	; (8018d18 <ip4_output_if_src+0x14c>)
 8018c9c:	681a      	ldr	r2, [r3, #0]
 8018c9e:	69fb      	ldr	r3, [r7, #28]
 8018ca0:	60da      	str	r2, [r3, #12]
 8018ca2:	e003      	b.n	8018cac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	69fb      	ldr	r3, [r7, #28]
 8018caa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018cac:	69fb      	ldr	r3, [r7, #28]
 8018cae:	2200      	movs	r2, #0
 8018cb0:	729a      	strb	r2, [r3, #10]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	72da      	strb	r2, [r3, #11]
 8018cb6:	e008      	b.n	8018cca <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018cbe:	69fb      	ldr	r3, [r7, #28]
 8018cc0:	691b      	ldr	r3, [r3, #16]
 8018cc2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018cc4:	f107 0314 	add.w	r3, r7, #20
 8018cc8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d00c      	beq.n	8018cec <ip4_output_if_src+0x120>
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	891a      	ldrh	r2, [r3, #8]
 8018cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d906      	bls.n	8018cec <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8018cde:	687a      	ldr	r2, [r7, #4]
 8018ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018ce2:	68f8      	ldr	r0, [r7, #12]
 8018ce4:	f000 fd0a 	bl	80196fc <ip4_frag>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	e006      	b.n	8018cfa <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cee:	695b      	ldr	r3, [r3, #20]
 8018cf0:	687a      	ldr	r2, [r7, #4]
 8018cf2:	68f9      	ldr	r1, [r7, #12]
 8018cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018cf6:	4798      	blx	r3
 8018cf8:	4603      	mov	r3, r0
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3720      	adds	r7, #32
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	0801dc48 	.word	0x0801dc48
 8018d08:	0801dc7c 	.word	0x0801dc7c
 8018d0c:	0801dc88 	.word	0x0801dc88
 8018d10:	0801dcb0 	.word	0x0801dcb0
 8018d14:	2000433a 	.word	0x2000433a
 8018d18:	0801e0d4 	.word	0x0801e0d4

08018d1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	b085      	sub	sp, #20
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018d30:	d002      	beq.n	8018d38 <ip4_addr_isbroadcast_u32+0x1c>
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d101      	bne.n	8018d3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018d38:	2301      	movs	r3, #1
 8018d3a:	e02a      	b.n	8018d92 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018d3c:	683b      	ldr	r3, [r7, #0]
 8018d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018d42:	f003 0302 	and.w	r3, r3, #2
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d101      	bne.n	8018d4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	e021      	b.n	8018d92 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	3304      	adds	r3, #4
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	687a      	ldr	r2, [r7, #4]
 8018d56:	429a      	cmp	r2, r3
 8018d58:	d101      	bne.n	8018d5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	e019      	b.n	8018d92 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018d5e:	68fa      	ldr	r2, [r7, #12]
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	3304      	adds	r3, #4
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	405a      	eors	r2, r3
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	3308      	adds	r3, #8
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	4013      	ands	r3, r2
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d10d      	bne.n	8018d90 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	3308      	adds	r3, #8
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	43da      	mvns	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018d80:	683b      	ldr	r3, [r7, #0]
 8018d82:	3308      	adds	r3, #8
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018d88:	429a      	cmp	r2, r3
 8018d8a:	d101      	bne.n	8018d90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018d8c:	2301      	movs	r3, #1
 8018d8e:	e000      	b.n	8018d92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018d90:	2300      	movs	r3, #0
  }
}
 8018d92:	4618      	mov	r0, r3
 8018d94:	3714      	adds	r7, #20
 8018d96:	46bd      	mov	sp, r7
 8018d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9c:	4770      	bx	lr
	...

08018da0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b084      	sub	sp, #16
 8018da4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018da6:	2300      	movs	r3, #0
 8018da8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018daa:	4b12      	ldr	r3, [pc, #72]	; (8018df4 <ip_reass_tmr+0x54>)
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018db0:	e018      	b.n	8018de4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	7fdb      	ldrb	r3, [r3, #31]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d00b      	beq.n	8018dd2 <ip_reass_tmr+0x32>
      r->timer--;
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	7fdb      	ldrb	r3, [r3, #31]
 8018dbe:	3b01      	subs	r3, #1
 8018dc0:	b2da      	uxtb	r2, r3
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	60fb      	str	r3, [r7, #12]
 8018dd0:	e008      	b.n	8018de4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018ddc:	68b9      	ldr	r1, [r7, #8]
 8018dde:	6878      	ldr	r0, [r7, #4]
 8018de0:	f000 f80a 	bl	8018df8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d1e3      	bne.n	8018db2 <ip_reass_tmr+0x12>
     }
   }
}
 8018dea:	bf00      	nop
 8018dec:	3710      	adds	r7, #16
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
 8018df2:	bf00      	nop
 8018df4:	2000433c 	.word	0x2000433c

08018df8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800affc:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <vPortSetupTimerInterrupt+0x34>)
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <vPortSetupTimerInterrupt+0x38>)
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <vPortSetupTimerInterrupt+0x3c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <vPortSetupTimerInterrupt+0x40>)
 800b00e:	fba2 2303 	umull	r2, r3, r2, r3
 800b012:	099b      	lsrs	r3, r3, #6
 800b014:	4a09      	ldr	r2, [pc, #36]	; (800b03c <vPortSetupTimerInterrupt+0x44>)
 800b016:	3b01      	subs	r3, #1
 800b018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b01a:	4b04      	ldr	r3, [pc, #16]	; (800b02c <vPortSetupTimerInterrupt+0x34>)
 800b01c:	2207      	movs	r2, #7
 800b01e:	601a      	str	r2, [r3, #0]
}
 800b020:	bf00      	nop
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	e000e010 	.word	0xe000e010
 800b030:	e000e018 	.word	0xe000e018
 800b034:	20000000 	.word	0x20000000
 800b038:	10624dd3 	.word	0x10624dd3
 800b03c:	e000e014 	.word	0xe000e014

0800b040 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b040:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b050 <vPortEnableVFP+0x10>
 800b044:	6801      	ldr	r1, [r0, #0]
 800b046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b04a:	6001      	str	r1, [r0, #0]
 800b04c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b04e:	bf00      	nop
 800b050:	e000ed88 	.word	0xe000ed88

0800b054 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b05a:	f3ef 8305 	mrs	r3, IPSR
 800b05e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b0f      	cmp	r3, #15
 800b064:	d913      	bls.n	800b08e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b066:	4a16      	ldr	r2, [pc, #88]	; (800b0c0 <vPortValidateInterruptPriority+0x6c>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b070:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <vPortValidateInterruptPriority+0x70>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	7afa      	ldrb	r2, [r7, #11]
 800b076:	429a      	cmp	r2, r3
 800b078:	d209      	bcs.n	800b08e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	607b      	str	r3, [r7, #4]
 800b08c:	e7fe      	b.n	800b08c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b08e:	4b0e      	ldr	r3, [pc, #56]	; (800b0c8 <vPortValidateInterruptPriority+0x74>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b096:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <vPortValidateInterruptPriority+0x78>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d909      	bls.n	800b0b2 <vPortValidateInterruptPriority+0x5e>
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	e7fe      	b.n	800b0b0 <vPortValidateInterruptPriority+0x5c>
	}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	e000e3f0 	.word	0xe000e3f0
 800b0c4:	20000588 	.word	0x20000588
 800b0c8:	e000ed0c 	.word	0xe000ed0c
 800b0cc:	2000058c 	.word	0x2000058c

0800b0d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	; 0x28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0dc:	f7ff f8f0 	bl	800a2c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0e0:	4b57      	ldr	r3, [pc, #348]	; (800b240 <pvPortMalloc+0x170>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0e8:	f000 f90c 	bl	800b304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0ec:	4b55      	ldr	r3, [pc, #340]	; (800b244 <pvPortMalloc+0x174>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f040 808c 	bne.w	800b212 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01c      	beq.n	800b13a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b100:	2208      	movs	r2, #8
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4413      	add	r3, r2
 800b106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f003 0307 	and.w	r3, r3, #7
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d013      	beq.n	800b13a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f023 0307 	bic.w	r3, r3, #7
 800b118:	3308      	adds	r3, #8
 800b11a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f003 0307 	and.w	r3, r3, #7
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <pvPortMalloc+0x6a>
 800b126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e7fe      	b.n	800b138 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d068      	beq.n	800b212 <pvPortMalloc+0x142>
 800b140:	4b41      	ldr	r3, [pc, #260]	; (800b248 <pvPortMalloc+0x178>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	429a      	cmp	r2, r3
 800b148:	d863      	bhi.n	800b212 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b14a:	4b40      	ldr	r3, [pc, #256]	; (800b24c <pvPortMalloc+0x17c>)
 800b14c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b14e:	4b3f      	ldr	r3, [pc, #252]	; (800b24c <pvPortMalloc+0x17c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b154:	e004      	b.n	800b160 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d903      	bls.n	800b172 <pvPortMalloc+0xa2>
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1f1      	bne.n	800b156 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b172:	4b33      	ldr	r3, [pc, #204]	; (800b240 <pvPortMalloc+0x170>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b178:	429a      	cmp	r2, r3
 800b17a:	d04a      	beq.n	800b212 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b17c:	6a3b      	ldr	r3, [r7, #32]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2208      	movs	r2, #8
 800b182:	4413      	add	r3, r2
 800b184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	6a3b      	ldr	r3, [r7, #32]
 800b18c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	1ad2      	subs	r2, r2, r3
 800b196:	2308      	movs	r3, #8
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d91e      	bls.n	800b1dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	f003 0307 	and.w	r3, r3, #7
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d009      	beq.n	800b1c4 <pvPortMalloc+0xf4>
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	613b      	str	r3, [r7, #16]
 800b1c2:	e7fe      	b.n	800b1c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	1ad2      	subs	r2, r2, r3
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1d6:	69b8      	ldr	r0, [r7, #24]
 800b1d8:	f000 f8f6 	bl	800b3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1dc:	4b1a      	ldr	r3, [pc, #104]	; (800b248 <pvPortMalloc+0x178>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	4a18      	ldr	r2, [pc, #96]	; (800b248 <pvPortMalloc+0x178>)
 800b1e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1ea:	4b17      	ldr	r3, [pc, #92]	; (800b248 <pvPortMalloc+0x178>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b18      	ldr	r3, [pc, #96]	; (800b250 <pvPortMalloc+0x180>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d203      	bcs.n	800b1fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1f6:	4b14      	ldr	r3, [pc, #80]	; (800b248 <pvPortMalloc+0x178>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a15      	ldr	r2, [pc, #84]	; (800b250 <pvPortMalloc+0x180>)
 800b1fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	4b10      	ldr	r3, [pc, #64]	; (800b244 <pvPortMalloc+0x174>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	431a      	orrs	r2, r3
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b212:	f7ff f863 	bl	800a2dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	f003 0307 	and.w	r3, r3, #7
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d009      	beq.n	800b234 <pvPortMalloc+0x164>
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	e7fe      	b.n	800b232 <pvPortMalloc+0x162>
	return pvReturn;
 800b234:	69fb      	ldr	r3, [r7, #28]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3728      	adds	r7, #40	; 0x28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20004198 	.word	0x20004198
 800b244:	200041a4 	.word	0x200041a4
 800b248:	2000419c 	.word	0x2000419c
 800b24c:	20004190 	.word	0x20004190
 800b250:	200041a0 	.word	0x200041a0

0800b254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d046      	beq.n	800b2f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b266:	2308      	movs	r3, #8
 800b268:	425b      	negs	r3, r3
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	4413      	add	r3, r2
 800b26e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	4b20      	ldr	r3, [pc, #128]	; (800b2fc <vPortFree+0xa8>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4013      	ands	r3, r2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <vPortFree+0x42>
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e7fe      	b.n	800b294 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d009      	beq.n	800b2b2 <vPortFree+0x5e>
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60bb      	str	r3, [r7, #8]
 800b2b0:	e7fe      	b.n	800b2b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <vPortFree+0xa8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d019      	beq.n	800b2f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d115      	bne.n	800b2f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <vPortFree+0xa8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	43db      	mvns	r3, r3
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2d8:	f7fe fff2 	bl	800a2c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <vPortFree+0xac>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	4a06      	ldr	r2, [pc, #24]	; (800b300 <vPortFree+0xac>)
 800b2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2ea:	6938      	ldr	r0, [r7, #16]
 800b2ec:	f000 f86c 	bl	800b3c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b2f0:	f7fe fff4 	bl	800a2dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2f4:	bf00      	nop
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	200041a4 	.word	0x200041a4
 800b300:	2000419c 	.word	0x2000419c

0800b304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/
=======
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b088      	sub	sp, #32
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]
 8018e00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018e02:	2300      	movs	r3, #0
 8018e04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018e06:	683a      	ldr	r2, [r7, #0]
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	d105      	bne.n	8018e1a <ip_reass_free_complete_datagram+0x22>
 8018e0e:	4b45      	ldr	r3, [pc, #276]	; (8018f24 <ip_reass_free_complete_datagram+0x12c>)
 8018e10:	22ab      	movs	r2, #171	; 0xab
 8018e12:	4945      	ldr	r1, [pc, #276]	; (8018f28 <ip_reass_free_complete_datagram+0x130>)
 8018e14:	4845      	ldr	r0, [pc, #276]	; (8018f2c <ip_reass_free_complete_datagram+0x134>)
 8018e16:	f001 fe3b 	bl	801aa90 <iprintf>
  if (prev != NULL) {
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d00a      	beq.n	8018e36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018e20:	683b      	ldr	r3, [r7, #0]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	687a      	ldr	r2, [r7, #4]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d005      	beq.n	8018e36 <ip_reass_free_complete_datagram+0x3e>
 8018e2a:	4b3e      	ldr	r3, [pc, #248]	; (8018f24 <ip_reass_free_complete_datagram+0x12c>)
 8018e2c:	22ad      	movs	r2, #173	; 0xad
 8018e2e:	4940      	ldr	r1, [pc, #256]	; (8018f30 <ip_reass_free_complete_datagram+0x138>)
 8018e30:	483e      	ldr	r0, [pc, #248]	; (8018f2c <ip_reass_free_complete_datagram+0x134>)
 8018e32:	f001 fe2d 	bl	801aa90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	685b      	ldr	r3, [r3, #4]
 8018e3a:	685b      	ldr	r3, [r3, #4]
 8018e3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	889b      	ldrh	r3, [r3, #4]
 8018e42:	b29b      	uxth	r3, r3
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d12a      	bne.n	8018e9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018e4e:	697b      	ldr	r3, [r7, #20]
 8018e50:	681a      	ldr	r2, [r3, #0]
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018e56:	69bb      	ldr	r3, [r7, #24]
 8018e58:	6858      	ldr	r0, [r3, #4]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	3308      	adds	r3, #8
 8018e5e:	2214      	movs	r2, #20
 8018e60:	4619      	mov	r1, r3
 8018e62:	f001 fd5a 	bl	801a91a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018e66:	2101      	movs	r1, #1
 8018e68:	69b8      	ldr	r0, [r7, #24]
 8018e6a:	f7ff fc65 	bl	8018738 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018e6e:	69b8      	ldr	r0, [r7, #24]
 8018e70:	f7f8 fc3c 	bl	80116ec <pbuf_clen>
 8018e74:	4603      	mov	r3, r0
 8018e76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018e78:	8bfa      	ldrh	r2, [r7, #30]
 8018e7a:	8a7b      	ldrh	r3, [r7, #18]
 8018e7c:	4413      	add	r3, r2
 8018e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018e82:	db05      	blt.n	8018e90 <ip_reass_free_complete_datagram+0x98>
 8018e84:	4b27      	ldr	r3, [pc, #156]	; (8018f24 <ip_reass_free_complete_datagram+0x12c>)
 8018e86:	22bc      	movs	r2, #188	; 0xbc
 8018e88:	492a      	ldr	r1, [pc, #168]	; (8018f34 <ip_reass_free_complete_datagram+0x13c>)
 8018e8a:	4828      	ldr	r0, [pc, #160]	; (8018f2c <ip_reass_free_complete_datagram+0x134>)
 8018e8c:	f001 fe00 	bl	801aa90 <iprintf>
    pbufs_freed += clen;
 8018e90:	8bfa      	ldrh	r2, [r7, #30]
 8018e92:	8a7b      	ldrh	r3, [r7, #18]
 8018e94:	4413      	add	r3, r2
 8018e96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018e98:	69b8      	ldr	r0, [r7, #24]
 8018e9a:	f7f8 fb8d 	bl	80115b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	685b      	ldr	r3, [r3, #4]
 8018ea2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018ea4:	e01f      	b.n	8018ee6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018ea6:	69bb      	ldr	r3, [r7, #24]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018eac:	69bb      	ldr	r3, [r7, #24]
 8018eae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018eb6:	68f8      	ldr	r0, [r7, #12]
 8018eb8:	f7f8 fc18 	bl	80116ec <pbuf_clen>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018ec0:	8bfa      	ldrh	r2, [r7, #30]
 8018ec2:	8a7b      	ldrh	r3, [r7, #18]
 8018ec4:	4413      	add	r3, r2
 8018ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018eca:	db05      	blt.n	8018ed8 <ip_reass_free_complete_datagram+0xe0>
 8018ecc:	4b15      	ldr	r3, [pc, #84]	; (8018f24 <ip_reass_free_complete_datagram+0x12c>)
 8018ece:	22cc      	movs	r2, #204	; 0xcc
 8018ed0:	4918      	ldr	r1, [pc, #96]	; (8018f34 <ip_reass_free_complete_datagram+0x13c>)
 8018ed2:	4816      	ldr	r0, [pc, #88]	; (8018f2c <ip_reass_free_complete_datagram+0x134>)
 8018ed4:	f001 fddc 	bl	801aa90 <iprintf>
    pbufs_freed += clen;
 8018ed8:	8bfa      	ldrh	r2, [r7, #30]
 8018eda:	8a7b      	ldrh	r3, [r7, #18]
 8018edc:	4413      	add	r3, r2
 8018ede:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018ee0:	68f8      	ldr	r0, [r7, #12]
 8018ee2:	f7f8 fb69 	bl	80115b8 <pbuf_free>
  while (p != NULL) {
 8018ee6:	69bb      	ldr	r3, [r7, #24]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d1dc      	bne.n	8018ea6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018eec:	6839      	ldr	r1, [r7, #0]
 8018eee:	6878      	ldr	r0, [r7, #4]
 8018ef0:	f000 f8c2 	bl	8019078 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8018ef4:	4b10      	ldr	r3, [pc, #64]	; (8018f38 <ip_reass_free_complete_datagram+0x140>)
 8018ef6:	881b      	ldrh	r3, [r3, #0]
 8018ef8:	8bfa      	ldrh	r2, [r7, #30]
 8018efa:	429a      	cmp	r2, r3
 8018efc:	d905      	bls.n	8018f0a <ip_reass_free_complete_datagram+0x112>
 8018efe:	4b09      	ldr	r3, [pc, #36]	; (8018f24 <ip_reass_free_complete_datagram+0x12c>)
 8018f00:	22d2      	movs	r2, #210	; 0xd2
 8018f02:	490e      	ldr	r1, [pc, #56]	; (8018f3c <ip_reass_free_complete_datagram+0x144>)
 8018f04:	4809      	ldr	r0, [pc, #36]	; (8018f2c <ip_reass_free_complete_datagram+0x134>)
 8018f06:	f001 fdc3 	bl	801aa90 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8018f0a:	4b0b      	ldr	r3, [pc, #44]	; (8018f38 <ip_reass_free_complete_datagram+0x140>)
 8018f0c:	881a      	ldrh	r2, [r3, #0]
 8018f0e:	8bfb      	ldrh	r3, [r7, #30]
 8018f10:	1ad3      	subs	r3, r2, r3
 8018f12:	b29a      	uxth	r2, r3
 8018f14:	4b08      	ldr	r3, [pc, #32]	; (8018f38 <ip_reass_free_complete_datagram+0x140>)
 8018f16:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018f18:	8bfb      	ldrh	r3, [r7, #30]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3720      	adds	r7, #32
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
 8018f22:	bf00      	nop
 8018f24:	0801dce0 	.word	0x0801dce0
 8018f28:	0801dd1c 	.word	0x0801dd1c
 8018f2c:	0801dd28 	.word	0x0801dd28
 8018f30:	0801dd50 	.word	0x0801dd50
 8018f34:	0801dd64 	.word	0x0801dd64
 8018f38:	20004340 	.word	0x20004340
 8018f3c:	0801dd84 	.word	0x0801dd84

08018f40 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b08a      	sub	sp, #40	; 0x28
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018f52:	2300      	movs	r3, #0
 8018f54:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018f56:	2300      	movs	r3, #0
 8018f58:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018f5e:	4b28      	ldr	r3, [pc, #160]	; (8019000 <ip_reass_remove_oldest_datagram+0xc0>)
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018f64:	e030      	b.n	8018fc8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f68:	695a      	ldr	r2, [r3, #20]
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	68db      	ldr	r3, [r3, #12]
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	d10c      	bne.n	8018f8c <ip_reass_remove_oldest_datagram+0x4c>
 8018f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f74:	699a      	ldr	r2, [r3, #24]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	691b      	ldr	r3, [r3, #16]
 8018f7a:	429a      	cmp	r2, r3
 8018f7c:	d106      	bne.n	8018f8c <ip_reass_remove_oldest_datagram+0x4c>
 8018f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f80:	899a      	ldrh	r2, [r3, #12]
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	889b      	ldrh	r3, [r3, #4]
 8018f86:	b29b      	uxth	r3, r3
 8018f88:	429a      	cmp	r2, r3
 8018f8a:	d014      	beq.n	8018fb6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018f8c:	693b      	ldr	r3, [r7, #16]
 8018f8e:	3301      	adds	r3, #1
 8018f90:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018f92:	6a3b      	ldr	r3, [r7, #32]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d104      	bne.n	8018fa2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f9a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018f9c:	69fb      	ldr	r3, [r7, #28]
 8018f9e:	61bb      	str	r3, [r7, #24]
 8018fa0:	e009      	b.n	8018fb6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fa4:	7fda      	ldrb	r2, [r3, #31]
 8018fa6:	6a3b      	ldr	r3, [r7, #32]
 8018fa8:	7fdb      	ldrb	r3, [r3, #31]
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d803      	bhi.n	8018fb6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018fb2:	69fb      	ldr	r3, [r7, #28]
 8018fb4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d001      	beq.n	8018fc2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fc0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d1cb      	bne.n	8018f66 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018fce:	6a3b      	ldr	r3, [r7, #32]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d008      	beq.n	8018fe6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018fd4:	69b9      	ldr	r1, [r7, #24]
 8018fd6:	6a38      	ldr	r0, [r7, #32]
 8018fd8:	f7ff ff0e 	bl	8018df8 <ip_reass_free_complete_datagram>
 8018fdc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018fde:	697a      	ldr	r2, [r7, #20]
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	4413      	add	r3, r2
 8018fe4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018fe6:	697a      	ldr	r2, [r7, #20]
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	429a      	cmp	r2, r3
 8018fec:	da02      	bge.n	8018ff4 <ip_reass_remove_oldest_datagram+0xb4>
 8018fee:	693b      	ldr	r3, [r7, #16]
 8018ff0:	2b01      	cmp	r3, #1
 8018ff2:	dcac      	bgt.n	8018f4e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018ff4:	697b      	ldr	r3, [r7, #20]
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	3728      	adds	r7, #40	; 0x28
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}
 8018ffe:	bf00      	nop
 8019000:	2000433c 	.word	0x2000433c

08019004 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b084      	sub	sp, #16
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801900e:	2004      	movs	r0, #4
 8019010:	f7f7 fd26 	bl	8010a60 <memp_malloc>
 8019014:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d110      	bne.n	801903e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801901c:	6839      	ldr	r1, [r7, #0]
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f7ff ff8e 	bl	8018f40 <ip_reass_remove_oldest_datagram>
 8019024:	4602      	mov	r2, r0
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	4293      	cmp	r3, r2
 801902a:	dc03      	bgt.n	8019034 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801902c:	2004      	movs	r0, #4
 801902e:	f7f7 fd17 	bl	8010a60 <memp_malloc>
 8019032:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d101      	bne.n	801903e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801903a:	2300      	movs	r3, #0
 801903c:	e016      	b.n	801906c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801903e:	2220      	movs	r2, #32
 8019040:	2100      	movs	r1, #0
 8019042:	68f8      	ldr	r0, [r7, #12]
 8019044:	f001 fc74 	bl	801a930 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	2203      	movs	r2, #3
 801904c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801904e:	4b09      	ldr	r3, [pc, #36]	; (8019074 <ip_reass_enqueue_new_datagram+0x70>)
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019056:	4a07      	ldr	r2, [pc, #28]	; (8019074 <ip_reass_enqueue_new_datagram+0x70>)
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	3308      	adds	r3, #8
 8019060:	2214      	movs	r2, #20
 8019062:	6879      	ldr	r1, [r7, #4]
 8019064:	4618      	mov	r0, r3
 8019066:	f001 fc58 	bl	801a91a <memcpy>
  return ipr;
 801906a:	68fb      	ldr	r3, [r7, #12]
}
 801906c:	4618      	mov	r0, r3
 801906e:	3710      	adds	r7, #16
 8019070:	46bd      	mov	sp, r7
 8019072:	bd80      	pop	{r7, pc}
 8019074:	2000433c 	.word	0x2000433c

08019078 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b082      	sub	sp, #8
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019082:	4b10      	ldr	r3, [pc, #64]	; (80190c4 <ip_reass_dequeue_datagram+0x4c>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	687a      	ldr	r2, [r7, #4]
 8019088:	429a      	cmp	r2, r3
 801908a:	d104      	bne.n	8019096 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	4a0c      	ldr	r2, [pc, #48]	; (80190c4 <ip_reass_dequeue_datagram+0x4c>)
 8019092:	6013      	str	r3, [r2, #0]
 8019094:	e00d      	b.n	80190b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d106      	bne.n	80190aa <ip_reass_dequeue_datagram+0x32>
 801909c:	4b0a      	ldr	r3, [pc, #40]	; (80190c8 <ip_reass_dequeue_datagram+0x50>)
 801909e:	f240 1245 	movw	r2, #325	; 0x145
 80190a2:	490a      	ldr	r1, [pc, #40]	; (80190cc <ip_reass_dequeue_datagram+0x54>)
 80190a4:	480a      	ldr	r0, [pc, #40]	; (80190d0 <ip_reass_dequeue_datagram+0x58>)
 80190a6:	f001 fcf3 	bl	801aa90 <iprintf>
    prev->next = ipr->next;
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681a      	ldr	r2, [r3, #0]
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80190b2:	6879      	ldr	r1, [r7, #4]
 80190b4:	2004      	movs	r0, #4
 80190b6:	f7f7 fd25 	bl	8010b04 <memp_free>
}
 80190ba:	bf00      	nop
 80190bc:	3708      	adds	r7, #8
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd80      	pop	{r7, pc}
 80190c2:	bf00      	nop
 80190c4:	2000433c 	.word	0x2000433c
 80190c8:	0801dce0 	.word	0x0801dce0
 80190cc:	0801dda0 	.word	0x0801dda0
 80190d0:	0801dd28 	.word	0x0801dd28

080190d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b08c      	sub	sp, #48	; 0x30
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	60b9      	str	r1, [r7, #8]
 80190de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80190e0:	2300      	movs	r3, #0
 80190e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80190e4:	2301      	movs	r3, #1
 80190e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80190e8:	68bb      	ldr	r3, [r7, #8]
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80190ee:	69fb      	ldr	r3, [r7, #28]
 80190f0:	885b      	ldrh	r3, [r3, #2]
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7f7 f8c5 	bl	8010284 <lwip_htons>
 80190fa:	4603      	mov	r3, r0
 80190fc:	461a      	mov	r2, r3
 80190fe:	69fb      	ldr	r3, [r7, #28]
 8019100:	781b      	ldrb	r3, [r3, #0]
 8019102:	b29b      	uxth	r3, r3
 8019104:	f003 030f 	and.w	r3, r3, #15
 8019108:	b29b      	uxth	r3, r3
 801910a:	009b      	lsls	r3, r3, #2
 801910c:	b29b      	uxth	r3, r3
 801910e:	1ad3      	subs	r3, r2, r3
 8019110:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8019112:	69fb      	ldr	r3, [r7, #28]
 8019114:	88db      	ldrh	r3, [r3, #6]
 8019116:	b29b      	uxth	r3, r3
 8019118:	4618      	mov	r0, r3
 801911a:	f7f7 f8b3 	bl	8010284 <lwip_htons>
 801911e:	4603      	mov	r3, r0
 8019120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019124:	b29b      	uxth	r3, r3
 8019126:	00db      	lsls	r3, r3, #3
 8019128:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801912a:	68bb      	ldr	r3, [r7, #8]
 801912c:	685b      	ldr	r3, [r3, #4]
 801912e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019132:	2200      	movs	r2, #0
 8019134:	701a      	strb	r2, [r3, #0]
 8019136:	2200      	movs	r2, #0
 8019138:	705a      	strb	r2, [r3, #1]
 801913a:	2200      	movs	r2, #0
 801913c:	709a      	strb	r2, [r3, #2]
 801913e:	2200      	movs	r2, #0
 8019140:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019144:	8b3a      	ldrh	r2, [r7, #24]
 8019146:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8019148:	8b3a      	ldrh	r2, [r7, #24]
 801914a:	8b7b      	ldrh	r3, [r7, #26]
 801914c:	4413      	add	r3, r2
 801914e:	b29a      	uxth	r2, r3
 8019150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019152:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	685b      	ldr	r3, [r3, #4]
 8019158:	627b      	str	r3, [r7, #36]	; 0x24
 801915a:	e061      	b.n	8019220 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915e:	685b      	ldr	r3, [r3, #4]
 8019160:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8019162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019164:	889b      	ldrh	r3, [r3, #4]
 8019166:	b29a      	uxth	r2, r3
 8019168:	697b      	ldr	r3, [r7, #20]
 801916a:	889b      	ldrh	r3, [r3, #4]
 801916c:	b29b      	uxth	r3, r3
 801916e:	429a      	cmp	r2, r3
 8019170:	d232      	bcs.n	80191d8 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019176:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917a:	2b00      	cmp	r3, #0
 801917c:	d01f      	beq.n	80191be <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019180:	889b      	ldrh	r3, [r3, #4]
 8019182:	b29a      	uxth	r2, r3
 8019184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019186:	88db      	ldrh	r3, [r3, #6]
 8019188:	b29b      	uxth	r3, r3
 801918a:	429a      	cmp	r2, r3
 801918c:	f0c0 80e3 	bcc.w	8019356 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8019190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019192:	88db      	ldrh	r3, [r3, #6]
 8019194:	b29a      	uxth	r2, r3
 8019196:	697b      	ldr	r3, [r7, #20]
 8019198:	889b      	ldrh	r3, [r3, #4]
 801919a:	b29b      	uxth	r3, r3
 801919c:	429a      	cmp	r2, r3
 801919e:	f200 80da 	bhi.w	8019356 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80191a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191a4:	68ba      	ldr	r2, [r7, #8]
 80191a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80191a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191aa:	88db      	ldrh	r3, [r3, #6]
 80191ac:	b29a      	uxth	r2, r3
 80191ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191b0:	889b      	ldrh	r3, [r3, #4]
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	429a      	cmp	r2, r3
 80191b6:	d037      	beq.n	8019228 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80191b8:	2300      	movs	r3, #0
 80191ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80191bc:	e034      	b.n	8019228 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80191be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191c0:	88db      	ldrh	r3, [r3, #6]
 80191c2:	b29a      	uxth	r2, r3
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	889b      	ldrh	r3, [r3, #4]
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	429a      	cmp	r2, r3
 80191cc:	f200 80c5 	bhi.w	801935a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	68ba      	ldr	r2, [r7, #8]
 80191d4:	605a      	str	r2, [r3, #4]
      break;
 80191d6:	e027      	b.n	8019228 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80191d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191da:	889b      	ldrh	r3, [r3, #4]
 80191dc:	b29a      	uxth	r2, r3
 80191de:	697b      	ldr	r3, [r7, #20]
 80191e0:	889b      	ldrh	r3, [r3, #4]
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	429a      	cmp	r2, r3
 80191e6:	f000 80ba 	beq.w	801935e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80191ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ec:	889b      	ldrh	r3, [r3, #4]
 80191ee:	b29a      	uxth	r2, r3
 80191f0:	697b      	ldr	r3, [r7, #20]
 80191f2:	88db      	ldrh	r3, [r3, #6]
 80191f4:	b29b      	uxth	r3, r3
 80191f6:	429a      	cmp	r2, r3
 80191f8:	f0c0 80b3 	bcc.w	8019362 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80191fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d009      	beq.n	8019216 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8019202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019204:	88db      	ldrh	r3, [r3, #6]
 8019206:	b29a      	uxth	r2, r3
 8019208:	697b      	ldr	r3, [r7, #20]
 801920a:	889b      	ldrh	r3, [r3, #4]
 801920c:	b29b      	uxth	r3, r3
 801920e:	429a      	cmp	r2, r3
 8019210:	d001      	beq.n	8019216 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019212:	2300      	movs	r3, #0
 8019214:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019216:	697b      	ldr	r3, [r7, #20]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801921c:	697b      	ldr	r3, [r7, #20]
 801921e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019222:	2b00      	cmp	r3, #0
 8019224:	d19a      	bne.n	801915c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8019226:	e000      	b.n	801922a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8019228:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801922c:	2b00      	cmp	r3, #0
 801922e:	d12d      	bne.n	801928c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8019230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019232:	2b00      	cmp	r3, #0
 8019234:	d01c      	beq.n	8019270 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019238:	88db      	ldrh	r3, [r3, #6]
 801923a:	b29a      	uxth	r2, r3
 801923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801923e:	889b      	ldrh	r3, [r3, #4]
 8019240:	b29b      	uxth	r3, r3
 8019242:	429a      	cmp	r2, r3
 8019244:	d906      	bls.n	8019254 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8019246:	4b51      	ldr	r3, [pc, #324]	; (801938c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019248:	f240 12ab 	movw	r2, #427	; 0x1ab
 801924c:	4950      	ldr	r1, [pc, #320]	; (8019390 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801924e:	4851      	ldr	r0, [pc, #324]	; (8019394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019250:	f001 fc1e 	bl	801aa90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019256:	68ba      	ldr	r2, [r7, #8]
 8019258:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801925c:	88db      	ldrh	r3, [r3, #6]
 801925e:	b29a      	uxth	r2, r3
 8019260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019262:	889b      	ldrh	r3, [r3, #4]
 8019264:	b29b      	uxth	r3, r3
 8019266:	429a      	cmp	r2, r3
 8019268:	d010      	beq.n	801928c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801926a:	2300      	movs	r3, #0
 801926c:	623b      	str	r3, [r7, #32]
 801926e:	e00d      	b.n	801928c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	685b      	ldr	r3, [r3, #4]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d006      	beq.n	8019286 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8019278:	4b44      	ldr	r3, [pc, #272]	; (801938c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801927a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801927e:	4946      	ldr	r1, [pc, #280]	; (8019398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019280:	4844      	ldr	r0, [pc, #272]	; (8019394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019282:	f001 fc05 	bl	801aa90 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	68ba      	ldr	r2, [r7, #8]
 801928a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d105      	bne.n	801929e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	7f9b      	ldrb	r3, [r3, #30]
 8019296:	f003 0301 	and.w	r3, r3, #1
 801929a:	2b00      	cmp	r3, #0
 801929c:	d059      	beq.n	8019352 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801929e:	6a3b      	ldr	r3, [r7, #32]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d04f      	beq.n	8019344 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d006      	beq.n	80192ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	685b      	ldr	r3, [r3, #4]
 80192b0:	685b      	ldr	r3, [r3, #4]
 80192b2:	889b      	ldrh	r3, [r3, #4]
 80192b4:	b29b      	uxth	r3, r3
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d002      	beq.n	80192c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80192ba:	2300      	movs	r3, #0
 80192bc:	623b      	str	r3, [r7, #32]
 80192be:	e041      	b.n	8019344 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80192c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80192c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80192ca:	e012      	b.n	80192f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80192cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ce:	685b      	ldr	r3, [r3, #4]
 80192d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80192d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d4:	88db      	ldrh	r3, [r3, #6]
 80192d6:	b29a      	uxth	r2, r3
 80192d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192da:	889b      	ldrh	r3, [r3, #4]
 80192dc:	b29b      	uxth	r3, r3
 80192de:	429a      	cmp	r2, r3
 80192e0:	d002      	beq.n	80192e8 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80192e2:	2300      	movs	r3, #0
 80192e4:	623b      	str	r3, [r7, #32]
            break;
 80192e6:	e007      	b.n	80192f8 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80192e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80192ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80192f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d1e9      	bne.n	80192cc <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80192f8:	6a3b      	ldr	r3, [r7, #32]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d022      	beq.n	8019344 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	685b      	ldr	r3, [r3, #4]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d106      	bne.n	8019314 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8019306:	4b21      	ldr	r3, [pc, #132]	; (801938c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019308:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801930c:	4923      	ldr	r1, [pc, #140]	; (801939c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801930e:	4821      	ldr	r0, [pc, #132]	; (8019394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019310:	f001 fbbe 	bl	801aa90 <iprintf>
          LWIP_ASSERT("sanity check",
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	685b      	ldr	r3, [r3, #4]
 8019318:	685b      	ldr	r3, [r3, #4]
 801931a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801931c:	429a      	cmp	r2, r3
 801931e:	d106      	bne.n	801932e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8019320:	4b1a      	ldr	r3, [pc, #104]	; (801938c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019322:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8019326:	491d      	ldr	r1, [pc, #116]	; (801939c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019328:	481a      	ldr	r0, [pc, #104]	; (8019394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801932a:	f001 fbb1 	bl	801aa90 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d006      	beq.n	8019344 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8019336:	4b15      	ldr	r3, [pc, #84]	; (801938c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019338:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801933c:	4918      	ldr	r1, [pc, #96]	; (80193a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801933e:	4815      	ldr	r0, [pc, #84]	; (8019394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019340:	f001 fba6 	bl	801aa90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019344:	6a3b      	ldr	r3, [r7, #32]
 8019346:	2b00      	cmp	r3, #0
 8019348:	bf14      	ite	ne
 801934a:	2301      	movne	r3, #1
 801934c:	2300      	moveq	r3, #0
 801934e:	b2db      	uxtb	r3, r3
 8019350:	e018      	b.n	8019384 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019352:	2300      	movs	r3, #0
 8019354:	e016      	b.n	8019384 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8019356:	bf00      	nop
 8019358:	e004      	b.n	8019364 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801935a:	bf00      	nop
 801935c:	e002      	b.n	8019364 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801935e:	bf00      	nop
 8019360:	e000      	b.n	8019364 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8019362:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8019364:	68b8      	ldr	r0, [r7, #8]
 8019366:	f7f8 f9c1 	bl	80116ec <pbuf_clen>
 801936a:	4603      	mov	r3, r0
 801936c:	461a      	mov	r2, r3
 801936e:	4b0d      	ldr	r3, [pc, #52]	; (80193a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019370:	881b      	ldrh	r3, [r3, #0]
 8019372:	1a9b      	subs	r3, r3, r2
 8019374:	b29a      	uxth	r2, r3
 8019376:	4b0b      	ldr	r3, [pc, #44]	; (80193a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019378:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801937a:	68b8      	ldr	r0, [r7, #8]
 801937c:	f7f8 f91c 	bl	80115b8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8019384:	4618      	mov	r0, r3
 8019386:	3730      	adds	r7, #48	; 0x30
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	0801dce0 	.word	0x0801dce0
 8019390:	0801ddbc 	.word	0x0801ddbc
 8019394:	0801dd28 	.word	0x0801dd28
 8019398:	0801dddc 	.word	0x0801dddc
 801939c:	0801de14 	.word	0x0801de14
 80193a0:	0801de24 	.word	0x0801de24
 80193a4:	20004340 	.word	0x20004340

080193a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b08e      	sub	sp, #56	; 0x38
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80193b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b8:	781b      	ldrb	r3, [r3, #0]
 80193ba:	f003 030f 	and.w	r3, r3, #15
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	2b14      	cmp	r3, #20
 80193c2:	f040 8131 	bne.w	8019628 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80193c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c8:	88db      	ldrh	r3, [r3, #6]
 80193ca:	b29b      	uxth	r3, r3
 80193cc:	4618      	mov	r0, r3
 80193ce:	f7f6 ff59 	bl	8010284 <lwip_htons>
 80193d2:	4603      	mov	r3, r0
 80193d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80193d8:	b29b      	uxth	r3, r3
 80193da:	00db      	lsls	r3, r3, #3
 80193dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80193de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e0:	885b      	ldrh	r3, [r3, #2]
 80193e2:	b29b      	uxth	r3, r3
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7f6 ff4d 	bl	8010284 <lwip_htons>
 80193ea:	4603      	mov	r3, r0
 80193ec:	461a      	mov	r2, r3
 80193ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f0:	781b      	ldrb	r3, [r3, #0]
 80193f2:	b29b      	uxth	r3, r3
 80193f4:	f003 030f 	and.w	r3, r3, #15
 80193f8:	b29b      	uxth	r3, r3
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	1ad3      	subs	r3, r2, r3
 8019400:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019402:	6878      	ldr	r0, [r7, #4]
 8019404:	f7f8 f972 	bl	80116ec <pbuf_clen>
 8019408:	4603      	mov	r3, r0
 801940a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801940c:	4b8d      	ldr	r3, [pc, #564]	; (8019644 <ip4_reass+0x29c>)
 801940e:	881b      	ldrh	r3, [r3, #0]
 8019410:	461a      	mov	r2, r3
 8019412:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019414:	4413      	add	r3, r2
 8019416:	2b0a      	cmp	r3, #10
 8019418:	dd10      	ble.n	801943c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801941a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801941c:	4619      	mov	r1, r3
 801941e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019420:	f7ff fd8e 	bl	8018f40 <ip_reass_remove_oldest_datagram>
 8019424:	4603      	mov	r3, r0
 8019426:	2b00      	cmp	r3, #0
 8019428:	f000 8100 	beq.w	801962c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801942c:	4b85      	ldr	r3, [pc, #532]	; (8019644 <ip4_reass+0x29c>)
 801942e:	881b      	ldrh	r3, [r3, #0]
 8019430:	461a      	mov	r2, r3
 8019432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019434:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019436:	2b0a      	cmp	r3, #10
 8019438:	f300 80f8 	bgt.w	801962c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801943c:	4b82      	ldr	r3, [pc, #520]	; (8019648 <ip4_reass+0x2a0>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	633b      	str	r3, [r7, #48]	; 0x30
 8019442:	e015      	b.n	8019470 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019446:	695a      	ldr	r2, [r3, #20]
 8019448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944a:	68db      	ldr	r3, [r3, #12]
 801944c:	429a      	cmp	r2, r3
 801944e:	d10c      	bne.n	801946a <ip4_reass+0xc2>
 8019450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019452:	699a      	ldr	r2, [r3, #24]
 8019454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019456:	691b      	ldr	r3, [r3, #16]
 8019458:	429a      	cmp	r2, r3
 801945a:	d106      	bne.n	801946a <ip4_reass+0xc2>
 801945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801945e:	899a      	ldrh	r2, [r3, #12]
 8019460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019462:	889b      	ldrh	r3, [r3, #4]
 8019464:	b29b      	uxth	r3, r3
 8019466:	429a      	cmp	r2, r3
 8019468:	d006      	beq.n	8019478 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	633b      	str	r3, [r7, #48]	; 0x30
 8019470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019472:	2b00      	cmp	r3, #0
 8019474:	d1e6      	bne.n	8019444 <ip4_reass+0x9c>
 8019476:	e000      	b.n	801947a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019478:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801947c:	2b00      	cmp	r3, #0
 801947e:	d109      	bne.n	8019494 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019482:	4619      	mov	r1, r3
 8019484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019486:	f7ff fdbd 	bl	8019004 <ip_reass_enqueue_new_datagram>
 801948a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801948e:	2b00      	cmp	r3, #0
 8019490:	d11c      	bne.n	80194cc <ip4_reass+0x124>
      goto nullreturn;
 8019492:	e0ce      	b.n	8019632 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019496:	88db      	ldrh	r3, [r3, #6]
 8019498:	b29b      	uxth	r3, r3
 801949a:	4618      	mov	r0, r3
 801949c:	f7f6 fef2 	bl	8010284 <lwip_htons>
 80194a0:	4603      	mov	r3, r0
 80194a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d110      	bne.n	80194cc <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80194aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ac:	89db      	ldrh	r3, [r3, #14]
 80194ae:	4618      	mov	r0, r3
 80194b0:	f7f6 fee8 	bl	8010284 <lwip_htons>
 80194b4:	4603      	mov	r3, r0
 80194b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d006      	beq.n	80194cc <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80194be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194c0:	3308      	adds	r3, #8
 80194c2:	2214      	movs	r2, #20
 80194c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80194c6:	4618      	mov	r0, r3
 80194c8:	f001 fa27 	bl	801a91a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80194cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ce:	88db      	ldrh	r3, [r3, #6]
 80194d0:	b29b      	uxth	r3, r3
 80194d2:	f003 0320 	and.w	r3, r3, #32
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	bf0c      	ite	eq
 80194da:	2301      	moveq	r3, #1
 80194dc:	2300      	movne	r3, #0
 80194de:	b2db      	uxtb	r3, r3
 80194e0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80194e2:	69fb      	ldr	r3, [r7, #28]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d00e      	beq.n	8019506 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80194e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80194ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194ec:	4413      	add	r3, r2
 80194ee:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80194f0:	8b7a      	ldrh	r2, [r7, #26]
 80194f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80194f4:	429a      	cmp	r2, r3
 80194f6:	f0c0 8099 	bcc.w	801962c <ip4_reass+0x284>
 80194fa:	8b7b      	ldrh	r3, [r7, #26]
 80194fc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019500:	4293      	cmp	r3, r2
 8019502:	f200 8093 	bhi.w	801962c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019506:	69fa      	ldr	r2, [r7, #28]
 8019508:	6879      	ldr	r1, [r7, #4]
 801950a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801950c:	f7ff fde2 	bl	80190d4 <ip_reass_chain_frag_into_datagram_and_validate>
 8019510:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019512:	697b      	ldr	r3, [r7, #20]
 8019514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019518:	f000 808a 	beq.w	8019630 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801951c:	4b49      	ldr	r3, [pc, #292]	; (8019644 <ip4_reass+0x29c>)
 801951e:	881a      	ldrh	r2, [r3, #0]
 8019520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019522:	4413      	add	r3, r2
 8019524:	b29a      	uxth	r2, r3
 8019526:	4b47      	ldr	r3, [pc, #284]	; (8019644 <ip4_reass+0x29c>)
 8019528:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d00d      	beq.n	801954c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8019530:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019534:	4413      	add	r3, r2
 8019536:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801953a:	8a7a      	ldrh	r2, [r7, #18]
 801953c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019540:	7f9b      	ldrb	r3, [r3, #30]
 8019542:	f043 0301 	orr.w	r3, r3, #1
 8019546:	b2da      	uxtb	r2, r3
 8019548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801954a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801954c:	697b      	ldr	r3, [r7, #20]
 801954e:	2b01      	cmp	r3, #1
 8019550:	d168      	bne.n	8019624 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8019552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019554:	8b9b      	ldrh	r3, [r3, #28]
 8019556:	3314      	adds	r3, #20
 8019558:	b29a      	uxth	r2, r3
 801955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801955c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019560:	685b      	ldr	r3, [r3, #4]
 8019562:	685b      	ldr	r3, [r3, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8019568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	685b      	ldr	r3, [r3, #4]
 801956e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019572:	3308      	adds	r3, #8
 8019574:	2214      	movs	r2, #20
 8019576:	4619      	mov	r1, r3
 8019578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801957a:	f001 f9ce 	bl	801a91a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019580:	8b9b      	ldrh	r3, [r3, #28]
 8019582:	4618      	mov	r0, r3
 8019584:	f7f6 fe7e 	bl	8010284 <lwip_htons>
 8019588:	4603      	mov	r3, r0
 801958a:	461a      	mov	r2, r3
 801958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801958e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019592:	2200      	movs	r2, #0
 8019594:	719a      	strb	r2, [r3, #6]
 8019596:	2200      	movs	r2, #0
 8019598:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801959c:	2200      	movs	r2, #0
 801959e:	729a      	strb	r2, [r3, #10]
 80195a0:	2200      	movs	r2, #0
 80195a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80195a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195a6:	685b      	ldr	r3, [r3, #4]
 80195a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80195aa:	e00e      	b.n	80195ca <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80195ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80195b2:	f06f 0113 	mvn.w	r1, #19
 80195b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80195b8:	f7f7 ffda 	bl	8011570 <pbuf_header>
      pbuf_cat(p, r);
 80195bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80195be:	6878      	ldr	r0, [r7, #4]
 80195c0:	f7f8 f8d4 	bl	801176c <pbuf_cat>
      r = iprh->next_pbuf;
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80195ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d1ed      	bne.n	80195ac <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80195d0:	4b1d      	ldr	r3, [pc, #116]	; (8019648 <ip4_reass+0x2a0>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d102      	bne.n	80195e0 <ip4_reass+0x238>
      ipr_prev = NULL;
 80195da:	2300      	movs	r3, #0
 80195dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80195de:	e010      	b.n	8019602 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80195e0:	4b19      	ldr	r3, [pc, #100]	; (8019648 <ip4_reass+0x2a0>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80195e6:	e007      	b.n	80195f8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80195e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195ee:	429a      	cmp	r2, r3
 80195f0:	d006      	beq.n	8019600 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80195f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80195f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d1f4      	bne.n	80195e8 <ip4_reass+0x240>
 80195fe:	e000      	b.n	8019602 <ip4_reass+0x25a>
          break;
 8019600:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019606:	f7ff fd37 	bl	8019078 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801960a:	6878      	ldr	r0, [r7, #4]
 801960c:	f7f8 f86e 	bl	80116ec <pbuf_clen>
 8019610:	4603      	mov	r3, r0
 8019612:	461a      	mov	r2, r3
 8019614:	4b0b      	ldr	r3, [pc, #44]	; (8019644 <ip4_reass+0x29c>)
 8019616:	881b      	ldrh	r3, [r3, #0]
 8019618:	1a9b      	subs	r3, r3, r2
 801961a:	b29a      	uxth	r2, r3
 801961c:	4b09      	ldr	r3, [pc, #36]	; (8019644 <ip4_reass+0x29c>)
 801961e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	e00a      	b.n	801963a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019624:	2300      	movs	r3, #0
 8019626:	e008      	b.n	801963a <ip4_reass+0x292>
    goto nullreturn;
 8019628:	bf00      	nop
 801962a:	e002      	b.n	8019632 <ip4_reass+0x28a>

nullreturn:
 801962c:	bf00      	nop
 801962e:	e000      	b.n	8019632 <ip4_reass+0x28a>
    goto nullreturn;
 8019630:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019632:	6878      	ldr	r0, [r7, #4]
 8019634:	f7f7 ffc0 	bl	80115b8 <pbuf_free>
  return NULL;
 8019638:	2300      	movs	r3, #0
}
 801963a:	4618      	mov	r0, r3
 801963c:	3738      	adds	r7, #56	; 0x38
 801963e:	46bd      	mov	sp, r7
 8019640:	bd80      	pop	{r7, pc}
 8019642:	bf00      	nop
 8019644:	20004340 	.word	0x20004340
 8019648:	2000433c 	.word	0x2000433c

0801964c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8019650:	2005      	movs	r0, #5
 8019652:	f7f7 fa05 	bl	8010a60 <memp_malloc>
 8019656:	4603      	mov	r3, r0
}
 8019658:	4618      	mov	r0, r3
 801965a:	bd80      	pop	{r7, pc}

0801965c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b082      	sub	sp, #8
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d106      	bne.n	8019678 <ip_frag_free_pbuf_custom_ref+0x1c>
 801966a:	4b07      	ldr	r3, [pc, #28]	; (8019688 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801966c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8019670:	4906      	ldr	r1, [pc, #24]	; (801968c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019672:	4807      	ldr	r0, [pc, #28]	; (8019690 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019674:	f001 fa0c 	bl	801aa90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019678:	6879      	ldr	r1, [r7, #4]
 801967a:	2005      	movs	r0, #5
 801967c:	f7f7 fa42 	bl	8010b04 <memp_free>
}
 8019680:	bf00      	nop
 8019682:	3708      	adds	r7, #8
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}
 8019688:	0801dce0 	.word	0x0801dce0
 801968c:	0801de48 	.word	0x0801de48
 8019690:	0801dd28 	.word	0x0801dd28

08019694 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b084      	sub	sp, #16
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d106      	bne.n	80196b4 <ipfrag_free_pbuf_custom+0x20>
 80196a6:	4b11      	ldr	r3, [pc, #68]	; (80196ec <ipfrag_free_pbuf_custom+0x58>)
 80196a8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80196ac:	4910      	ldr	r1, [pc, #64]	; (80196f0 <ipfrag_free_pbuf_custom+0x5c>)
 80196ae:	4811      	ldr	r0, [pc, #68]	; (80196f4 <ipfrag_free_pbuf_custom+0x60>)
 80196b0:	f001 f9ee 	bl	801aa90 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80196b4:	68fa      	ldr	r2, [r7, #12]
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d006      	beq.n	80196ca <ipfrag_free_pbuf_custom+0x36>
 80196bc:	4b0b      	ldr	r3, [pc, #44]	; (80196ec <ipfrag_free_pbuf_custom+0x58>)
 80196be:	f240 22b9 	movw	r2, #697	; 0x2b9
 80196c2:	490d      	ldr	r1, [pc, #52]	; (80196f8 <ipfrag_free_pbuf_custom+0x64>)
 80196c4:	480b      	ldr	r0, [pc, #44]	; (80196f4 <ipfrag_free_pbuf_custom+0x60>)
 80196c6:	f001 f9e3 	bl	801aa90 <iprintf>
  if (pcr->original != NULL) {
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	695b      	ldr	r3, [r3, #20]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d004      	beq.n	80196dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	695b      	ldr	r3, [r3, #20]
 80196d6:	4618      	mov	r0, r3
 80196d8:	f7f7 ff6e 	bl	80115b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80196dc:	68f8      	ldr	r0, [r7, #12]
 80196de:	f7ff ffbd 	bl	801965c <ip_frag_free_pbuf_custom_ref>
}
 80196e2:	bf00      	nop
 80196e4:	3710      	adds	r7, #16
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd80      	pop	{r7, pc}
 80196ea:	bf00      	nop
 80196ec:	0801dce0 	.word	0x0801dce0
 80196f0:	0801de54 	.word	0x0801de54
 80196f4:	0801dd28 	.word	0x0801dd28
 80196f8:	0801de60 	.word	0x0801de60

080196fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b092      	sub	sp, #72	; 0x48
 8019700:	af02      	add	r7, sp, #8
 8019702:	60f8      	str	r0, [r7, #12]
 8019704:	60b9      	str	r1, [r7, #8]
 8019706:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019708:	2300      	movs	r3, #0
 801970a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801970c:	68bb      	ldr	r3, [r7, #8]
 801970e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019710:	3b14      	subs	r3, #20
 8019712:	2b00      	cmp	r3, #0
 8019714:	da00      	bge.n	8019718 <ip4_frag+0x1c>
 8019716:	3307      	adds	r3, #7
 8019718:	10db      	asrs	r3, r3, #3
 801971a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801971c:	2314      	movs	r3, #20
 801971e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	685b      	ldr	r3, [r3, #4]
 8019724:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8019726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019728:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801972c:	781b      	ldrb	r3, [r3, #0]
 801972e:	f003 030f 	and.w	r3, r3, #15
 8019732:	009b      	lsls	r3, r3, #2
 8019734:	2b14      	cmp	r3, #20
 8019736:	d009      	beq.n	801974c <ip4_frag+0x50>
 8019738:	4b79      	ldr	r3, [pc, #484]	; (8019920 <ip4_frag+0x224>)
 801973a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801973e:	4979      	ldr	r1, [pc, #484]	; (8019924 <ip4_frag+0x228>)
 8019740:	4879      	ldr	r0, [pc, #484]	; (8019928 <ip4_frag+0x22c>)
 8019742:	f001 f9a5 	bl	801aa90 <iprintf>
 8019746:	f06f 0305 	mvn.w	r3, #5
 801974a:	e0e5      	b.n	8019918 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801974e:	88db      	ldrh	r3, [r3, #6]
 8019750:	b29b      	uxth	r3, r3
 8019752:	4618      	mov	r0, r3
 8019754:	f7f6 fd96 	bl	8010284 <lwip_htons>
 8019758:	4603      	mov	r3, r0
 801975a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801975c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801975e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019762:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8019764:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801976a:	2b00      	cmp	r3, #0
 801976c:	d009      	beq.n	8019782 <ip4_frag+0x86>
 801976e:	4b6c      	ldr	r3, [pc, #432]	; (8019920 <ip4_frag+0x224>)
 8019770:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019774:	496d      	ldr	r1, [pc, #436]	; (801992c <ip4_frag+0x230>)
 8019776:	486c      	ldr	r0, [pc, #432]	; (8019928 <ip4_frag+0x22c>)
 8019778:	f001 f98a 	bl	801aa90 <iprintf>
 801977c:	f06f 0305 	mvn.w	r3, #5
 8019780:	e0ca      	b.n	8019918 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	891b      	ldrh	r3, [r3, #8]
 8019786:	3b14      	subs	r3, #20
 8019788:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801978a:	e0bc      	b.n	8019906 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801978c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801978e:	00da      	lsls	r2, r3, #3
 8019790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019792:	4293      	cmp	r3, r2
 8019794:	bfa8      	it	ge
 8019796:	4613      	movge	r3, r2
 8019798:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801979a:	2200      	movs	r2, #0
 801979c:	2114      	movs	r1, #20
 801979e:	2002      	movs	r0, #2
 80197a0:	f7f7 fb98 	bl	8010ed4 <pbuf_alloc>
 80197a4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80197a6:	6a3b      	ldr	r3, [r7, #32]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	f000 80b2 	beq.w	8019912 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	895b      	ldrh	r3, [r3, #10]
 80197b2:	2b13      	cmp	r3, #19
 80197b4:	d806      	bhi.n	80197c4 <ip4_frag+0xc8>
 80197b6:	4b5a      	ldr	r3, [pc, #360]	; (8019920 <ip4_frag+0x224>)
 80197b8:	f240 3209 	movw	r2, #777	; 0x309
 80197bc:	495c      	ldr	r1, [pc, #368]	; (8019930 <ip4_frag+0x234>)
 80197be:	485a      	ldr	r0, [pc, #360]	; (8019928 <ip4_frag+0x22c>)
 80197c0:	f001 f966 	bl	801aa90 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80197c4:	6a3b      	ldr	r3, [r7, #32]
 80197c6:	685b      	ldr	r3, [r3, #4]
 80197c8:	2214      	movs	r2, #20
 80197ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80197cc:	4618      	mov	r0, r3
 80197ce:	f001 f8a4 	bl	801a91a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80197d2:	6a3b      	ldr	r3, [r7, #32]
 80197d4:	685b      	ldr	r3, [r3, #4]
 80197d6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80197d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80197da:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80197dc:	e04f      	b.n	801987e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	895a      	ldrh	r2, [r3, #10]
 80197e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80197e4:	1ad3      	subs	r3, r2, r3
 80197e6:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80197e8:	8b7a      	ldrh	r2, [r7, #26]
 80197ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80197ec:	4293      	cmp	r3, r2
 80197ee:	bf28      	it	cs
 80197f0:	4613      	movcs	r3, r2
 80197f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80197f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d105      	bne.n	8019806 <ip4_frag+0x10a>
        poff = 0;
 80197fa:	2300      	movs	r3, #0
 80197fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	60fb      	str	r3, [r7, #12]
        continue;
 8019804:	e03b      	b.n	801987e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019806:	f7ff ff21 	bl	801964c <ip_frag_alloc_pbuf_custom_ref>
 801980a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801980c:	697b      	ldr	r3, [r7, #20]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d103      	bne.n	801981a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8019812:	6a38      	ldr	r0, [r7, #32]
 8019814:	f7f7 fed0 	bl	80115b8 <pbuf_free>
        goto memerr;
 8019818:	e07c      	b.n	8019914 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801981a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019822:	4413      	add	r3, r2
 8019824:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8019826:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019828:	9201      	str	r2, [sp, #4]
 801982a:	9300      	str	r3, [sp, #0]
 801982c:	4603      	mov	r3, r0
 801982e:	2202      	movs	r2, #2
 8019830:	2004      	movs	r0, #4
 8019832:	f7f7 fce3 	bl	80111fc <pbuf_alloced_custom>
 8019836:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8019838:	693b      	ldr	r3, [r7, #16]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d106      	bne.n	801984c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801983e:	6978      	ldr	r0, [r7, #20]
 8019840:	f7ff ff0c 	bl	801965c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019844:	6a38      	ldr	r0, [r7, #32]
 8019846:	f7f7 feb7 	bl	80115b8 <pbuf_free>
        goto memerr;
 801984a:	e063      	b.n	8019914 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801984c:	68f8      	ldr	r0, [r7, #12]
 801984e:	f7f7 ff65 	bl	801171c <pbuf_ref>
      pcr->original = p;
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	68fa      	ldr	r2, [r7, #12]
 8019856:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019858:	697b      	ldr	r3, [r7, #20]
 801985a:	4a36      	ldr	r2, [pc, #216]	; (8019934 <ip4_frag+0x238>)
 801985c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801985e:	6939      	ldr	r1, [r7, #16]
 8019860:	6a38      	ldr	r0, [r7, #32]
 8019862:	f7f7 ff83 	bl	801176c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8019866:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8019868:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801986a:	1ad3      	subs	r3, r2, r3
 801986c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801986e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019870:	2b00      	cmp	r3, #0
 8019872:	d004      	beq.n	801987e <ip4_frag+0x182>
        poff = 0;
 8019874:	2300      	movs	r3, #0
 8019876:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801987e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019880:	2b00      	cmp	r3, #0
 8019882:	d1ac      	bne.n	80197de <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8019884:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019886:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019888:	4413      	add	r3, r2
 801988a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801988c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019892:	3b14      	subs	r3, #20
 8019894:	429a      	cmp	r2, r3
 8019896:	bfd4      	ite	le
 8019898:	2301      	movle	r3, #1
 801989a:	2300      	movgt	r3, #0
 801989c:	b2db      	uxtb	r3, r3
 801989e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80198a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80198a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198a6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80198a8:	69fb      	ldr	r3, [r7, #28]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d103      	bne.n	80198b6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80198ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80198b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80198b4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80198b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7f6 fce3 	bl	8010284 <lwip_htons>
 80198be:	4603      	mov	r3, r0
 80198c0:	461a      	mov	r2, r3
 80198c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80198c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80198c8:	3314      	adds	r3, #20
 80198ca:	b29b      	uxth	r3, r3
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7f6 fcd9 	bl	8010284 <lwip_htons>
 80198d2:	4603      	mov	r3, r0
 80198d4:	461a      	mov	r2, r3
 80198d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80198da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198dc:	2200      	movs	r2, #0
 80198de:	729a      	strb	r2, [r3, #10]
 80198e0:	2200      	movs	r2, #0
 80198e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80198e4:	68bb      	ldr	r3, [r7, #8]
 80198e6:	695b      	ldr	r3, [r3, #20]
 80198e8:	687a      	ldr	r2, [r7, #4]
 80198ea:	6a39      	ldr	r1, [r7, #32]
 80198ec:	68b8      	ldr	r0, [r7, #8]
 80198ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80198f0:	6a38      	ldr	r0, [r7, #32]
 80198f2:	f7f7 fe61 	bl	80115b8 <pbuf_free>
    left -= fragsize;
 80198f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80198f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80198fa:	1ad3      	subs	r3, r2, r3
 80198fc:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80198fe:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8019900:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019902:	4413      	add	r3, r2
 8019904:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8019906:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019908:	2b00      	cmp	r3, #0
 801990a:	f47f af3f 	bne.w	801978c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801990e:	2300      	movs	r3, #0
 8019910:	e002      	b.n	8019918 <ip4_frag+0x21c>
      goto memerr;
 8019912:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019918:	4618      	mov	r0, r3
 801991a:	3740      	adds	r7, #64	; 0x40
 801991c:	46bd      	mov	sp, r7
 801991e:	bd80      	pop	{r7, pc}
 8019920:	0801dce0 	.word	0x0801dce0
 8019924:	0801de6c 	.word	0x0801de6c
 8019928:	0801dd28 	.word	0x0801dd28
 801992c:	0801de94 	.word	0x0801de94
 8019930:	0801deb0 	.word	0x0801deb0
 8019934:	08019695 	.word	0x08019695

08019938 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b086      	sub	sp, #24
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
 8019940:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8019942:	230e      	movs	r3, #14
 8019944:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	895b      	ldrh	r3, [r3, #10]
 801994a:	2b0e      	cmp	r3, #14
 801994c:	d977      	bls.n	8019a3e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	685b      	ldr	r3, [r3, #4]
 8019952:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019954:	693b      	ldr	r3, [r7, #16]
 8019956:	7b1a      	ldrb	r2, [r3, #12]
 8019958:	7b5b      	ldrb	r3, [r3, #13]
 801995a:	021b      	lsls	r3, r3, #8
 801995c:	4313      	orrs	r3, r2
 801995e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019960:	693b      	ldr	r3, [r7, #16]
 8019962:	781b      	ldrb	r3, [r3, #0]
 8019964:	f003 0301 	and.w	r3, r3, #1
 8019968:	2b00      	cmp	r3, #0
 801996a:	d023      	beq.n	80199b4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801996c:	693b      	ldr	r3, [r7, #16]
 801996e:	781b      	ldrb	r3, [r3, #0]
 8019970:	2b01      	cmp	r3, #1
 8019972:	d10f      	bne.n	8019994 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019974:	693b      	ldr	r3, [r7, #16]
 8019976:	785b      	ldrb	r3, [r3, #1]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d11b      	bne.n	80199b4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801997c:	693b      	ldr	r3, [r7, #16]
 801997e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019980:	2b5e      	cmp	r3, #94	; 0x5e
 8019982:	d117      	bne.n	80199b4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	7b5b      	ldrb	r3, [r3, #13]
 8019988:	f043 0310 	orr.w	r3, r3, #16
 801998c:	b2da      	uxtb	r2, r3
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	735a      	strb	r2, [r3, #13]
 8019992:	e00f      	b.n	80199b4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019994:	693b      	ldr	r3, [r7, #16]
 8019996:	2206      	movs	r2, #6
 8019998:	4930      	ldr	r1, [pc, #192]	; (8019a5c <ethernet_input+0x124>)
 801999a:	4618      	mov	r0, r3
 801999c:	f000 ffae 	bl	801a8fc <memcmp>
 80199a0:	4603      	mov	r3, r0
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d106      	bne.n	80199b4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	7b5b      	ldrb	r3, [r3, #13]
 80199aa:	f043 0308 	orr.w	r3, r3, #8
 80199ae:	b2da      	uxtb	r2, r3
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80199b4:	89fb      	ldrh	r3, [r7, #14]
 80199b6:	2b08      	cmp	r3, #8
 80199b8:	d003      	beq.n	80199c2 <ethernet_input+0x8a>
 80199ba:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80199be:	d01e      	beq.n	80199fe <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80199c0:	e044      	b.n	8019a4c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80199c2:	683b      	ldr	r3, [r7, #0]
 80199c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80199c8:	f003 0308 	and.w	r3, r3, #8
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d038      	beq.n	8019a42 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	895b      	ldrh	r3, [r3, #10]
 80199d4:	461a      	mov	r2, r3
 80199d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80199da:	429a      	cmp	r2, r3
 80199dc:	db33      	blt.n	8019a46 <ethernet_input+0x10e>
 80199de:	8afb      	ldrh	r3, [r7, #22]
 80199e0:	425b      	negs	r3, r3
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	b21b      	sxth	r3, r3
 80199e6:	4619      	mov	r1, r3
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f7f7 fdc1 	bl	8011570 <pbuf_header>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d128      	bne.n	8019a46 <ethernet_input+0x10e>
        ip4_input(p, netif);
 80199f4:	6839      	ldr	r1, [r7, #0]
 80199f6:	6878      	ldr	r0, [r7, #4]
 80199f8:	f7fe ff80 	bl	80188fc <ip4_input>
      break;
 80199fc:	e01d      	b.n	8019a3a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019a04:	f003 0308 	and.w	r3, r3, #8
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d01e      	beq.n	8019a4a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	895b      	ldrh	r3, [r3, #10]
 8019a10:	461a      	mov	r2, r3
 8019a12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019a16:	429a      	cmp	r2, r3
 8019a18:	db15      	blt.n	8019a46 <ethernet_input+0x10e>
 8019a1a:	8afb      	ldrh	r3, [r7, #22]
 8019a1c:	425b      	negs	r3, r3
 8019a1e:	b29b      	uxth	r3, r3
 8019a20:	b21b      	sxth	r3, r3
 8019a22:	4619      	mov	r1, r3
 8019a24:	6878      	ldr	r0, [r7, #4]
 8019a26:	f7f7 fda3 	bl	8011570 <pbuf_header>
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d10a      	bne.n	8019a46 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8019a30:	6839      	ldr	r1, [r7, #0]
 8019a32:	6878      	ldr	r0, [r7, #4]
 8019a34:	f7fe f94e 	bl	8017cd4 <etharp_input>
      break;
 8019a38:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	e00a      	b.n	8019a54 <ethernet_input+0x11c>
    goto free_and_return;
 8019a3e:	bf00      	nop
 8019a40:	e004      	b.n	8019a4c <ethernet_input+0x114>
        goto free_and_return;
 8019a42:	bf00      	nop
 8019a44:	e002      	b.n	8019a4c <ethernet_input+0x114>

free_and_return:
 8019a46:	bf00      	nop
 8019a48:	e000      	b.n	8019a4c <ethernet_input+0x114>
        goto free_and_return;
 8019a4a:	bf00      	nop
  pbuf_free(p);
 8019a4c:	6878      	ldr	r0, [r7, #4]
 8019a4e:	f7f7 fdb3 	bl	80115b8 <pbuf_free>
  return ERR_OK;
 8019a52:	2300      	movs	r3, #0
}
 8019a54:	4618      	mov	r0, r3
 8019a56:	3718      	adds	r7, #24
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd80      	pop	{r7, pc}
 8019a5c:	0801e0d8 	.word	0x0801e0d8

08019a60 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b086      	sub	sp, #24
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	60f8      	str	r0, [r7, #12]
 8019a68:	60b9      	str	r1, [r7, #8]
 8019a6a:	607a      	str	r2, [r7, #4]
 8019a6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019a6e:	8c3b      	ldrh	r3, [r7, #32]
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7f6 fc07 	bl	8010284 <lwip_htons>
 8019a76:	4603      	mov	r3, r0
 8019a78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8019a7a:	210e      	movs	r1, #14
 8019a7c:	68b8      	ldr	r0, [r7, #8]
 8019a7e:	f7f7 fd77 	bl	8011570 <pbuf_header>
 8019a82:	4603      	mov	r3, r0
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d125      	bne.n	8019ad4 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	685b      	ldr	r3, [r3, #4]
 8019a8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019a8e:	693b      	ldr	r3, [r7, #16]
 8019a90:	8afa      	ldrh	r2, [r7, #22]
 8019a92:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8019a94:	693b      	ldr	r3, [r7, #16]
 8019a96:	2206      	movs	r2, #6
 8019a98:	6839      	ldr	r1, [r7, #0]
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f000 ff3d 	bl	801a91a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8019aa0:	693b      	ldr	r3, [r7, #16]
 8019aa2:	3306      	adds	r3, #6
 8019aa4:	2206      	movs	r2, #6
 8019aa6:	6879      	ldr	r1, [r7, #4]
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f000 ff36 	bl	801a91a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8019ab4:	2b06      	cmp	r3, #6
 8019ab6:	d006      	beq.n	8019ac6 <ethernet_output+0x66>
 8019ab8:	4b0a      	ldr	r3, [pc, #40]	; (8019ae4 <ethernet_output+0x84>)
 8019aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8019abe:	490a      	ldr	r1, [pc, #40]	; (8019ae8 <ethernet_output+0x88>)
 8019ac0:	480a      	ldr	r0, [pc, #40]	; (8019aec <ethernet_output+0x8c>)
 8019ac2:	f000 ffe5 	bl	801aa90 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	699b      	ldr	r3, [r3, #24]
 8019aca:	68b9      	ldr	r1, [r7, #8]
 8019acc:	68f8      	ldr	r0, [r7, #12]
 8019ace:	4798      	blx	r3
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	e002      	b.n	8019ada <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019ad4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019ad6:	f06f 0301 	mvn.w	r3, #1
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3718      	adds	r7, #24
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	0801ded0 	.word	0x0801ded0
 8019ae8:	0801df08 	.word	0x0801df08
 8019aec:	0801df3c 	.word	0x0801df3c

08019af0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b086      	sub	sp, #24
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
 8019af8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019afa:	683b      	ldr	r3, [r7, #0]
 8019afc:	60bb      	str	r3, [r7, #8]
 8019afe:	2304      	movs	r3, #4
 8019b00:	60fb      	str	r3, [r7, #12]
 8019b02:	2300      	movs	r3, #0
 8019b04:	613b      	str	r3, [r7, #16]
 8019b06:	2300      	movs	r3, #0
 8019b08:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019b0a:	f107 0308 	add.w	r3, r7, #8
 8019b0e:	2100      	movs	r1, #0
 8019b10:	4618      	mov	r0, r3
 8019b12:	f7f1 fc48 	bl	800b3a6 <osMessageCreate>
 8019b16:	4602      	mov	r2, r0
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d102      	bne.n	8019b2a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b28:	e000      	b.n	8019b2c <sys_mbox_new+0x3c>

  return ERR_OK;
 8019b2a:	2300      	movs	r3, #0
}
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	3718      	adds	r7, #24
 8019b30:	46bd      	mov	sp, r7
 8019b32:	bd80      	pop	{r7, pc}

08019b34 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b082      	sub	sp, #8
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	4618      	mov	r0, r3
 8019b42:	f7f1 fd0d 	bl	800b560 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f7f1 fd1e 	bl	800b58c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019b50:	bf00      	nop
 8019b52:	3708      	adds	r7, #8
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}

08019b58 <sys_mbox_post>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

static void prvHeapInit( void )
{
<<<<<<< HEAD
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b30e:	60bb      	str	r3, [r7, #8]
=======
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b082      	sub	sp, #8
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
 8019b60:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8019b62:	bf00      	nop
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	6839      	ldr	r1, [r7, #0]
 8019b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b6e:	4618      	mov	r0, r3
 8019b70:	f7f1 fc42 	bl	800b3f8 <osMessagePut>
 8019b74:	4603      	mov	r3, r0
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d1f4      	bne.n	8019b64 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8019b7a:	bf00      	nop
 8019b7c:	3708      	adds	r7, #8
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}

08019b82 <sys_mbox_trypost>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b310:	4b27      	ldr	r3, [pc, #156]	; (800b3b0 <prvHeapInit+0xac>)
 800b312:	60fb      	str	r3, [r7, #12]

<<<<<<< HEAD
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00c      	beq.n	800b338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3307      	adds	r3, #7
 800b322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f023 0307 	bic.w	r3, r3, #7
 800b32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	4a1f      	ldr	r2, [pc, #124]	; (800b3b0 <prvHeapInit+0xac>)
 800b334:	4413      	add	r3, r2
 800b336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b33c:	4a1d      	ldr	r2, [pc, #116]	; (800b3b4 <prvHeapInit+0xb0>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b342:	4b1c      	ldr	r3, [pc, #112]	; (800b3b4 <prvHeapInit+0xb0>)
 800b344:	2200      	movs	r2, #0
 800b346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	4413      	add	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b350:	2208      	movs	r2, #8
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	1a9b      	subs	r3, r3, r2
 800b356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f023 0307 	bic.w	r3, r3, #7
 800b35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4a15      	ldr	r2, [pc, #84]	; (800b3b8 <prvHeapInit+0xb4>)
 800b364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b366:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <prvHeapInit+0xb4>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2200      	movs	r2, #0
 800b36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b36e:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <prvHeapInit+0xb4>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2200      	movs	r2, #0
 800b374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b384:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <prvHeapInit+0xb4>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <prvHeapInit+0xb8>)
 800b392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	4a09      	ldr	r2, [pc, #36]	; (800b3c0 <prvHeapInit+0xbc>)
 800b39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b39c:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <prvHeapInit+0xc0>)
 800b39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3a2:	601a      	str	r2, [r3, #0]
}
 800b3a4:	bf00      	nop
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	20000590 	.word	0x20000590
 800b3b4:	20004190 	.word	0x20004190
 800b3b8:	20004198 	.word	0x20004198
 800b3bc:	200041a0 	.word	0x200041a0
 800b3c0:	2000419c 	.word	0x2000419c
 800b3c4:	200041a4 	.word	0x200041a4

0800b3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3d0:	4b28      	ldr	r3, [pc, #160]	; (800b474 <prvInsertBlockIntoFreeList+0xac>)
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	e002      	b.n	800b3dc <prvInsertBlockIntoFreeList+0x14>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d8f7      	bhi.n	800b3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d108      	bne.n	800b40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	441a      	add	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	441a      	add	r2, r3
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d118      	bne.n	800b450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	4b15      	ldr	r3, [pc, #84]	; (800b478 <prvInsertBlockIntoFreeList+0xb0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d00d      	beq.n	800b446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	441a      	add	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	e008      	b.n	800b458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b446:	4b0c      	ldr	r3, [pc, #48]	; (800b478 <prvInsertBlockIntoFreeList+0xb0>)
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	e003      	b.n	800b458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d002      	beq.n	800b466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b466:	bf00      	nop
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20004190 	.word	0x20004190
 800b478:	20004198 	.word	0x20004198

0800b47c <MX_USB_DEVICE_Init>:
=======
/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019b82:	b580      	push	{r7, lr}
 8019b84:	b084      	sub	sp, #16
 8019b86:	af00      	add	r7, sp, #0
 8019b88:	6078      	str	r0, [r7, #4]
 8019b8a:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	6839      	ldr	r1, [r7, #0]
 8019b92:	2200      	movs	r2, #0
 8019b94:	4618      	mov	r0, r3
 8019b96:	f7f1 fc2f 	bl	800b3f8 <osMessagePut>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d102      	bne.n	8019ba6 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019ba0:	2300      	movs	r3, #0
 8019ba2:	73fb      	strb	r3, [r7, #15]
 8019ba4:	e001      	b.n	8019baa <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019ba6:	23ff      	movs	r3, #255	; 0xff
 8019ba8:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019bae:	4618      	mov	r0, r3
 8019bb0:	3710      	adds	r7, #16
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	bd80      	pop	{r7, pc}

08019bb6 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019bb6:	b580      	push	{r7, lr}
 8019bb8:	b08c      	sub	sp, #48	; 0x30
 8019bba:	af00      	add	r7, sp, #0
 8019bbc:	61f8      	str	r0, [r7, #28]
 8019bbe:	61b9      	str	r1, [r7, #24]
 8019bc0:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019bc2:	f7f1 fa18 	bl	800aff6 <osKernelSysTick>
 8019bc6:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d017      	beq.n	8019bfe <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019bce:	69fb      	ldr	r3, [r7, #28]
 8019bd0:	6819      	ldr	r1, [r3, #0]
 8019bd2:	f107 0320 	add.w	r3, r7, #32
 8019bd6:	697a      	ldr	r2, [r7, #20]
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f7f1 fc4d 	bl	800b478 <osMessageGet>

    if(event.status == osEventMessage)
 8019bde:	6a3b      	ldr	r3, [r7, #32]
 8019be0:	2b10      	cmp	r3, #16
 8019be2:	d109      	bne.n	8019bf8 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be6:	461a      	mov	r2, r3
 8019be8:	69bb      	ldr	r3, [r7, #24]
 8019bea:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019bec:	f7f1 fa03 	bl	800aff6 <osKernelSysTick>
 8019bf0:	4602      	mov	r2, r0
 8019bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bf4:	1ad3      	subs	r3, r2, r3
 8019bf6:	e019      	b.n	8019c2c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bfc:	e016      	b.n	8019c2c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019bfe:	69fb      	ldr	r3, [r7, #28]
 8019c00:	6819      	ldr	r1, [r3, #0]
 8019c02:	463b      	mov	r3, r7
 8019c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f7f1 fc35 	bl	800b478 <osMessageGet>
 8019c0e:	f107 0320 	add.w	r3, r7, #32
 8019c12:	463a      	mov	r2, r7
 8019c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c1c:	461a      	mov	r2, r3
 8019c1e:	69bb      	ldr	r3, [r7, #24]
 8019c20:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019c22:	f7f1 f9e8 	bl	800aff6 <osKernelSysTick>
 8019c26:	4602      	mov	r2, r0
 8019c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c2a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	3730      	adds	r7, #48	; 0x30
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}

08019c34 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b086      	sub	sp, #24
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
 8019c3c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	6819      	ldr	r1, [r3, #0]
 8019c42:	f107 030c 	add.w	r3, r7, #12
 8019c46:	2200      	movs	r2, #0
 8019c48:	4618      	mov	r0, r3
 8019c4a:	f7f1 fc15 	bl	800b478 <osMessageGet>

  if(event.status == osEventMessage)
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	2b10      	cmp	r3, #16
 8019c52:	d105      	bne.n	8019c60 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8019c54:	693b      	ldr	r3, [r7, #16]
 8019c56:	461a      	mov	r2, r3
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	e001      	b.n	8019c64 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	3718      	adds	r7, #24
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}

08019c6c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019c6c:	b480      	push	{r7}
 8019c6e:	b083      	sub	sp, #12
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d101      	bne.n	8019c80 <sys_mbox_valid+0x14>
    return 0;
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	e000      	b.n	8019c82 <sys_mbox_valid+0x16>
  else
    return 1;
 8019c80:	2301      	movs	r3, #1
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	370c      	adds	r7, #12
 8019c86:	46bd      	mov	sp, r7
 8019c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8c:	4770      	bx	lr

08019c8e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019c8e:	b480      	push	{r7}
 8019c90:	b083      	sub	sp, #12
 8019c92:	af00      	add	r7, sp, #0
 8019c94:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	2200      	movs	r2, #0
 8019c9a:	601a      	str	r2, [r3, #0]
}
 8019c9c:	bf00      	nop
 8019c9e:	370c      	adds	r7, #12
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca6:	4770      	bx	lr

08019ca8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b084      	sub	sp, #16
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
 8019cb0:	460b      	mov	r3, r1
 8019cb2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	60bb      	str	r3, [r7, #8]
 8019cb8:	2300      	movs	r3, #0
 8019cba:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8019cbc:	f107 0308 	add.w	r3, r7, #8
 8019cc0:	2101      	movs	r1, #1
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f7f1 faa4 	bl	800b210 <osSemaphoreCreate>
 8019cc8:	4602      	mov	r2, r0
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d102      	bne.n	8019cdc <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019cda:	e009      	b.n	8019cf0 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8019cdc:	78fb      	ldrb	r3, [r7, #3]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d105      	bne.n	8019cee <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	2100      	movs	r1, #0
 8019ce8:	4618      	mov	r0, r3
 8019cea:	f7f1 fac5 	bl	800b278 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019cee:	2300      	movs	r3, #0
}
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	3710      	adds	r7, #16
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	bd80      	pop	{r7, pc}

08019cf8 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b084      	sub	sp, #16
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
 8019d00:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019d02:	f7f1 f978 	bl	800aff6 <osKernelSysTick>
 8019d06:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d011      	beq.n	8019d32 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	6839      	ldr	r1, [r7, #0]
 8019d14:	4618      	mov	r0, r3
 8019d16:	f7f1 faaf 	bl	800b278 <osSemaphoreWait>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d105      	bne.n	8019d2c <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8019d20:	f7f1 f969 	bl	800aff6 <osKernelSysTick>
 8019d24:	4602      	mov	r2, r0
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	1ad3      	subs	r3, r2, r3
 8019d2a:	e012      	b.n	8019d52 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d30:	e00f      	b.n	8019d52 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019d32:	bf00      	nop
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	f7f1 fa9b 	bl	800b278 <osSemaphoreWait>
 8019d42:	4603      	mov	r3, r0
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d1f5      	bne.n	8019d34 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8019d48:	f7f1 f955 	bl	800aff6 <osKernelSysTick>
 8019d4c:	4602      	mov	r2, r0
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019d52:	4618      	mov	r0, r3
 8019d54:	3710      	adds	r7, #16
 8019d56:	46bd      	mov	sp, r7
 8019d58:	bd80      	pop	{r7, pc}

08019d5a <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019d5a:	b580      	push	{r7, lr}
 8019d5c:	b082      	sub	sp, #8
 8019d5e:	af00      	add	r7, sp, #0
 8019d60:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7f1 fad4 	bl	800b314 <osSemaphoreRelease>
}
 8019d6c:	bf00      	nop
 8019d6e:	3708      	adds	r7, #8
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd80      	pop	{r7, pc}

08019d74 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b082      	sub	sp, #8
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	4618      	mov	r0, r3
 8019d82:	f7f1 fafd 	bl	800b380 <osSemaphoreDelete>
}
 8019d86:	bf00      	nop
 8019d88:	3708      	adds	r7, #8
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	bd80      	pop	{r7, pc}

08019d8e <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019d8e:	b480      	push	{r7}
 8019d90:	b083      	sub	sp, #12
 8019d92:	af00      	add	r7, sp, #0
 8019d94:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d101      	bne.n	8019da2 <sys_sem_valid+0x14>
    return 0;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	e000      	b.n	8019da4 <sys_sem_valid+0x16>
  else
    return 1;
 8019da2:	2301      	movs	r3, #1
}
 8019da4:	4618      	mov	r0, r3
 8019da6:	370c      	adds	r7, #12
 8019da8:	46bd      	mov	sp, r7
 8019daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dae:	4770      	bx	lr

08019db0 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019db0:	b480      	push	{r7}
 8019db2:	b083      	sub	sp, #12
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	601a      	str	r2, [r3, #0]
}
 8019dbe:	bf00      	nop
 8019dc0:	370c      	adds	r7, #12
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc8:	4770      	bx	lr
	...

08019dcc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019dd0:	4803      	ldr	r0, [pc, #12]	; (8019de0 <sys_init+0x14>)
 8019dd2:	f7f1 f980 	bl	800b0d6 <osMutexCreate>
 8019dd6:	4602      	mov	r2, r0
 8019dd8:	4b02      	ldr	r3, [pc, #8]	; (8019de4 <sys_init+0x18>)
 8019dda:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019ddc:	bf00      	nop
 8019dde:	bd80      	pop	{r7, pc}
 8019de0:	0801e0e8 	.word	0x0801e0e8
 8019de4:	2000ab70 	.word	0x2000ab70

08019de8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b084      	sub	sp, #16
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019df0:	2300      	movs	r3, #0
 8019df2:	60bb      	str	r3, [r7, #8]
 8019df4:	2300      	movs	r3, #0
 8019df6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019df8:	f107 0308 	add.w	r3, r7, #8
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	f7f1 f96a 	bl	800b0d6 <osMutexCreate>
 8019e02:	4602      	mov	r2, r0
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d102      	bne.n	8019e16 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e14:	e000      	b.n	8019e18 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019e16:	2300      	movs	r3, #0
}
 8019e18:	4618      	mov	r0, r3
 8019e1a:	3710      	adds	r7, #16
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}

08019e20 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019e30:	4618      	mov	r0, r3
 8019e32:	f7f1 f969 	bl	800b108 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019e36:	bf00      	nop
 8019e38:	3708      	adds	r7, #8
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}

08019e3e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019e3e:	b580      	push	{r7, lr}
 8019e40:	b082      	sub	sp, #8
 8019e42:	af00      	add	r7, sp, #0
 8019e44:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7f1 f9aa 	bl	800b1a4 <osMutexRelease>
}
 8019e50:	bf00      	nop
 8019e52:	3708      	adds	r7, #8
 8019e54:	46bd      	mov	sp, r7
 8019e56:	bd80      	pop	{r7, pc}

08019e58 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b08c      	sub	sp, #48	; 0x30
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	60f8      	str	r0, [r7, #12]
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	607a      	str	r2, [r7, #4]
 8019e64:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019e66:	f107 0314 	add.w	r3, r7, #20
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	601a      	str	r2, [r3, #0]
 8019e6e:	605a      	str	r2, [r3, #4]
 8019e70:	609a      	str	r2, [r3, #8]
 8019e72:	60da      	str	r2, [r3, #12]
 8019e74:	611a      	str	r2, [r3, #16]
 8019e76:	615a      	str	r2, [r3, #20]
 8019e78:	619a      	str	r2, [r3, #24]
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	617b      	str	r3, [r7, #20]
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	61bb      	str	r3, [r7, #24]
 8019e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e84:	b21b      	sxth	r3, r3
 8019e86:	83bb      	strh	r3, [r7, #28]
 8019e88:	683b      	ldr	r3, [r7, #0]
 8019e8a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019e8c:	f107 0314 	add.w	r3, r7, #20
 8019e90:	6879      	ldr	r1, [r7, #4]
 8019e92:	4618      	mov	r0, r3
 8019e94:	f7f1 f8bf 	bl	800b016 <osThreadCreate>
 8019e98:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	3730      	adds	r7, #48	; 0x30
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	bd80      	pop	{r7, pc}
	...

08019ea4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019ea4:	b580      	push	{r7, lr}
 8019ea6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019ea8:	4b04      	ldr	r3, [pc, #16]	; (8019ebc <sys_arch_protect+0x18>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	f7f1 f929 	bl	800b108 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019eb6:	2301      	movs	r3, #1
}
 8019eb8:	4618      	mov	r0, r3
 8019eba:	bd80      	pop	{r7, pc}
 8019ebc:	2000ab70 	.word	0x2000ab70

08019ec0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b082      	sub	sp, #8
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019ec8:	4b04      	ldr	r3, [pc, #16]	; (8019edc <sys_arch_unprotect+0x1c>)
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7f1 f969 	bl	800b1a4 <osMutexRelease>
}
 8019ed2:	bf00      	nop
 8019ed4:	3708      	adds	r7, #8
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}
 8019eda:	bf00      	nop
 8019edc:	2000ab70 	.word	0x2000ab70

08019ee0 <MX_USB_DEVICE_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0
=======
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	af00      	add	r7, sp, #0
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
 800b480:	2200      	movs	r2, #0
 800b482:	4912      	ldr	r1, [pc, #72]	; (800b4cc <MX_USB_DEVICE_Init+0x50>)
 800b484:	4812      	ldr	r0, [pc, #72]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b486:	f7fd f8c4 	bl	8008612 <USBD_Init>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b490:	f7f6 f96a 	bl	8001768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b494:	490f      	ldr	r1, [pc, #60]	; (800b4d4 <MX_USB_DEVICE_Init+0x58>)
 800b496:	480e      	ldr	r0, [pc, #56]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b498:	f7fd f8e6 	bl	8008668 <USBD_RegisterClass>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b4a2:	f7f6 f961 	bl	8001768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b4a6:	490c      	ldr	r1, [pc, #48]	; (800b4d8 <MX_USB_DEVICE_Init+0x5c>)
 800b4a8:	4809      	ldr	r0, [pc, #36]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b4aa:	f7fd f843 	bl	8008534 <USBD_CDC_RegisterInterface>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b4b4:	f7f6 f958 	bl	8001768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b4ba:	f7fd f8ef 	bl	800869c <USBD_Start>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b4c4:	f7f6 f950 	bl	8001768 <Error_Handler>
=======
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	4912      	ldr	r1, [pc, #72]	; (8019f30 <MX_USB_DEVICE_Init+0x50>)
 8019ee8:	4812      	ldr	r0, [pc, #72]	; (8019f34 <MX_USB_DEVICE_Init+0x54>)
 8019eea:	f7ef fff8 	bl	8009ede <USBD_Init>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d001      	beq.n	8019ef8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019ef4:	f7e7 fc1a 	bl	800172c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019ef8:	490f      	ldr	r1, [pc, #60]	; (8019f38 <MX_USB_DEVICE_Init+0x58>)
 8019efa:	480e      	ldr	r0, [pc, #56]	; (8019f34 <MX_USB_DEVICE_Init+0x54>)
 8019efc:	f7f0 f81a 	bl	8009f34 <USBD_RegisterClass>
 8019f00:	4603      	mov	r3, r0
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d001      	beq.n	8019f0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019f06:	f7e7 fc11 	bl	800172c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019f0a:	490c      	ldr	r1, [pc, #48]	; (8019f3c <MX_USB_DEVICE_Init+0x5c>)
 8019f0c:	4809      	ldr	r0, [pc, #36]	; (8019f34 <MX_USB_DEVICE_Init+0x54>)
 8019f0e:	f7ef ff77 	bl	8009e00 <USBD_CDC_RegisterInterface>
 8019f12:	4603      	mov	r3, r0
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d001      	beq.n	8019f1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019f18:	f7e7 fc08 	bl	800172c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019f1c:	4805      	ldr	r0, [pc, #20]	; (8019f34 <MX_USB_DEVICE_Init+0x54>)
 8019f1e:	f7f0 f823 	bl	8009f68 <USBD_Start>
 8019f22:	4603      	mov	r3, r0
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d001      	beq.n	8019f2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019f28:	f7e7 fc00 	bl	800172c <Error_Handler>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 800b4c8:	bf00      	nop
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	2000012c 	.word	0x2000012c
 800b4d0:	20007424 	.word	0x20007424
 800b4d4:	20000014 	.word	0x20000014
 800b4d8:	2000011c 	.word	0x2000011c

0800b4dc <CDC_Init_FS>:
=======
 8019f2c:	bf00      	nop
 8019f2e:	bd80      	pop	{r7, pc}
 8019f30:	20000138 	.word	0x20000138
 8019f34:	2000ab74 	.word	0x2000ab74
 8019f38:	20000014 	.word	0x20000014
 8019f3c:	20000128 	.word	0x20000128

08019f40 <CDC_Init_FS>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< HEAD
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4905      	ldr	r1, [pc, #20]	; (800b4f8 <CDC_Init_FS+0x1c>)
 800b4e4:	4805      	ldr	r0, [pc, #20]	; (800b4fc <CDC_Init_FS+0x20>)
 800b4e6:	f7fd f83c 	bl	8008562 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4ea:	4905      	ldr	r1, [pc, #20]	; (800b500 <CDC_Init_FS+0x24>)
 800b4ec:	4803      	ldr	r0, [pc, #12]	; (800b4fc <CDC_Init_FS+0x20>)
 800b4ee:	f7fd f852 	bl	8008596 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20007ec0 	.word	0x20007ec0
 800b4fc:	20007424 	.word	0x20007424
 800b500:	200076c0 	.word	0x200076c0

0800b504 <CDC_DeInit_FS>:
=======
 8019f40:	b580      	push	{r7, lr}
 8019f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019f44:	2200      	movs	r2, #0
 8019f46:	4905      	ldr	r1, [pc, #20]	; (8019f5c <CDC_Init_FS+0x1c>)
 8019f48:	4805      	ldr	r0, [pc, #20]	; (8019f60 <CDC_Init_FS+0x20>)
 8019f4a:	f7ef ff70 	bl	8009e2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019f4e:	4905      	ldr	r1, [pc, #20]	; (8019f64 <CDC_Init_FS+0x24>)
 8019f50:	4803      	ldr	r0, [pc, #12]	; (8019f60 <CDC_Init_FS+0x20>)
 8019f52:	f7ef ff86 	bl	8009e62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019f56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019f58:	4618      	mov	r0, r3
 8019f5a:	bd80      	pop	{r7, pc}
 8019f5c:	2000b610 	.word	0x2000b610
 8019f60:	2000ab74 	.word	0x2000ab74
 8019f64:	2000ae10 	.word	0x2000ae10

08019f68 <CDC_DeInit_FS>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< HEAD
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <CDC_Control_FS>:
=======
 8019f68:	b480      	push	{r7}
 8019f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019f6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	46bd      	mov	sp, r7
 8019f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f76:	4770      	bx	lr

08019f78 <CDC_Control_FS>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< HEAD
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	6039      	str	r1, [r7, #0]
 800b51e:	71fb      	strb	r3, [r7, #7]
 800b520:	4613      	mov	r3, r2
 800b522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	2b23      	cmp	r3, #35	; 0x23
 800b528:	d84a      	bhi.n	800b5c0 <CDC_Control_FS+0xac>
 800b52a:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <CDC_Control_FS+0x1c>)
 800b52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b530:	0800b5c1 	.word	0x0800b5c1
 800b534:	0800b5c1 	.word	0x0800b5c1
 800b538:	0800b5c1 	.word	0x0800b5c1
 800b53c:	0800b5c1 	.word	0x0800b5c1
 800b540:	0800b5c1 	.word	0x0800b5c1
 800b544:	0800b5c1 	.word	0x0800b5c1
 800b548:	0800b5c1 	.word	0x0800b5c1
 800b54c:	0800b5c1 	.word	0x0800b5c1
 800b550:	0800b5c1 	.word	0x0800b5c1
 800b554:	0800b5c1 	.word	0x0800b5c1
 800b558:	0800b5c1 	.word	0x0800b5c1
 800b55c:	0800b5c1 	.word	0x0800b5c1
 800b560:	0800b5c1 	.word	0x0800b5c1
 800b564:	0800b5c1 	.word	0x0800b5c1
 800b568:	0800b5c1 	.word	0x0800b5c1
 800b56c:	0800b5c1 	.word	0x0800b5c1
 800b570:	0800b5c1 	.word	0x0800b5c1
 800b574:	0800b5c1 	.word	0x0800b5c1
 800b578:	0800b5c1 	.word	0x0800b5c1
 800b57c:	0800b5c1 	.word	0x0800b5c1
 800b580:	0800b5c1 	.word	0x0800b5c1
 800b584:	0800b5c1 	.word	0x0800b5c1
 800b588:	0800b5c1 	.word	0x0800b5c1
 800b58c:	0800b5c1 	.word	0x0800b5c1
 800b590:	0800b5c1 	.word	0x0800b5c1
 800b594:	0800b5c1 	.word	0x0800b5c1
 800b598:	0800b5c1 	.word	0x0800b5c1
 800b59c:	0800b5c1 	.word	0x0800b5c1
 800b5a0:	0800b5c1 	.word	0x0800b5c1
 800b5a4:	0800b5c1 	.word	0x0800b5c1
 800b5a8:	0800b5c1 	.word	0x0800b5c1
 800b5ac:	0800b5c1 	.word	0x0800b5c1
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5c1 	.word	0x0800b5c1
 800b5b8:	0800b5c1 	.word	0x0800b5c1
 800b5bc:	0800b5c1 	.word	0x0800b5c1
=======
 8019f78:	b480      	push	{r7}
 8019f7a:	b083      	sub	sp, #12
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	4603      	mov	r3, r0
 8019f80:	6039      	str	r1, [r7, #0]
 8019f82:	71fb      	strb	r3, [r7, #7]
 8019f84:	4613      	mov	r3, r2
 8019f86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019f88:	79fb      	ldrb	r3, [r7, #7]
 8019f8a:	2b23      	cmp	r3, #35	; 0x23
 8019f8c:	d84a      	bhi.n	801a024 <CDC_Control_FS+0xac>
 8019f8e:	a201      	add	r2, pc, #4	; (adr r2, 8019f94 <CDC_Control_FS+0x1c>)
 8019f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f94:	0801a025 	.word	0x0801a025
 8019f98:	0801a025 	.word	0x0801a025
 8019f9c:	0801a025 	.word	0x0801a025
 8019fa0:	0801a025 	.word	0x0801a025
 8019fa4:	0801a025 	.word	0x0801a025
 8019fa8:	0801a025 	.word	0x0801a025
 8019fac:	0801a025 	.word	0x0801a025
 8019fb0:	0801a025 	.word	0x0801a025
 8019fb4:	0801a025 	.word	0x0801a025
 8019fb8:	0801a025 	.word	0x0801a025
 8019fbc:	0801a025 	.word	0x0801a025
 8019fc0:	0801a025 	.word	0x0801a025
 8019fc4:	0801a025 	.word	0x0801a025
 8019fc8:	0801a025 	.word	0x0801a025
 8019fcc:	0801a025 	.word	0x0801a025
 8019fd0:	0801a025 	.word	0x0801a025
 8019fd4:	0801a025 	.word	0x0801a025
 8019fd8:	0801a025 	.word	0x0801a025
 8019fdc:	0801a025 	.word	0x0801a025
 8019fe0:	0801a025 	.word	0x0801a025
 8019fe4:	0801a025 	.word	0x0801a025
 8019fe8:	0801a025 	.word	0x0801a025
 8019fec:	0801a025 	.word	0x0801a025
 8019ff0:	0801a025 	.word	0x0801a025
 8019ff4:	0801a025 	.word	0x0801a025
 8019ff8:	0801a025 	.word	0x0801a025
 8019ffc:	0801a025 	.word	0x0801a025
 801a000:	0801a025 	.word	0x0801a025
 801a004:	0801a025 	.word	0x0801a025
 801a008:	0801a025 	.word	0x0801a025
 801a00c:	0801a025 	.word	0x0801a025
 801a010:	0801a025 	.word	0x0801a025
 801a014:	0801a025 	.word	0x0801a025
 801a018:	0801a025 	.word	0x0801a025
 801a01c:	0801a025 	.word	0x0801a025
 801a020:	0801a025 	.word	0x0801a025
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< HEAD
 800b5c0:	bf00      	nop
  }

  return (USBD_OK);
 800b5c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <CDC_Receive_FS>:
=======
 801a024:	bf00      	nop
  }

  return (USBD_OK);
 801a026:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a028:	4618      	mov	r0, r3
 801a02a:	370c      	adds	r7, #12
 801a02c:	46bd      	mov	sp, r7
 801a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a032:	4770      	bx	lr

0801a034 <CDC_Receive_FS>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< HEAD
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	4805      	ldr	r0, [pc, #20]	; (800b5f4 <CDC_Receive_FS+0x24>)
 800b5de:	f7fc ffda 	bl	8008596 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5e2:	4804      	ldr	r0, [pc, #16]	; (800b5f4 <CDC_Receive_FS+0x24>)
 800b5e4:	f7fc ffeb 	bl	80085be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b5e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20007424 	.word	0x20007424

0800b5f8 <USBD_FS_DeviceDescriptor>:
=======
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a03e:	6879      	ldr	r1, [r7, #4]
 801a040:	4805      	ldr	r0, [pc, #20]	; (801a058 <CDC_Receive_FS+0x24>)
 801a042:	f7ef ff0e 	bl	8009e62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a046:	4804      	ldr	r0, [pc, #16]	; (801a058 <CDC_Receive_FS+0x24>)
 801a048:	f7ef ff1f 	bl	8009e8a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a04c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a04e:	4618      	mov	r0, r3
 801a050:	3708      	adds	r7, #8
 801a052:	46bd      	mov	sp, r7
 801a054:	bd80      	pop	{r7, pc}
 801a056:	bf00      	nop
 801a058:	2000ab74 	.word	0x2000ab74

0801a05c <USBD_FS_DeviceDescriptor>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	6039      	str	r1, [r7, #0]
 800b602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2212      	movs	r2, #18
 800b608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b60a:	4b03      	ldr	r3, [pc, #12]	; (800b618 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20000148 	.word	0x20000148

0800b61c <USBD_FS_LangIDStrDescriptor>:
=======
 801a05c:	b480      	push	{r7}
 801a05e:	b083      	sub	sp, #12
 801a060:	af00      	add	r7, sp, #0
 801a062:	4603      	mov	r3, r0
 801a064:	6039      	str	r1, [r7, #0]
 801a066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	2212      	movs	r2, #18
 801a06c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a06e:	4b03      	ldr	r3, [pc, #12]	; (801a07c <USBD_FS_DeviceDescriptor+0x20>)
}
 801a070:	4618      	mov	r0, r3
 801a072:	370c      	adds	r7, #12
 801a074:	46bd      	mov	sp, r7
 801a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07a:	4770      	bx	lr
 801a07c:	20000154 	.word	0x20000154

0801a080 <USBD_FS_LangIDStrDescriptor>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	6039      	str	r1, [r7, #0]
 800b626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2204      	movs	r2, #4
 800b62c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b62e:	4b03      	ldr	r3, [pc, #12]	; (800b63c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	2000015c 	.word	0x2000015c

0800b640 <USBD_FS_ProductStrDescriptor>:
=======
 801a080:	b480      	push	{r7}
 801a082:	b083      	sub	sp, #12
 801a084:	af00      	add	r7, sp, #0
 801a086:	4603      	mov	r3, r0
 801a088:	6039      	str	r1, [r7, #0]
 801a08a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a08c:	683b      	ldr	r3, [r7, #0]
 801a08e:	2204      	movs	r2, #4
 801a090:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a092:	4b03      	ldr	r3, [pc, #12]	; (801a0a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a094:	4618      	mov	r0, r3
 801a096:	370c      	adds	r7, #12
 801a098:	46bd      	mov	sp, r7
 801a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09e:	4770      	bx	lr
 801a0a0:	20000168 	.word	0x20000168

0801a0a4 <USBD_FS_ProductStrDescriptor>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	6039      	str	r1, [r7, #0]
 800b64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d105      	bne.n	800b65e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	4907      	ldr	r1, [pc, #28]	; (800b674 <USBD_FS_ProductStrDescriptor+0x34>)
 800b656:	4808      	ldr	r0, [pc, #32]	; (800b678 <USBD_FS_ProductStrDescriptor+0x38>)
 800b658:	f7fd ff58 	bl	800950c <USBD_GetString>
 800b65c:	e004      	b.n	800b668 <USBD_FS_ProductStrDescriptor+0x28>
=======
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b082      	sub	sp, #8
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	6039      	str	r1, [r7, #0]
 801a0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a0b0:	79fb      	ldrb	r3, [r7, #7]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d105      	bne.n	801a0c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a0b6:	683a      	ldr	r2, [r7, #0]
 801a0b8:	4907      	ldr	r1, [pc, #28]	; (801a0d8 <USBD_FS_ProductStrDescriptor+0x34>)
 801a0ba:	4808      	ldr	r0, [pc, #32]	; (801a0dc <USBD_FS_ProductStrDescriptor+0x38>)
 801a0bc:	f7f0 fe8c 	bl	800add8 <USBD_GetString>
 801a0c0:	e004      	b.n	801a0cc <USBD_FS_ProductStrDescriptor+0x28>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	4904      	ldr	r1, [pc, #16]	; (800b674 <USBD_FS_ProductStrDescriptor+0x34>)
 800b662:	4805      	ldr	r0, [pc, #20]	; (800b678 <USBD_FS_ProductStrDescriptor+0x38>)
 800b664:	f7fd ff52 	bl	800950c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b668:	4b02      	ldr	r3, [pc, #8]	; (800b674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	200086c0 	.word	0x200086c0
 800b678:	0800c820 	.word	0x0800c820

0800b67c <USBD_FS_ManufacturerStrDescriptor>:
=======
 801a0c2:	683a      	ldr	r2, [r7, #0]
 801a0c4:	4904      	ldr	r1, [pc, #16]	; (801a0d8 <USBD_FS_ProductStrDescriptor+0x34>)
 801a0c6:	4805      	ldr	r0, [pc, #20]	; (801a0dc <USBD_FS_ProductStrDescriptor+0x38>)
 801a0c8:	f7f0 fe86 	bl	800add8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a0cc:	4b02      	ldr	r3, [pc, #8]	; (801a0d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	3708      	adds	r7, #8
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	2000be10 	.word	0x2000be10
 801a0dc:	0801df64 	.word	0x0801df64

0801a0e0 <USBD_FS_ManufacturerStrDescriptor>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	6039      	str	r1, [r7, #0]
 800b686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	4904      	ldr	r1, [pc, #16]	; (800b69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b68c:	4804      	ldr	r0, [pc, #16]	; (800b6a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b68e:	f7fd ff3d 	bl	800950c <USBD_GetString>
  return USBD_StrDesc;
 800b692:	4b02      	ldr	r3, [pc, #8]	; (800b69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	200086c0 	.word	0x200086c0
 800b6a0:	0800c838 	.word	0x0800c838

0800b6a4 <USBD_FS_SerialStrDescriptor>:
=======
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	6039      	str	r1, [r7, #0]
 801a0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a0ec:	683a      	ldr	r2, [r7, #0]
 801a0ee:	4904      	ldr	r1, [pc, #16]	; (801a100 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a0f0:	4804      	ldr	r0, [pc, #16]	; (801a104 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a0f2:	f7f0 fe71 	bl	800add8 <USBD_GetString>
  return USBD_StrDesc;
 801a0f6:	4b02      	ldr	r3, [pc, #8]	; (801a100 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	3708      	adds	r7, #8
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}
 801a100:	2000be10 	.word	0x2000be10
 801a104:	0801df7c 	.word	0x0801df7c

0801a108 <USBD_FS_SerialStrDescriptor>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	6039      	str	r1, [r7, #0]
 800b6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	221a      	movs	r2, #26
 800b6b4:	801a      	strh	r2, [r3, #0]
=======
 801a108:	b580      	push	{r7, lr}
 801a10a:	b082      	sub	sp, #8
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	4603      	mov	r3, r0
 801a110:	6039      	str	r1, [r7, #0]
 801a112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	221a      	movs	r2, #26
 801a118:	801a      	strh	r2, [r3, #0]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< HEAD
 800b6b6:	f000 f843 	bl	800b740 <Get_SerialNum>
=======
 801a11a:	f000 f843 	bl	801a1a4 <Get_SerialNum>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
<<<<<<< HEAD
 800b6ba:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	20000160 	.word	0x20000160

0800b6c8 <USBD_FS_ConfigStrDescriptor>:
=======
 801a11e:	4b02      	ldr	r3, [pc, #8]	; (801a128 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a120:	4618      	mov	r0, r3
 801a122:	3708      	adds	r7, #8
 801a124:	46bd      	mov	sp, r7
 801a126:	bd80      	pop	{r7, pc}
 801a128:	2000016c 	.word	0x2000016c

0801a12c <USBD_FS_ConfigStrDescriptor>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d105      	bne.n	800b6e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	4907      	ldr	r1, [pc, #28]	; (800b6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6de:	4808      	ldr	r0, [pc, #32]	; (800b700 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6e0:	f7fd ff14 	bl	800950c <USBD_GetString>
 800b6e4:	e004      	b.n	800b6f0 <USBD_FS_ConfigStrDescriptor+0x28>
=======
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	4603      	mov	r3, r0
 801a134:	6039      	str	r1, [r7, #0]
 801a136:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a138:	79fb      	ldrb	r3, [r7, #7]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d105      	bne.n	801a14a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a13e:	683a      	ldr	r2, [r7, #0]
 801a140:	4907      	ldr	r1, [pc, #28]	; (801a160 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a142:	4808      	ldr	r0, [pc, #32]	; (801a164 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a144:	f7f0 fe48 	bl	800add8 <USBD_GetString>
 801a148:	e004      	b.n	801a154 <USBD_FS_ConfigStrDescriptor+0x28>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	4904      	ldr	r1, [pc, #16]	; (800b6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6ea:	4805      	ldr	r0, [pc, #20]	; (800b700 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6ec:	f7fd ff0e 	bl	800950c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6f0:	4b02      	ldr	r3, [pc, #8]	; (800b6fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	200086c0 	.word	0x200086c0
 800b700:	0800c84c 	.word	0x0800c84c

0800b704 <USBD_FS_InterfaceStrDescriptor>:
=======
 801a14a:	683a      	ldr	r2, [r7, #0]
 801a14c:	4904      	ldr	r1, [pc, #16]	; (801a160 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a14e:	4805      	ldr	r0, [pc, #20]	; (801a164 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a150:	f7f0 fe42 	bl	800add8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a154:	4b02      	ldr	r3, [pc, #8]	; (801a160 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a156:	4618      	mov	r0, r3
 801a158:	3708      	adds	r7, #8
 801a15a:	46bd      	mov	sp, r7
 801a15c:	bd80      	pop	{r7, pc}
 801a15e:	bf00      	nop
 801a160:	2000be10 	.word	0x2000be10
 801a164:	0801df90 	.word	0x0801df90

0801a168 <USBD_FS_InterfaceStrDescriptor>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	4907      	ldr	r1, [pc, #28]	; (800b738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b71a:	4808      	ldr	r0, [pc, #32]	; (800b73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b71c:	f7fd fef6 	bl	800950c <USBD_GetString>
 800b720:	e004      	b.n	800b72c <USBD_FS_InterfaceStrDescriptor+0x28>
=======
 801a168:	b580      	push	{r7, lr}
 801a16a:	b082      	sub	sp, #8
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	4603      	mov	r3, r0
 801a170:	6039      	str	r1, [r7, #0]
 801a172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a174:	79fb      	ldrb	r3, [r7, #7]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d105      	bne.n	801a186 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a17a:	683a      	ldr	r2, [r7, #0]
 801a17c:	4907      	ldr	r1, [pc, #28]	; (801a19c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a17e:	4808      	ldr	r0, [pc, #32]	; (801a1a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a180:	f7f0 fe2a 	bl	800add8 <USBD_GetString>
 801a184:	e004      	b.n	801a190 <USBD_FS_InterfaceStrDescriptor+0x28>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	4904      	ldr	r1, [pc, #16]	; (800b738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b726:	4805      	ldr	r0, [pc, #20]	; (800b73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b728:	f7fd fef0 	bl	800950c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	200086c0 	.word	0x200086c0
 800b73c:	0800c858 	.word	0x0800c858

0800b740 <Get_SerialNum>:
=======
 801a186:	683a      	ldr	r2, [r7, #0]
 801a188:	4904      	ldr	r1, [pc, #16]	; (801a19c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a18a:	4805      	ldr	r0, [pc, #20]	; (801a1a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a18c:	f7f0 fe24 	bl	800add8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a190:	4b02      	ldr	r3, [pc, #8]	; (801a19c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a192:	4618      	mov	r0, r3
 801a194:	3708      	adds	r7, #8
 801a196:	46bd      	mov	sp, r7
 801a198:	bd80      	pop	{r7, pc}
 801a19a:	bf00      	nop
 801a19c:	2000be10 	.word	0x2000be10
 801a1a0:	0801df9c 	.word	0x0801df9c

0801a1a4 <Get_SerialNum>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b746:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <Get_SerialNum+0x44>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b74c:	4b0e      	ldr	r3, [pc, #56]	; (800b788 <Get_SerialNum+0x48>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b752:	4b0e      	ldr	r3, [pc, #56]	; (800b78c <Get_SerialNum+0x4c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4413      	add	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d009      	beq.n	800b77a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b766:	2208      	movs	r2, #8
 800b768:	4909      	ldr	r1, [pc, #36]	; (800b790 <Get_SerialNum+0x50>)
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f000 f814 	bl	800b798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b770:	2204      	movs	r2, #4
 800b772:	4908      	ldr	r1, [pc, #32]	; (800b794 <Get_SerialNum+0x54>)
 800b774:	68b8      	ldr	r0, [r7, #8]
 800b776:	f000 f80f 	bl	800b798 <IntToUnicode>
  }
}
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	1fff7a10 	.word	0x1fff7a10
 800b788:	1fff7a14 	.word	0x1fff7a14
 800b78c:	1fff7a18 	.word	0x1fff7a18
 800b790:	20000162 	.word	0x20000162
 800b794:	20000172 	.word	0x20000172

0800b798 <IntToUnicode>:
=======
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b084      	sub	sp, #16
 801a1a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a1aa:	4b0f      	ldr	r3, [pc, #60]	; (801a1e8 <Get_SerialNum+0x44>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a1b0:	4b0e      	ldr	r3, [pc, #56]	; (801a1ec <Get_SerialNum+0x48>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a1b6:	4b0e      	ldr	r3, [pc, #56]	; (801a1f0 <Get_SerialNum+0x4c>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a1bc:	68fa      	ldr	r2, [r7, #12]
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	4413      	add	r3, r2
 801a1c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d009      	beq.n	801a1de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a1ca:	2208      	movs	r2, #8
 801a1cc:	4909      	ldr	r1, [pc, #36]	; (801a1f4 <Get_SerialNum+0x50>)
 801a1ce:	68f8      	ldr	r0, [r7, #12]
 801a1d0:	f000 f814 	bl	801a1fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a1d4:	2204      	movs	r2, #4
 801a1d6:	4908      	ldr	r1, [pc, #32]	; (801a1f8 <Get_SerialNum+0x54>)
 801a1d8:	68b8      	ldr	r0, [r7, #8]
 801a1da:	f000 f80f 	bl	801a1fc <IntToUnicode>
  }
}
 801a1de:	bf00      	nop
 801a1e0:	3710      	adds	r7, #16
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	bd80      	pop	{r7, pc}
 801a1e6:	bf00      	nop
 801a1e8:	1fff7a10 	.word	0x1fff7a10
 801a1ec:	1fff7a14 	.word	0x1fff7a14
 801a1f0:	1fff7a18 	.word	0x1fff7a18
 801a1f4:	2000016e 	.word	0x2000016e
 801a1f8:	2000017e 	.word	0x2000017e

0801a1fc <IntToUnicode>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	75fb      	strb	r3, [r7, #23]
 800b7ae:	e027      	b.n	800b800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	0f1b      	lsrs	r3, r3, #28
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d80b      	bhi.n	800b7d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	0f1b      	lsrs	r3, r3, #28
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	440b      	add	r3, r1
 800b7c8:	3230      	adds	r2, #48	; 0x30
 800b7ca:	b2d2      	uxtb	r2, r2
 800b7cc:	701a      	strb	r2, [r3, #0]
 800b7ce:	e00a      	b.n	800b7e6 <IntToUnicode+0x4e>
=======
 801a1fc:	b480      	push	{r7}
 801a1fe:	b087      	sub	sp, #28
 801a200:	af00      	add	r7, sp, #0
 801a202:	60f8      	str	r0, [r7, #12]
 801a204:	60b9      	str	r1, [r7, #8]
 801a206:	4613      	mov	r3, r2
 801a208:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a20a:	2300      	movs	r3, #0
 801a20c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a20e:	2300      	movs	r3, #0
 801a210:	75fb      	strb	r3, [r7, #23]
 801a212:	e027      	b.n	801a264 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	0f1b      	lsrs	r3, r3, #28
 801a218:	2b09      	cmp	r3, #9
 801a21a:	d80b      	bhi.n	801a234 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	0f1b      	lsrs	r3, r3, #28
 801a220:	b2da      	uxtb	r2, r3
 801a222:	7dfb      	ldrb	r3, [r7, #23]
 801a224:	005b      	lsls	r3, r3, #1
 801a226:	4619      	mov	r1, r3
 801a228:	68bb      	ldr	r3, [r7, #8]
 801a22a:	440b      	add	r3, r1
 801a22c:	3230      	adds	r2, #48	; 0x30
 801a22e:	b2d2      	uxtb	r2, r2
 801a230:	701a      	strb	r2, [r3, #0]
 801a232:	e00a      	b.n	801a24a <IntToUnicode+0x4e>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	0f1b      	lsrs	r3, r3, #28
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	440b      	add	r3, r1
 800b7e0:	3237      	adds	r2, #55	; 0x37
 800b7e2:	b2d2      	uxtb	r2, r2
 800b7e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	75fb      	strb	r3, [r7, #23]
 800b800:	7dfa      	ldrb	r2, [r7, #23]
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	429a      	cmp	r2, r3
 800b806:	d3d3      	bcc.n	800b7b0 <IntToUnicode+0x18>
  }
}
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <HAL_PCD_MspInit>:
=======
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	0f1b      	lsrs	r3, r3, #28
 801a238:	b2da      	uxtb	r2, r3
 801a23a:	7dfb      	ldrb	r3, [r7, #23]
 801a23c:	005b      	lsls	r3, r3, #1
 801a23e:	4619      	mov	r1, r3
 801a240:	68bb      	ldr	r3, [r7, #8]
 801a242:	440b      	add	r3, r1
 801a244:	3237      	adds	r2, #55	; 0x37
 801a246:	b2d2      	uxtb	r2, r2
 801a248:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	011b      	lsls	r3, r3, #4
 801a24e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a250:	7dfb      	ldrb	r3, [r7, #23]
 801a252:	005b      	lsls	r3, r3, #1
 801a254:	3301      	adds	r3, #1
 801a256:	68ba      	ldr	r2, [r7, #8]
 801a258:	4413      	add	r3, r2
 801a25a:	2200      	movs	r2, #0
 801a25c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a25e:	7dfb      	ldrb	r3, [r7, #23]
 801a260:	3301      	adds	r3, #1
 801a262:	75fb      	strb	r3, [r7, #23]
 801a264:	7dfa      	ldrb	r2, [r7, #23]
 801a266:	79fb      	ldrb	r3, [r7, #7]
 801a268:	429a      	cmp	r2, r3
 801a26a:	d3d3      	bcc.n	801a214 <IntToUnicode+0x18>
  }
}
 801a26c:	bf00      	nop
 801a26e:	371c      	adds	r7, #28
 801a270:	46bd      	mov	sp, r7
 801a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a276:	4770      	bx	lr

0801a278 <HAL_PCD_MspInit>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
 800b814:	b580      	push	{r7, lr}
 800b816:	b08a      	sub	sp, #40	; 0x28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	605a      	str	r2, [r3, #4]
 800b826:	609a      	str	r2, [r3, #8]
 800b828:	60da      	str	r2, [r3, #12]
 800b82a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b834:	d147      	bne.n	800b8c6 <HAL_PCD_MspInit+0xb2>
=======
 801a278:	b580      	push	{r7, lr}
 801a27a:	b08a      	sub	sp, #40	; 0x28
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a280:	f107 0314 	add.w	r3, r7, #20
 801a284:	2200      	movs	r2, #0
 801a286:	601a      	str	r2, [r3, #0]
 801a288:	605a      	str	r2, [r3, #4]
 801a28a:	609a      	str	r2, [r3, #8]
 801a28c:	60da      	str	r2, [r3, #12]
 801a28e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a298:	d147      	bne.n	801a32a <HAL_PCD_MspInit+0xb2>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 800b836:	2300      	movs	r3, #0
 800b838:	613b      	str	r3, [r7, #16]
 800b83a:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83e:	4a24      	ldr	r2, [pc, #144]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b840:	f043 0301 	orr.w	r3, r3, #1
 800b844:	6313      	str	r3, [r2, #48]	; 0x30
 800b846:	4b22      	ldr	r3, [pc, #136]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	613b      	str	r3, [r7, #16]
 800b850:	693b      	ldr	r3, [r7, #16]
=======
 801a29a:	2300      	movs	r3, #0
 801a29c:	613b      	str	r3, [r7, #16]
 801a29e:	4b25      	ldr	r3, [pc, #148]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2a2:	4a24      	ldr	r2, [pc, #144]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a2a4:	f043 0301 	orr.w	r3, r3, #1
 801a2a8:	6313      	str	r3, [r2, #48]	; 0x30
 801a2aa:	4b22      	ldr	r3, [pc, #136]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2ae:	f003 0301 	and.w	r3, r3, #1
 801a2b2:	613b      	str	r3, [r7, #16]
 801a2b4:	693b      	ldr	r3, [r7, #16]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
<<<<<<< HEAD
 800b852:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800b856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b858:	2302      	movs	r3, #2
 800b85a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b85c:	2300      	movs	r3, #0
 800b85e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b860:	2303      	movs	r3, #3
 800b862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b864:	230a      	movs	r3, #10
 800b866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b868:	f107 0314 	add.w	r3, r7, #20
 800b86c:	4619      	mov	r1, r3
 800b86e:	4819      	ldr	r0, [pc, #100]	; (800b8d4 <HAL_PCD_MspInit+0xc0>)
 800b870:	f7f6 ff0e 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b874:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b87a:	2300      	movs	r3, #0
 800b87c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b882:	f107 0314 	add.w	r3, r7, #20
 800b886:	4619      	mov	r1, r3
 800b888:	4812      	ldr	r0, [pc, #72]	; (800b8d4 <HAL_PCD_MspInit+0xc0>)
 800b88a:	f7f6 ff01 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b88e:	4b10      	ldr	r3, [pc, #64]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b892:	4a0f      	ldr	r2, [pc, #60]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b898:	6353      	str	r3, [r2, #52]	; 0x34
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	4b0c      	ldr	r3, [pc, #48]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a2:	4a0b      	ldr	r2, [pc, #44]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b8a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8a8:	6453      	str	r3, [r2, #68]	; 0x44
 800b8aa:	4b09      	ldr	r3, [pc, #36]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2105      	movs	r1, #5
 800b8ba:	2043      	movs	r0, #67	; 0x43
 800b8bc:	f7f6 fe20 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8c0:	2043      	movs	r0, #67	; 0x43
 800b8c2:	f7f6 fe39 	bl	8002538 <HAL_NVIC_EnableIRQ>
=======
 801a2b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801a2ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a2bc:	2302      	movs	r3, #2
 801a2be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a2c4:	2303      	movs	r3, #3
 801a2c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a2c8:	230a      	movs	r3, #10
 801a2ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a2cc:	f107 0314 	add.w	r3, r7, #20
 801a2d0:	4619      	mov	r1, r3
 801a2d2:	4819      	ldr	r0, [pc, #100]	; (801a338 <HAL_PCD_MspInit+0xc0>)
 801a2d4:	f7e9 f9c2 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801a2d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a2dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801a2e6:	f107 0314 	add.w	r3, r7, #20
 801a2ea:	4619      	mov	r1, r3
 801a2ec:	4812      	ldr	r0, [pc, #72]	; (801a338 <HAL_PCD_MspInit+0xc0>)
 801a2ee:	f7e9 f9b5 	bl	800365c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a2f2:	4b10      	ldr	r3, [pc, #64]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2f6:	4a0f      	ldr	r2, [pc, #60]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a2fc:	6353      	str	r3, [r2, #52]	; 0x34
 801a2fe:	2300      	movs	r3, #0
 801a300:	60fb      	str	r3, [r7, #12]
 801a302:	4b0c      	ldr	r3, [pc, #48]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a306:	4a0b      	ldr	r2, [pc, #44]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a30c:	6453      	str	r3, [r2, #68]	; 0x44
 801a30e:	4b09      	ldr	r3, [pc, #36]	; (801a334 <HAL_PCD_MspInit+0xbc>)
 801a310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a316:	60fb      	str	r3, [r7, #12]
 801a318:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801a31a:	2200      	movs	r2, #0
 801a31c:	2105      	movs	r1, #5
 801a31e:	2043      	movs	r0, #67	; 0x43
 801a320:	f7e8 f93e 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a324:	2043      	movs	r0, #67	; 0x43
 801a326:	f7e8 f957 	bl	80025d8 <HAL_NVIC_EnableIRQ>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
<<<<<<< HEAD
 800b8c6:	bf00      	nop
 800b8c8:	3728      	adds	r7, #40	; 0x28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40023800 	.word	0x40023800
 800b8d4:	40020000 	.word	0x40020000

0800b8d8 <HAL_PCD_SetupStageCallback>:
=======
 801a32a:	bf00      	nop
 801a32c:	3728      	adds	r7, #40	; 0x28
 801a32e:	46bd      	mov	sp, r7
 801a330:	bd80      	pop	{r7, pc}
 801a332:	bf00      	nop
 801a334:	40023800 	.word	0x40023800
 801a338:	40020000 	.word	0x40020000

0801a33c <HAL_PCD_SetupStageCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f7fc ff1d 	bl	800872e <USBD_LL_SetupStage>
}
 800b8f4:	bf00      	nop
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <HAL_PCD_DataOutStageCallback>:
=======
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a350:	4619      	mov	r1, r3
 801a352:	4610      	mov	r0, r2
 801a354:	f7ef fe51 	bl	8009ffa <USBD_LL_SetupStage>
}
 801a358:	bf00      	nop
 801a35a:	3708      	adds	r7, #8
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}

0801a360 <HAL_PCD_DataOutStageCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b90e:	78fa      	ldrb	r2, [r7, #3]
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	440b      	add	r3, r1
 800b91c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	78fb      	ldrb	r3, [r7, #3]
 800b924:	4619      	mov	r1, r3
 800b926:	f7fc ff4d 	bl	80087c4 <USBD_LL_DataOutStage>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <HAL_PCD_DataInStageCallback>:
=======
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	460b      	mov	r3, r1
 801a36a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a372:	78fa      	ldrb	r2, [r7, #3]
 801a374:	6879      	ldr	r1, [r7, #4]
 801a376:	4613      	mov	r3, r2
 801a378:	00db      	lsls	r3, r3, #3
 801a37a:	1a9b      	subs	r3, r3, r2
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	440b      	add	r3, r1
 801a380:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a384:	681a      	ldr	r2, [r3, #0]
 801a386:	78fb      	ldrb	r3, [r7, #3]
 801a388:	4619      	mov	r1, r3
 801a38a:	f7ef fe81 	bl	800a090 <USBD_LL_DataOutStage>
}
 801a38e:	bf00      	nop
 801a390:	3708      	adds	r7, #8
 801a392:	46bd      	mov	sp, r7
 801a394:	bd80      	pop	{r7, pc}

0801a396 <HAL_PCD_DataInStageCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	460b      	mov	r3, r1
 800b93c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b944:	78fa      	ldrb	r2, [r7, #3]
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	4613      	mov	r3, r2
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	1a9b      	subs	r3, r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	3348      	adds	r3, #72	; 0x48
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	4619      	mov	r1, r3
 800b95a:	f7fc ffa4 	bl	80088a6 <USBD_LL_DataInStage>
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <HAL_PCD_SOFCallback>:
=======
 801a396:	b580      	push	{r7, lr}
 801a398:	b082      	sub	sp, #8
 801a39a:	af00      	add	r7, sp, #0
 801a39c:	6078      	str	r0, [r7, #4]
 801a39e:	460b      	mov	r3, r1
 801a3a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a3a8:	78fa      	ldrb	r2, [r7, #3]
 801a3aa:	6879      	ldr	r1, [r7, #4]
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	00db      	lsls	r3, r3, #3
 801a3b0:	1a9b      	subs	r3, r3, r2
 801a3b2:	009b      	lsls	r3, r3, #2
 801a3b4:	440b      	add	r3, r1
 801a3b6:	3348      	adds	r3, #72	; 0x48
 801a3b8:	681a      	ldr	r2, [r3, #0]
 801a3ba:	78fb      	ldrb	r3, [r7, #3]
 801a3bc:	4619      	mov	r1, r3
 801a3be:	f7ef fed8 	bl	800a172 <USBD_LL_DataInStage>
}
 801a3c2:	bf00      	nop
 801a3c4:	3708      	adds	r7, #8
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd80      	pop	{r7, pc}

0801a3ca <HAL_PCD_SOFCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b974:	4618      	mov	r0, r3
 800b976:	f7fd f8b2 	bl	8008ade <USBD_LL_SOF>
}
 800b97a:	bf00      	nop
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <HAL_PCD_ResetCallback>:
=======
 801a3ca:	b580      	push	{r7, lr}
 801a3cc:	b082      	sub	sp, #8
 801a3ce:	af00      	add	r7, sp, #0
 801a3d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a3d8:	4618      	mov	r0, r3
 801a3da:	f7ef ffe6 	bl	800a3aa <USBD_LL_SOF>
}
 801a3de:	bf00      	nop
 801a3e0:	3708      	adds	r7, #8
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}

0801a3e6 <HAL_PCD_ResetCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
<<<<<<< HEAD
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b98a:	2301      	movs	r3, #1
 800b98c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d102      	bne.n	800b99c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b996:	2300      	movs	r3, #0
 800b998:	73fb      	strb	r3, [r7, #15]
 800b99a:	e008      	b.n	800b9ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d102      	bne.n	800b9aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	73fb      	strb	r3, [r7, #15]
 800b9a8:	e001      	b.n	800b9ae <HAL_PCD_ResetCallback+0x2c>
=======
 801a3e6:	b580      	push	{r7, lr}
 801a3e8:	b084      	sub	sp, #16
 801a3ea:	af00      	add	r7, sp, #0
 801a3ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a3ee:	2301      	movs	r3, #1
 801a3f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	68db      	ldr	r3, [r3, #12]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d102      	bne.n	801a400 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	73fb      	strb	r3, [r7, #15]
 801a3fe:	e008      	b.n	801a412 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	68db      	ldr	r3, [r3, #12]
 801a404:	2b02      	cmp	r3, #2
 801a406:	d102      	bne.n	801a40e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a408:	2301      	movs	r3, #1
 801a40a:	73fb      	strb	r3, [r7, #15]
 801a40c:	e001      	b.n	801a412 <HAL_PCD_ResetCallback+0x2c>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  else
  {
    Error_Handler();
<<<<<<< HEAD
 800b9aa:	f7f5 fedd 	bl	8001768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9b4:	7bfa      	ldrb	r2, [r7, #15]
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fd f85a 	bl	8008a72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fd f813 	bl	80089f0 <USBD_LL_Reset>
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <HAL_PCD_SuspendCallback>:
=======
 801a40e:	f7e7 f98d 	bl	800172c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a418:	7bfa      	ldrb	r2, [r7, #15]
 801a41a:	4611      	mov	r1, r2
 801a41c:	4618      	mov	r0, r3
 801a41e:	f7ef ff8e 	bl	800a33e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a428:	4618      	mov	r0, r3
 801a42a:	f7ef ff47 	bl	800a2bc <USBD_LL_Reset>
}
 801a42e:	bf00      	nop
 801a430:	3710      	adds	r7, #16
 801a432:	46bd      	mov	sp, r7
 801a434:	bd80      	pop	{r7, pc}
	...

0801a438 <HAL_PCD_SuspendCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fd f855 	bl	8008a92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	6812      	ldr	r2, [r2, #0]
 800b9f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9fa:	f043 0301 	orr.w	r3, r3, #1
 800b9fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d005      	beq.n	800ba14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba08:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <HAL_PCD_SuspendCallback+0x48>)
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	4a03      	ldr	r2, [pc, #12]	; (800ba1c <HAL_PCD_SuspendCallback+0x48>)
 800ba0e:	f043 0306 	orr.w	r3, r3, #6
 800ba12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	e000ed00 	.word	0xe000ed00

0800ba20 <HAL_PCD_ResumeCallback>:
=======
 801a438:	b580      	push	{r7, lr}
 801a43a:	b082      	sub	sp, #8
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a446:	4618      	mov	r0, r3
 801a448:	f7ef ff89 	bl	800a35e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	687a      	ldr	r2, [r7, #4]
 801a458:	6812      	ldr	r2, [r2, #0]
 801a45a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a45e:	f043 0301 	orr.w	r3, r3, #1
 801a462:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	6a1b      	ldr	r3, [r3, #32]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d005      	beq.n	801a478 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a46c:	4b04      	ldr	r3, [pc, #16]	; (801a480 <HAL_PCD_SuspendCallback+0x48>)
 801a46e:	691b      	ldr	r3, [r3, #16]
 801a470:	4a03      	ldr	r2, [pc, #12]	; (801a480 <HAL_PCD_SuspendCallback+0x48>)
 801a472:	f043 0306 	orr.w	r3, r3, #6
 801a476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a478:	bf00      	nop
 801a47a:	3708      	adds	r7, #8
 801a47c:	46bd      	mov	sp, r7
 801a47e:	bd80      	pop	{r7, pc}
 801a480:	e000ed00 	.word	0xe000ed00

0801a484 <HAL_PCD_ResumeCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
=======
 801a484:	b580      	push	{r7, lr}
 801a486:	b082      	sub	sp, #8
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< HEAD
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fd f844 	bl	8008abc <USBD_LL_Resume>
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_PCD_ISOOUTIncompleteCallback>:
=======
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a492:	4618      	mov	r0, r3
 801a494:	f7ef ff78 	bl	800a388 <USBD_LL_Resume>
}
 801a498:	bf00      	nop
 801a49a:	3708      	adds	r7, #8
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}

0801a4a0 <HAL_PCD_ISOOUTIncompleteCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba4e:	78fa      	ldrb	r2, [r7, #3]
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd f86a 	bl	8008b2c <USBD_LL_IsoOUTIncomplete>
}
 800ba58:	bf00      	nop
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_PCD_ISOINIncompleteCallback>:
=======
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b082      	sub	sp, #8
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
 801a4a8:	460b      	mov	r3, r1
 801a4aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a4b2:	78fa      	ldrb	r2, [r7, #3]
 801a4b4:	4611      	mov	r1, r2
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	f7ef ff9e 	bl	800a3f8 <USBD_LL_IsoOUTIncomplete>
}
 801a4bc:	bf00      	nop
 801a4be:	3708      	adds	r7, #8
 801a4c0:	46bd      	mov	sp, r7
 801a4c2:	bd80      	pop	{r7, pc}

0801a4c4 <HAL_PCD_ISOINIncompleteCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba72:	78fa      	ldrb	r2, [r7, #3]
 800ba74:	4611      	mov	r1, r2
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fd f84b 	bl	8008b12 <USBD_LL_IsoINIncomplete>
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <HAL_PCD_ConnectCallback>:
=======
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b082      	sub	sp, #8
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	6078      	str	r0, [r7, #4]
 801a4cc:	460b      	mov	r3, r1
 801a4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a4d6:	78fa      	ldrb	r2, [r7, #3]
 801a4d8:	4611      	mov	r1, r2
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f7ef ff7f 	bl	800a3de <USBD_LL_IsoINIncomplete>
}
 801a4e0:	bf00      	nop
 801a4e2:	3708      	adds	r7, #8
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bd80      	pop	{r7, pc}

0801a4e8 <HAL_PCD_ConnectCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fd f857 	bl	8008b46 <USBD_LL_DevConnected>
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <HAL_PCD_DisconnectCallback>:
=======
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b082      	sub	sp, #8
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f7ef ff8b 	bl	800a412 <USBD_LL_DevConnected>
}
 801a4fc:	bf00      	nop
 801a4fe:	3708      	adds	r7, #8
 801a500:	46bd      	mov	sp, r7
 801a502:	bd80      	pop	{r7, pc}

0801a504 <HAL_PCD_DisconnectCallback>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fd f854 	bl	8008b5c <USBD_LL_DevDisconnected>
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_LL_Init>:
=======
 801a504:	b580      	push	{r7, lr}
 801a506:	b082      	sub	sp, #8
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a512:	4618      	mov	r0, r3
 801a514:	f7ef ff88 	bl	800a428 <USBD_LL_DevDisconnected>
}
 801a518:	bf00      	nop
 801a51a:	3708      	adds	r7, #8
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}

0801a520 <USBD_LL_Init>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d13c      	bne.n	800bb46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bacc:	4a20      	ldr	r2, [pc, #128]	; (800bb50 <USBD_LL_Init+0x94>)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a1e      	ldr	r2, [pc, #120]	; (800bb50 <USBD_LL_Init+0x94>)
 800bad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800badc:	4b1c      	ldr	r3, [pc, #112]	; (800bb50 <USBD_LL_Init+0x94>)
 800bade:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bae4:	4b1a      	ldr	r3, [pc, #104]	; (800bb50 <USBD_LL_Init+0x94>)
 800bae6:	2204      	movs	r2, #4
 800bae8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800baea:	4b19      	ldr	r3, [pc, #100]	; (800bb50 <USBD_LL_Init+0x94>)
 800baec:	2202      	movs	r2, #2
 800baee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800baf0:	4b17      	ldr	r3, [pc, #92]	; (800bb50 <USBD_LL_Init+0x94>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baf6:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <USBD_LL_Init+0x94>)
 800baf8:	2202      	movs	r2, #2
 800bafa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800bafc:	4b14      	ldr	r3, [pc, #80]	; (800bb50 <USBD_LL_Init+0x94>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb02:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb08:	4b11      	ldr	r3, [pc, #68]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bb0e:	4b10      	ldr	r3, [pc, #64]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb10:	2201      	movs	r2, #1
 800bb12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb14:	4b0e      	ldr	r3, [pc, #56]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb1a:	480d      	ldr	r0, [pc, #52]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb1c:	f7f6 ff7b 	bl	8002a16 <HAL_PCD_Init>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb26:	f7f5 fe1f 	bl	8001768 <Error_Handler>
=======
 801a520:	b580      	push	{r7, lr}
 801a522:	b082      	sub	sp, #8
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d13c      	bne.n	801a5aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a530:	4a20      	ldr	r2, [pc, #128]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	4a1e      	ldr	r2, [pc, #120]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a53c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a540:	4b1c      	ldr	r3, [pc, #112]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a546:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801a548:	4b1a      	ldr	r3, [pc, #104]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a54a:	2204      	movs	r2, #4
 801a54c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a54e:	4b19      	ldr	r3, [pc, #100]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a550:	2202      	movs	r2, #2
 801a552:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a554:	4b17      	ldr	r3, [pc, #92]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a556:	2200      	movs	r2, #0
 801a558:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a55a:	4b16      	ldr	r3, [pc, #88]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a55c:	2202      	movs	r2, #2
 801a55e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801a560:	4b14      	ldr	r3, [pc, #80]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a562:	2201      	movs	r2, #1
 801a564:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a566:	4b13      	ldr	r3, [pc, #76]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a568:	2200      	movs	r2, #0
 801a56a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a56c:	4b11      	ldr	r3, [pc, #68]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a56e:	2200      	movs	r2, #0
 801a570:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801a572:	4b10      	ldr	r3, [pc, #64]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a574:	2201      	movs	r2, #1
 801a576:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a578:	4b0e      	ldr	r3, [pc, #56]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a57a:	2200      	movs	r2, #0
 801a57c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a57e:	480d      	ldr	r0, [pc, #52]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a580:	f7e9 fa2f 	bl	80039e2 <HAL_PCD_Init>
 801a584:	4603      	mov	r3, r0
 801a586:	2b00      	cmp	r3, #0
 801a588:	d001      	beq.n	801a58e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801a58a:	f7e7 f8cf 	bl	800172c <Error_Handler>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
<<<<<<< HEAD
 800bb2a:	2180      	movs	r1, #128	; 0x80
 800bb2c:	4808      	ldr	r0, [pc, #32]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb2e:	f7f8 f8e0 	bl	8003cf2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb32:	2240      	movs	r2, #64	; 0x40
 800bb34:	2100      	movs	r1, #0
 800bb36:	4806      	ldr	r0, [pc, #24]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb38:	f7f8 f894 	bl	8003c64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb3c:	2280      	movs	r2, #128	; 0x80
 800bb3e:	2101      	movs	r1, #1
 800bb40:	4803      	ldr	r0, [pc, #12]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb42:	f7f8 f88f 	bl	8003c64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	200088c0 	.word	0x200088c0

0800bb54 <USBD_LL_Start>:
=======
 801a58e:	2180      	movs	r1, #128	; 0x80
 801a590:	4808      	ldr	r0, [pc, #32]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a592:	f7ea fb94 	bl	8004cbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a596:	2240      	movs	r2, #64	; 0x40
 801a598:	2100      	movs	r1, #0
 801a59a:	4806      	ldr	r0, [pc, #24]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a59c:	f7ea fb48 	bl	8004c30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a5a0:	2280      	movs	r2, #128	; 0x80
 801a5a2:	2101      	movs	r1, #1
 801a5a4:	4803      	ldr	r0, [pc, #12]	; (801a5b4 <USBD_LL_Init+0x94>)
 801a5a6:	f7ea fb43 	bl	8004c30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a5aa:	2300      	movs	r3, #0
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	3708      	adds	r7, #8
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}
 801a5b4:	2000c010 	.word	0x2000c010

0801a5b8 <USBD_LL_Start>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7f7 f870 	bl	8002c50 <HAL_PCD_Start>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f92e 	bl	800bdd8 <USBD_Get_USB_Status>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBD_LL_OpenEP>:
=======
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b084      	sub	sp, #16
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f7e9 fb24 	bl	8003c1c <HAL_PCD_Start>
 801a5d4:	4603      	mov	r3, r0
 801a5d6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801a5d8:	7bfb      	ldrb	r3, [r7, #15]
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f000 f92e 	bl	801a83c <USBD_Get_USB_Status>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a5e4:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	3710      	adds	r7, #16
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}

0801a5ee <USBD_LL_OpenEP>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	461a      	mov	r2, r3
 800bb98:	4603      	mov	r3, r0
 800bb9a:	70fb      	strb	r3, [r7, #3]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70bb      	strb	r3, [r7, #2]
 800bba0:	4613      	mov	r3, r2
 800bba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bbb2:	78bb      	ldrb	r3, [r7, #2]
 800bbb4:	883a      	ldrh	r2, [r7, #0]
 800bbb6:	78f9      	ldrb	r1, [r7, #3]
 800bbb8:	f7f7 fc45 	bl	8003446 <HAL_PCD_EP_Open>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 f908 	bl	800bdd8 <USBD_Get_USB_Status>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_LL_CloseEP>:
=======
 801a5ee:	b580      	push	{r7, lr}
 801a5f0:	b084      	sub	sp, #16
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	6078      	str	r0, [r7, #4]
 801a5f6:	4608      	mov	r0, r1
 801a5f8:	4611      	mov	r1, r2
 801a5fa:	461a      	mov	r2, r3
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	70fb      	strb	r3, [r7, #3]
 801a600:	460b      	mov	r3, r1
 801a602:	70bb      	strb	r3, [r7, #2]
 801a604:	4613      	mov	r3, r2
 801a606:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a608:	2300      	movs	r3, #0
 801a60a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a60c:	2300      	movs	r3, #0
 801a60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801a616:	78bb      	ldrb	r3, [r7, #2]
 801a618:	883a      	ldrh	r2, [r7, #0]
 801a61a:	78f9      	ldrb	r1, [r7, #3]
 801a61c:	f7e9 fef9 	bl	8004412 <HAL_PCD_EP_Open>
 801a620:	4603      	mov	r3, r0
 801a622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a624:	7bfb      	ldrb	r3, [r7, #15]
 801a626:	4618      	mov	r0, r3
 801a628:	f000 f908 	bl	801a83c <USBD_Get_USB_Status>
 801a62c:	4603      	mov	r3, r0
 801a62e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a630:	7bbb      	ldrb	r3, [r7, #14]
}
 801a632:	4618      	mov	r0, r3
 801a634:	3710      	adds	r7, #16
 801a636:	46bd      	mov	sp, r7
 801a638:	bd80      	pop	{r7, pc}

0801a63a <USBD_LL_CloseEP>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b084      	sub	sp, #16
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbf0:	78fa      	ldrb	r2, [r7, #3]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f7 fc8e 	bl	8003516 <HAL_PCD_EP_Close>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 f8e9 	bl	800bdd8 <USBD_Get_USB_Status>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <USBD_LL_StallEP>:
=======
 801a63a:	b580      	push	{r7, lr}
 801a63c:	b084      	sub	sp, #16
 801a63e:	af00      	add	r7, sp, #0
 801a640:	6078      	str	r0, [r7, #4]
 801a642:	460b      	mov	r3, r1
 801a644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a646:	2300      	movs	r3, #0
 801a648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a64a:	2300      	movs	r3, #0
 801a64c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a654:	78fa      	ldrb	r2, [r7, #3]
 801a656:	4611      	mov	r1, r2
 801a658:	4618      	mov	r0, r3
 801a65a:	f7e9 ff42 	bl	80044e2 <HAL_PCD_EP_Close>
 801a65e:	4603      	mov	r3, r0
 801a660:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801a662:	7bfb      	ldrb	r3, [r7, #15]
 801a664:	4618      	mov	r0, r3
 801a666:	f000 f8e9 	bl	801a83c <USBD_Get_USB_Status>
 801a66a:	4603      	mov	r3, r0
 801a66c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801a66e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a670:	4618      	mov	r0, r3
 801a672:	3710      	adds	r7, #16
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <USBD_LL_StallEP>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc2e:	78fa      	ldrb	r2, [r7, #3]
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f7 fd66 	bl	8003704 <HAL_PCD_EP_SetStall>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 f8ca 	bl	800bdd8 <USBD_Get_USB_Status>
 800bc44:	4603      	mov	r3, r0
 800bc46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_LL_ClearStallEP>:
=======
 801a678:	b580      	push	{r7, lr}
 801a67a:	b084      	sub	sp, #16
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
 801a680:	460b      	mov	r3, r1
 801a682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a684:	2300      	movs	r3, #0
 801a686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a688:	2300      	movs	r3, #0
 801a68a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a692:	78fa      	ldrb	r2, [r7, #3]
 801a694:	4611      	mov	r1, r2
 801a696:	4618      	mov	r0, r3
 801a698:	f7ea f81a 	bl	80046d0 <HAL_PCD_EP_SetStall>
 801a69c:	4603      	mov	r3, r0
 801a69e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6a0:	7bfb      	ldrb	r3, [r7, #15]
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f000 f8ca 	bl	801a83c <USBD_Get_USB_Status>
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a6ac:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	3710      	adds	r7, #16
 801a6b2:	46bd      	mov	sp, r7
 801a6b4:	bd80      	pop	{r7, pc}

0801a6b6 <USBD_LL_ClearStallEP>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc6c:	78fa      	ldrb	r2, [r7, #3]
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f7 fdab 	bl	80037cc <HAL_PCD_EP_ClrStall>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f8ab 	bl	800bdd8 <USBD_Get_USB_Status>
 800bc82:	4603      	mov	r3, r0
 800bc84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_IsStallEP>:
=======
 801a6b6:	b580      	push	{r7, lr}
 801a6b8:	b084      	sub	sp, #16
 801a6ba:	af00      	add	r7, sp, #0
 801a6bc:	6078      	str	r0, [r7, #4]
 801a6be:	460b      	mov	r3, r1
 801a6c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a6d0:	78fa      	ldrb	r2, [r7, #3]
 801a6d2:	4611      	mov	r1, r2
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	f7ea f85f 	bl	8004798 <HAL_PCD_EP_ClrStall>
 801a6da:	4603      	mov	r3, r0
 801a6dc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801a6de:	7bfb      	ldrb	r3, [r7, #15]
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f000 f8ab 	bl	801a83c <USBD_Get_USB_Status>
 801a6e6:	4603      	mov	r3, r0
 801a6e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801a6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	3710      	adds	r7, #16
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bd80      	pop	{r7, pc}

0801a6f4 <USBD_LL_IsStallEP>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bca2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da0b      	bge.n	800bcc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bcac:	78fb      	ldrb	r3, [r7, #3]
 800bcae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	1a9b      	subs	r3, r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	333e      	adds	r3, #62	; 0x3e
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	e00b      	b.n	800bcdc <USBD_LL_IsStallEP+0x4c>
=======
 801a6f4:	b480      	push	{r7}
 801a6f6:	b085      	sub	sp, #20
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
 801a6fc:	460b      	mov	r3, r1
 801a6fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a706:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801a708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	da0b      	bge.n	801a728 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801a710:	78fb      	ldrb	r3, [r7, #3]
 801a712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a716:	68f9      	ldr	r1, [r7, #12]
 801a718:	4613      	mov	r3, r2
 801a71a:	00db      	lsls	r3, r3, #3
 801a71c:	1a9b      	subs	r3, r3, r2
 801a71e:	009b      	lsls	r3, r3, #2
 801a720:	440b      	add	r3, r1
 801a722:	333e      	adds	r3, #62	; 0x3e
 801a724:	781b      	ldrb	r3, [r3, #0]
 801a726:	e00b      	b.n	801a740 <USBD_LL_IsStallEP+0x4c>
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
<<<<<<< HEAD
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcca:	68f9      	ldr	r1, [r7, #12]
 800bccc:	4613      	mov	r3, r2
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	1a9b      	subs	r3, r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	440b      	add	r3, r1
 800bcd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_LL_SetUSBAddress>:
=======
 801a728:	78fb      	ldrb	r3, [r7, #3]
 801a72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a72e:	68f9      	ldr	r1, [r7, #12]
 801a730:	4613      	mov	r3, r2
 801a732:	00db      	lsls	r3, r3, #3
 801a734:	1a9b      	subs	r3, r3, r2
 801a736:	009b      	lsls	r3, r3, #2
 801a738:	440b      	add	r3, r1
 801a73a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a73e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a740:	4618      	mov	r0, r3
 801a742:	3714      	adds	r7, #20
 801a744:	46bd      	mov	sp, r7
 801a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74a:	4770      	bx	lr

0801a74c <USBD_LL_SetUSBAddress>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f7 fb78 	bl	80033fc <HAL_PCD_SetAddress>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f860 	bl	800bdd8 <USBD_Get_USB_Status>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_LL_Transmit>:
=======
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b084      	sub	sp, #16
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
 801a754:	460b      	mov	r3, r1
 801a756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a758:	2300      	movs	r3, #0
 801a75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a75c:	2300      	movs	r3, #0
 801a75e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a766:	78fa      	ldrb	r2, [r7, #3]
 801a768:	4611      	mov	r1, r2
 801a76a:	4618      	mov	r0, r3
 801a76c:	f7e9 fe2c 	bl	80043c8 <HAL_PCD_SetAddress>
 801a770:	4603      	mov	r3, r0
 801a772:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a774:	7bfb      	ldrb	r3, [r7, #15]
 801a776:	4618      	mov	r0, r3
 801a778:	f000 f860 	bl	801a83c <USBD_Get_USB_Status>
 801a77c:	4603      	mov	r3, r0
 801a77e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a780:	7bbb      	ldrb	r3, [r7, #14]
}
 801a782:	4618      	mov	r0, r3
 801a784:	3710      	adds	r7, #16
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}

0801a78a <USBD_LL_Transmit>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b086      	sub	sp, #24
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	60f8      	str	r0, [r7, #12]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	461a      	mov	r2, r3
 800bd32:	460b      	mov	r3, r1
 800bd34:	72fb      	strb	r3, [r7, #11]
 800bd36:	4613      	mov	r3, r2
 800bd38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd48:	893b      	ldrh	r3, [r7, #8]
 800bd4a:	7af9      	ldrb	r1, [r7, #11]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	f7f7 fc8f 	bl	8003670 <HAL_PCD_EP_Transmit>
 800bd52:	4603      	mov	r3, r0
 800bd54:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 f83d 	bl	800bdd8 <USBD_Get_USB_Status>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bd62:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <USBD_LL_PrepareReceive>:
=======
 801a78a:	b580      	push	{r7, lr}
 801a78c:	b086      	sub	sp, #24
 801a78e:	af00      	add	r7, sp, #0
 801a790:	60f8      	str	r0, [r7, #12]
 801a792:	607a      	str	r2, [r7, #4]
 801a794:	461a      	mov	r2, r3
 801a796:	460b      	mov	r3, r1
 801a798:	72fb      	strb	r3, [r7, #11]
 801a79a:	4613      	mov	r3, r2
 801a79c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a79e:	2300      	movs	r3, #0
 801a7a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801a7ac:	893b      	ldrh	r3, [r7, #8]
 801a7ae:	7af9      	ldrb	r1, [r7, #11]
 801a7b0:	687a      	ldr	r2, [r7, #4]
 801a7b2:	f7e9 ff43 	bl	800463c <HAL_PCD_EP_Transmit>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801a7ba:	7dfb      	ldrb	r3, [r7, #23]
 801a7bc:	4618      	mov	r0, r3
 801a7be:	f000 f83d 	bl	801a83c <USBD_Get_USB_Status>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801a7c6:	7dbb      	ldrb	r3, [r7, #22]
}
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	3718      	adds	r7, #24
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bd80      	pop	{r7, pc}

0801a7d0 <USBD_LL_PrepareReceive>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	461a      	mov	r2, r3
 800bd78:	460b      	mov	r3, r1
 800bd7a:	72fb      	strb	r3, [r7, #11]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd8e:	893b      	ldrh	r3, [r7, #8]
 800bd90:	7af9      	ldrb	r1, [r7, #11]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	f7f7 fc09 	bl	80035aa <HAL_PCD_EP_Receive>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f81a 	bl	800bdd8 <USBD_Get_USB_Status>
 800bda4:	4603      	mov	r3, r0
 800bda6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bda8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_LL_GetRxDataSize>:
=======
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b086      	sub	sp, #24
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	60f8      	str	r0, [r7, #12]
 801a7d8:	607a      	str	r2, [r7, #4]
 801a7da:	461a      	mov	r2, r3
 801a7dc:	460b      	mov	r3, r1
 801a7de:	72fb      	strb	r3, [r7, #11]
 801a7e0:	4613      	mov	r3, r2
 801a7e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801a7f2:	893b      	ldrh	r3, [r7, #8]
 801a7f4:	7af9      	ldrb	r1, [r7, #11]
 801a7f6:	687a      	ldr	r2, [r7, #4]
 801a7f8:	f7e9 febd 	bl	8004576 <HAL_PCD_EP_Receive>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a800:	7dfb      	ldrb	r3, [r7, #23]
 801a802:	4618      	mov	r0, r3
 801a804:	f000 f81a 	bl	801a83c <USBD_Get_USB_Status>
 801a808:	4603      	mov	r3, r0
 801a80a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801a80c:	7dbb      	ldrb	r3, [r7, #22]
}
 801a80e:	4618      	mov	r0, r3
 801a810:	3718      	adds	r7, #24
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}

0801a816 <USBD_LL_GetRxDataSize>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b082      	sub	sp, #8
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bdc4:	78fa      	ldrb	r2, [r7, #3]
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f7 fc39 	bl	8003640 <HAL_PCD_EP_GetRxCount>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_Get_USB_Status>:
=======
 801a816:	b580      	push	{r7, lr}
 801a818:	b082      	sub	sp, #8
 801a81a:	af00      	add	r7, sp, #0
 801a81c:	6078      	str	r0, [r7, #4]
 801a81e:	460b      	mov	r3, r1
 801a820:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a828:	78fa      	ldrb	r2, [r7, #3]
 801a82a:	4611      	mov	r1, r2
 801a82c:	4618      	mov	r0, r3
 801a82e:	f7e9 feed 	bl	800460c <HAL_PCD_EP_GetRxCount>
 801a832:	4603      	mov	r3, r0
}
 801a834:	4618      	mov	r0, r3
 801a836:	3708      	adds	r7, #8
 801a838:	46bd      	mov	sp, r7
 801a83a:	bd80      	pop	{r7, pc}

0801a83c <USBD_Get_USB_Status>:
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< HEAD
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d817      	bhi.n	800be1c <USBD_Get_USB_Status+0x44>
 800bdec:	a201      	add	r2, pc, #4	; (adr r2, 800bdf4 <USBD_Get_USB_Status+0x1c>)
 800bdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf2:	bf00      	nop
 800bdf4:	0800be05 	.word	0x0800be05
 800bdf8:	0800be0b 	.word	0x0800be0b
 800bdfc:	0800be11 	.word	0x0800be11
 800be00:	0800be17 	.word	0x0800be17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
    break;
 800be08:	e00b      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be0a:	2302      	movs	r3, #2
 800be0c:	73fb      	strb	r3, [r7, #15]
    break;
 800be0e:	e008      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be10:	2301      	movs	r3, #1
 800be12:	73fb      	strb	r3, [r7, #15]
    break;
 800be14:	e005      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be16:	2302      	movs	r3, #2
 800be18:	73fb      	strb	r3, [r7, #15]
    break;
 800be1a:	e002      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be1c:	2302      	movs	r3, #2
 800be1e:	73fb      	strb	r3, [r7, #15]
    break;
 800be20:	bf00      	nop
  }
  return usb_status;
 800be22:	7bfb      	ldrb	r3, [r7, #15]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <__libc_init_array>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	4e0d      	ldr	r6, [pc, #52]	; (800be68 <__libc_init_array+0x38>)
 800be34:	4c0d      	ldr	r4, [pc, #52]	; (800be6c <__libc_init_array+0x3c>)
 800be36:	1ba4      	subs	r4, r4, r6
 800be38:	10a4      	asrs	r4, r4, #2
 800be3a:	2500      	movs	r5, #0
 800be3c:	42a5      	cmp	r5, r4
 800be3e:	d109      	bne.n	800be54 <__libc_init_array+0x24>
 800be40:	4e0b      	ldr	r6, [pc, #44]	; (800be70 <__libc_init_array+0x40>)
 800be42:	4c0c      	ldr	r4, [pc, #48]	; (800be74 <__libc_init_array+0x44>)
 800be44:	f000 fc38 	bl	800c6b8 <_init>
 800be48:	1ba4      	subs	r4, r4, r6
 800be4a:	10a4      	asrs	r4, r4, #2
 800be4c:	2500      	movs	r5, #0
 800be4e:	42a5      	cmp	r5, r4
 800be50:	d105      	bne.n	800be5e <__libc_init_array+0x2e>
 800be52:	bd70      	pop	{r4, r5, r6, pc}
 800be54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be58:	4798      	blx	r3
 800be5a:	3501      	adds	r5, #1
 800be5c:	e7ee      	b.n	800be3c <__libc_init_array+0xc>
 800be5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be62:	4798      	blx	r3
 800be64:	3501      	adds	r5, #1
 800be66:	e7f2      	b.n	800be4e <__libc_init_array+0x1e>
 800be68:	0800c91c 	.word	0x0800c91c
 800be6c:	0800c91c 	.word	0x0800c91c
 800be70:	0800c91c 	.word	0x0800c91c
 800be74:	0800c920 	.word	0x0800c920

0800be78 <malloc>:
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <malloc+0xc>)
 800be7a:	4601      	mov	r1, r0
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	f000 b86d 	b.w	800bf5c <_malloc_r>
 800be82:	bf00      	nop
 800be84:	2000017c 	.word	0x2000017c

0800be88 <free>:
 800be88:	4b02      	ldr	r3, [pc, #8]	; (800be94 <free+0xc>)
 800be8a:	4601      	mov	r1, r0
 800be8c:	6818      	ldr	r0, [r3, #0]
 800be8e:	f000 b817 	b.w	800bec0 <_free_r>
 800be92:	bf00      	nop
 800be94:	2000017c 	.word	0x2000017c

0800be98 <memcpy>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	1e43      	subs	r3, r0, #1
 800be9c:	440a      	add	r2, r1
 800be9e:	4291      	cmp	r1, r2
 800bea0:	d100      	bne.n	800bea4 <memcpy+0xc>
 800bea2:	bd10      	pop	{r4, pc}
 800bea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beac:	e7f7      	b.n	800be9e <memcpy+0x6>

0800beae <memset>:
 800beae:	4402      	add	r2, r0
 800beb0:	4603      	mov	r3, r0
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d100      	bne.n	800beb8 <memset+0xa>
 800beb6:	4770      	bx	lr
 800beb8:	f803 1b01 	strb.w	r1, [r3], #1
 800bebc:	e7f9      	b.n	800beb2 <memset+0x4>
	...

0800bec0 <_free_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4605      	mov	r5, r0
 800bec4:	2900      	cmp	r1, #0
 800bec6:	d045      	beq.n	800bf54 <_free_r+0x94>
 800bec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800becc:	1f0c      	subs	r4, r1, #4
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bfb8      	it	lt
 800bed2:	18e4      	addlt	r4, r4, r3
 800bed4:	f000 f8cc 	bl	800c070 <__malloc_lock>
 800bed8:	4a1f      	ldr	r2, [pc, #124]	; (800bf58 <_free_r+0x98>)
 800beda:	6813      	ldr	r3, [r2, #0]
 800bedc:	4610      	mov	r0, r2
 800bede:	b933      	cbnz	r3, 800beee <_free_r+0x2e>
 800bee0:	6063      	str	r3, [r4, #4]
 800bee2:	6014      	str	r4, [r2, #0]
 800bee4:	4628      	mov	r0, r5
 800bee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beea:	f000 b8c2 	b.w	800c072 <__malloc_unlock>
 800beee:	42a3      	cmp	r3, r4
 800bef0:	d90c      	bls.n	800bf0c <_free_r+0x4c>
 800bef2:	6821      	ldr	r1, [r4, #0]
 800bef4:	1862      	adds	r2, r4, r1
 800bef6:	4293      	cmp	r3, r2
 800bef8:	bf04      	itt	eq
 800befa:	681a      	ldreq	r2, [r3, #0]
 800befc:	685b      	ldreq	r3, [r3, #4]
 800befe:	6063      	str	r3, [r4, #4]
 800bf00:	bf04      	itt	eq
 800bf02:	1852      	addeq	r2, r2, r1
 800bf04:	6022      	streq	r2, [r4, #0]
 800bf06:	6004      	str	r4, [r0, #0]
 800bf08:	e7ec      	b.n	800bee4 <_free_r+0x24>
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	b10a      	cbz	r2, 800bf14 <_free_r+0x54>
 800bf10:	42a2      	cmp	r2, r4
 800bf12:	d9fa      	bls.n	800bf0a <_free_r+0x4a>
 800bf14:	6819      	ldr	r1, [r3, #0]
 800bf16:	1858      	adds	r0, r3, r1
 800bf18:	42a0      	cmp	r0, r4
 800bf1a:	d10b      	bne.n	800bf34 <_free_r+0x74>
 800bf1c:	6820      	ldr	r0, [r4, #0]
 800bf1e:	4401      	add	r1, r0
 800bf20:	1858      	adds	r0, r3, r1
 800bf22:	4282      	cmp	r2, r0
 800bf24:	6019      	str	r1, [r3, #0]
 800bf26:	d1dd      	bne.n	800bee4 <_free_r+0x24>
 800bf28:	6810      	ldr	r0, [r2, #0]
 800bf2a:	6852      	ldr	r2, [r2, #4]
 800bf2c:	605a      	str	r2, [r3, #4]
 800bf2e:	4401      	add	r1, r0
 800bf30:	6019      	str	r1, [r3, #0]
 800bf32:	e7d7      	b.n	800bee4 <_free_r+0x24>
 800bf34:	d902      	bls.n	800bf3c <_free_r+0x7c>
 800bf36:	230c      	movs	r3, #12
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	e7d3      	b.n	800bee4 <_free_r+0x24>
 800bf3c:	6820      	ldr	r0, [r4, #0]
 800bf3e:	1821      	adds	r1, r4, r0
 800bf40:	428a      	cmp	r2, r1
 800bf42:	bf04      	itt	eq
 800bf44:	6811      	ldreq	r1, [r2, #0]
 800bf46:	6852      	ldreq	r2, [r2, #4]
 800bf48:	6062      	str	r2, [r4, #4]
 800bf4a:	bf04      	itt	eq
 800bf4c:	1809      	addeq	r1, r1, r0
 800bf4e:	6021      	streq	r1, [r4, #0]
 800bf50:	605c      	str	r4, [r3, #4]
 800bf52:	e7c7      	b.n	800bee4 <_free_r+0x24>
 800bf54:	bd38      	pop	{r3, r4, r5, pc}
 800bf56:	bf00      	nop
 800bf58:	200041a8 	.word	0x200041a8

0800bf5c <_malloc_r>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	1ccd      	adds	r5, r1, #3
 800bf60:	f025 0503 	bic.w	r5, r5, #3
 800bf64:	3508      	adds	r5, #8
 800bf66:	2d0c      	cmp	r5, #12
 800bf68:	bf38      	it	cc
 800bf6a:	250c      	movcc	r5, #12
 800bf6c:	2d00      	cmp	r5, #0
 800bf6e:	4606      	mov	r6, r0
 800bf70:	db01      	blt.n	800bf76 <_malloc_r+0x1a>
 800bf72:	42a9      	cmp	r1, r5
 800bf74:	d903      	bls.n	800bf7e <_malloc_r+0x22>
 800bf76:	230c      	movs	r3, #12
 800bf78:	6033      	str	r3, [r6, #0]
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	bd70      	pop	{r4, r5, r6, pc}
 800bf7e:	f000 f877 	bl	800c070 <__malloc_lock>
 800bf82:	4a21      	ldr	r2, [pc, #132]	; (800c008 <_malloc_r+0xac>)
 800bf84:	6814      	ldr	r4, [r2, #0]
 800bf86:	4621      	mov	r1, r4
 800bf88:	b991      	cbnz	r1, 800bfb0 <_malloc_r+0x54>
 800bf8a:	4c20      	ldr	r4, [pc, #128]	; (800c00c <_malloc_r+0xb0>)
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	b91b      	cbnz	r3, 800bf98 <_malloc_r+0x3c>
 800bf90:	4630      	mov	r0, r6
 800bf92:	f000 f83d 	bl	800c010 <_sbrk_r>
 800bf96:	6020      	str	r0, [r4, #0]
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f000 f838 	bl	800c010 <_sbrk_r>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d124      	bne.n	800bfee <_malloc_r+0x92>
 800bfa4:	230c      	movs	r3, #12
 800bfa6:	6033      	str	r3, [r6, #0]
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f000 f862 	bl	800c072 <__malloc_unlock>
 800bfae:	e7e4      	b.n	800bf7a <_malloc_r+0x1e>
 800bfb0:	680b      	ldr	r3, [r1, #0]
 800bfb2:	1b5b      	subs	r3, r3, r5
 800bfb4:	d418      	bmi.n	800bfe8 <_malloc_r+0x8c>
 800bfb6:	2b0b      	cmp	r3, #11
 800bfb8:	d90f      	bls.n	800bfda <_malloc_r+0x7e>
 800bfba:	600b      	str	r3, [r1, #0]
 800bfbc:	50cd      	str	r5, [r1, r3]
 800bfbe:	18cc      	adds	r4, r1, r3
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f000 f856 	bl	800c072 <__malloc_unlock>
 800bfc6:	f104 000b 	add.w	r0, r4, #11
 800bfca:	1d23      	adds	r3, r4, #4
 800bfcc:	f020 0007 	bic.w	r0, r0, #7
 800bfd0:	1ac3      	subs	r3, r0, r3
 800bfd2:	d0d3      	beq.n	800bf7c <_malloc_r+0x20>
 800bfd4:	425a      	negs	r2, r3
 800bfd6:	50e2      	str	r2, [r4, r3]
 800bfd8:	e7d0      	b.n	800bf7c <_malloc_r+0x20>
 800bfda:	428c      	cmp	r4, r1
 800bfdc:	684b      	ldr	r3, [r1, #4]
 800bfde:	bf16      	itet	ne
 800bfe0:	6063      	strne	r3, [r4, #4]
 800bfe2:	6013      	streq	r3, [r2, #0]
 800bfe4:	460c      	movne	r4, r1
 800bfe6:	e7eb      	b.n	800bfc0 <_malloc_r+0x64>
 800bfe8:	460c      	mov	r4, r1
 800bfea:	6849      	ldr	r1, [r1, #4]
 800bfec:	e7cc      	b.n	800bf88 <_malloc_r+0x2c>
 800bfee:	1cc4      	adds	r4, r0, #3
 800bff0:	f024 0403 	bic.w	r4, r4, #3
 800bff4:	42a0      	cmp	r0, r4
 800bff6:	d005      	beq.n	800c004 <_malloc_r+0xa8>
 800bff8:	1a21      	subs	r1, r4, r0
 800bffa:	4630      	mov	r0, r6
 800bffc:	f000 f808 	bl	800c010 <_sbrk_r>
 800c000:	3001      	adds	r0, #1
 800c002:	d0cf      	beq.n	800bfa4 <_malloc_r+0x48>
 800c004:	6025      	str	r5, [r4, #0]
 800c006:	e7db      	b.n	800bfc0 <_malloc_r+0x64>
 800c008:	200041a8 	.word	0x200041a8
 800c00c:	200041ac 	.word	0x200041ac

0800c010 <_sbrk_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4c06      	ldr	r4, [pc, #24]	; (800c02c <_sbrk_r+0x1c>)
 800c014:	2300      	movs	r3, #0
 800c016:	4605      	mov	r5, r0
 800c018:	4608      	mov	r0, r1
 800c01a:	6023      	str	r3, [r4, #0]
 800c01c:	f7f5 fca0 	bl	8001960 <_sbrk>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	d102      	bne.n	800c02a <_sbrk_r+0x1a>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	b103      	cbz	r3, 800c02a <_sbrk_r+0x1a>
 800c028:	602b      	str	r3, [r5, #0]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	2000741c 	.word	0x2000741c

0800c030 <siprintf>:
 800c030:	b40e      	push	{r1, r2, r3}
 800c032:	b500      	push	{lr}
 800c034:	b09c      	sub	sp, #112	; 0x70
 800c036:	ab1d      	add	r3, sp, #116	; 0x74
 800c038:	9002      	str	r0, [sp, #8]
 800c03a:	9006      	str	r0, [sp, #24]
 800c03c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c040:	4809      	ldr	r0, [pc, #36]	; (800c068 <siprintf+0x38>)
 800c042:	9107      	str	r1, [sp, #28]
 800c044:	9104      	str	r1, [sp, #16]
 800c046:	4909      	ldr	r1, [pc, #36]	; (800c06c <siprintf+0x3c>)
 800c048:	f853 2b04 	ldr.w	r2, [r3], #4
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	6800      	ldr	r0, [r0, #0]
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	a902      	add	r1, sp, #8
 800c054:	f000 f868 	bl	800c128 <_svfiprintf_r>
 800c058:	9b02      	ldr	r3, [sp, #8]
 800c05a:	2200      	movs	r2, #0
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	b01c      	add	sp, #112	; 0x70
 800c060:	f85d eb04 	ldr.w	lr, [sp], #4
 800c064:	b003      	add	sp, #12
 800c066:	4770      	bx	lr
 800c068:	2000017c 	.word	0x2000017c
 800c06c:	ffff0208 	.word	0xffff0208

0800c070 <__malloc_lock>:
 800c070:	4770      	bx	lr

0800c072 <__malloc_unlock>:
 800c072:	4770      	bx	lr

0800c074 <__ssputs_r>:
 800c074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c078:	688e      	ldr	r6, [r1, #8]
 800c07a:	429e      	cmp	r6, r3
 800c07c:	4682      	mov	sl, r0
 800c07e:	460c      	mov	r4, r1
 800c080:	4690      	mov	r8, r2
 800c082:	4699      	mov	r9, r3
 800c084:	d837      	bhi.n	800c0f6 <__ssputs_r+0x82>
 800c086:	898a      	ldrh	r2, [r1, #12]
 800c088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c08c:	d031      	beq.n	800c0f2 <__ssputs_r+0x7e>
 800c08e:	6825      	ldr	r5, [r4, #0]
 800c090:	6909      	ldr	r1, [r1, #16]
 800c092:	1a6f      	subs	r7, r5, r1
 800c094:	6965      	ldr	r5, [r4, #20]
 800c096:	2302      	movs	r3, #2
 800c098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c09c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c0a0:	f109 0301 	add.w	r3, r9, #1
 800c0a4:	443b      	add	r3, r7
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	bf38      	it	cc
 800c0aa:	461d      	movcc	r5, r3
 800c0ac:	0553      	lsls	r3, r2, #21
 800c0ae:	d530      	bpl.n	800c112 <__ssputs_r+0x9e>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7ff ff53 	bl	800bf5c <_malloc_r>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	b950      	cbnz	r0, 800c0d0 <__ssputs_r+0x5c>
 800c0ba:	230c      	movs	r3, #12
 800c0bc:	f8ca 3000 	str.w	r3, [sl]
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c6:	81a3      	strh	r3, [r4, #12]
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d0:	463a      	mov	r2, r7
 800c0d2:	6921      	ldr	r1, [r4, #16]
 800c0d4:	f7ff fee0 	bl	800be98 <memcpy>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	6126      	str	r6, [r4, #16]
 800c0e6:	6165      	str	r5, [r4, #20]
 800c0e8:	443e      	add	r6, r7
 800c0ea:	1bed      	subs	r5, r5, r7
 800c0ec:	6026      	str	r6, [r4, #0]
 800c0ee:	60a5      	str	r5, [r4, #8]
 800c0f0:	464e      	mov	r6, r9
 800c0f2:	454e      	cmp	r6, r9
 800c0f4:	d900      	bls.n	800c0f8 <__ssputs_r+0x84>
 800c0f6:	464e      	mov	r6, r9
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	4641      	mov	r1, r8
 800c0fc:	6820      	ldr	r0, [r4, #0]
 800c0fe:	f000 fa93 	bl	800c628 <memmove>
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	1b9b      	subs	r3, r3, r6
 800c106:	60a3      	str	r3, [r4, #8]
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	441e      	add	r6, r3
 800c10c:	6026      	str	r6, [r4, #0]
 800c10e:	2000      	movs	r0, #0
 800c110:	e7dc      	b.n	800c0cc <__ssputs_r+0x58>
 800c112:	462a      	mov	r2, r5
 800c114:	f000 faa1 	bl	800c65a <_realloc_r>
 800c118:	4606      	mov	r6, r0
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d1e2      	bne.n	800c0e4 <__ssputs_r+0x70>
 800c11e:	6921      	ldr	r1, [r4, #16]
 800c120:	4650      	mov	r0, sl
 800c122:	f7ff fecd 	bl	800bec0 <_free_r>
 800c126:	e7c8      	b.n	800c0ba <__ssputs_r+0x46>

0800c128 <_svfiprintf_r>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	461d      	mov	r5, r3
 800c12e:	898b      	ldrh	r3, [r1, #12]
 800c130:	061f      	lsls	r7, r3, #24
 800c132:	b09d      	sub	sp, #116	; 0x74
 800c134:	4680      	mov	r8, r0
 800c136:	460c      	mov	r4, r1
 800c138:	4616      	mov	r6, r2
 800c13a:	d50f      	bpl.n	800c15c <_svfiprintf_r+0x34>
 800c13c:	690b      	ldr	r3, [r1, #16]
 800c13e:	b96b      	cbnz	r3, 800c15c <_svfiprintf_r+0x34>
 800c140:	2140      	movs	r1, #64	; 0x40
 800c142:	f7ff ff0b 	bl	800bf5c <_malloc_r>
 800c146:	6020      	str	r0, [r4, #0]
 800c148:	6120      	str	r0, [r4, #16]
 800c14a:	b928      	cbnz	r0, 800c158 <_svfiprintf_r+0x30>
 800c14c:	230c      	movs	r3, #12
 800c14e:	f8c8 3000 	str.w	r3, [r8]
 800c152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c156:	e0c8      	b.n	800c2ea <_svfiprintf_r+0x1c2>
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	6163      	str	r3, [r4, #20]
 800c15c:	2300      	movs	r3, #0
 800c15e:	9309      	str	r3, [sp, #36]	; 0x24
 800c160:	2320      	movs	r3, #32
 800c162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c166:	2330      	movs	r3, #48	; 0x30
 800c168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c16c:	9503      	str	r5, [sp, #12]
 800c16e:	f04f 0b01 	mov.w	fp, #1
 800c172:	4637      	mov	r7, r6
 800c174:	463d      	mov	r5, r7
 800c176:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c17a:	b10b      	cbz	r3, 800c180 <_svfiprintf_r+0x58>
 800c17c:	2b25      	cmp	r3, #37	; 0x25
 800c17e:	d13e      	bne.n	800c1fe <_svfiprintf_r+0xd6>
 800c180:	ebb7 0a06 	subs.w	sl, r7, r6
 800c184:	d00b      	beq.n	800c19e <_svfiprintf_r+0x76>
 800c186:	4653      	mov	r3, sl
 800c188:	4632      	mov	r2, r6
 800c18a:	4621      	mov	r1, r4
 800c18c:	4640      	mov	r0, r8
 800c18e:	f7ff ff71 	bl	800c074 <__ssputs_r>
 800c192:	3001      	adds	r0, #1
 800c194:	f000 80a4 	beq.w	800c2e0 <_svfiprintf_r+0x1b8>
 800c198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19a:	4453      	add	r3, sl
 800c19c:	9309      	str	r3, [sp, #36]	; 0x24
 800c19e:	783b      	ldrb	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 809d 	beq.w	800c2e0 <_svfiprintf_r+0x1b8>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1b0:	9304      	str	r3, [sp, #16]
 800c1b2:	9307      	str	r3, [sp, #28]
 800c1b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ba:	462f      	mov	r7, r5
 800c1bc:	2205      	movs	r2, #5
 800c1be:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c1c2:	4850      	ldr	r0, [pc, #320]	; (800c304 <_svfiprintf_r+0x1dc>)
 800c1c4:	f7f4 f814 	bl	80001f0 <memchr>
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	b9d0      	cbnz	r0, 800c202 <_svfiprintf_r+0xda>
 800c1cc:	06d9      	lsls	r1, r3, #27
 800c1ce:	bf44      	itt	mi
 800c1d0:	2220      	movmi	r2, #32
 800c1d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1d6:	071a      	lsls	r2, r3, #28
 800c1d8:	bf44      	itt	mi
 800c1da:	222b      	movmi	r2, #43	; 0x2b
 800c1dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1e0:	782a      	ldrb	r2, [r5, #0]
 800c1e2:	2a2a      	cmp	r2, #42	; 0x2a
 800c1e4:	d015      	beq.n	800c212 <_svfiprintf_r+0xea>
 800c1e6:	9a07      	ldr	r2, [sp, #28]
 800c1e8:	462f      	mov	r7, r5
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	250a      	movs	r5, #10
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1f4:	3b30      	subs	r3, #48	; 0x30
 800c1f6:	2b09      	cmp	r3, #9
 800c1f8:	d94d      	bls.n	800c296 <_svfiprintf_r+0x16e>
 800c1fa:	b1b8      	cbz	r0, 800c22c <_svfiprintf_r+0x104>
 800c1fc:	e00f      	b.n	800c21e <_svfiprintf_r+0xf6>
 800c1fe:	462f      	mov	r7, r5
 800c200:	e7b8      	b.n	800c174 <_svfiprintf_r+0x4c>
 800c202:	4a40      	ldr	r2, [pc, #256]	; (800c304 <_svfiprintf_r+0x1dc>)
 800c204:	1a80      	subs	r0, r0, r2
 800c206:	fa0b f000 	lsl.w	r0, fp, r0
 800c20a:	4318      	orrs	r0, r3
 800c20c:	9004      	str	r0, [sp, #16]
 800c20e:	463d      	mov	r5, r7
 800c210:	e7d3      	b.n	800c1ba <_svfiprintf_r+0x92>
 800c212:	9a03      	ldr	r2, [sp, #12]
 800c214:	1d11      	adds	r1, r2, #4
 800c216:	6812      	ldr	r2, [r2, #0]
 800c218:	9103      	str	r1, [sp, #12]
 800c21a:	2a00      	cmp	r2, #0
 800c21c:	db01      	blt.n	800c222 <_svfiprintf_r+0xfa>
 800c21e:	9207      	str	r2, [sp, #28]
 800c220:	e004      	b.n	800c22c <_svfiprintf_r+0x104>
 800c222:	4252      	negs	r2, r2
 800c224:	f043 0302 	orr.w	r3, r3, #2
 800c228:	9207      	str	r2, [sp, #28]
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	783b      	ldrb	r3, [r7, #0]
 800c22e:	2b2e      	cmp	r3, #46	; 0x2e
 800c230:	d10c      	bne.n	800c24c <_svfiprintf_r+0x124>
 800c232:	787b      	ldrb	r3, [r7, #1]
 800c234:	2b2a      	cmp	r3, #42	; 0x2a
 800c236:	d133      	bne.n	800c2a0 <_svfiprintf_r+0x178>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	1d1a      	adds	r2, r3, #4
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	9203      	str	r2, [sp, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	bfb8      	it	lt
 800c244:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c248:	3702      	adds	r7, #2
 800c24a:	9305      	str	r3, [sp, #20]
 800c24c:	4d2e      	ldr	r5, [pc, #184]	; (800c308 <_svfiprintf_r+0x1e0>)
 800c24e:	7839      	ldrb	r1, [r7, #0]
 800c250:	2203      	movs	r2, #3
 800c252:	4628      	mov	r0, r5
 800c254:	f7f3 ffcc 	bl	80001f0 <memchr>
 800c258:	b138      	cbz	r0, 800c26a <_svfiprintf_r+0x142>
 800c25a:	2340      	movs	r3, #64	; 0x40
 800c25c:	1b40      	subs	r0, r0, r5
 800c25e:	fa03 f000 	lsl.w	r0, r3, r0
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	4303      	orrs	r3, r0
 800c266:	3701      	adds	r7, #1
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	7839      	ldrb	r1, [r7, #0]
 800c26c:	4827      	ldr	r0, [pc, #156]	; (800c30c <_svfiprintf_r+0x1e4>)
 800c26e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c272:	2206      	movs	r2, #6
 800c274:	1c7e      	adds	r6, r7, #1
 800c276:	f7f3 ffbb 	bl	80001f0 <memchr>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d038      	beq.n	800c2f0 <_svfiprintf_r+0x1c8>
 800c27e:	4b24      	ldr	r3, [pc, #144]	; (800c310 <_svfiprintf_r+0x1e8>)
 800c280:	bb13      	cbnz	r3, 800c2c8 <_svfiprintf_r+0x1a0>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	3307      	adds	r3, #7
 800c286:	f023 0307 	bic.w	r3, r3, #7
 800c28a:	3308      	adds	r3, #8
 800c28c:	9303      	str	r3, [sp, #12]
 800c28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c290:	444b      	add	r3, r9
 800c292:	9309      	str	r3, [sp, #36]	; 0x24
 800c294:	e76d      	b.n	800c172 <_svfiprintf_r+0x4a>
 800c296:	fb05 3202 	mla	r2, r5, r2, r3
 800c29a:	2001      	movs	r0, #1
 800c29c:	460f      	mov	r7, r1
 800c29e:	e7a6      	b.n	800c1ee <_svfiprintf_r+0xc6>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	3701      	adds	r7, #1
 800c2a4:	9305      	str	r3, [sp, #20]
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	250a      	movs	r5, #10
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2b0:	3a30      	subs	r2, #48	; 0x30
 800c2b2:	2a09      	cmp	r2, #9
 800c2b4:	d903      	bls.n	800c2be <_svfiprintf_r+0x196>
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d0c8      	beq.n	800c24c <_svfiprintf_r+0x124>
 800c2ba:	9105      	str	r1, [sp, #20]
 800c2bc:	e7c6      	b.n	800c24c <_svfiprintf_r+0x124>
 800c2be:	fb05 2101 	mla	r1, r5, r1, r2
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	e7f0      	b.n	800c2aa <_svfiprintf_r+0x182>
 800c2c8:	ab03      	add	r3, sp, #12
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	4622      	mov	r2, r4
 800c2ce:	4b11      	ldr	r3, [pc, #68]	; (800c314 <_svfiprintf_r+0x1ec>)
 800c2d0:	a904      	add	r1, sp, #16
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c2dc:	4681      	mov	r9, r0
 800c2de:	d1d6      	bne.n	800c28e <_svfiprintf_r+0x166>
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	065b      	lsls	r3, r3, #25
 800c2e4:	f53f af35 	bmi.w	800c152 <_svfiprintf_r+0x2a>
 800c2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ea:	b01d      	add	sp, #116	; 0x74
 800c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f0:	ab03      	add	r3, sp, #12
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4b07      	ldr	r3, [pc, #28]	; (800c314 <_svfiprintf_r+0x1ec>)
 800c2f8:	a904      	add	r1, sp, #16
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f000 f882 	bl	800c404 <_printf_i>
 800c300:	e7ea      	b.n	800c2d8 <_svfiprintf_r+0x1b0>
 800c302:	bf00      	nop
 800c304:	0800c8e0 	.word	0x0800c8e0
 800c308:	0800c8e6 	.word	0x0800c8e6
 800c30c:	0800c8ea 	.word	0x0800c8ea
 800c310:	00000000 	.word	0x00000000
 800c314:	0800c075 	.word	0x0800c075

0800c318 <_printf_common>:
 800c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31c:	4691      	mov	r9, r2
 800c31e:	461f      	mov	r7, r3
 800c320:	688a      	ldr	r2, [r1, #8]
 800c322:	690b      	ldr	r3, [r1, #16]
 800c324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c328:	4293      	cmp	r3, r2
 800c32a:	bfb8      	it	lt
 800c32c:	4613      	movlt	r3, r2
 800c32e:	f8c9 3000 	str.w	r3, [r9]
 800c332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c336:	4606      	mov	r6, r0
 800c338:	460c      	mov	r4, r1
 800c33a:	b112      	cbz	r2, 800c342 <_printf_common+0x2a>
 800c33c:	3301      	adds	r3, #1
 800c33e:	f8c9 3000 	str.w	r3, [r9]
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	0699      	lsls	r1, r3, #26
 800c346:	bf42      	ittt	mi
 800c348:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c34c:	3302      	addmi	r3, #2
 800c34e:	f8c9 3000 	strmi.w	r3, [r9]
 800c352:	6825      	ldr	r5, [r4, #0]
 800c354:	f015 0506 	ands.w	r5, r5, #6
 800c358:	d107      	bne.n	800c36a <_printf_common+0x52>
 800c35a:	f104 0a19 	add.w	sl, r4, #25
 800c35e:	68e3      	ldr	r3, [r4, #12]
 800c360:	f8d9 2000 	ldr.w	r2, [r9]
 800c364:	1a9b      	subs	r3, r3, r2
 800c366:	42ab      	cmp	r3, r5
 800c368:	dc28      	bgt.n	800c3bc <_printf_common+0xa4>
 800c36a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	3300      	adds	r3, #0
 800c372:	bf18      	it	ne
 800c374:	2301      	movne	r3, #1
 800c376:	0692      	lsls	r2, r2, #26
 800c378:	d42d      	bmi.n	800c3d6 <_printf_common+0xbe>
 800c37a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c37e:	4639      	mov	r1, r7
 800c380:	4630      	mov	r0, r6
 800c382:	47c0      	blx	r8
 800c384:	3001      	adds	r0, #1
 800c386:	d020      	beq.n	800c3ca <_printf_common+0xb2>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	68e5      	ldr	r5, [r4, #12]
 800c38c:	f8d9 2000 	ldr.w	r2, [r9]
 800c390:	f003 0306 	and.w	r3, r3, #6
 800c394:	2b04      	cmp	r3, #4
 800c396:	bf08      	it	eq
 800c398:	1aad      	subeq	r5, r5, r2
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	6922      	ldr	r2, [r4, #16]
 800c39e:	bf0c      	ite	eq
 800c3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3a4:	2500      	movne	r5, #0
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	bfc4      	itt	gt
 800c3aa:	1a9b      	subgt	r3, r3, r2
 800c3ac:	18ed      	addgt	r5, r5, r3
 800c3ae:	f04f 0900 	mov.w	r9, #0
 800c3b2:	341a      	adds	r4, #26
 800c3b4:	454d      	cmp	r5, r9
 800c3b6:	d11a      	bne.n	800c3ee <_printf_common+0xd6>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e008      	b.n	800c3ce <_printf_common+0xb6>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	4652      	mov	r2, sl
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	47c0      	blx	r8
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d103      	bne.n	800c3d2 <_printf_common+0xba>
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d2:	3501      	adds	r5, #1
 800c3d4:	e7c3      	b.n	800c35e <_printf_common+0x46>
 800c3d6:	18e1      	adds	r1, r4, r3
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	2030      	movs	r0, #48	; 0x30
 800c3dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3e0:	4422      	add	r2, r4
 800c3e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3ea:	3302      	adds	r3, #2
 800c3ec:	e7c5      	b.n	800c37a <_printf_common+0x62>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	47c0      	blx	r8
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d0e6      	beq.n	800c3ca <_printf_common+0xb2>
 800c3fc:	f109 0901 	add.w	r9, r9, #1
 800c400:	e7d8      	b.n	800c3b4 <_printf_common+0x9c>
	...

0800c404 <_printf_i>:
 800c404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c408:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c40c:	460c      	mov	r4, r1
 800c40e:	7e09      	ldrb	r1, [r1, #24]
 800c410:	b085      	sub	sp, #20
 800c412:	296e      	cmp	r1, #110	; 0x6e
 800c414:	4617      	mov	r7, r2
 800c416:	4606      	mov	r6, r0
 800c418:	4698      	mov	r8, r3
 800c41a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c41c:	f000 80b3 	beq.w	800c586 <_printf_i+0x182>
 800c420:	d822      	bhi.n	800c468 <_printf_i+0x64>
 800c422:	2963      	cmp	r1, #99	; 0x63
 800c424:	d036      	beq.n	800c494 <_printf_i+0x90>
 800c426:	d80a      	bhi.n	800c43e <_printf_i+0x3a>
 800c428:	2900      	cmp	r1, #0
 800c42a:	f000 80b9 	beq.w	800c5a0 <_printf_i+0x19c>
 800c42e:	2958      	cmp	r1, #88	; 0x58
 800c430:	f000 8083 	beq.w	800c53a <_printf_i+0x136>
 800c434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c438:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c43c:	e032      	b.n	800c4a4 <_printf_i+0xa0>
 800c43e:	2964      	cmp	r1, #100	; 0x64
 800c440:	d001      	beq.n	800c446 <_printf_i+0x42>
 800c442:	2969      	cmp	r1, #105	; 0x69
 800c444:	d1f6      	bne.n	800c434 <_printf_i+0x30>
 800c446:	6820      	ldr	r0, [r4, #0]
 800c448:	6813      	ldr	r3, [r2, #0]
 800c44a:	0605      	lsls	r5, r0, #24
 800c44c:	f103 0104 	add.w	r1, r3, #4
 800c450:	d52a      	bpl.n	800c4a8 <_printf_i+0xa4>
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	da03      	bge.n	800c462 <_printf_i+0x5e>
 800c45a:	222d      	movs	r2, #45	; 0x2d
 800c45c:	425b      	negs	r3, r3
 800c45e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c462:	486f      	ldr	r0, [pc, #444]	; (800c620 <_printf_i+0x21c>)
 800c464:	220a      	movs	r2, #10
 800c466:	e039      	b.n	800c4dc <_printf_i+0xd8>
 800c468:	2973      	cmp	r1, #115	; 0x73
 800c46a:	f000 809d 	beq.w	800c5a8 <_printf_i+0x1a4>
 800c46e:	d808      	bhi.n	800c482 <_printf_i+0x7e>
 800c470:	296f      	cmp	r1, #111	; 0x6f
 800c472:	d020      	beq.n	800c4b6 <_printf_i+0xb2>
 800c474:	2970      	cmp	r1, #112	; 0x70
 800c476:	d1dd      	bne.n	800c434 <_printf_i+0x30>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	f043 0320 	orr.w	r3, r3, #32
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	e003      	b.n	800c48a <_printf_i+0x86>
 800c482:	2975      	cmp	r1, #117	; 0x75
 800c484:	d017      	beq.n	800c4b6 <_printf_i+0xb2>
 800c486:	2978      	cmp	r1, #120	; 0x78
 800c488:	d1d4      	bne.n	800c434 <_printf_i+0x30>
 800c48a:	2378      	movs	r3, #120	; 0x78
 800c48c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c490:	4864      	ldr	r0, [pc, #400]	; (800c624 <_printf_i+0x220>)
 800c492:	e055      	b.n	800c540 <_printf_i+0x13c>
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	1d19      	adds	r1, r3, #4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6011      	str	r1, [r2, #0]
 800c49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e08c      	b.n	800c5c2 <_printf_i+0x1be>
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6011      	str	r1, [r2, #0]
 800c4ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4b0:	bf18      	it	ne
 800c4b2:	b21b      	sxthne	r3, r3
 800c4b4:	e7cf      	b.n	800c456 <_printf_i+0x52>
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	6825      	ldr	r5, [r4, #0]
 800c4ba:	1d18      	adds	r0, r3, #4
 800c4bc:	6010      	str	r0, [r2, #0]
 800c4be:	0628      	lsls	r0, r5, #24
 800c4c0:	d501      	bpl.n	800c4c6 <_printf_i+0xc2>
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	e002      	b.n	800c4cc <_printf_i+0xc8>
 800c4c6:	0668      	lsls	r0, r5, #25
 800c4c8:	d5fb      	bpl.n	800c4c2 <_printf_i+0xbe>
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	4854      	ldr	r0, [pc, #336]	; (800c620 <_printf_i+0x21c>)
 800c4ce:	296f      	cmp	r1, #111	; 0x6f
 800c4d0:	bf14      	ite	ne
 800c4d2:	220a      	movne	r2, #10
 800c4d4:	2208      	moveq	r2, #8
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4dc:	6865      	ldr	r5, [r4, #4]
 800c4de:	60a5      	str	r5, [r4, #8]
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	f2c0 8095 	blt.w	800c610 <_printf_i+0x20c>
 800c4e6:	6821      	ldr	r1, [r4, #0]
 800c4e8:	f021 0104 	bic.w	r1, r1, #4
 800c4ec:	6021      	str	r1, [r4, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d13d      	bne.n	800c56e <_printf_i+0x16a>
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	f040 808e 	bne.w	800c614 <_printf_i+0x210>
 800c4f8:	4665      	mov	r5, ip
 800c4fa:	2a08      	cmp	r2, #8
 800c4fc:	d10b      	bne.n	800c516 <_printf_i+0x112>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	07db      	lsls	r3, r3, #31
 800c502:	d508      	bpl.n	800c516 <_printf_i+0x112>
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	6862      	ldr	r2, [r4, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	bfde      	ittt	le
 800c50c:	2330      	movle	r3, #48	; 0x30
 800c50e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c512:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c516:	ebac 0305 	sub.w	r3, ip, r5
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	f8cd 8000 	str.w	r8, [sp]
 800c520:	463b      	mov	r3, r7
 800c522:	aa03      	add	r2, sp, #12
 800c524:	4621      	mov	r1, r4
 800c526:	4630      	mov	r0, r6
 800c528:	f7ff fef6 	bl	800c318 <_printf_common>
 800c52c:	3001      	adds	r0, #1
 800c52e:	d14d      	bne.n	800c5cc <_printf_i+0x1c8>
 800c530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c534:	b005      	add	sp, #20
 800c536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c53a:	4839      	ldr	r0, [pc, #228]	; (800c620 <_printf_i+0x21c>)
 800c53c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c540:	6813      	ldr	r3, [r2, #0]
 800c542:	6821      	ldr	r1, [r4, #0]
 800c544:	1d1d      	adds	r5, r3, #4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6015      	str	r5, [r2, #0]
 800c54a:	060a      	lsls	r2, r1, #24
 800c54c:	d50b      	bpl.n	800c566 <_printf_i+0x162>
 800c54e:	07ca      	lsls	r2, r1, #31
 800c550:	bf44      	itt	mi
 800c552:	f041 0120 	orrmi.w	r1, r1, #32
 800c556:	6021      	strmi	r1, [r4, #0]
 800c558:	b91b      	cbnz	r3, 800c562 <_printf_i+0x15e>
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	f022 0220 	bic.w	r2, r2, #32
 800c560:	6022      	str	r2, [r4, #0]
 800c562:	2210      	movs	r2, #16
 800c564:	e7b7      	b.n	800c4d6 <_printf_i+0xd2>
 800c566:	064d      	lsls	r5, r1, #25
 800c568:	bf48      	it	mi
 800c56a:	b29b      	uxthmi	r3, r3
 800c56c:	e7ef      	b.n	800c54e <_printf_i+0x14a>
 800c56e:	4665      	mov	r5, ip
 800c570:	fbb3 f1f2 	udiv	r1, r3, r2
 800c574:	fb02 3311 	mls	r3, r2, r1, r3
 800c578:	5cc3      	ldrb	r3, [r0, r3]
 800c57a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c57e:	460b      	mov	r3, r1
 800c580:	2900      	cmp	r1, #0
 800c582:	d1f5      	bne.n	800c570 <_printf_i+0x16c>
 800c584:	e7b9      	b.n	800c4fa <_printf_i+0xf6>
 800c586:	6813      	ldr	r3, [r2, #0]
 800c588:	6825      	ldr	r5, [r4, #0]
 800c58a:	6961      	ldr	r1, [r4, #20]
 800c58c:	1d18      	adds	r0, r3, #4
 800c58e:	6010      	str	r0, [r2, #0]
 800c590:	0628      	lsls	r0, r5, #24
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	d501      	bpl.n	800c59a <_printf_i+0x196>
 800c596:	6019      	str	r1, [r3, #0]
 800c598:	e002      	b.n	800c5a0 <_printf_i+0x19c>
 800c59a:	066a      	lsls	r2, r5, #25
 800c59c:	d5fb      	bpl.n	800c596 <_printf_i+0x192>
 800c59e:	8019      	strh	r1, [r3, #0]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	6123      	str	r3, [r4, #16]
 800c5a4:	4665      	mov	r5, ip
 800c5a6:	e7b9      	b.n	800c51c <_printf_i+0x118>
 800c5a8:	6813      	ldr	r3, [r2, #0]
 800c5aa:	1d19      	adds	r1, r3, #4
 800c5ac:	6011      	str	r1, [r2, #0]
 800c5ae:	681d      	ldr	r5, [r3, #0]
 800c5b0:	6862      	ldr	r2, [r4, #4]
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	f7f3 fe1b 	bl	80001f0 <memchr>
 800c5ba:	b108      	cbz	r0, 800c5c0 <_printf_i+0x1bc>
 800c5bc:	1b40      	subs	r0, r0, r5
 800c5be:	6060      	str	r0, [r4, #4]
 800c5c0:	6863      	ldr	r3, [r4, #4]
 800c5c2:	6123      	str	r3, [r4, #16]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ca:	e7a7      	b.n	800c51c <_printf_i+0x118>
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	47c0      	blx	r8
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	d0aa      	beq.n	800c530 <_printf_i+0x12c>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	079b      	lsls	r3, r3, #30
 800c5de:	d413      	bmi.n	800c608 <_printf_i+0x204>
 800c5e0:	68e0      	ldr	r0, [r4, #12]
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	bfb8      	it	lt
 800c5e8:	4618      	movlt	r0, r3
 800c5ea:	e7a3      	b.n	800c534 <_printf_i+0x130>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	464a      	mov	r2, r9
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	47c0      	blx	r8
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	d09a      	beq.n	800c530 <_printf_i+0x12c>
 800c5fa:	3501      	adds	r5, #1
 800c5fc:	68e3      	ldr	r3, [r4, #12]
 800c5fe:	9a03      	ldr	r2, [sp, #12]
 800c600:	1a9b      	subs	r3, r3, r2
 800c602:	42ab      	cmp	r3, r5
 800c604:	dcf2      	bgt.n	800c5ec <_printf_i+0x1e8>
 800c606:	e7eb      	b.n	800c5e0 <_printf_i+0x1dc>
 800c608:	2500      	movs	r5, #0
 800c60a:	f104 0919 	add.w	r9, r4, #25
 800c60e:	e7f5      	b.n	800c5fc <_printf_i+0x1f8>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1ac      	bne.n	800c56e <_printf_i+0x16a>
 800c614:	7803      	ldrb	r3, [r0, #0]
 800c616:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c61a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c61e:	e76c      	b.n	800c4fa <_printf_i+0xf6>
 800c620:	0800c8f1 	.word	0x0800c8f1
 800c624:	0800c902 	.word	0x0800c902

0800c628 <memmove>:
 800c628:	4288      	cmp	r0, r1
 800c62a:	b510      	push	{r4, lr}
 800c62c:	eb01 0302 	add.w	r3, r1, r2
 800c630:	d807      	bhi.n	800c642 <memmove+0x1a>
 800c632:	1e42      	subs	r2, r0, #1
 800c634:	4299      	cmp	r1, r3
 800c636:	d00a      	beq.n	800c64e <memmove+0x26>
 800c638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c640:	e7f8      	b.n	800c634 <memmove+0xc>
 800c642:	4283      	cmp	r3, r0
 800c644:	d9f5      	bls.n	800c632 <memmove+0xa>
 800c646:	1881      	adds	r1, r0, r2
 800c648:	1ad2      	subs	r2, r2, r3
 800c64a:	42d3      	cmn	r3, r2
 800c64c:	d100      	bne.n	800c650 <memmove+0x28>
 800c64e:	bd10      	pop	{r4, pc}
 800c650:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c654:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c658:	e7f7      	b.n	800c64a <memmove+0x22>

0800c65a <_realloc_r>:
 800c65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65c:	4607      	mov	r7, r0
 800c65e:	4614      	mov	r4, r2
 800c660:	460e      	mov	r6, r1
 800c662:	b921      	cbnz	r1, 800c66e <_realloc_r+0x14>
 800c664:	4611      	mov	r1, r2
 800c666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c66a:	f7ff bc77 	b.w	800bf5c <_malloc_r>
 800c66e:	b922      	cbnz	r2, 800c67a <_realloc_r+0x20>
 800c670:	f7ff fc26 	bl	800bec0 <_free_r>
 800c674:	4625      	mov	r5, r4
 800c676:	4628      	mov	r0, r5
 800c678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67a:	f000 f814 	bl	800c6a6 <_malloc_usable_size_r>
 800c67e:	42a0      	cmp	r0, r4
 800c680:	d20f      	bcs.n	800c6a2 <_realloc_r+0x48>
 800c682:	4621      	mov	r1, r4
 800c684:	4638      	mov	r0, r7
 800c686:	f7ff fc69 	bl	800bf5c <_malloc_r>
 800c68a:	4605      	mov	r5, r0
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d0f2      	beq.n	800c676 <_realloc_r+0x1c>
 800c690:	4631      	mov	r1, r6
 800c692:	4622      	mov	r2, r4
 800c694:	f7ff fc00 	bl	800be98 <memcpy>
 800c698:	4631      	mov	r1, r6
 800c69a:	4638      	mov	r0, r7
 800c69c:	f7ff fc10 	bl	800bec0 <_free_r>
 800c6a0:	e7e9      	b.n	800c676 <_realloc_r+0x1c>
 800c6a2:	4635      	mov	r5, r6
 800c6a4:	e7e7      	b.n	800c676 <_realloc_r+0x1c>

0800c6a6 <_malloc_usable_size_r>:
 800c6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6aa:	1f18      	subs	r0, r3, #4
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	bfbc      	itt	lt
 800c6b0:	580b      	ldrlt	r3, [r1, r0]
 800c6b2:	18c0      	addlt	r0, r0, r3
 800c6b4:	4770      	bx	lr
	...

0800c6b8 <_init>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	bf00      	nop
 800c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6be:	bc08      	pop	{r3}
 800c6c0:	469e      	mov	lr, r3
 800c6c2:	4770      	bx	lr

0800c6c4 <_fini>:
 800c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c6:	bf00      	nop
 800c6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ca:	bc08      	pop	{r3}
 800c6cc:	469e      	mov	lr, r3
 800c6ce:	4770      	bx	lr
=======
 801a83c:	b480      	push	{r7}
 801a83e:	b085      	sub	sp, #20
 801a840:	af00      	add	r7, sp, #0
 801a842:	4603      	mov	r3, r0
 801a844:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a846:	2300      	movs	r3, #0
 801a848:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a84a:	79fb      	ldrb	r3, [r7, #7]
 801a84c:	2b03      	cmp	r3, #3
 801a84e:	d817      	bhi.n	801a880 <USBD_Get_USB_Status+0x44>
 801a850:	a201      	add	r2, pc, #4	; (adr r2, 801a858 <USBD_Get_USB_Status+0x1c>)
 801a852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a856:	bf00      	nop
 801a858:	0801a869 	.word	0x0801a869
 801a85c:	0801a86f 	.word	0x0801a86f
 801a860:	0801a875 	.word	0x0801a875
 801a864:	0801a87b 	.word	0x0801a87b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a868:	2300      	movs	r3, #0
 801a86a:	73fb      	strb	r3, [r7, #15]
    break;
 801a86c:	e00b      	b.n	801a886 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a86e:	2302      	movs	r3, #2
 801a870:	73fb      	strb	r3, [r7, #15]
    break;
 801a872:	e008      	b.n	801a886 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a874:	2301      	movs	r3, #1
 801a876:	73fb      	strb	r3, [r7, #15]
    break;
 801a878:	e005      	b.n	801a886 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a87a:	2302      	movs	r3, #2
 801a87c:	73fb      	strb	r3, [r7, #15]
    break;
 801a87e:	e002      	b.n	801a886 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a880:	2302      	movs	r3, #2
 801a882:	73fb      	strb	r3, [r7, #15]
    break;
 801a884:	bf00      	nop
  }
  return usb_status;
 801a886:	7bfb      	ldrb	r3, [r7, #15]
}
 801a888:	4618      	mov	r0, r3
 801a88a:	3714      	adds	r7, #20
 801a88c:	46bd      	mov	sp, r7
 801a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a892:	4770      	bx	lr

0801a894 <__libc_init_array>:
 801a894:	b570      	push	{r4, r5, r6, lr}
 801a896:	4e0d      	ldr	r6, [pc, #52]	; (801a8cc <__libc_init_array+0x38>)
 801a898:	4c0d      	ldr	r4, [pc, #52]	; (801a8d0 <__libc_init_array+0x3c>)
 801a89a:	1ba4      	subs	r4, r4, r6
 801a89c:	10a4      	asrs	r4, r4, #2
 801a89e:	2500      	movs	r5, #0
 801a8a0:	42a5      	cmp	r5, r4
 801a8a2:	d109      	bne.n	801a8b8 <__libc_init_array+0x24>
 801a8a4:	4e0b      	ldr	r6, [pc, #44]	; (801a8d4 <__libc_init_array+0x40>)
 801a8a6:	4c0c      	ldr	r4, [pc, #48]	; (801a8d8 <__libc_init_array+0x44>)
 801a8a8:	f000 ff2e 	bl	801b708 <_init>
 801a8ac:	1ba4      	subs	r4, r4, r6
 801a8ae:	10a4      	asrs	r4, r4, #2
 801a8b0:	2500      	movs	r5, #0
 801a8b2:	42a5      	cmp	r5, r4
 801a8b4:	d105      	bne.n	801a8c2 <__libc_init_array+0x2e>
 801a8b6:	bd70      	pop	{r4, r5, r6, pc}
 801a8b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8bc:	4798      	blx	r3
 801a8be:	3501      	adds	r5, #1
 801a8c0:	e7ee      	b.n	801a8a0 <__libc_init_array+0xc>
 801a8c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8c6:	4798      	blx	r3
 801a8c8:	3501      	adds	r5, #1
 801a8ca:	e7f2      	b.n	801a8b2 <__libc_init_array+0x1e>
 801a8cc:	0801e190 	.word	0x0801e190
 801a8d0:	0801e190 	.word	0x0801e190
 801a8d4:	0801e190 	.word	0x0801e190
 801a8d8:	0801e194 	.word	0x0801e194

0801a8dc <malloc>:
 801a8dc:	4b02      	ldr	r3, [pc, #8]	; (801a8e8 <malloc+0xc>)
 801a8de:	4601      	mov	r1, r0
 801a8e0:	6818      	ldr	r0, [r3, #0]
 801a8e2:	f000 b87b 	b.w	801a9dc <_malloc_r>
 801a8e6:	bf00      	nop
 801a8e8:	20000188 	.word	0x20000188

0801a8ec <free>:
 801a8ec:	4b02      	ldr	r3, [pc, #8]	; (801a8f8 <free+0xc>)
 801a8ee:	4601      	mov	r1, r0
 801a8f0:	6818      	ldr	r0, [r3, #0]
 801a8f2:	f000 b825 	b.w	801a940 <_free_r>
 801a8f6:	bf00      	nop
 801a8f8:	20000188 	.word	0x20000188

0801a8fc <memcmp>:
 801a8fc:	b530      	push	{r4, r5, lr}
 801a8fe:	2400      	movs	r4, #0
 801a900:	42a2      	cmp	r2, r4
 801a902:	d101      	bne.n	801a908 <memcmp+0xc>
 801a904:	2000      	movs	r0, #0
 801a906:	e007      	b.n	801a918 <memcmp+0x1c>
 801a908:	5d03      	ldrb	r3, [r0, r4]
 801a90a:	3401      	adds	r4, #1
 801a90c:	190d      	adds	r5, r1, r4
 801a90e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801a912:	42ab      	cmp	r3, r5
 801a914:	d0f4      	beq.n	801a900 <memcmp+0x4>
 801a916:	1b58      	subs	r0, r3, r5
 801a918:	bd30      	pop	{r4, r5, pc}

0801a91a <memcpy>:
 801a91a:	b510      	push	{r4, lr}
 801a91c:	1e43      	subs	r3, r0, #1
 801a91e:	440a      	add	r2, r1
 801a920:	4291      	cmp	r1, r2
 801a922:	d100      	bne.n	801a926 <memcpy+0xc>
 801a924:	bd10      	pop	{r4, pc}
 801a926:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a92e:	e7f7      	b.n	801a920 <memcpy+0x6>

0801a930 <memset>:
 801a930:	4402      	add	r2, r0
 801a932:	4603      	mov	r3, r0
 801a934:	4293      	cmp	r3, r2
 801a936:	d100      	bne.n	801a93a <memset+0xa>
 801a938:	4770      	bx	lr
 801a93a:	f803 1b01 	strb.w	r1, [r3], #1
 801a93e:	e7f9      	b.n	801a934 <memset+0x4>

0801a940 <_free_r>:
 801a940:	b538      	push	{r3, r4, r5, lr}
 801a942:	4605      	mov	r5, r0
 801a944:	2900      	cmp	r1, #0
 801a946:	d045      	beq.n	801a9d4 <_free_r+0x94>
 801a948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a94c:	1f0c      	subs	r4, r1, #4
 801a94e:	2b00      	cmp	r3, #0
 801a950:	bfb8      	it	lt
 801a952:	18e4      	addlt	r4, r4, r3
 801a954:	f000 f98e 	bl	801ac74 <__malloc_lock>
 801a958:	4a1f      	ldr	r2, [pc, #124]	; (801a9d8 <_free_r+0x98>)
 801a95a:	6813      	ldr	r3, [r2, #0]
 801a95c:	4610      	mov	r0, r2
 801a95e:	b933      	cbnz	r3, 801a96e <_free_r+0x2e>
 801a960:	6063      	str	r3, [r4, #4]
 801a962:	6014      	str	r4, [r2, #0]
 801a964:	4628      	mov	r0, r5
 801a966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a96a:	f000 b984 	b.w	801ac76 <__malloc_unlock>
 801a96e:	42a3      	cmp	r3, r4
 801a970:	d90c      	bls.n	801a98c <_free_r+0x4c>
 801a972:	6821      	ldr	r1, [r4, #0]
 801a974:	1862      	adds	r2, r4, r1
 801a976:	4293      	cmp	r3, r2
 801a978:	bf04      	itt	eq
 801a97a:	681a      	ldreq	r2, [r3, #0]
 801a97c:	685b      	ldreq	r3, [r3, #4]
 801a97e:	6063      	str	r3, [r4, #4]
 801a980:	bf04      	itt	eq
 801a982:	1852      	addeq	r2, r2, r1
 801a984:	6022      	streq	r2, [r4, #0]
 801a986:	6004      	str	r4, [r0, #0]
 801a988:	e7ec      	b.n	801a964 <_free_r+0x24>
 801a98a:	4613      	mov	r3, r2
 801a98c:	685a      	ldr	r2, [r3, #4]
 801a98e:	b10a      	cbz	r2, 801a994 <_free_r+0x54>
 801a990:	42a2      	cmp	r2, r4
 801a992:	d9fa      	bls.n	801a98a <_free_r+0x4a>
 801a994:	6819      	ldr	r1, [r3, #0]
 801a996:	1858      	adds	r0, r3, r1
 801a998:	42a0      	cmp	r0, r4
 801a99a:	d10b      	bne.n	801a9b4 <_free_r+0x74>
 801a99c:	6820      	ldr	r0, [r4, #0]
 801a99e:	4401      	add	r1, r0
 801a9a0:	1858      	adds	r0, r3, r1
 801a9a2:	4282      	cmp	r2, r0
 801a9a4:	6019      	str	r1, [r3, #0]
 801a9a6:	d1dd      	bne.n	801a964 <_free_r+0x24>
 801a9a8:	6810      	ldr	r0, [r2, #0]
 801a9aa:	6852      	ldr	r2, [r2, #4]
 801a9ac:	605a      	str	r2, [r3, #4]
 801a9ae:	4401      	add	r1, r0
 801a9b0:	6019      	str	r1, [r3, #0]
 801a9b2:	e7d7      	b.n	801a964 <_free_r+0x24>
 801a9b4:	d902      	bls.n	801a9bc <_free_r+0x7c>
 801a9b6:	230c      	movs	r3, #12
 801a9b8:	602b      	str	r3, [r5, #0]
 801a9ba:	e7d3      	b.n	801a964 <_free_r+0x24>
 801a9bc:	6820      	ldr	r0, [r4, #0]
 801a9be:	1821      	adds	r1, r4, r0
 801a9c0:	428a      	cmp	r2, r1
 801a9c2:	bf04      	itt	eq
 801a9c4:	6811      	ldreq	r1, [r2, #0]
 801a9c6:	6852      	ldreq	r2, [r2, #4]
 801a9c8:	6062      	str	r2, [r4, #4]
 801a9ca:	bf04      	itt	eq
 801a9cc:	1809      	addeq	r1, r1, r0
 801a9ce:	6021      	streq	r1, [r4, #0]
 801a9d0:	605c      	str	r4, [r3, #4]
 801a9d2:	e7c7      	b.n	801a964 <_free_r+0x24>
 801a9d4:	bd38      	pop	{r3, r4, r5, pc}
 801a9d6:	bf00      	nop
 801a9d8:	20004344 	.word	0x20004344

0801a9dc <_malloc_r>:
 801a9dc:	b570      	push	{r4, r5, r6, lr}
 801a9de:	1ccd      	adds	r5, r1, #3
 801a9e0:	f025 0503 	bic.w	r5, r5, #3
 801a9e4:	3508      	adds	r5, #8
 801a9e6:	2d0c      	cmp	r5, #12
 801a9e8:	bf38      	it	cc
 801a9ea:	250c      	movcc	r5, #12
 801a9ec:	2d00      	cmp	r5, #0
 801a9ee:	4606      	mov	r6, r0
 801a9f0:	db01      	blt.n	801a9f6 <_malloc_r+0x1a>
 801a9f2:	42a9      	cmp	r1, r5
 801a9f4:	d903      	bls.n	801a9fe <_malloc_r+0x22>
 801a9f6:	230c      	movs	r3, #12
 801a9f8:	6033      	str	r3, [r6, #0]
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	bd70      	pop	{r4, r5, r6, pc}
 801a9fe:	f000 f939 	bl	801ac74 <__malloc_lock>
 801aa02:	4a21      	ldr	r2, [pc, #132]	; (801aa88 <_malloc_r+0xac>)
 801aa04:	6814      	ldr	r4, [r2, #0]
 801aa06:	4621      	mov	r1, r4
 801aa08:	b991      	cbnz	r1, 801aa30 <_malloc_r+0x54>
 801aa0a:	4c20      	ldr	r4, [pc, #128]	; (801aa8c <_malloc_r+0xb0>)
 801aa0c:	6823      	ldr	r3, [r4, #0]
 801aa0e:	b91b      	cbnz	r3, 801aa18 <_malloc_r+0x3c>
 801aa10:	4630      	mov	r0, r6
 801aa12:	f000 f855 	bl	801aac0 <_sbrk_r>
 801aa16:	6020      	str	r0, [r4, #0]
 801aa18:	4629      	mov	r1, r5
 801aa1a:	4630      	mov	r0, r6
 801aa1c:	f000 f850 	bl	801aac0 <_sbrk_r>
 801aa20:	1c43      	adds	r3, r0, #1
 801aa22:	d124      	bne.n	801aa6e <_malloc_r+0x92>
 801aa24:	230c      	movs	r3, #12
 801aa26:	6033      	str	r3, [r6, #0]
 801aa28:	4630      	mov	r0, r6
 801aa2a:	f000 f924 	bl	801ac76 <__malloc_unlock>
 801aa2e:	e7e4      	b.n	801a9fa <_malloc_r+0x1e>
 801aa30:	680b      	ldr	r3, [r1, #0]
 801aa32:	1b5b      	subs	r3, r3, r5
 801aa34:	d418      	bmi.n	801aa68 <_malloc_r+0x8c>
 801aa36:	2b0b      	cmp	r3, #11
 801aa38:	d90f      	bls.n	801aa5a <_malloc_r+0x7e>
 801aa3a:	600b      	str	r3, [r1, #0]
 801aa3c:	50cd      	str	r5, [r1, r3]
 801aa3e:	18cc      	adds	r4, r1, r3
 801aa40:	4630      	mov	r0, r6
 801aa42:	f000 f918 	bl	801ac76 <__malloc_unlock>
 801aa46:	f104 000b 	add.w	r0, r4, #11
 801aa4a:	1d23      	adds	r3, r4, #4
 801aa4c:	f020 0007 	bic.w	r0, r0, #7
 801aa50:	1ac3      	subs	r3, r0, r3
 801aa52:	d0d3      	beq.n	801a9fc <_malloc_r+0x20>
 801aa54:	425a      	negs	r2, r3
 801aa56:	50e2      	str	r2, [r4, r3]
 801aa58:	e7d0      	b.n	801a9fc <_malloc_r+0x20>
 801aa5a:	428c      	cmp	r4, r1
 801aa5c:	684b      	ldr	r3, [r1, #4]
 801aa5e:	bf16      	itet	ne
 801aa60:	6063      	strne	r3, [r4, #4]
 801aa62:	6013      	streq	r3, [r2, #0]
 801aa64:	460c      	movne	r4, r1
 801aa66:	e7eb      	b.n	801aa40 <_malloc_r+0x64>
 801aa68:	460c      	mov	r4, r1
 801aa6a:	6849      	ldr	r1, [r1, #4]
 801aa6c:	e7cc      	b.n	801aa08 <_malloc_r+0x2c>
 801aa6e:	1cc4      	adds	r4, r0, #3
 801aa70:	f024 0403 	bic.w	r4, r4, #3
 801aa74:	42a0      	cmp	r0, r4
 801aa76:	d005      	beq.n	801aa84 <_malloc_r+0xa8>
 801aa78:	1a21      	subs	r1, r4, r0
 801aa7a:	4630      	mov	r0, r6
 801aa7c:	f000 f820 	bl	801aac0 <_sbrk_r>
 801aa80:	3001      	adds	r0, #1
 801aa82:	d0cf      	beq.n	801aa24 <_malloc_r+0x48>
 801aa84:	6025      	str	r5, [r4, #0]
 801aa86:	e7db      	b.n	801aa40 <_malloc_r+0x64>
 801aa88:	20004344 	.word	0x20004344
 801aa8c:	20004348 	.word	0x20004348

0801aa90 <iprintf>:
 801aa90:	b40f      	push	{r0, r1, r2, r3}
 801aa92:	4b0a      	ldr	r3, [pc, #40]	; (801aabc <iprintf+0x2c>)
 801aa94:	b513      	push	{r0, r1, r4, lr}
 801aa96:	681c      	ldr	r4, [r3, #0]
 801aa98:	b124      	cbz	r4, 801aaa4 <iprintf+0x14>
 801aa9a:	69a3      	ldr	r3, [r4, #24]
 801aa9c:	b913      	cbnz	r3, 801aaa4 <iprintf+0x14>
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	f000 f85e 	bl	801ab60 <__sinit>
 801aaa4:	ab05      	add	r3, sp, #20
 801aaa6:	9a04      	ldr	r2, [sp, #16]
 801aaa8:	68a1      	ldr	r1, [r4, #8]
 801aaaa:	9301      	str	r3, [sp, #4]
 801aaac:	4620      	mov	r0, r4
 801aaae:	f000 f90d 	bl	801accc <_vfiprintf_r>
 801aab2:	b002      	add	sp, #8
 801aab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aab8:	b004      	add	sp, #16
 801aaba:	4770      	bx	lr
 801aabc:	20000188 	.word	0x20000188

0801aac0 <_sbrk_r>:
 801aac0:	b538      	push	{r3, r4, r5, lr}
 801aac2:	4c06      	ldr	r4, [pc, #24]	; (801aadc <_sbrk_r+0x1c>)
 801aac4:	2300      	movs	r3, #0
 801aac6:	4605      	mov	r5, r0
 801aac8:	4608      	mov	r0, r1
 801aaca:	6023      	str	r3, [r4, #0]
 801aacc:	f7e6 ff98 	bl	8001a00 <_sbrk>
 801aad0:	1c43      	adds	r3, r0, #1
 801aad2:	d102      	bne.n	801aada <_sbrk_r+0x1a>
 801aad4:	6823      	ldr	r3, [r4, #0]
 801aad6:	b103      	cbz	r3, 801aada <_sbrk_r+0x1a>
 801aad8:	602b      	str	r3, [r5, #0]
 801aada:	bd38      	pop	{r3, r4, r5, pc}
 801aadc:	2000ab6c 	.word	0x2000ab6c

0801aae0 <std>:
 801aae0:	2300      	movs	r3, #0
 801aae2:	b510      	push	{r4, lr}
 801aae4:	4604      	mov	r4, r0
 801aae6:	e9c0 3300 	strd	r3, r3, [r0]
 801aaea:	6083      	str	r3, [r0, #8]
 801aaec:	8181      	strh	r1, [r0, #12]
 801aaee:	6643      	str	r3, [r0, #100]	; 0x64
 801aaf0:	81c2      	strh	r2, [r0, #14]
 801aaf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aaf6:	6183      	str	r3, [r0, #24]
 801aaf8:	4619      	mov	r1, r3
 801aafa:	2208      	movs	r2, #8
 801aafc:	305c      	adds	r0, #92	; 0x5c
 801aafe:	f7ff ff17 	bl	801a930 <memset>
 801ab02:	4b05      	ldr	r3, [pc, #20]	; (801ab18 <std+0x38>)
 801ab04:	6263      	str	r3, [r4, #36]	; 0x24
 801ab06:	4b05      	ldr	r3, [pc, #20]	; (801ab1c <std+0x3c>)
 801ab08:	62a3      	str	r3, [r4, #40]	; 0x28
 801ab0a:	4b05      	ldr	r3, [pc, #20]	; (801ab20 <std+0x40>)
 801ab0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab0e:	4b05      	ldr	r3, [pc, #20]	; (801ab24 <std+0x44>)
 801ab10:	6224      	str	r4, [r4, #32]
 801ab12:	6323      	str	r3, [r4, #48]	; 0x30
 801ab14:	bd10      	pop	{r4, pc}
 801ab16:	bf00      	nop
 801ab18:	0801b209 	.word	0x0801b209
 801ab1c:	0801b22b 	.word	0x0801b22b
 801ab20:	0801b263 	.word	0x0801b263
 801ab24:	0801b287 	.word	0x0801b287

0801ab28 <_cleanup_r>:
 801ab28:	4901      	ldr	r1, [pc, #4]	; (801ab30 <_cleanup_r+0x8>)
 801ab2a:	f000 b885 	b.w	801ac38 <_fwalk_reent>
 801ab2e:	bf00      	nop
 801ab30:	0801b561 	.word	0x0801b561

0801ab34 <__sfmoreglue>:
 801ab34:	b570      	push	{r4, r5, r6, lr}
 801ab36:	1e4a      	subs	r2, r1, #1
 801ab38:	2568      	movs	r5, #104	; 0x68
 801ab3a:	4355      	muls	r5, r2
 801ab3c:	460e      	mov	r6, r1
 801ab3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ab42:	f7ff ff4b 	bl	801a9dc <_malloc_r>
 801ab46:	4604      	mov	r4, r0
 801ab48:	b140      	cbz	r0, 801ab5c <__sfmoreglue+0x28>
 801ab4a:	2100      	movs	r1, #0
 801ab4c:	e9c0 1600 	strd	r1, r6, [r0]
 801ab50:	300c      	adds	r0, #12
 801ab52:	60a0      	str	r0, [r4, #8]
 801ab54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ab58:	f7ff feea 	bl	801a930 <memset>
 801ab5c:	4620      	mov	r0, r4
 801ab5e:	bd70      	pop	{r4, r5, r6, pc}

0801ab60 <__sinit>:
 801ab60:	6983      	ldr	r3, [r0, #24]
 801ab62:	b510      	push	{r4, lr}
 801ab64:	4604      	mov	r4, r0
 801ab66:	bb33      	cbnz	r3, 801abb6 <__sinit+0x56>
 801ab68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801ab6c:	6503      	str	r3, [r0, #80]	; 0x50
 801ab6e:	4b12      	ldr	r3, [pc, #72]	; (801abb8 <__sinit+0x58>)
 801ab70:	4a12      	ldr	r2, [pc, #72]	; (801abbc <__sinit+0x5c>)
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	6282      	str	r2, [r0, #40]	; 0x28
 801ab76:	4298      	cmp	r0, r3
 801ab78:	bf04      	itt	eq
 801ab7a:	2301      	moveq	r3, #1
 801ab7c:	6183      	streq	r3, [r0, #24]
 801ab7e:	f000 f81f 	bl	801abc0 <__sfp>
 801ab82:	6060      	str	r0, [r4, #4]
 801ab84:	4620      	mov	r0, r4
 801ab86:	f000 f81b 	bl	801abc0 <__sfp>
 801ab8a:	60a0      	str	r0, [r4, #8]
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	f000 f817 	bl	801abc0 <__sfp>
 801ab92:	2200      	movs	r2, #0
 801ab94:	60e0      	str	r0, [r4, #12]
 801ab96:	2104      	movs	r1, #4
 801ab98:	6860      	ldr	r0, [r4, #4]
 801ab9a:	f7ff ffa1 	bl	801aae0 <std>
 801ab9e:	2201      	movs	r2, #1
 801aba0:	2109      	movs	r1, #9
 801aba2:	68a0      	ldr	r0, [r4, #8]
 801aba4:	f7ff ff9c 	bl	801aae0 <std>
 801aba8:	2202      	movs	r2, #2
 801abaa:	2112      	movs	r1, #18
 801abac:	68e0      	ldr	r0, [r4, #12]
 801abae:	f7ff ff97 	bl	801aae0 <std>
 801abb2:	2301      	movs	r3, #1
 801abb4:	61a3      	str	r3, [r4, #24]
 801abb6:	bd10      	pop	{r4, pc}
 801abb8:	0801e0f0 	.word	0x0801e0f0
 801abbc:	0801ab29 	.word	0x0801ab29

0801abc0 <__sfp>:
 801abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abc2:	4b1b      	ldr	r3, [pc, #108]	; (801ac30 <__sfp+0x70>)
 801abc4:	681e      	ldr	r6, [r3, #0]
 801abc6:	69b3      	ldr	r3, [r6, #24]
 801abc8:	4607      	mov	r7, r0
 801abca:	b913      	cbnz	r3, 801abd2 <__sfp+0x12>
 801abcc:	4630      	mov	r0, r6
 801abce:	f7ff ffc7 	bl	801ab60 <__sinit>
 801abd2:	3648      	adds	r6, #72	; 0x48
 801abd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801abd8:	3b01      	subs	r3, #1
 801abda:	d503      	bpl.n	801abe4 <__sfp+0x24>
 801abdc:	6833      	ldr	r3, [r6, #0]
 801abde:	b133      	cbz	r3, 801abee <__sfp+0x2e>
 801abe0:	6836      	ldr	r6, [r6, #0]
 801abe2:	e7f7      	b.n	801abd4 <__sfp+0x14>
 801abe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801abe8:	b16d      	cbz	r5, 801ac06 <__sfp+0x46>
 801abea:	3468      	adds	r4, #104	; 0x68
 801abec:	e7f4      	b.n	801abd8 <__sfp+0x18>
 801abee:	2104      	movs	r1, #4
 801abf0:	4638      	mov	r0, r7
 801abf2:	f7ff ff9f 	bl	801ab34 <__sfmoreglue>
 801abf6:	6030      	str	r0, [r6, #0]
 801abf8:	2800      	cmp	r0, #0
 801abfa:	d1f1      	bne.n	801abe0 <__sfp+0x20>
 801abfc:	230c      	movs	r3, #12
 801abfe:	603b      	str	r3, [r7, #0]
 801ac00:	4604      	mov	r4, r0
 801ac02:	4620      	mov	r0, r4
 801ac04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac06:	4b0b      	ldr	r3, [pc, #44]	; (801ac34 <__sfp+0x74>)
 801ac08:	6665      	str	r5, [r4, #100]	; 0x64
 801ac0a:	e9c4 5500 	strd	r5, r5, [r4]
 801ac0e:	60a5      	str	r5, [r4, #8]
 801ac10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801ac14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801ac18:	2208      	movs	r2, #8
 801ac1a:	4629      	mov	r1, r5
 801ac1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ac20:	f7ff fe86 	bl	801a930 <memset>
 801ac24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ac28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ac2c:	e7e9      	b.n	801ac02 <__sfp+0x42>
 801ac2e:	bf00      	nop
 801ac30:	0801e0f0 	.word	0x0801e0f0
 801ac34:	ffff0001 	.word	0xffff0001

0801ac38 <_fwalk_reent>:
 801ac38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac3c:	4680      	mov	r8, r0
 801ac3e:	4689      	mov	r9, r1
 801ac40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ac44:	2600      	movs	r6, #0
 801ac46:	b914      	cbnz	r4, 801ac4e <_fwalk_reent+0x16>
 801ac48:	4630      	mov	r0, r6
 801ac4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801ac52:	3f01      	subs	r7, #1
 801ac54:	d501      	bpl.n	801ac5a <_fwalk_reent+0x22>
 801ac56:	6824      	ldr	r4, [r4, #0]
 801ac58:	e7f5      	b.n	801ac46 <_fwalk_reent+0xe>
 801ac5a:	89ab      	ldrh	r3, [r5, #12]
 801ac5c:	2b01      	cmp	r3, #1
 801ac5e:	d907      	bls.n	801ac70 <_fwalk_reent+0x38>
 801ac60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac64:	3301      	adds	r3, #1
 801ac66:	d003      	beq.n	801ac70 <_fwalk_reent+0x38>
 801ac68:	4629      	mov	r1, r5
 801ac6a:	4640      	mov	r0, r8
 801ac6c:	47c8      	blx	r9
 801ac6e:	4306      	orrs	r6, r0
 801ac70:	3568      	adds	r5, #104	; 0x68
 801ac72:	e7ee      	b.n	801ac52 <_fwalk_reent+0x1a>

0801ac74 <__malloc_lock>:
 801ac74:	4770      	bx	lr

0801ac76 <__malloc_unlock>:
 801ac76:	4770      	bx	lr

0801ac78 <__sfputc_r>:
 801ac78:	6893      	ldr	r3, [r2, #8]
 801ac7a:	3b01      	subs	r3, #1
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	b410      	push	{r4}
 801ac80:	6093      	str	r3, [r2, #8]
 801ac82:	da08      	bge.n	801ac96 <__sfputc_r+0x1e>
 801ac84:	6994      	ldr	r4, [r2, #24]
 801ac86:	42a3      	cmp	r3, r4
 801ac88:	db01      	blt.n	801ac8e <__sfputc_r+0x16>
 801ac8a:	290a      	cmp	r1, #10
 801ac8c:	d103      	bne.n	801ac96 <__sfputc_r+0x1e>
 801ac8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac92:	f000 bafd 	b.w	801b290 <__swbuf_r>
 801ac96:	6813      	ldr	r3, [r2, #0]
 801ac98:	1c58      	adds	r0, r3, #1
 801ac9a:	6010      	str	r0, [r2, #0]
 801ac9c:	7019      	strb	r1, [r3, #0]
 801ac9e:	4608      	mov	r0, r1
 801aca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aca4:	4770      	bx	lr

0801aca6 <__sfputs_r>:
 801aca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aca8:	4606      	mov	r6, r0
 801acaa:	460f      	mov	r7, r1
 801acac:	4614      	mov	r4, r2
 801acae:	18d5      	adds	r5, r2, r3
 801acb0:	42ac      	cmp	r4, r5
 801acb2:	d101      	bne.n	801acb8 <__sfputs_r+0x12>
 801acb4:	2000      	movs	r0, #0
 801acb6:	e007      	b.n	801acc8 <__sfputs_r+0x22>
 801acb8:	463a      	mov	r2, r7
 801acba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acbe:	4630      	mov	r0, r6
 801acc0:	f7ff ffda 	bl	801ac78 <__sfputc_r>
 801acc4:	1c43      	adds	r3, r0, #1
 801acc6:	d1f3      	bne.n	801acb0 <__sfputs_r+0xa>
 801acc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801accc <_vfiprintf_r>:
 801accc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acd0:	460c      	mov	r4, r1
 801acd2:	b09d      	sub	sp, #116	; 0x74
 801acd4:	4617      	mov	r7, r2
 801acd6:	461d      	mov	r5, r3
 801acd8:	4606      	mov	r6, r0
 801acda:	b118      	cbz	r0, 801ace4 <_vfiprintf_r+0x18>
 801acdc:	6983      	ldr	r3, [r0, #24]
 801acde:	b90b      	cbnz	r3, 801ace4 <_vfiprintf_r+0x18>
 801ace0:	f7ff ff3e 	bl	801ab60 <__sinit>
 801ace4:	4b7c      	ldr	r3, [pc, #496]	; (801aed8 <_vfiprintf_r+0x20c>)
 801ace6:	429c      	cmp	r4, r3
 801ace8:	d158      	bne.n	801ad9c <_vfiprintf_r+0xd0>
 801acea:	6874      	ldr	r4, [r6, #4]
 801acec:	89a3      	ldrh	r3, [r4, #12]
 801acee:	0718      	lsls	r0, r3, #28
 801acf0:	d55e      	bpl.n	801adb0 <_vfiprintf_r+0xe4>
 801acf2:	6923      	ldr	r3, [r4, #16]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d05b      	beq.n	801adb0 <_vfiprintf_r+0xe4>
 801acf8:	2300      	movs	r3, #0
 801acfa:	9309      	str	r3, [sp, #36]	; 0x24
 801acfc:	2320      	movs	r3, #32
 801acfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ad02:	2330      	movs	r3, #48	; 0x30
 801ad04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad08:	9503      	str	r5, [sp, #12]
 801ad0a:	f04f 0b01 	mov.w	fp, #1
 801ad0e:	46b8      	mov	r8, r7
 801ad10:	4645      	mov	r5, r8
 801ad12:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ad16:	b10b      	cbz	r3, 801ad1c <_vfiprintf_r+0x50>
 801ad18:	2b25      	cmp	r3, #37	; 0x25
 801ad1a:	d154      	bne.n	801adc6 <_vfiprintf_r+0xfa>
 801ad1c:	ebb8 0a07 	subs.w	sl, r8, r7
 801ad20:	d00b      	beq.n	801ad3a <_vfiprintf_r+0x6e>
 801ad22:	4653      	mov	r3, sl
 801ad24:	463a      	mov	r2, r7
 801ad26:	4621      	mov	r1, r4
 801ad28:	4630      	mov	r0, r6
 801ad2a:	f7ff ffbc 	bl	801aca6 <__sfputs_r>
 801ad2e:	3001      	adds	r0, #1
 801ad30:	f000 80c2 	beq.w	801aeb8 <_vfiprintf_r+0x1ec>
 801ad34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad36:	4453      	add	r3, sl
 801ad38:	9309      	str	r3, [sp, #36]	; 0x24
 801ad3a:	f898 3000 	ldrb.w	r3, [r8]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	f000 80ba 	beq.w	801aeb8 <_vfiprintf_r+0x1ec>
 801ad44:	2300      	movs	r3, #0
 801ad46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ad4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad4e:	9304      	str	r3, [sp, #16]
 801ad50:	9307      	str	r3, [sp, #28]
 801ad52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad56:	931a      	str	r3, [sp, #104]	; 0x68
 801ad58:	46a8      	mov	r8, r5
 801ad5a:	2205      	movs	r2, #5
 801ad5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ad60:	485e      	ldr	r0, [pc, #376]	; (801aedc <_vfiprintf_r+0x210>)
 801ad62:	f7e5 fa45 	bl	80001f0 <memchr>
 801ad66:	9b04      	ldr	r3, [sp, #16]
 801ad68:	bb78      	cbnz	r0, 801adca <_vfiprintf_r+0xfe>
 801ad6a:	06d9      	lsls	r1, r3, #27
 801ad6c:	bf44      	itt	mi
 801ad6e:	2220      	movmi	r2, #32
 801ad70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ad74:	071a      	lsls	r2, r3, #28
 801ad76:	bf44      	itt	mi
 801ad78:	222b      	movmi	r2, #43	; 0x2b
 801ad7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ad7e:	782a      	ldrb	r2, [r5, #0]
 801ad80:	2a2a      	cmp	r2, #42	; 0x2a
 801ad82:	d02a      	beq.n	801adda <_vfiprintf_r+0x10e>
 801ad84:	9a07      	ldr	r2, [sp, #28]
 801ad86:	46a8      	mov	r8, r5
 801ad88:	2000      	movs	r0, #0
 801ad8a:	250a      	movs	r5, #10
 801ad8c:	4641      	mov	r1, r8
 801ad8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad92:	3b30      	subs	r3, #48	; 0x30
 801ad94:	2b09      	cmp	r3, #9
 801ad96:	d969      	bls.n	801ae6c <_vfiprintf_r+0x1a0>
 801ad98:	b360      	cbz	r0, 801adf4 <_vfiprintf_r+0x128>
 801ad9a:	e024      	b.n	801ade6 <_vfiprintf_r+0x11a>
 801ad9c:	4b50      	ldr	r3, [pc, #320]	; (801aee0 <_vfiprintf_r+0x214>)
 801ad9e:	429c      	cmp	r4, r3
 801ada0:	d101      	bne.n	801ada6 <_vfiprintf_r+0xda>
 801ada2:	68b4      	ldr	r4, [r6, #8]
 801ada4:	e7a2      	b.n	801acec <_vfiprintf_r+0x20>
 801ada6:	4b4f      	ldr	r3, [pc, #316]	; (801aee4 <_vfiprintf_r+0x218>)
 801ada8:	429c      	cmp	r4, r3
 801adaa:	bf08      	it	eq
 801adac:	68f4      	ldreq	r4, [r6, #12]
 801adae:	e79d      	b.n	801acec <_vfiprintf_r+0x20>
 801adb0:	4621      	mov	r1, r4
 801adb2:	4630      	mov	r0, r6
 801adb4:	f000 fad0 	bl	801b358 <__swsetup_r>
 801adb8:	2800      	cmp	r0, #0
 801adba:	d09d      	beq.n	801acf8 <_vfiprintf_r+0x2c>
 801adbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801adc0:	b01d      	add	sp, #116	; 0x74
 801adc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adc6:	46a8      	mov	r8, r5
 801adc8:	e7a2      	b.n	801ad10 <_vfiprintf_r+0x44>
 801adca:	4a44      	ldr	r2, [pc, #272]	; (801aedc <_vfiprintf_r+0x210>)
 801adcc:	1a80      	subs	r0, r0, r2
 801adce:	fa0b f000 	lsl.w	r0, fp, r0
 801add2:	4318      	orrs	r0, r3
 801add4:	9004      	str	r0, [sp, #16]
 801add6:	4645      	mov	r5, r8
 801add8:	e7be      	b.n	801ad58 <_vfiprintf_r+0x8c>
 801adda:	9a03      	ldr	r2, [sp, #12]
 801addc:	1d11      	adds	r1, r2, #4
 801adde:	6812      	ldr	r2, [r2, #0]
 801ade0:	9103      	str	r1, [sp, #12]
 801ade2:	2a00      	cmp	r2, #0
 801ade4:	db01      	blt.n	801adea <_vfiprintf_r+0x11e>
 801ade6:	9207      	str	r2, [sp, #28]
 801ade8:	e004      	b.n	801adf4 <_vfiprintf_r+0x128>
 801adea:	4252      	negs	r2, r2
 801adec:	f043 0302 	orr.w	r3, r3, #2
 801adf0:	9207      	str	r2, [sp, #28]
 801adf2:	9304      	str	r3, [sp, #16]
 801adf4:	f898 3000 	ldrb.w	r3, [r8]
 801adf8:	2b2e      	cmp	r3, #46	; 0x2e
 801adfa:	d10e      	bne.n	801ae1a <_vfiprintf_r+0x14e>
 801adfc:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ae00:	2b2a      	cmp	r3, #42	; 0x2a
 801ae02:	d138      	bne.n	801ae76 <_vfiprintf_r+0x1aa>
 801ae04:	9b03      	ldr	r3, [sp, #12]
 801ae06:	1d1a      	adds	r2, r3, #4
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	9203      	str	r2, [sp, #12]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	bfb8      	it	lt
 801ae10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ae14:	f108 0802 	add.w	r8, r8, #2
 801ae18:	9305      	str	r3, [sp, #20]
 801ae1a:	4d33      	ldr	r5, [pc, #204]	; (801aee8 <_vfiprintf_r+0x21c>)
 801ae1c:	f898 1000 	ldrb.w	r1, [r8]
 801ae20:	2203      	movs	r2, #3
 801ae22:	4628      	mov	r0, r5
 801ae24:	f7e5 f9e4 	bl	80001f0 <memchr>
 801ae28:	b140      	cbz	r0, 801ae3c <_vfiprintf_r+0x170>
 801ae2a:	2340      	movs	r3, #64	; 0x40
 801ae2c:	1b40      	subs	r0, r0, r5
 801ae2e:	fa03 f000 	lsl.w	r0, r3, r0
 801ae32:	9b04      	ldr	r3, [sp, #16]
 801ae34:	4303      	orrs	r3, r0
 801ae36:	f108 0801 	add.w	r8, r8, #1
 801ae3a:	9304      	str	r3, [sp, #16]
 801ae3c:	f898 1000 	ldrb.w	r1, [r8]
 801ae40:	482a      	ldr	r0, [pc, #168]	; (801aeec <_vfiprintf_r+0x220>)
 801ae42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae46:	2206      	movs	r2, #6
 801ae48:	f108 0701 	add.w	r7, r8, #1
 801ae4c:	f7e5 f9d0 	bl	80001f0 <memchr>
 801ae50:	2800      	cmp	r0, #0
 801ae52:	d037      	beq.n	801aec4 <_vfiprintf_r+0x1f8>
 801ae54:	4b26      	ldr	r3, [pc, #152]	; (801aef0 <_vfiprintf_r+0x224>)
 801ae56:	bb1b      	cbnz	r3, 801aea0 <_vfiprintf_r+0x1d4>
 801ae58:	9b03      	ldr	r3, [sp, #12]
 801ae5a:	3307      	adds	r3, #7
 801ae5c:	f023 0307 	bic.w	r3, r3, #7
 801ae60:	3308      	adds	r3, #8
 801ae62:	9303      	str	r3, [sp, #12]
 801ae64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae66:	444b      	add	r3, r9
 801ae68:	9309      	str	r3, [sp, #36]	; 0x24
 801ae6a:	e750      	b.n	801ad0e <_vfiprintf_r+0x42>
 801ae6c:	fb05 3202 	mla	r2, r5, r2, r3
 801ae70:	2001      	movs	r0, #1
 801ae72:	4688      	mov	r8, r1
 801ae74:	e78a      	b.n	801ad8c <_vfiprintf_r+0xc0>
 801ae76:	2300      	movs	r3, #0
 801ae78:	f108 0801 	add.w	r8, r8, #1
 801ae7c:	9305      	str	r3, [sp, #20]
 801ae7e:	4619      	mov	r1, r3
 801ae80:	250a      	movs	r5, #10
 801ae82:	4640      	mov	r0, r8
 801ae84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae88:	3a30      	subs	r2, #48	; 0x30
 801ae8a:	2a09      	cmp	r2, #9
 801ae8c:	d903      	bls.n	801ae96 <_vfiprintf_r+0x1ca>
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d0c3      	beq.n	801ae1a <_vfiprintf_r+0x14e>
 801ae92:	9105      	str	r1, [sp, #20]
 801ae94:	e7c1      	b.n	801ae1a <_vfiprintf_r+0x14e>
 801ae96:	fb05 2101 	mla	r1, r5, r1, r2
 801ae9a:	2301      	movs	r3, #1
 801ae9c:	4680      	mov	r8, r0
 801ae9e:	e7f0      	b.n	801ae82 <_vfiprintf_r+0x1b6>
 801aea0:	ab03      	add	r3, sp, #12
 801aea2:	9300      	str	r3, [sp, #0]
 801aea4:	4622      	mov	r2, r4
 801aea6:	4b13      	ldr	r3, [pc, #76]	; (801aef4 <_vfiprintf_r+0x228>)
 801aea8:	a904      	add	r1, sp, #16
 801aeaa:	4630      	mov	r0, r6
 801aeac:	f3af 8000 	nop.w
 801aeb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801aeb4:	4681      	mov	r9, r0
 801aeb6:	d1d5      	bne.n	801ae64 <_vfiprintf_r+0x198>
 801aeb8:	89a3      	ldrh	r3, [r4, #12]
 801aeba:	065b      	lsls	r3, r3, #25
 801aebc:	f53f af7e 	bmi.w	801adbc <_vfiprintf_r+0xf0>
 801aec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aec2:	e77d      	b.n	801adc0 <_vfiprintf_r+0xf4>
 801aec4:	ab03      	add	r3, sp, #12
 801aec6:	9300      	str	r3, [sp, #0]
 801aec8:	4622      	mov	r2, r4
 801aeca:	4b0a      	ldr	r3, [pc, #40]	; (801aef4 <_vfiprintf_r+0x228>)
 801aecc:	a904      	add	r1, sp, #16
 801aece:	4630      	mov	r0, r6
 801aed0:	f000 f888 	bl	801afe4 <_printf_i>
 801aed4:	e7ec      	b.n	801aeb0 <_vfiprintf_r+0x1e4>
 801aed6:	bf00      	nop
 801aed8:	0801e114 	.word	0x0801e114
 801aedc:	0801e154 	.word	0x0801e154
 801aee0:	0801e134 	.word	0x0801e134
 801aee4:	0801e0f4 	.word	0x0801e0f4
 801aee8:	0801e15a 	.word	0x0801e15a
 801aeec:	0801e15e 	.word	0x0801e15e
 801aef0:	00000000 	.word	0x00000000
 801aef4:	0801aca7 	.word	0x0801aca7

0801aef8 <_printf_common>:
 801aef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aefc:	4691      	mov	r9, r2
 801aefe:	461f      	mov	r7, r3
 801af00:	688a      	ldr	r2, [r1, #8]
 801af02:	690b      	ldr	r3, [r1, #16]
 801af04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af08:	4293      	cmp	r3, r2
 801af0a:	bfb8      	it	lt
 801af0c:	4613      	movlt	r3, r2
 801af0e:	f8c9 3000 	str.w	r3, [r9]
 801af12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801af16:	4606      	mov	r6, r0
 801af18:	460c      	mov	r4, r1
 801af1a:	b112      	cbz	r2, 801af22 <_printf_common+0x2a>
 801af1c:	3301      	adds	r3, #1
 801af1e:	f8c9 3000 	str.w	r3, [r9]
 801af22:	6823      	ldr	r3, [r4, #0]
 801af24:	0699      	lsls	r1, r3, #26
 801af26:	bf42      	ittt	mi
 801af28:	f8d9 3000 	ldrmi.w	r3, [r9]
 801af2c:	3302      	addmi	r3, #2
 801af2e:	f8c9 3000 	strmi.w	r3, [r9]
 801af32:	6825      	ldr	r5, [r4, #0]
 801af34:	f015 0506 	ands.w	r5, r5, #6
 801af38:	d107      	bne.n	801af4a <_printf_common+0x52>
 801af3a:	f104 0a19 	add.w	sl, r4, #25
 801af3e:	68e3      	ldr	r3, [r4, #12]
 801af40:	f8d9 2000 	ldr.w	r2, [r9]
 801af44:	1a9b      	subs	r3, r3, r2
 801af46:	42ab      	cmp	r3, r5
 801af48:	dc28      	bgt.n	801af9c <_printf_common+0xa4>
 801af4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801af4e:	6822      	ldr	r2, [r4, #0]
 801af50:	3300      	adds	r3, #0
 801af52:	bf18      	it	ne
 801af54:	2301      	movne	r3, #1
 801af56:	0692      	lsls	r2, r2, #26
 801af58:	d42d      	bmi.n	801afb6 <_printf_common+0xbe>
 801af5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af5e:	4639      	mov	r1, r7
 801af60:	4630      	mov	r0, r6
 801af62:	47c0      	blx	r8
 801af64:	3001      	adds	r0, #1
 801af66:	d020      	beq.n	801afaa <_printf_common+0xb2>
 801af68:	6823      	ldr	r3, [r4, #0]
 801af6a:	68e5      	ldr	r5, [r4, #12]
 801af6c:	f8d9 2000 	ldr.w	r2, [r9]
 801af70:	f003 0306 	and.w	r3, r3, #6
 801af74:	2b04      	cmp	r3, #4
 801af76:	bf08      	it	eq
 801af78:	1aad      	subeq	r5, r5, r2
 801af7a:	68a3      	ldr	r3, [r4, #8]
 801af7c:	6922      	ldr	r2, [r4, #16]
 801af7e:	bf0c      	ite	eq
 801af80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801af84:	2500      	movne	r5, #0
 801af86:	4293      	cmp	r3, r2
 801af88:	bfc4      	itt	gt
 801af8a:	1a9b      	subgt	r3, r3, r2
 801af8c:	18ed      	addgt	r5, r5, r3
 801af8e:	f04f 0900 	mov.w	r9, #0
 801af92:	341a      	adds	r4, #26
 801af94:	454d      	cmp	r5, r9
 801af96:	d11a      	bne.n	801afce <_printf_common+0xd6>
 801af98:	2000      	movs	r0, #0
 801af9a:	e008      	b.n	801afae <_printf_common+0xb6>
 801af9c:	2301      	movs	r3, #1
 801af9e:	4652      	mov	r2, sl
 801afa0:	4639      	mov	r1, r7
 801afa2:	4630      	mov	r0, r6
 801afa4:	47c0      	blx	r8
 801afa6:	3001      	adds	r0, #1
 801afa8:	d103      	bne.n	801afb2 <_printf_common+0xba>
 801afaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afb2:	3501      	adds	r5, #1
 801afb4:	e7c3      	b.n	801af3e <_printf_common+0x46>
 801afb6:	18e1      	adds	r1, r4, r3
 801afb8:	1c5a      	adds	r2, r3, #1
 801afba:	2030      	movs	r0, #48	; 0x30
 801afbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801afc0:	4422      	add	r2, r4
 801afc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801afc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801afca:	3302      	adds	r3, #2
 801afcc:	e7c5      	b.n	801af5a <_printf_common+0x62>
 801afce:	2301      	movs	r3, #1
 801afd0:	4622      	mov	r2, r4
 801afd2:	4639      	mov	r1, r7
 801afd4:	4630      	mov	r0, r6
 801afd6:	47c0      	blx	r8
 801afd8:	3001      	adds	r0, #1
 801afda:	d0e6      	beq.n	801afaa <_printf_common+0xb2>
 801afdc:	f109 0901 	add.w	r9, r9, #1
 801afe0:	e7d8      	b.n	801af94 <_printf_common+0x9c>
	...

0801afe4 <_printf_i>:
 801afe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801afec:	460c      	mov	r4, r1
 801afee:	7e09      	ldrb	r1, [r1, #24]
 801aff0:	b085      	sub	sp, #20
 801aff2:	296e      	cmp	r1, #110	; 0x6e
 801aff4:	4617      	mov	r7, r2
 801aff6:	4606      	mov	r6, r0
 801aff8:	4698      	mov	r8, r3
 801affa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801affc:	f000 80b3 	beq.w	801b166 <_printf_i+0x182>
 801b000:	d822      	bhi.n	801b048 <_printf_i+0x64>
 801b002:	2963      	cmp	r1, #99	; 0x63
 801b004:	d036      	beq.n	801b074 <_printf_i+0x90>
 801b006:	d80a      	bhi.n	801b01e <_printf_i+0x3a>
 801b008:	2900      	cmp	r1, #0
 801b00a:	f000 80b9 	beq.w	801b180 <_printf_i+0x19c>
 801b00e:	2958      	cmp	r1, #88	; 0x58
 801b010:	f000 8083 	beq.w	801b11a <_printf_i+0x136>
 801b014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b018:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b01c:	e032      	b.n	801b084 <_printf_i+0xa0>
 801b01e:	2964      	cmp	r1, #100	; 0x64
 801b020:	d001      	beq.n	801b026 <_printf_i+0x42>
 801b022:	2969      	cmp	r1, #105	; 0x69
 801b024:	d1f6      	bne.n	801b014 <_printf_i+0x30>
 801b026:	6820      	ldr	r0, [r4, #0]
 801b028:	6813      	ldr	r3, [r2, #0]
 801b02a:	0605      	lsls	r5, r0, #24
 801b02c:	f103 0104 	add.w	r1, r3, #4
 801b030:	d52a      	bpl.n	801b088 <_printf_i+0xa4>
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	6011      	str	r1, [r2, #0]
 801b036:	2b00      	cmp	r3, #0
 801b038:	da03      	bge.n	801b042 <_printf_i+0x5e>
 801b03a:	222d      	movs	r2, #45	; 0x2d
 801b03c:	425b      	negs	r3, r3
 801b03e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b042:	486f      	ldr	r0, [pc, #444]	; (801b200 <_printf_i+0x21c>)
 801b044:	220a      	movs	r2, #10
 801b046:	e039      	b.n	801b0bc <_printf_i+0xd8>
 801b048:	2973      	cmp	r1, #115	; 0x73
 801b04a:	f000 809d 	beq.w	801b188 <_printf_i+0x1a4>
 801b04e:	d808      	bhi.n	801b062 <_printf_i+0x7e>
 801b050:	296f      	cmp	r1, #111	; 0x6f
 801b052:	d020      	beq.n	801b096 <_printf_i+0xb2>
 801b054:	2970      	cmp	r1, #112	; 0x70
 801b056:	d1dd      	bne.n	801b014 <_printf_i+0x30>
 801b058:	6823      	ldr	r3, [r4, #0]
 801b05a:	f043 0320 	orr.w	r3, r3, #32
 801b05e:	6023      	str	r3, [r4, #0]
 801b060:	e003      	b.n	801b06a <_printf_i+0x86>
 801b062:	2975      	cmp	r1, #117	; 0x75
 801b064:	d017      	beq.n	801b096 <_printf_i+0xb2>
 801b066:	2978      	cmp	r1, #120	; 0x78
 801b068:	d1d4      	bne.n	801b014 <_printf_i+0x30>
 801b06a:	2378      	movs	r3, #120	; 0x78
 801b06c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b070:	4864      	ldr	r0, [pc, #400]	; (801b204 <_printf_i+0x220>)
 801b072:	e055      	b.n	801b120 <_printf_i+0x13c>
 801b074:	6813      	ldr	r3, [r2, #0]
 801b076:	1d19      	adds	r1, r3, #4
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	6011      	str	r1, [r2, #0]
 801b07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b084:	2301      	movs	r3, #1
 801b086:	e08c      	b.n	801b1a2 <_printf_i+0x1be>
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	6011      	str	r1, [r2, #0]
 801b08c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b090:	bf18      	it	ne
 801b092:	b21b      	sxthne	r3, r3
 801b094:	e7cf      	b.n	801b036 <_printf_i+0x52>
 801b096:	6813      	ldr	r3, [r2, #0]
 801b098:	6825      	ldr	r5, [r4, #0]
 801b09a:	1d18      	adds	r0, r3, #4
 801b09c:	6010      	str	r0, [r2, #0]
 801b09e:	0628      	lsls	r0, r5, #24
 801b0a0:	d501      	bpl.n	801b0a6 <_printf_i+0xc2>
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	e002      	b.n	801b0ac <_printf_i+0xc8>
 801b0a6:	0668      	lsls	r0, r5, #25
 801b0a8:	d5fb      	bpl.n	801b0a2 <_printf_i+0xbe>
 801b0aa:	881b      	ldrh	r3, [r3, #0]
 801b0ac:	4854      	ldr	r0, [pc, #336]	; (801b200 <_printf_i+0x21c>)
 801b0ae:	296f      	cmp	r1, #111	; 0x6f
 801b0b0:	bf14      	ite	ne
 801b0b2:	220a      	movne	r2, #10
 801b0b4:	2208      	moveq	r2, #8
 801b0b6:	2100      	movs	r1, #0
 801b0b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b0bc:	6865      	ldr	r5, [r4, #4]
 801b0be:	60a5      	str	r5, [r4, #8]
 801b0c0:	2d00      	cmp	r5, #0
 801b0c2:	f2c0 8095 	blt.w	801b1f0 <_printf_i+0x20c>
 801b0c6:	6821      	ldr	r1, [r4, #0]
 801b0c8:	f021 0104 	bic.w	r1, r1, #4
 801b0cc:	6021      	str	r1, [r4, #0]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d13d      	bne.n	801b14e <_printf_i+0x16a>
 801b0d2:	2d00      	cmp	r5, #0
 801b0d4:	f040 808e 	bne.w	801b1f4 <_printf_i+0x210>
 801b0d8:	4665      	mov	r5, ip
 801b0da:	2a08      	cmp	r2, #8
 801b0dc:	d10b      	bne.n	801b0f6 <_printf_i+0x112>
 801b0de:	6823      	ldr	r3, [r4, #0]
 801b0e0:	07db      	lsls	r3, r3, #31
 801b0e2:	d508      	bpl.n	801b0f6 <_printf_i+0x112>
 801b0e4:	6923      	ldr	r3, [r4, #16]
 801b0e6:	6862      	ldr	r2, [r4, #4]
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	bfde      	ittt	le
 801b0ec:	2330      	movle	r3, #48	; 0x30
 801b0ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b0f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b0f6:	ebac 0305 	sub.w	r3, ip, r5
 801b0fa:	6123      	str	r3, [r4, #16]
 801b0fc:	f8cd 8000 	str.w	r8, [sp]
 801b100:	463b      	mov	r3, r7
 801b102:	aa03      	add	r2, sp, #12
 801b104:	4621      	mov	r1, r4
 801b106:	4630      	mov	r0, r6
 801b108:	f7ff fef6 	bl	801aef8 <_printf_common>
 801b10c:	3001      	adds	r0, #1
 801b10e:	d14d      	bne.n	801b1ac <_printf_i+0x1c8>
 801b110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b114:	b005      	add	sp, #20
 801b116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b11a:	4839      	ldr	r0, [pc, #228]	; (801b200 <_printf_i+0x21c>)
 801b11c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b120:	6813      	ldr	r3, [r2, #0]
 801b122:	6821      	ldr	r1, [r4, #0]
 801b124:	1d1d      	adds	r5, r3, #4
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	6015      	str	r5, [r2, #0]
 801b12a:	060a      	lsls	r2, r1, #24
 801b12c:	d50b      	bpl.n	801b146 <_printf_i+0x162>
 801b12e:	07ca      	lsls	r2, r1, #31
 801b130:	bf44      	itt	mi
 801b132:	f041 0120 	orrmi.w	r1, r1, #32
 801b136:	6021      	strmi	r1, [r4, #0]
 801b138:	b91b      	cbnz	r3, 801b142 <_printf_i+0x15e>
 801b13a:	6822      	ldr	r2, [r4, #0]
 801b13c:	f022 0220 	bic.w	r2, r2, #32
 801b140:	6022      	str	r2, [r4, #0]
 801b142:	2210      	movs	r2, #16
 801b144:	e7b7      	b.n	801b0b6 <_printf_i+0xd2>
 801b146:	064d      	lsls	r5, r1, #25
 801b148:	bf48      	it	mi
 801b14a:	b29b      	uxthmi	r3, r3
 801b14c:	e7ef      	b.n	801b12e <_printf_i+0x14a>
 801b14e:	4665      	mov	r5, ip
 801b150:	fbb3 f1f2 	udiv	r1, r3, r2
 801b154:	fb02 3311 	mls	r3, r2, r1, r3
 801b158:	5cc3      	ldrb	r3, [r0, r3]
 801b15a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b15e:	460b      	mov	r3, r1
 801b160:	2900      	cmp	r1, #0
 801b162:	d1f5      	bne.n	801b150 <_printf_i+0x16c>
 801b164:	e7b9      	b.n	801b0da <_printf_i+0xf6>
 801b166:	6813      	ldr	r3, [r2, #0]
 801b168:	6825      	ldr	r5, [r4, #0]
 801b16a:	6961      	ldr	r1, [r4, #20]
 801b16c:	1d18      	adds	r0, r3, #4
 801b16e:	6010      	str	r0, [r2, #0]
 801b170:	0628      	lsls	r0, r5, #24
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	d501      	bpl.n	801b17a <_printf_i+0x196>
 801b176:	6019      	str	r1, [r3, #0]
 801b178:	e002      	b.n	801b180 <_printf_i+0x19c>
 801b17a:	066a      	lsls	r2, r5, #25
 801b17c:	d5fb      	bpl.n	801b176 <_printf_i+0x192>
 801b17e:	8019      	strh	r1, [r3, #0]
 801b180:	2300      	movs	r3, #0
 801b182:	6123      	str	r3, [r4, #16]
 801b184:	4665      	mov	r5, ip
 801b186:	e7b9      	b.n	801b0fc <_printf_i+0x118>
 801b188:	6813      	ldr	r3, [r2, #0]
 801b18a:	1d19      	adds	r1, r3, #4
 801b18c:	6011      	str	r1, [r2, #0]
 801b18e:	681d      	ldr	r5, [r3, #0]
 801b190:	6862      	ldr	r2, [r4, #4]
 801b192:	2100      	movs	r1, #0
 801b194:	4628      	mov	r0, r5
 801b196:	f7e5 f82b 	bl	80001f0 <memchr>
 801b19a:	b108      	cbz	r0, 801b1a0 <_printf_i+0x1bc>
 801b19c:	1b40      	subs	r0, r0, r5
 801b19e:	6060      	str	r0, [r4, #4]
 801b1a0:	6863      	ldr	r3, [r4, #4]
 801b1a2:	6123      	str	r3, [r4, #16]
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1aa:	e7a7      	b.n	801b0fc <_printf_i+0x118>
 801b1ac:	6923      	ldr	r3, [r4, #16]
 801b1ae:	462a      	mov	r2, r5
 801b1b0:	4639      	mov	r1, r7
 801b1b2:	4630      	mov	r0, r6
 801b1b4:	47c0      	blx	r8
 801b1b6:	3001      	adds	r0, #1
 801b1b8:	d0aa      	beq.n	801b110 <_printf_i+0x12c>
 801b1ba:	6823      	ldr	r3, [r4, #0]
 801b1bc:	079b      	lsls	r3, r3, #30
 801b1be:	d413      	bmi.n	801b1e8 <_printf_i+0x204>
 801b1c0:	68e0      	ldr	r0, [r4, #12]
 801b1c2:	9b03      	ldr	r3, [sp, #12]
 801b1c4:	4298      	cmp	r0, r3
 801b1c6:	bfb8      	it	lt
 801b1c8:	4618      	movlt	r0, r3
 801b1ca:	e7a3      	b.n	801b114 <_printf_i+0x130>
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	464a      	mov	r2, r9
 801b1d0:	4639      	mov	r1, r7
 801b1d2:	4630      	mov	r0, r6
 801b1d4:	47c0      	blx	r8
 801b1d6:	3001      	adds	r0, #1
 801b1d8:	d09a      	beq.n	801b110 <_printf_i+0x12c>
 801b1da:	3501      	adds	r5, #1
 801b1dc:	68e3      	ldr	r3, [r4, #12]
 801b1de:	9a03      	ldr	r2, [sp, #12]
 801b1e0:	1a9b      	subs	r3, r3, r2
 801b1e2:	42ab      	cmp	r3, r5
 801b1e4:	dcf2      	bgt.n	801b1cc <_printf_i+0x1e8>
 801b1e6:	e7eb      	b.n	801b1c0 <_printf_i+0x1dc>
 801b1e8:	2500      	movs	r5, #0
 801b1ea:	f104 0919 	add.w	r9, r4, #25
 801b1ee:	e7f5      	b.n	801b1dc <_printf_i+0x1f8>
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d1ac      	bne.n	801b14e <_printf_i+0x16a>
 801b1f4:	7803      	ldrb	r3, [r0, #0]
 801b1f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b1fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b1fe:	e76c      	b.n	801b0da <_printf_i+0xf6>
 801b200:	0801e165 	.word	0x0801e165
 801b204:	0801e176 	.word	0x0801e176

0801b208 <__sread>:
 801b208:	b510      	push	{r4, lr}
 801b20a:	460c      	mov	r4, r1
 801b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b210:	f000 fa46 	bl	801b6a0 <_read_r>
 801b214:	2800      	cmp	r0, #0
 801b216:	bfab      	itete	ge
 801b218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b21a:	89a3      	ldrhlt	r3, [r4, #12]
 801b21c:	181b      	addge	r3, r3, r0
 801b21e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b222:	bfac      	ite	ge
 801b224:	6563      	strge	r3, [r4, #84]	; 0x54
 801b226:	81a3      	strhlt	r3, [r4, #12]
 801b228:	bd10      	pop	{r4, pc}

0801b22a <__swrite>:
 801b22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b22e:	461f      	mov	r7, r3
 801b230:	898b      	ldrh	r3, [r1, #12]
 801b232:	05db      	lsls	r3, r3, #23
 801b234:	4605      	mov	r5, r0
 801b236:	460c      	mov	r4, r1
 801b238:	4616      	mov	r6, r2
 801b23a:	d505      	bpl.n	801b248 <__swrite+0x1e>
 801b23c:	2302      	movs	r3, #2
 801b23e:	2200      	movs	r2, #0
 801b240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b244:	f000 f9b6 	bl	801b5b4 <_lseek_r>
 801b248:	89a3      	ldrh	r3, [r4, #12]
 801b24a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b24e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b252:	81a3      	strh	r3, [r4, #12]
 801b254:	4632      	mov	r2, r6
 801b256:	463b      	mov	r3, r7
 801b258:	4628      	mov	r0, r5
 801b25a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b25e:	f000 b869 	b.w	801b334 <_write_r>

0801b262 <__sseek>:
 801b262:	b510      	push	{r4, lr}
 801b264:	460c      	mov	r4, r1
 801b266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b26a:	f000 f9a3 	bl	801b5b4 <_lseek_r>
 801b26e:	1c43      	adds	r3, r0, #1
 801b270:	89a3      	ldrh	r3, [r4, #12]
 801b272:	bf15      	itete	ne
 801b274:	6560      	strne	r0, [r4, #84]	; 0x54
 801b276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b27a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b27e:	81a3      	strheq	r3, [r4, #12]
 801b280:	bf18      	it	ne
 801b282:	81a3      	strhne	r3, [r4, #12]
 801b284:	bd10      	pop	{r4, pc}

0801b286 <__sclose>:
 801b286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b28a:	f000 b8d3 	b.w	801b434 <_close_r>
	...

0801b290 <__swbuf_r>:
 801b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b292:	460e      	mov	r6, r1
 801b294:	4614      	mov	r4, r2
 801b296:	4605      	mov	r5, r0
 801b298:	b118      	cbz	r0, 801b2a2 <__swbuf_r+0x12>
 801b29a:	6983      	ldr	r3, [r0, #24]
 801b29c:	b90b      	cbnz	r3, 801b2a2 <__swbuf_r+0x12>
 801b29e:	f7ff fc5f 	bl	801ab60 <__sinit>
 801b2a2:	4b21      	ldr	r3, [pc, #132]	; (801b328 <__swbuf_r+0x98>)
 801b2a4:	429c      	cmp	r4, r3
 801b2a6:	d12a      	bne.n	801b2fe <__swbuf_r+0x6e>
 801b2a8:	686c      	ldr	r4, [r5, #4]
 801b2aa:	69a3      	ldr	r3, [r4, #24]
 801b2ac:	60a3      	str	r3, [r4, #8]
 801b2ae:	89a3      	ldrh	r3, [r4, #12]
 801b2b0:	071a      	lsls	r2, r3, #28
 801b2b2:	d52e      	bpl.n	801b312 <__swbuf_r+0x82>
 801b2b4:	6923      	ldr	r3, [r4, #16]
 801b2b6:	b363      	cbz	r3, 801b312 <__swbuf_r+0x82>
 801b2b8:	6923      	ldr	r3, [r4, #16]
 801b2ba:	6820      	ldr	r0, [r4, #0]
 801b2bc:	1ac0      	subs	r0, r0, r3
 801b2be:	6963      	ldr	r3, [r4, #20]
 801b2c0:	b2f6      	uxtb	r6, r6
 801b2c2:	4283      	cmp	r3, r0
 801b2c4:	4637      	mov	r7, r6
 801b2c6:	dc04      	bgt.n	801b2d2 <__swbuf_r+0x42>
 801b2c8:	4621      	mov	r1, r4
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	f000 f948 	bl	801b560 <_fflush_r>
 801b2d0:	bb28      	cbnz	r0, 801b31e <__swbuf_r+0x8e>
 801b2d2:	68a3      	ldr	r3, [r4, #8]
 801b2d4:	3b01      	subs	r3, #1
 801b2d6:	60a3      	str	r3, [r4, #8]
 801b2d8:	6823      	ldr	r3, [r4, #0]
 801b2da:	1c5a      	adds	r2, r3, #1
 801b2dc:	6022      	str	r2, [r4, #0]
 801b2de:	701e      	strb	r6, [r3, #0]
 801b2e0:	6963      	ldr	r3, [r4, #20]
 801b2e2:	3001      	adds	r0, #1
 801b2e4:	4283      	cmp	r3, r0
 801b2e6:	d004      	beq.n	801b2f2 <__swbuf_r+0x62>
 801b2e8:	89a3      	ldrh	r3, [r4, #12]
 801b2ea:	07db      	lsls	r3, r3, #31
 801b2ec:	d519      	bpl.n	801b322 <__swbuf_r+0x92>
 801b2ee:	2e0a      	cmp	r6, #10
 801b2f0:	d117      	bne.n	801b322 <__swbuf_r+0x92>
 801b2f2:	4621      	mov	r1, r4
 801b2f4:	4628      	mov	r0, r5
 801b2f6:	f000 f933 	bl	801b560 <_fflush_r>
 801b2fa:	b190      	cbz	r0, 801b322 <__swbuf_r+0x92>
 801b2fc:	e00f      	b.n	801b31e <__swbuf_r+0x8e>
 801b2fe:	4b0b      	ldr	r3, [pc, #44]	; (801b32c <__swbuf_r+0x9c>)
 801b300:	429c      	cmp	r4, r3
 801b302:	d101      	bne.n	801b308 <__swbuf_r+0x78>
 801b304:	68ac      	ldr	r4, [r5, #8]
 801b306:	e7d0      	b.n	801b2aa <__swbuf_r+0x1a>
 801b308:	4b09      	ldr	r3, [pc, #36]	; (801b330 <__swbuf_r+0xa0>)
 801b30a:	429c      	cmp	r4, r3
 801b30c:	bf08      	it	eq
 801b30e:	68ec      	ldreq	r4, [r5, #12]
 801b310:	e7cb      	b.n	801b2aa <__swbuf_r+0x1a>
 801b312:	4621      	mov	r1, r4
 801b314:	4628      	mov	r0, r5
 801b316:	f000 f81f 	bl	801b358 <__swsetup_r>
 801b31a:	2800      	cmp	r0, #0
 801b31c:	d0cc      	beq.n	801b2b8 <__swbuf_r+0x28>
 801b31e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b322:	4638      	mov	r0, r7
 801b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b326:	bf00      	nop
 801b328:	0801e114 	.word	0x0801e114
 801b32c:	0801e134 	.word	0x0801e134
 801b330:	0801e0f4 	.word	0x0801e0f4

0801b334 <_write_r>:
 801b334:	b538      	push	{r3, r4, r5, lr}
 801b336:	4c07      	ldr	r4, [pc, #28]	; (801b354 <_write_r+0x20>)
 801b338:	4605      	mov	r5, r0
 801b33a:	4608      	mov	r0, r1
 801b33c:	4611      	mov	r1, r2
 801b33e:	2200      	movs	r2, #0
 801b340:	6022      	str	r2, [r4, #0]
 801b342:	461a      	mov	r2, r3
 801b344:	f7e6 fb0b 	bl	800195e <_write>
 801b348:	1c43      	adds	r3, r0, #1
 801b34a:	d102      	bne.n	801b352 <_write_r+0x1e>
 801b34c:	6823      	ldr	r3, [r4, #0]
 801b34e:	b103      	cbz	r3, 801b352 <_write_r+0x1e>
 801b350:	602b      	str	r3, [r5, #0]
 801b352:	bd38      	pop	{r3, r4, r5, pc}
 801b354:	2000ab6c 	.word	0x2000ab6c

0801b358 <__swsetup_r>:
 801b358:	4b32      	ldr	r3, [pc, #200]	; (801b424 <__swsetup_r+0xcc>)
 801b35a:	b570      	push	{r4, r5, r6, lr}
 801b35c:	681d      	ldr	r5, [r3, #0]
 801b35e:	4606      	mov	r6, r0
 801b360:	460c      	mov	r4, r1
 801b362:	b125      	cbz	r5, 801b36e <__swsetup_r+0x16>
 801b364:	69ab      	ldr	r3, [r5, #24]
 801b366:	b913      	cbnz	r3, 801b36e <__swsetup_r+0x16>
 801b368:	4628      	mov	r0, r5
 801b36a:	f7ff fbf9 	bl	801ab60 <__sinit>
 801b36e:	4b2e      	ldr	r3, [pc, #184]	; (801b428 <__swsetup_r+0xd0>)
 801b370:	429c      	cmp	r4, r3
 801b372:	d10f      	bne.n	801b394 <__swsetup_r+0x3c>
 801b374:	686c      	ldr	r4, [r5, #4]
 801b376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b37a:	b29a      	uxth	r2, r3
 801b37c:	0715      	lsls	r5, r2, #28
 801b37e:	d42c      	bmi.n	801b3da <__swsetup_r+0x82>
 801b380:	06d0      	lsls	r0, r2, #27
 801b382:	d411      	bmi.n	801b3a8 <__swsetup_r+0x50>
 801b384:	2209      	movs	r2, #9
 801b386:	6032      	str	r2, [r6, #0]
 801b388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b38c:	81a3      	strh	r3, [r4, #12]
 801b38e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b392:	e03e      	b.n	801b412 <__swsetup_r+0xba>
 801b394:	4b25      	ldr	r3, [pc, #148]	; (801b42c <__swsetup_r+0xd4>)
 801b396:	429c      	cmp	r4, r3
 801b398:	d101      	bne.n	801b39e <__swsetup_r+0x46>
 801b39a:	68ac      	ldr	r4, [r5, #8]
 801b39c:	e7eb      	b.n	801b376 <__swsetup_r+0x1e>
 801b39e:	4b24      	ldr	r3, [pc, #144]	; (801b430 <__swsetup_r+0xd8>)
 801b3a0:	429c      	cmp	r4, r3
 801b3a2:	bf08      	it	eq
 801b3a4:	68ec      	ldreq	r4, [r5, #12]
 801b3a6:	e7e6      	b.n	801b376 <__swsetup_r+0x1e>
 801b3a8:	0751      	lsls	r1, r2, #29
 801b3aa:	d512      	bpl.n	801b3d2 <__swsetup_r+0x7a>
 801b3ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b3ae:	b141      	cbz	r1, 801b3c2 <__swsetup_r+0x6a>
 801b3b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3b4:	4299      	cmp	r1, r3
 801b3b6:	d002      	beq.n	801b3be <__swsetup_r+0x66>
 801b3b8:	4630      	mov	r0, r6
 801b3ba:	f7ff fac1 	bl	801a940 <_free_r>
 801b3be:	2300      	movs	r3, #0
 801b3c0:	6363      	str	r3, [r4, #52]	; 0x34
 801b3c2:	89a3      	ldrh	r3, [r4, #12]
 801b3c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b3c8:	81a3      	strh	r3, [r4, #12]
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	6063      	str	r3, [r4, #4]
 801b3ce:	6923      	ldr	r3, [r4, #16]
 801b3d0:	6023      	str	r3, [r4, #0]
 801b3d2:	89a3      	ldrh	r3, [r4, #12]
 801b3d4:	f043 0308 	orr.w	r3, r3, #8
 801b3d8:	81a3      	strh	r3, [r4, #12]
 801b3da:	6923      	ldr	r3, [r4, #16]
 801b3dc:	b94b      	cbnz	r3, 801b3f2 <__swsetup_r+0x9a>
 801b3de:	89a3      	ldrh	r3, [r4, #12]
 801b3e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b3e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b3e8:	d003      	beq.n	801b3f2 <__swsetup_r+0x9a>
 801b3ea:	4621      	mov	r1, r4
 801b3ec:	4630      	mov	r0, r6
 801b3ee:	f000 f917 	bl	801b620 <__smakebuf_r>
 801b3f2:	89a2      	ldrh	r2, [r4, #12]
 801b3f4:	f012 0301 	ands.w	r3, r2, #1
 801b3f8:	d00c      	beq.n	801b414 <__swsetup_r+0xbc>
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	60a3      	str	r3, [r4, #8]
 801b3fe:	6963      	ldr	r3, [r4, #20]
 801b400:	425b      	negs	r3, r3
 801b402:	61a3      	str	r3, [r4, #24]
 801b404:	6923      	ldr	r3, [r4, #16]
 801b406:	b953      	cbnz	r3, 801b41e <__swsetup_r+0xc6>
 801b408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b40c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b410:	d1ba      	bne.n	801b388 <__swsetup_r+0x30>
 801b412:	bd70      	pop	{r4, r5, r6, pc}
 801b414:	0792      	lsls	r2, r2, #30
 801b416:	bf58      	it	pl
 801b418:	6963      	ldrpl	r3, [r4, #20]
 801b41a:	60a3      	str	r3, [r4, #8]
 801b41c:	e7f2      	b.n	801b404 <__swsetup_r+0xac>
 801b41e:	2000      	movs	r0, #0
 801b420:	e7f7      	b.n	801b412 <__swsetup_r+0xba>
 801b422:	bf00      	nop
 801b424:	20000188 	.word	0x20000188
 801b428:	0801e114 	.word	0x0801e114
 801b42c:	0801e134 	.word	0x0801e134
 801b430:	0801e0f4 	.word	0x0801e0f4

0801b434 <_close_r>:
 801b434:	b538      	push	{r3, r4, r5, lr}
 801b436:	4c06      	ldr	r4, [pc, #24]	; (801b450 <_close_r+0x1c>)
 801b438:	2300      	movs	r3, #0
 801b43a:	4605      	mov	r5, r0
 801b43c:	4608      	mov	r0, r1
 801b43e:	6023      	str	r3, [r4, #0]
 801b440:	f7e6 faa9 	bl	8001996 <_close>
 801b444:	1c43      	adds	r3, r0, #1
 801b446:	d102      	bne.n	801b44e <_close_r+0x1a>
 801b448:	6823      	ldr	r3, [r4, #0]
 801b44a:	b103      	cbz	r3, 801b44e <_close_r+0x1a>
 801b44c:	602b      	str	r3, [r5, #0]
 801b44e:	bd38      	pop	{r3, r4, r5, pc}
 801b450:	2000ab6c 	.word	0x2000ab6c

0801b454 <__sflush_r>:
 801b454:	898a      	ldrh	r2, [r1, #12]
 801b456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b45a:	4605      	mov	r5, r0
 801b45c:	0710      	lsls	r0, r2, #28
 801b45e:	460c      	mov	r4, r1
 801b460:	d458      	bmi.n	801b514 <__sflush_r+0xc0>
 801b462:	684b      	ldr	r3, [r1, #4]
 801b464:	2b00      	cmp	r3, #0
 801b466:	dc05      	bgt.n	801b474 <__sflush_r+0x20>
 801b468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	dc02      	bgt.n	801b474 <__sflush_r+0x20>
 801b46e:	2000      	movs	r0, #0
 801b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b476:	2e00      	cmp	r6, #0
 801b478:	d0f9      	beq.n	801b46e <__sflush_r+0x1a>
 801b47a:	2300      	movs	r3, #0
 801b47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b480:	682f      	ldr	r7, [r5, #0]
 801b482:	6a21      	ldr	r1, [r4, #32]
 801b484:	602b      	str	r3, [r5, #0]
 801b486:	d032      	beq.n	801b4ee <__sflush_r+0x9a>
 801b488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b48a:	89a3      	ldrh	r3, [r4, #12]
 801b48c:	075a      	lsls	r2, r3, #29
 801b48e:	d505      	bpl.n	801b49c <__sflush_r+0x48>
 801b490:	6863      	ldr	r3, [r4, #4]
 801b492:	1ac0      	subs	r0, r0, r3
 801b494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b496:	b10b      	cbz	r3, 801b49c <__sflush_r+0x48>
 801b498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b49a:	1ac0      	subs	r0, r0, r3
 801b49c:	2300      	movs	r3, #0
 801b49e:	4602      	mov	r2, r0
 801b4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b4a2:	6a21      	ldr	r1, [r4, #32]
 801b4a4:	4628      	mov	r0, r5
 801b4a6:	47b0      	blx	r6
 801b4a8:	1c43      	adds	r3, r0, #1
 801b4aa:	89a3      	ldrh	r3, [r4, #12]
 801b4ac:	d106      	bne.n	801b4bc <__sflush_r+0x68>
 801b4ae:	6829      	ldr	r1, [r5, #0]
 801b4b0:	291d      	cmp	r1, #29
 801b4b2:	d848      	bhi.n	801b546 <__sflush_r+0xf2>
 801b4b4:	4a29      	ldr	r2, [pc, #164]	; (801b55c <__sflush_r+0x108>)
 801b4b6:	40ca      	lsrs	r2, r1
 801b4b8:	07d6      	lsls	r6, r2, #31
 801b4ba:	d544      	bpl.n	801b546 <__sflush_r+0xf2>
 801b4bc:	2200      	movs	r2, #0
 801b4be:	6062      	str	r2, [r4, #4]
 801b4c0:	04d9      	lsls	r1, r3, #19
 801b4c2:	6922      	ldr	r2, [r4, #16]
 801b4c4:	6022      	str	r2, [r4, #0]
 801b4c6:	d504      	bpl.n	801b4d2 <__sflush_r+0x7e>
 801b4c8:	1c42      	adds	r2, r0, #1
 801b4ca:	d101      	bne.n	801b4d0 <__sflush_r+0x7c>
 801b4cc:	682b      	ldr	r3, [r5, #0]
 801b4ce:	b903      	cbnz	r3, 801b4d2 <__sflush_r+0x7e>
 801b4d0:	6560      	str	r0, [r4, #84]	; 0x54
 801b4d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4d4:	602f      	str	r7, [r5, #0]
 801b4d6:	2900      	cmp	r1, #0
 801b4d8:	d0c9      	beq.n	801b46e <__sflush_r+0x1a>
 801b4da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b4de:	4299      	cmp	r1, r3
 801b4e0:	d002      	beq.n	801b4e8 <__sflush_r+0x94>
 801b4e2:	4628      	mov	r0, r5
 801b4e4:	f7ff fa2c 	bl	801a940 <_free_r>
 801b4e8:	2000      	movs	r0, #0
 801b4ea:	6360      	str	r0, [r4, #52]	; 0x34
 801b4ec:	e7c0      	b.n	801b470 <__sflush_r+0x1c>
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	4628      	mov	r0, r5
 801b4f2:	47b0      	blx	r6
 801b4f4:	1c41      	adds	r1, r0, #1
 801b4f6:	d1c8      	bne.n	801b48a <__sflush_r+0x36>
 801b4f8:	682b      	ldr	r3, [r5, #0]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d0c5      	beq.n	801b48a <__sflush_r+0x36>
 801b4fe:	2b1d      	cmp	r3, #29
 801b500:	d001      	beq.n	801b506 <__sflush_r+0xb2>
 801b502:	2b16      	cmp	r3, #22
 801b504:	d101      	bne.n	801b50a <__sflush_r+0xb6>
 801b506:	602f      	str	r7, [r5, #0]
 801b508:	e7b1      	b.n	801b46e <__sflush_r+0x1a>
 801b50a:	89a3      	ldrh	r3, [r4, #12]
 801b50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b510:	81a3      	strh	r3, [r4, #12]
 801b512:	e7ad      	b.n	801b470 <__sflush_r+0x1c>
 801b514:	690f      	ldr	r7, [r1, #16]
 801b516:	2f00      	cmp	r7, #0
 801b518:	d0a9      	beq.n	801b46e <__sflush_r+0x1a>
 801b51a:	0793      	lsls	r3, r2, #30
 801b51c:	680e      	ldr	r6, [r1, #0]
 801b51e:	bf08      	it	eq
 801b520:	694b      	ldreq	r3, [r1, #20]
 801b522:	600f      	str	r7, [r1, #0]
 801b524:	bf18      	it	ne
 801b526:	2300      	movne	r3, #0
 801b528:	eba6 0807 	sub.w	r8, r6, r7
 801b52c:	608b      	str	r3, [r1, #8]
 801b52e:	f1b8 0f00 	cmp.w	r8, #0
 801b532:	dd9c      	ble.n	801b46e <__sflush_r+0x1a>
 801b534:	4643      	mov	r3, r8
 801b536:	463a      	mov	r2, r7
 801b538:	6a21      	ldr	r1, [r4, #32]
 801b53a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b53c:	4628      	mov	r0, r5
 801b53e:	47b0      	blx	r6
 801b540:	2800      	cmp	r0, #0
 801b542:	dc06      	bgt.n	801b552 <__sflush_r+0xfe>
 801b544:	89a3      	ldrh	r3, [r4, #12]
 801b546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b54a:	81a3      	strh	r3, [r4, #12]
 801b54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b550:	e78e      	b.n	801b470 <__sflush_r+0x1c>
 801b552:	4407      	add	r7, r0
 801b554:	eba8 0800 	sub.w	r8, r8, r0
 801b558:	e7e9      	b.n	801b52e <__sflush_r+0xda>
 801b55a:	bf00      	nop
 801b55c:	20400001 	.word	0x20400001

0801b560 <_fflush_r>:
 801b560:	b538      	push	{r3, r4, r5, lr}
 801b562:	690b      	ldr	r3, [r1, #16]
 801b564:	4605      	mov	r5, r0
 801b566:	460c      	mov	r4, r1
 801b568:	b1db      	cbz	r3, 801b5a2 <_fflush_r+0x42>
 801b56a:	b118      	cbz	r0, 801b574 <_fflush_r+0x14>
 801b56c:	6983      	ldr	r3, [r0, #24]
 801b56e:	b90b      	cbnz	r3, 801b574 <_fflush_r+0x14>
 801b570:	f7ff faf6 	bl	801ab60 <__sinit>
 801b574:	4b0c      	ldr	r3, [pc, #48]	; (801b5a8 <_fflush_r+0x48>)
 801b576:	429c      	cmp	r4, r3
 801b578:	d109      	bne.n	801b58e <_fflush_r+0x2e>
 801b57a:	686c      	ldr	r4, [r5, #4]
 801b57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b580:	b17b      	cbz	r3, 801b5a2 <_fflush_r+0x42>
 801b582:	4621      	mov	r1, r4
 801b584:	4628      	mov	r0, r5
 801b586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b58a:	f7ff bf63 	b.w	801b454 <__sflush_r>
 801b58e:	4b07      	ldr	r3, [pc, #28]	; (801b5ac <_fflush_r+0x4c>)
 801b590:	429c      	cmp	r4, r3
 801b592:	d101      	bne.n	801b598 <_fflush_r+0x38>
 801b594:	68ac      	ldr	r4, [r5, #8]
 801b596:	e7f1      	b.n	801b57c <_fflush_r+0x1c>
 801b598:	4b05      	ldr	r3, [pc, #20]	; (801b5b0 <_fflush_r+0x50>)
 801b59a:	429c      	cmp	r4, r3
 801b59c:	bf08      	it	eq
 801b59e:	68ec      	ldreq	r4, [r5, #12]
 801b5a0:	e7ec      	b.n	801b57c <_fflush_r+0x1c>
 801b5a2:	2000      	movs	r0, #0
 801b5a4:	bd38      	pop	{r3, r4, r5, pc}
 801b5a6:	bf00      	nop
 801b5a8:	0801e114 	.word	0x0801e114
 801b5ac:	0801e134 	.word	0x0801e134
 801b5b0:	0801e0f4 	.word	0x0801e0f4

0801b5b4 <_lseek_r>:
 801b5b4:	b538      	push	{r3, r4, r5, lr}
 801b5b6:	4c07      	ldr	r4, [pc, #28]	; (801b5d4 <_lseek_r+0x20>)
 801b5b8:	4605      	mov	r5, r0
 801b5ba:	4608      	mov	r0, r1
 801b5bc:	4611      	mov	r1, r2
 801b5be:	2200      	movs	r2, #0
 801b5c0:	6022      	str	r2, [r4, #0]
 801b5c2:	461a      	mov	r2, r3
 801b5c4:	f7e6 fa0e 	bl	80019e4 <_lseek>
 801b5c8:	1c43      	adds	r3, r0, #1
 801b5ca:	d102      	bne.n	801b5d2 <_lseek_r+0x1e>
 801b5cc:	6823      	ldr	r3, [r4, #0]
 801b5ce:	b103      	cbz	r3, 801b5d2 <_lseek_r+0x1e>
 801b5d0:	602b      	str	r3, [r5, #0]
 801b5d2:	bd38      	pop	{r3, r4, r5, pc}
 801b5d4:	2000ab6c 	.word	0x2000ab6c

0801b5d8 <__swhatbuf_r>:
 801b5d8:	b570      	push	{r4, r5, r6, lr}
 801b5da:	460e      	mov	r6, r1
 801b5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5e0:	2900      	cmp	r1, #0
 801b5e2:	b096      	sub	sp, #88	; 0x58
 801b5e4:	4614      	mov	r4, r2
 801b5e6:	461d      	mov	r5, r3
 801b5e8:	da07      	bge.n	801b5fa <__swhatbuf_r+0x22>
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	602b      	str	r3, [r5, #0]
 801b5ee:	89b3      	ldrh	r3, [r6, #12]
 801b5f0:	061a      	lsls	r2, r3, #24
 801b5f2:	d410      	bmi.n	801b616 <__swhatbuf_r+0x3e>
 801b5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b5f8:	e00e      	b.n	801b618 <__swhatbuf_r+0x40>
 801b5fa:	466a      	mov	r2, sp
 801b5fc:	f000 f862 	bl	801b6c4 <_fstat_r>
 801b600:	2800      	cmp	r0, #0
 801b602:	dbf2      	blt.n	801b5ea <__swhatbuf_r+0x12>
 801b604:	9a01      	ldr	r2, [sp, #4]
 801b606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b60a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b60e:	425a      	negs	r2, r3
 801b610:	415a      	adcs	r2, r3
 801b612:	602a      	str	r2, [r5, #0]
 801b614:	e7ee      	b.n	801b5f4 <__swhatbuf_r+0x1c>
 801b616:	2340      	movs	r3, #64	; 0x40
 801b618:	2000      	movs	r0, #0
 801b61a:	6023      	str	r3, [r4, #0]
 801b61c:	b016      	add	sp, #88	; 0x58
 801b61e:	bd70      	pop	{r4, r5, r6, pc}

0801b620 <__smakebuf_r>:
 801b620:	898b      	ldrh	r3, [r1, #12]
 801b622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b624:	079d      	lsls	r5, r3, #30
 801b626:	4606      	mov	r6, r0
 801b628:	460c      	mov	r4, r1
 801b62a:	d507      	bpl.n	801b63c <__smakebuf_r+0x1c>
 801b62c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b630:	6023      	str	r3, [r4, #0]
 801b632:	6123      	str	r3, [r4, #16]
 801b634:	2301      	movs	r3, #1
 801b636:	6163      	str	r3, [r4, #20]
 801b638:	b002      	add	sp, #8
 801b63a:	bd70      	pop	{r4, r5, r6, pc}
 801b63c:	ab01      	add	r3, sp, #4
 801b63e:	466a      	mov	r2, sp
 801b640:	f7ff ffca 	bl	801b5d8 <__swhatbuf_r>
 801b644:	9900      	ldr	r1, [sp, #0]
 801b646:	4605      	mov	r5, r0
 801b648:	4630      	mov	r0, r6
 801b64a:	f7ff f9c7 	bl	801a9dc <_malloc_r>
 801b64e:	b948      	cbnz	r0, 801b664 <__smakebuf_r+0x44>
 801b650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b654:	059a      	lsls	r2, r3, #22
 801b656:	d4ef      	bmi.n	801b638 <__smakebuf_r+0x18>
 801b658:	f023 0303 	bic.w	r3, r3, #3
 801b65c:	f043 0302 	orr.w	r3, r3, #2
 801b660:	81a3      	strh	r3, [r4, #12]
 801b662:	e7e3      	b.n	801b62c <__smakebuf_r+0xc>
 801b664:	4b0d      	ldr	r3, [pc, #52]	; (801b69c <__smakebuf_r+0x7c>)
 801b666:	62b3      	str	r3, [r6, #40]	; 0x28
 801b668:	89a3      	ldrh	r3, [r4, #12]
 801b66a:	6020      	str	r0, [r4, #0]
 801b66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b670:	81a3      	strh	r3, [r4, #12]
 801b672:	9b00      	ldr	r3, [sp, #0]
 801b674:	6163      	str	r3, [r4, #20]
 801b676:	9b01      	ldr	r3, [sp, #4]
 801b678:	6120      	str	r0, [r4, #16]
 801b67a:	b15b      	cbz	r3, 801b694 <__smakebuf_r+0x74>
 801b67c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b680:	4630      	mov	r0, r6
 801b682:	f000 f831 	bl	801b6e8 <_isatty_r>
 801b686:	b128      	cbz	r0, 801b694 <__smakebuf_r+0x74>
 801b688:	89a3      	ldrh	r3, [r4, #12]
 801b68a:	f023 0303 	bic.w	r3, r3, #3
 801b68e:	f043 0301 	orr.w	r3, r3, #1
 801b692:	81a3      	strh	r3, [r4, #12]
 801b694:	89a3      	ldrh	r3, [r4, #12]
 801b696:	431d      	orrs	r5, r3
 801b698:	81a5      	strh	r5, [r4, #12]
 801b69a:	e7cd      	b.n	801b638 <__smakebuf_r+0x18>
 801b69c:	0801ab29 	.word	0x0801ab29

0801b6a0 <_read_r>:
 801b6a0:	b538      	push	{r3, r4, r5, lr}
 801b6a2:	4c07      	ldr	r4, [pc, #28]	; (801b6c0 <_read_r+0x20>)
 801b6a4:	4605      	mov	r5, r0
 801b6a6:	4608      	mov	r0, r1
 801b6a8:	4611      	mov	r1, r2
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	6022      	str	r2, [r4, #0]
 801b6ae:	461a      	mov	r2, r3
 801b6b0:	f7e6 f938 	bl	8001924 <_read>
 801b6b4:	1c43      	adds	r3, r0, #1
 801b6b6:	d102      	bne.n	801b6be <_read_r+0x1e>
 801b6b8:	6823      	ldr	r3, [r4, #0]
 801b6ba:	b103      	cbz	r3, 801b6be <_read_r+0x1e>
 801b6bc:	602b      	str	r3, [r5, #0]
 801b6be:	bd38      	pop	{r3, r4, r5, pc}
 801b6c0:	2000ab6c 	.word	0x2000ab6c

0801b6c4 <_fstat_r>:
 801b6c4:	b538      	push	{r3, r4, r5, lr}
 801b6c6:	4c07      	ldr	r4, [pc, #28]	; (801b6e4 <_fstat_r+0x20>)
 801b6c8:	2300      	movs	r3, #0
 801b6ca:	4605      	mov	r5, r0
 801b6cc:	4608      	mov	r0, r1
 801b6ce:	4611      	mov	r1, r2
 801b6d0:	6023      	str	r3, [r4, #0]
 801b6d2:	f7e6 f96c 	bl	80019ae <_fstat>
 801b6d6:	1c43      	adds	r3, r0, #1
 801b6d8:	d102      	bne.n	801b6e0 <_fstat_r+0x1c>
 801b6da:	6823      	ldr	r3, [r4, #0]
 801b6dc:	b103      	cbz	r3, 801b6e0 <_fstat_r+0x1c>
 801b6de:	602b      	str	r3, [r5, #0]
 801b6e0:	bd38      	pop	{r3, r4, r5, pc}
 801b6e2:	bf00      	nop
 801b6e4:	2000ab6c 	.word	0x2000ab6c

0801b6e8 <_isatty_r>:
 801b6e8:	b538      	push	{r3, r4, r5, lr}
 801b6ea:	4c06      	ldr	r4, [pc, #24]	; (801b704 <_isatty_r+0x1c>)
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	4605      	mov	r5, r0
 801b6f0:	4608      	mov	r0, r1
 801b6f2:	6023      	str	r3, [r4, #0]
 801b6f4:	f7e6 f96b 	bl	80019ce <_isatty>
 801b6f8:	1c43      	adds	r3, r0, #1
 801b6fa:	d102      	bne.n	801b702 <_isatty_r+0x1a>
 801b6fc:	6823      	ldr	r3, [r4, #0]
 801b6fe:	b103      	cbz	r3, 801b702 <_isatty_r+0x1a>
 801b700:	602b      	str	r3, [r5, #0]
 801b702:	bd38      	pop	{r3, r4, r5, pc}
 801b704:	2000ab6c 	.word	0x2000ab6c

0801b708 <_init>:
 801b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b70a:	bf00      	nop
 801b70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b70e:	bc08      	pop	{r3}
 801b710:	469e      	mov	lr, r3
 801b712:	4770      	bx	lr

0801b714 <_fini>:
 801b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b716:	bf00      	nop
 801b718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b71a:	bc08      	pop	{r3}
 801b71c:	469e      	mov	lr, r3
 801b71e:	4770      	bx	lr
>>>>>>> 34d3151597c7c8f83f9b647f5c2310539319119a
